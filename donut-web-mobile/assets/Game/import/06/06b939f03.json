[1,["85ioyg9ahPT7IaUJF/2T5F@67d8f","459WgFGPFDqKehTjifCzSG","5flVk+JLpBvaUXUvZe96DQ","49/DN4qHJKjo8UY3adur5b","e7aztPq1pNArTEEyzxnNbx","83WqWl+LJGdIuaKGp9arWy","06Bd9n569BrqnNV0wIObq/@2cfe1","8ftgs107VCmIi8Mv/G3sh2@b80cb","f5NiTg8DBJcZlDA/sKVpaM@5d408","25at6QVmpK/qc5sHcdT4Gv","727r6P9VFEyrfAcgeCffRc","0fg+19qd1OtZbSl0EFHces","a845E2IrpGZ6Bb6OIkbzND@d3c4c","13EXQnk/ZN6JFmw0PGKB57@9ddb0","14+3qcCnFPnbtv24kXRFhx","a4aX3TWCVHt5/odMpJkDRi","2cSYr3iwhLB6LVyDf71AnT@97014","58vYwamfBFT7EvsckGbrtf@2c046","42559/a0FEhJ1p6AsNuz9P","0eckU3cflF+JvLBFnwrS/I","echJe2rOpGMqXLaimRN3g7@ecf94","85Z7O94ABPT69yKnKJM598@2b6ca","45GrDyKG5GTLF0rHJ1iKCe","24OZIXg79LPI/VNpE5C8bC@10bf3","7bUjPA0YpKZ46R5x9GYWl0","d6/KMrGcVP5LHI/l4axZn/@6786b","37e664V7hIEpCtfK3JboPC@d113a","6c6K/4QUJE5JAYhqgSqp9x@1acfa","6c6K/4QUJE5JAYhqgSqp9x@46689","6c6K/4QUJE5JAYhqgSqp9x@ef561","6c6K/4QUJE5JAYhqgSqp9x@09681","6c6K/4QUJE5JAYhqgSqp9x@37704","6c6K/4QUJE5JAYhqgSqp9x@80692","6c6K/4QUJE5JAYhqgSqp9x@2650e","6c6K/4QUJE5JAYhqgSqp9x@17972","a7YStUNeNCOKGpSntUY1g5","3fk6rp0WVJUa1AaRy6K0Ki@f9941","a3zQCfCrBCDZJ4uf2rk5u8","c1Lpak3idAJ7aejvSKJjBC","18ebNY1m9Kf5BKaguBrXF2","abhVHTduNFj6Su2I3q+ud5","6c6K/4QUJE5JAYhqgSqp9x@64831","fcFiJROMZAaJnNzkt55rIv@f9941","19OsV5dVpMtKVvncy7Z0GF","a8+227bopJB7w7PvM5zG/p","b6BPqkMZZCILiutLYFTHtk@f9941","01Ct5EPvZONab2DGVZnUY3@f9941","479T1EPQJLvYihi6NHUp7c@f9941","caUfS1YxxBoKPKUyDJtZxK@f9941","45ZUThkItBcZUTfhLpzHQh@f9941","fd0fvogNxILq1LlNILawSv@f9941","c1LOiTQmhPcKt2mWJRCg2n@f9941","4c6Q1iNxpKa5U5D4mCdjP+@f9941","d1NGQ2rJZCcbhjH0/erZWw","44lRd0/z9My6LL+Aye8vE6@f9941","5d1nABgoxEA61BVk1sTOAK@f9941","e7Ii+bswNMUZqodCbzBAyV@f9941","838H4q+0xH/aQgTZi0sa+5","12Y9dMgWdJKJGmTiZyQR9H@2e76e","feyHqtMYBPNIMB0x9eyt//@87641","88IKsvlCRLMJSxjmRA86T4","feyHqtMYBPNIMB0x9eyt//@d1e16","8dN4HY19lJWYUua3hG8z+4","02O+zHKblPyqDbaq6pyl8L@f9941","a4cpMzdiVMrrU0bNQ/O+7E@72f6a","9dmj5XiRRLYqUd1CMxhGUe@d19ce","6c6K/4QUJE5JAYhqgSqp9x@49cbe","6dBphDXRZDyLc11FOGvBD2@6c48a","f0i+htEBFGUYz7YzlJ1Riz@6c48a","92vRegDa1Id7zDOm80ACe1","7bE6i/2RRFf71d4Jdmidef","8cOMgLmotL8bhW9GH9yaGO","63rwjw3y1L6oMgSPVAgCYo@f9941","ecnYy8lMxCSL4cxFCMYjBw@6c48a","92r3MnraZOGaCBWTZc2PJp","6dgdYUhKhF5o1JJqhnvlwf@14bd4","15Rjd52j9I0oe68p3LtHQD@6c48a","1eAAn80kRPVI1dd5YDsEy5@f9941","fdI4Ike9lA7bvNjBvrKJMJ@f9941","65kf+yBTdCsJuPcWXSIdkz@f9941","8b+DLF6cZAEYzeD8TrLSBH@f9941","43RwYO8YRG8a3d6NZj8Lsu@f9941","87W9rqXv9Fwqih76y2U50M@f9941","40ZOBG7rFAMJpMwlZ7elGn","adCFN6wbhGLqj5nqCrlwMb","7cejoekHdIq6h7nFG7h4P+","bfUPe+szFAEJQyXNqZ1RHz@f9941","ffsoFWyZFABZnNhaX2uIEw@f9941","1drppj8b5L/oGvFL4mM4E6@f9941","a4YV9HcPBDK5qadiM+KxBR@f9941","88vmV5z6FNdZoaFn/PMplp@f9941","6048BOrf9MPb1UbxuORBuJ","509oktX/5EIoSvidB8Uzek","afXhhOZFZMn7/dmAedgwhB","a6SRyBp7VF1rSc62OqBoOL","77dCHewB1NlbY2FqmgIueO","1cDH02YWFLUJh42J3mij0R@6c48a","b3BniUuhtFSp23m8naWdV8","f2Rwni0jdBTKFThNYfmxsb","43Q9PmUo5CwYN1rxdLqSHG@6c48a","01Ct5EPvZONab2DGVZnUY3@6c48a","02O+zHKblPyqDbaq6pyl8L@6c48a","09SIRWEXtHUaf/OPPSTKuz@6c48a","0dPtMgQUtGsYKIp3iA7+4P@6c48a","59LybVp6hCnYODZ4VDqzmp","84R3Xuvr9Ah7IvqDVhTHqd","98JPeQPv9FTYGiVJVjHj7U","298iGU2NJNFqsKVdCwf6h/","b7jVWcPGpGjKTQt2oTQRKg@f9941","56JMRa/bNKvb16voBBXgVL@f9941","5b3Y9r9gNEz5dEh3m9UXK9@f9941","973zcSMYlCTZ0jid5A4gWS@f9941","53KoD+Q+RPCqAIR8aNmv8n@f9941","13S0v6FxFIfaSOsrnWyXxf@f9941","98xqRatVxDvpEDad5AI0ID@f9941","09SIRWEXtHUaf/OPPSTKuz@f9941","87phFxeNpI7qq4UnYH3rfB@f9941","2dif0imstMraaQ+N9Oqcig@f9941","b10i+bUn9Osbo0Ghqr+1Oa","699Kl7tgxLg7Un8EqTv2HI","4aTVMuEwlNO7N2ui2taheg","66vvnTUq9PsIUOUaijjYir","a1Pns0XHBI1byxh8eShPpC","6cosEcPzZL744Z6bbrLS6a","42NWwVZEtHGa4bB4yWAjlG","e34vJCH+BGQZpDOWNHi8Qa@d0d96","dfruaneLdIvpelQsXpGpW0","e34vJCH+BGQZpDOWNHi8Qa@91150","d9L6v6oFlHF4wOE5qbGjrZ","afYyrPQGpEXquP/foEJhqG@d0cc9","31dlIQO9lOBYeZcuoImSMO@3cf54","31dlIQO9lOBYeZcuoImSMO@451cd","91+rKMBpVNQr3Wyv8SllE3","7aJxPs+dlPtI0B8PBittNK@437f3","7aJxPs+dlPtI0B8PBittNK@19d02","a7RA+vZJpCbZ7GUopMLC+S","7f5/pRICtAfLrUMRYqt4Ol@e2859","7f5/pRICtAfLrUMRYqt4Ol@51414","aaJJVxvZ5IIYc/0dKd2XKK","beScS50thDPYLpmLuW4FXL@6c306","beScS50thDPYLpmLuW4FXL@064bd","e3lvYA2LlFQbG5I+kPD9PY","51dvPXESJGOoU2fceKD2YM","a1QTAvSV9GLKjEV+Whgdlz@5c9a7","c0i0RHfEdLaIdFmB7S39Wb","13zXtmWbZKcKheCrpWAw1R","1dM5WakS5AQLhRFMMOfggk","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","c6nfMA3fBDFYq5EDRHt5Ee","176DoV6ZpI+Iax7e39w9sv@6c48a","13S0v6FxFIfaSOsrnWyXxf@6c48a","f4kwjWEldJ9pdVDyAVENw8@6c48a","506vsT0AxEJoEk5eHoa/f7@6c48a","6dBwfTQXRI/YY3fbAExyJP@6c48a","2dXLGqlaxPLY1u9hqoEgmX@6c48a","1drppj8b5L/oGvFL4mM4E6@6c48a","1eAAn80kRPVI1dd5YDsEy5@6c48a","e1uypwwDRBZLe2JuEs+dMB@6c48a","2dif0imstMraaQ+N9Oqcig@6c48a","3fk6rp0WVJUa1AaRy6K0Ki@6c48a","81pUd9gchLo4/Wb9iciy4B@6c48a","48C7ESoYVCT6HRDVxlUJz2@6c48a","43RwYO8YRG8a3d6NZj8Lsu@6c48a","44lRd0/z9My6LL+Aye8vE6@6c48a","49v2gzq/hDT5DzqLU4CU5K@6c48a","45ZUThkItBcZUTfhLpzHQh@6c48a","479T1EPQJLvYihi6NHUp7c@6c48a","06sR5dHldMl4JRNNT9ZioE@6c48a","b0K4KEP1pFK6R1T7uLc4B7@6c48a","4c6Q1iNxpKa5U5D4mCdjP+@6c48a","043D+9PrlA/oJb5X0MsfI1@6c48a","bc/hZH57NF2bmDy6k9f0C1@6c48a","53KoD+Q+RPCqAIR8aNmv8n@6c48a","56JMRa/bNKvb16voBBXgVL@6c48a","06gOMOz+VIn4KQYpl8zW7a@6c48a","5b3Y9r9gNEz5dEh3m9UXK9@6c48a","5d1nABgoxEA61BVk1sTOAK@6c48a","ec+6NpFQlIQahEMccQG4Ip@6c48a","d5NoqYmgJLZYgQcm12hAnU@6c48a","63rwjw3y1L6oMgSPVAgCYo@6c48a","65kf+yBTdCsJuPcWXSIdkz@6c48a","52es8sAANCf4bpKLXk3+2r@6c48a","42GbmyIb1NhobXLfHdFuDw@6c48a","dbz42nKQpEnKzH/4xMTHNh@6c48a","db27ZiPpxMgYcZ5JGuPna7@6c48a","6d6+TZeOVKWbEAEStN+1ZQ@6c48a","f2NMygXhhKJ6mXkmR0C/ti@6c48a","aaUbUU8nBH8q/B5eqm1IQ7@6c48a","45ff/KjHJCzKlQ9AP1eet1@6c48a","87W9rqXv9Fwqih76y2U50M@6c48a","87phFxeNpI7qq4UnYH3rfB@6c48a","96E+NgCwBJOZMiN82k40PP@6c48a","88vmV5z6FNdZoaFn/PMplp@6c48a","8b+DLF6cZAEYzeD8TrLSBH@6c48a","7dQTtO5SdPlpfq67/gYepw@6c48a","3a1mnaLztNOIpB5/dSZzD+@6c48a","1cHHFykQdPE5rOSrq404ZN@6c48a","973zcSMYlCTZ0jid5A4gWS@6c48a","98xqRatVxDvpEDad5AI0ID@6c48a","53ucy2wnlHX7nQHN1sCtdT@6c48a","a4YV9HcPBDK5qadiM+KxBR@6c48a","75SY78BqJNbL24TnIz0vOi@6c48a","caCEga5utGTbpIHVO2BkkO@6c48a","692CKQaJxGUoBAZEoV6hY7@6c48a","7ftXGv+QBM7KYEGn7V5Csg@6c48a","65D3Bvuv9Lk7qZh6bwyx59@6c48a","2fqvpFddJOSbO27MficwH2@6c48a","07MPnow4dEo6JoJJuJKWqc@6c48a","b6BPqkMZZCILiutLYFTHtk@6c48a","b7jVWcPGpGjKTQt2oTQRKg@6c48a","bfUPe+szFAEJQyXNqZ1RHz@6c48a","c1LOiTQmhPcKt2mWJRCg2n@6c48a","a8ozJAJfRFwJn+V2jxbRT9@6c48a","caUfS1YxxBoKPKUyDJtZxK@6c48a","17lE/+/tdF6bgCC7YDN4KE@6c48a","81kjKBm1pEH6ivdL8dUQvs@6c48a","8bgHww9WtEpayaGvMeY2Pf@6c48a","e7Ii+bswNMUZqodCbzBAyV@6c48a","11IopPzIBNn6Iq4Qc1n9Uu@6c48a","a2zItPzO1G75dZ255tw/rN@6c48a","fcFiJROMZAaJnNzkt55rIv@6c48a","fdI4Ike9lA7bvNjBvrKJMJ@6c48a","fd0fvogNxILq1LlNILawSv@6c48a","ffsoFWyZFABZnNhaX2uIEw@6c48a"],["node","_mesh","_parent","_spriteFrame","_effectAsset","mainTexture","_textureSource","_normalSprite","_target","_defaultClip","_particleSystem","_mainTexture","target","home","nodePools","stage","StageChoose","errorFinger","TipsNode","TeachNode","energyBtn","tipsPanel","energyPanel","targetShowDonuts","targetShowImage","stageChoose","stageChooseUI","stageUI","selectNode","_cameraComponent","camera","scene","_envmapHDR","_envmapLDR","transMat","normalMat"],[["cc.Node",["_name","_layer","_id","_active","_components","_parent","_lpos","_children","_lscale","_lrot","_euler"],-1,9,1,5,2,5,5,5],"cc.SpriteFrame",["cc.Sprite",["_type","_sizeMode","_fillType","_fillStart","_fillRange","node","_spriteFrame","_color"],-2,1,6,5],["cc.Widget",["_alignFlags","_top","_left","_originalHeight","_right","_originalWidth","_horizontalCenter","_bottom","node"],-5,1],["cc.Node",["_name","_components","_parent","_lpos","_children","_lrot","_euler","_lscale"],2,2,1,5,2,5,5,5],["cc.RealKeyframeValue",["rightTangentWeight","leftTangentWeight","interpolationMode","value","rightTangent","leftTangent"],-3],"cc.ImageAsset",["cc.CurveRange",["mode","multiplier","constant","constantMax","spline"],-1,4],["cc.ShapeModule",["_enable","_shapeType","radius","emitFrom","arcSpeed","_scale"],-1,4,5],["cc.TextureAnimationModule",["_numTilesX","_numTilesY","_enable","cycleCount","animation","randomRow","frameOverTime","startFrame"],-3,4,4],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.ParticleSystem",["_capacity","duration","loop","_prewarm","node","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],-1,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.ParticleSystemRenderer",["_renderMode","_lengthScale","_velocityScale","_mainTexture"],0,6],["cc.Button",["_transition","node","clickEvents","_normalSprite","_normalColor","_target"],2,1,9,6,5,1],["cc.Camera",["_visibility","_priority","_projection","_orthoHeight","_fov","_far","_clearFlags","_name","_color","node"],-5,5,1],["cc.GradientRange",["_mode","gradient","color"],2,4,5],["cc.Material",["_states","_defines","_techIdx","_props"],0,12],["cc.Layout",["_layoutType","_paddingTop","_paddingBottom","_spacingY","_spacingX","_horizontalDirection","node"],-3,1],["14cbfem0EJOfqZEdiFdk7i8",["isBg","node"],2,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["66a5dgpdGVPE7devwcMTb8R",["eventType","param","node"],1,1],["cc.SphereCollider",["_isTrigger","node","_center"],2,1,5],["cc.RigidBody",["_type","_group","node"],1,1],["cc.MeshRenderer",["_name","node","_materials","lightmapSettings","_mesh"],2,1,3,4,6],["cc.AlphaKey",["alpha","time"],1],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.VelocityOvertimeModule",["_enable","x","y","z","speedModifier"],2,4,4,4,4],"cc.TextureCube",["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_children","_components"],2,12,9],["4c103o8VTxP2o+HJt/2Plvl",["node","home","StageChoose","stage","nodePools"],3,1,1,1,1,1],["7b372oinhlHeoFVI2p6iZbU",["node","selectNode","stageUI","stageChooseUI","stageChoose","home","targetShowImage","targetShowDonuts","energyPanel","tipsPanel","energyBtn","TeachNode","TipsNode","errorFinger"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1],["31214YUdnlMHIMPYWERVwut",["node"],3,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.SafeArea",["node"],3,1],["cc.BlockInputEvents",["node"],3,1],["160ecRYCANPL4gIkVrZ3oZt",["node"],3,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["fileId"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",["_useHDR","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.ClickEvent",["_componentId","handler","target"],1,1],["4fe96zMkK9Lf6p8Xtvd0YRC",["node"],3,1],["1ab76n4e01E6blqCM28Tk5y",["node"],3,1],["d59030Cq+lEjK/1xsiW78N2",["_enabled","node"],2,1],["77040acr2xPmq97ExVnyqYV",["nowStep","nowModelId","node"],1,1],["0b8efONKW9AQJa05yyyMs4m",["node"],3,1],["860e4GyAQpJ/pFumbHbSlQB",["node","camera"],3,1,1],["cc.Label",["_string","_actualFontSize","_fontSize","_isBold","node","_color"],-1,1,5],["dfc8by4pvJOYZzYa4iwNn4w",["node"],3,1],["3dcf386JW1InqcCsKWf9bdV",["node"],3,1],["cc.BoxCollider",["_isTrigger","node"],2,1],["cc.ModelLightmapSettings",[],3],["72497BL0mVMYaiK2dXvWsbj",["node","mats"],3,1,3],["74f8188NbxO264ejP51X1vr",["node","brainBlend"],3,1,4],["CinestationBlendDefinition",["time"],2],["e84d7HSHCRNU4Jgu1AdeBGI",["priority","node","lens","body","aim","noise","impulse"],2,1,4,4,4,4,4],["VCamLens",["_fov"],2],["VCamBody",["freelook","tracked"],3,4,4],["VCamFreeLook",[],3],["VCamTracked",["autoDolly"],3,4],["VCamAutoDoly",[],3],["VCamAim",["composer","hardLookat"],3,4,4],["VCamComposer",[],3],["VCamHardLook",[],3],["VCamNoise",[],3],["VCamImpulse",[],3],["ea4e89977RK55rnAqfpq65T",["width","height","node"],1,1],["1e739Vv+/VB6LKrquuPchXB",["node","leftBtn","rightBtn"],3,1,1,1],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["alphaKeys"],3,9],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.RealCurve",["_times","_values"],2,9],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.DirectionalLight",["_illuminanceLDR","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",[],3],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[57,1],[23,1,2,3,4,1],[0,0,5,4,2],[0,0,5,4,6,2],[0,0,3,5,4,6,3],[0,0,5,7,4,6,2],[7,1],[0,0,5,7,2],[21,0,1,2],[51,0,1],[22,0,2,2],[10,0,1,1],[0,0,3,7,3],[0,0,7,2],[2,5,6,1],[50,0,1,2,3],[0,0,5,7,6,2],[0,0,1,5,4,6,3],[7,2,2],[28,0,1,2,3],[22,1,0,2,3],[16,0,1,3,3],[20,0,1,2,3],[21,1,2,1],[46,0,1,2,3],[0,0,1,5,4,6,8,3],[0,0,7,6,2],[18,1,1],[15,1],[5,3,4,0,5,1,6],[24,0,1,3],[10,0,1,2,1],[79,0,1,2],[16,2,0,1,3,4],[2,5,7,6,1],[13,0,1,2,4,5,3,2],[0,0,1,7,4,6,3],[7,0,4,2],[3,0,5,3,8,4],[0,0,1,5,7,4,6,8,3],[0,0,1,5,4,3],[0,0,1,5,7,4,6,3],[2,0,5,7,6,2],[24,0,2],[0,0,3,1,5,7,4,4],[3,0,8,2],[15,0,1,2],[74,0,1,2],[75,0,1],[76,0,1,2,1],[77,0,1,2,3,1],[78,0,1,2,1],[80,0,1,2,3,4,1],[0,0,5,7,6,9,10,2],[18,0,1,2],[19,0,1,2,3,2],[26,1,2,3,4,1],[0,0,5,7,4,6,9,8,10,2],[17,0,4,5,6,4],[2,0,1,5,7,6,3],[5,4,0,5,1,5],[0,0,5,2],[0,0,2,5,7,6,3],[0,0,7,4,6,2],[2,1,5,6,2],[13,0,1,2,3,2],[19,1,2,3,1],[53,0,1,2,3,4,5,5],[7,0,1,4,3],[25,0,1,2,3,4,2],[5,2,3,3],[0,0,1,5,7,4,3],[0,0,1,5,4,6,9,10,3],[0,0,5,4,6,9,10,2],[4,0,2,1,3,2],[3,0,4,1,8,4],[2,0,1,5,6,3],[2,0,5,6,2],[23,0,1,2,3,4,2],[61,0,1,2,3,4,5,6,2],[62,0,2],[63,0,1,1],[64,1],[65,0,1],[66,1],[67,0,1,1],[68,1],[69,1],[70,1],[71,1],[11,1,2,0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,4],[15,2,1],[25,1,2,3,4,1],[83,0,1,2,4],[0,0,5,7,4,6,9,10,2],[0,0,1,5,4,8,3],[0,0,2,5,4,6,9,10,3],[0,0,5,7,8,2],[0,0,5,4,6,9,8,10,2],[4,0,4,1,3,5,6,2],[4,0,2,1,3,5,6,2],[3,0,1,8,3],[2,5,1],[36,0,1],[20,0,2,2],[11,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,3],[8,0,1,4,5,3],[8,0,1,2,4,4],[9,2,0,1,3,6,7,5],[9,0,1,3,6,7,4],[12,0,1,3,3],[12,0,3,2],[12,3,1],[29,0,2],[0,0,2,4,3],[0,0,1,7,4,6,8,3],[0,0,1,2,7,4,6,4],[0,0,1,4,6,8,3],[0,0,1,4,6,3],[0,0,5,7,4,9,10,2],[0,0,1,5,7,4,9,10,3],[0,0,1,5,4,9,10,3],[0,0,5,7,4,6,8,2],[0,0,2,5,4,6,8,3],[30,0,1,2,2],[4,0,4,1,2],[4,0,2,4,1,2],[4,0,2,1,3,5,7,6,2],[4,0,2,1,2],[31,0,1,2,3,4,1],[32,0,1,2,3,4,5,6,7,8,9,10,11,12,13,1],[33,0,1],[10,0,1],[10,0,2,1],[17,0,1,2,3,6,5],[3,0,2,1,6,3,8,6],[3,0,2,4,1,6,5,3,8,8],[3,0,2,1,8,4],[3,0,2,4,1,8,5],[3,0,2,4,1,7,5,3,8,8],[2,0,2,1,3,4,5,6,6],[2,1,5,2],[34,0,1,1],[35,0,1],[37,0,1],[38,0,1,2,3,2],[39,0,2],[40,0,1,2,3,4,1],[41,0,1,2,3,4,2],[42,0,1,1],[43,0,1,2,2],[44,1],[45,1],[13,1,2,1],[47,0,1],[48,0,1],[49,0,1,2],[52,0,1,1],[54,0,1],[55,0,1],[56,0,1,2],[58,0,1,1],[14,1,4,0,9,8,4],[14,2,1,3,5,6,0,9,8,7],[14,7,2,3,0,8,5],[59,0,1,1],[60,0,2],[72,0,1,2,3],[73,0,1,2,1],[11,0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,2],[11,3,0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,3],[7,1,2],[7,0,3,3],[8,4,1],[8,0,1,3,2,4,5],[8,0,3,2,4,4],[26,0,1,2,3,4,2],[9,2,0,1,4,5,6,7,6],[9,2,0,1,6,7,4],[9,6,7,1],[5,2,4,0,5,1,6],[5,2,3,4,0,5,1,7],[5,2,3,0,1,5],[5,2,0,1,4],[12,0,2,1,3,4],[81,0,1,2,2],[82,1]],[[[{"name":"step4","rect":{"x":0,"y":0,"width":91,"height":43},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":92,"height":44},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[100]],[[{"name":"yxjm_sz","rect":{"x":0,"y":0,"width":99,"height":118},"offset":{"x":-0.5,"y":0},"originalSize":{"width":100,"height":118},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[101]],[[[19,".bin",36099178,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":95040,"length":22176,"count":5544,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":95040,"count":1980,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2963740825653076,-0.04451749846339226,-0.26500433683395386],"maxPosition",8,[1,0.2963740825653076,0.04451760649681091,0.26500391960144043]]],-1],0,0,[],[],[]],[[{"name":"tips5","rect":{"x":0,"y":0,"width":951,"height":40},"offset":{"x":-0.5,"y":0},"originalSize":{"width":952,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[102]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[103,35]],[[[113,"Game"],[13,"SceneNode",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150]],[114,"StageNode","4fEIISeZhGZYBuG3F2vJ+B",[[129,-155,-154,-153,-152,-151],[130,-169,-168,-167,-166,-165,-164,-163,-162,-161,-160,-159,-158,-157,-156],[131,-170]]],[13,"DountNode",[-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182]],[13,"DountNode",[-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194]],[13,"DountNode",[-195,-196,-197,-198,-199,-200,-201,-202,-203,-204,-205,-206]],[115,"RightLayout",33554432,[-211,-212,-213,-214,-215,-216,-217,-218],[[11,-207,[5,160,394]],[134,2,40,40,25,-208],[101,33,100,-209],[14,-210,3022]],[1,547,-20.5,0],[1,1.5,1.5,1]],[116,"Canvas",33554432,"86xAK1XhhDIoxNsuLiS/UQ",[-224,-225,-226,-227,-228,-229,-230],[[11,-219,[5,1334,750]],[142,-221,-220],[45,45,-222],[143,-223]],[1,667,375,0]],[44,"EnergyPanel",false,33554432,7,[-235,-236,-237,-238,-239,-240],[[11,-231,[5,1334,750]],[102,-232],[103,-233],[38,45,100,100,-234]]],[44,"TipsPanel",false,33554432,7,[-245,-246,-247,-248,-249,-250],[[11,-241,[5,1334,750]],[102,-242],[103,-243],[38,45,100,100,-244]]],[13,"RoadNode",[-251,-252,-253,-254,-255,-256,-257,-258,-259,-260]],[13,"DonutNode",[-261,-262,-263,-264,-265,-266,-267,-268,-269,-270]],[36,"All",33554432,[-273,-274,-275,-276,-277,-278,-279],[[11,-271,[5,0,0]],[144,-272]],[1,35,0,0]],[36,"Show",33554432,[-282,-283,-284,-285,-286,-287,-288,-289],[[31,-280,[5,300,200],[0,1,0.5]],[58,1,3,1,-281]],[1,67.136,0,0]],[36,"Show",33554432,[-292,-293,-294,-295,-296,-297,-298,-299],[[31,-290,[5,300,200],[0,1,0.5]],[58,1,3,1,-291]],[1,67.136,0,0]],[36,"Show",33554432,[-302,-303,-304,-305,-306,-307,-308,-309],[[31,-300,[5,300,200],[0,1,0.5]],[58,1,3,1,-301]],[1,67.136,0,0]],[36,"Show",33554432,[-312,-313,-314,-315,-316,-317,-318,-319],[[31,-310,[5,300,200],[0,1,0.5]],[58,1,3,1,-311]],[1,67.136,0,0]],[36,"Show",33554432,[-322,-323,-324,-325,-326,-327,-328,-329],[[31,-320,[5,300,200],[0,1,0.5]],[58,1,3,1,-321]],[1,67.136,0,0]],[13,"Stage",[-330,-331,-332,-333,-334,-335,-336,-337,-338,-339]],[13,"0",[-340,-341,-342,-343,-344,-345,-346,-347,-348,-349]],[13,"1",[-350,-351,-352,-353,-354,-355,-356,-357,-358,-359]],[13,"2",[-360,-361,-362,-363,-364,-365,-366,-367,-368,-369]],[145,"Game",[2,-370,-371,-372,-373,-374,-375,-376,7],[146,"0f42536a-b2e4-49f7-839e-2a6d7256e2ab"],[147,[148,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,1,1,1,0.5208],[2,1,1,1,1]],[149,[4,4283190348],[0,1024,1024]],[150,false,3286,3287],[151],[152]]],[13,"0",[-377,-378,-379,-380,-381,-382,-383,-384,-385]],[13,"1",[-386,-387,-388,-389,-390,-391,-392,-393,-394]],[13,"2",[-395,-396,-397,-398,-399,-400,-401,-402,-403]],[39,"EnergyBtn",33554432,7,[-409,-410,-411],[[11,-404,[5,274,94]],[76,1,0,-405,3058],[35,3,-407,[[24,"7b372oinhlHeoFVI2p6iZbU","showEnergy",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-406,3059],[135,9,50,20,-365.085,94,-408]],[1,-534.8,326.8,0],[1,0.6,0.6,1]],[13,"0",[-412,-413,-414,-415,-416,-417,-418,-419]],[13,"1",[-420,-421,-422,-423,-424,-425,-426,-427]],[13,"2",[-428,-429,-430,-431,-432,-433,-434,-435]],[13,"0",[-436,-437,-438,-439,-440,-441,-442,-443]],[13,"1",[-444,-445,-446,-447,-448,-449,-450,-451]],[13,"2",[-452,-453,-454,-455,-456,-457,-458,-459]],[13,"0",[-460,-461,-462,-463,-464,-465,-466,-467]],[13,"1",[-468,-469,-470,-471,-472,-473,-474,-475]],[13,"2",[-476,-477,-478,-479,-480,-481,-482,-483]],[13,"0",[-484,-485,-486,-487,-488,-489,-490,-491]],[13,"1",[-492,-493,-494,-495,-496,-497,-498,-499]],[13,"2",[-500,-501,-502,-503,-504,-505,-506,-507]],[13,"0",[-508,-509,-510,-511,-512,-513,-514,-515]],[13,"1",[-516,-517,-518,-519,-520,-521,-522,-523]],[13,"2",[-524,-525,-526,-527,-528,-529,-530,-531]],[13,"0",[-532,-533,-534,-535,-536,-537,-538,-539]],[13,"1",[-540,-541,-542,-543,-544,-545,-546,-547]],[13,"2",[-548,-549,-550,-551,-552,-553,-554,-555]],[13,"0",[-556,-557,-558,-559,-560,-561,-562,-563]],[13,"1",[-564,-565,-566,-567,-568,-569,-570,-571]],[13,"2",[-572,-573,-574,-575,-576,-577,-578,-579]],[13,"0",[-580,-581,-582,-583,-584,-585,-586,-587]],[13,"1",[-588,-589,-590,-591,-592,-593,-594,-595]],[13,"2",[-596,-597,-598,-599,-600,-601,-602,-603]],[13,"0",[-604,-605,-606,-607,-608,-609,-610,-611]],[13,"1",[-612,-613,-614,-615,-616,-617,-618,-619]],[13,"2",[-620,-621,-622,-623,-624,-625,-626,-627]],[71,"Stage",33554432,7,[6,-630,-631,-632,-633],[[11,-628,[5,1334,750]],[38,45,100,100,-629]]],[39,"TipsBtn",33554432,54,[-639,-640,-641],[[11,-634,[5,274,94]],[76,1,0,-635,3028],[35,3,-637,[[24,"7b372oinhlHeoFVI2p6iZbU","showStageTip",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-636,3029],[136,9,250,200,20,128,274,94,-638]],[1,-334.8,326.8,0],[1,0.6,0.6,1]],[71,"Teach",33554432,54,[-644,-645,-646,-647,-648],[[11,-642,[5,1334,750]],[38,45,100,100,-643]]],[117,"leftBtn",33554432,[[11,-649,[5,64,100]],[77,1,-650,3084],[35,3,-653,[[24,"1e739Vv+/VB6LKrquuPchXB","clickLeft",-652]],[4,4292269782],-651,3085],[137,10,150,30,-654],[27,-655]],[1,-485,0,0],[1,-1,1,1]],[41,"Targets",33554432,7,[12],[[31,-656,[5,220,394],[0,0,1]],[101,9,106.58499999999998,-657],[153,-659,[[24,"4fe96zMkK9Lf6p8Xtvd0YRC","Out",-658],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]]],[154,-660]],[1,-667,268.415,0]],[124,"StageController",[[[61,"SceneNode",-662],[61,"RoadNode",-663],[61,"DountNode",-664],[61,"CubeNode",-665],-666,-667],4,4,4,4,1,1],[[155,-661]]],[118,"rightBtn",33554432,[[11,-668,[5,64,100]],[77,1,-669,3082],[35,3,-672,[[24,"1e739Vv+/VB6LKrquuPchXB","clickRight",-671]],[4,4292269782],-670,3083],[138,34,100,150,30,-673],[27,-674]],[1,485,0,0]],[125,"StageChoose",[-676,-677,-678],[-675]],[71,"StageChoose",33554432,7,[-681,57,60],[[11,-679,[5,1334,750]],[38,45,100,100,-680]]],[26,"Donuts",[-682,-683,-684,-685,-686],[1,0,0.187,0]],[39,"ContinueBtn",33554432,54,[-692],[[11,-687,[5,274,94]],[76,1,0,-688,3024],[35,3,-690,[[24,"7b372oinhlHeoFVI2p6iZbU","nextLevel",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-689,3025],[45,36,-691]],[1,461.5,-304.5,0],[1,1.5,1.5,1]],[41,"tstk_dk",33554432,8,[-697,-698],[[11,-693,[5,300,98]],[34,-694,[4,4294938803],3067],[65,3,-695,[[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2],[24,"7b372oinhlHeoFVI2p6iZbU","videoGetEnergy",2]],3068],[27,-696]],[1,0,-54.383,0]],[41,"tstk_dk",33554432,9,[-703,-704],[[11,-699,[5,300,98]],[34,-700,[4,4294938803],3077],[65,3,-701,[[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2],[24,"7b372oinhlHeoFVI2p6iZbU","videoTips",2]],3078],[27,-702]],[1,0,-54.383,0]],[17,"backHomeBtn",33554432,62,[[11,-705,[5,80,60]],[77,1,-706,3080],[35,3,-708,[[24,"7b372oinhlHeoFVI2p6iZbU","goHome",2]],[4,4292269782],-707,3081],[139,9,88.168,627,93.07300000000004,345,80,60,-709],[27,-710]],[1,-538.832,251.92699999999996,0]],[62,"Scene_Home","cfutfz7IhG1pQwdFVpYtrf",22,[-711,-712,-713,-714],[1,-30,0,0]],[12,"0",false,[-715,-716,-717,-718,-719]],[13,"1",[-720,-721,-722,-723,-724]],[12,"2",false,[-725,-726,-727,-728,-729]],[12,"0",false,[-730,-731,-732,-733,-734]],[13,"1",[-735,-736,-737,-738,-739]],[12,"2",false,[-740,-741,-742,-743,-744]],[12,"0",false,[-745,-746,-747,-748,-749]],[13,"1",[-750,-751,-752,-753,-754]],[12,"2",false,[-755,-756,-757,-758,-759]],[12,"0",false,[-760,-761,-762,-763,-764]],[13,"1",[-765,-766,-767,-768,-769]],[12,"2",false,[-770,-771,-772,-773,-774]],[12,"0",false,[-775,-776,-777,-778,-779]],[13,"1",[-780,-781,-782,-783,-784]],[12,"2",false,[-785,-786,-787,-788,-789]],[12,"0",false,[-790,-791,-792,-793,-794]],[13,"1",[-795,-796,-797,-798,-799]],[12,"2",false,[-800,-801,-802,-803,-804]],[12,"0",false,[-805,-806,-807,-808,-809]],[13,"1",[-810,-811,-812,-813,-814]],[12,"2",false,[-815,-816,-817,-818,-819]],[12,"0",false,[-820,-821,-822,-823,-824]],[13,"1",[-825,-826,-827,-828,-829]],[12,"2",false,[-830,-831,-832,-833,-834]],[12,"0",false,[-835,-836,-837,-838,-839]],[13,"1",[-840,-841,-842,-843,-844]],[12,"2",false,[-845,-846,-847,-848,-849]],[12,"0",false,[-850,-851,-852,-853,-854]],[13,"1",[-855,-856,-857,-858,-859]],[12,"2",false,[-860,-861,-862,-863,-864]],[13,"0",[-865,-866,-867,-868,-869]],[12,"1",false,[-870,-871,-872,-873,-874]],[12,"2",false,[-875,-876,-877,-878,-879]],[13,"0",[-880,-881,-882,-883,-884]],[12,"1",false,[-885,-886,-887,-888,-889]],[12,"2",false,[-890,-891,-892,-893,-894]],[13,"0",[-895,-896,-897,-898,-899]],[12,"1",false,[-900,-901,-902,-903,-904]],[12,"2",false,[-905,-906,-907,-908,-909]],[13,"0",[-910,-911,-912,-913,-914]],[12,"1",false,[-915,-916,-917,-918,-919]],[12,"2",false,[-920,-921,-922,-923,-924]],[13,"0",[-925,-926,-927,-928,-929]],[12,"1",false,[-930,-931,-932,-933,-934]],[12,"2",false,[-935,-936,-937,-938,-939]],[13,"0",[-940,-941,-942,-943,-944]],[12,"1",false,[-945,-946,-947,-948,-949]],[12,"2",false,[-950,-951,-952,-953,-954]],[13,"0",[-955,-956,-957,-958,-959]],[12,"1",false,[-960,-961,-962,-963,-964]],[12,"2",false,[-965,-966,-967,-968,-969]],[13,"0",[-970,-971,-972,-973,-974]],[12,"1",false,[-975,-976,-977,-978,-979]],[12,"2",false,[-980,-981,-982,-983,-984]],[13,"0",[-985,-986,-987,-988,-989]],[12,"1",false,[-990,-991,-992,-993,-994]],[12,"2",false,[-995,-996,-997,-998,-999]],[13,"0",[-1000,-1001,-1002,-1003,-1004]],[12,"1",false,[-1005,-1006,-1007,-1008,-1009]],[12,"2",false,[-1010,-1011,-1012,-1013,-1014]],[13,"0",[-1015,-1016,-1017,-1018,-1019]],[12,"1",false,[-1020,-1021,-1022,-1023,-1024]],[12,"2",false,[-1025,-1026,-1027,-1028,-1029]],[13,"0",[-1030,-1031,-1032,-1033,-1034]],[12,"1",false,[-1035,-1036,-1037,-1038,-1039]],[12,"2",false,[-1040,-1041,-1042,-1043,-1044]],[12,"0",false,[-1045,-1046,-1047,-1048,-1049]],[13,"1",[-1050,-1051,-1052,-1053,-1054]],[12,"2",false,[-1055,-1056,-1057,-1058,-1059]],[12,"0",false,[-1060,-1061,-1062,-1063,-1064]],[13,"1",[-1065,-1066,-1067,-1068,-1069]],[12,"2",false,[-1070,-1071,-1072,-1073,-1074]],[12,"0",false,[-1075,-1076,-1077,-1078,-1079]],[13,"1",[-1080,-1081,-1082,-1083,-1084]],[12,"2",false,[-1085,-1086,-1087,-1088,-1089]],[12,"0",false,[-1090,-1091,-1092,-1093,-1094]],[13,"1",[-1095,-1096,-1097,-1098,-1099]],[12,"2",false,[-1100,-1101,-1102,-1103,-1104]],[12,"0",false,[-1105,-1106,-1107,-1108,-1109]],[13,"1",[-1110,-1111,-1112,-1113,-1114]],[12,"2",false,[-1115,-1116,-1117,-1118,-1119]],[12,"0",false,[-1120,-1121,-1122,-1123,-1124]],[13,"1",[-1125,-1126,-1127,-1128,-1129]],[12,"2",false,[-1130,-1131,-1132,-1133,-1134]],[12,"0",false,[-1135,-1136,-1137,-1138,-1139]],[13,"1",[-1140,-1141,-1142,-1143,-1144]],[12,"2",false,[-1145,-1146,-1147,-1148,-1149]],[12,"0",false,[-1150,-1151,-1152,-1153,-1154]],[13,"1",[-1155,-1156,-1157,-1158,-1159]],[12,"2",false,[-1160,-1161,-1162,-1163,-1164]],[12,"0",false,[-1165,-1166,-1167,-1168,-1169]],[13,"1",[-1170,-1171,-1172,-1173,-1174]],[12,"2",false,[-1175,-1176,-1177,-1178,-1179]],[12,"0",false,[-1180,-1181,-1182,-1183,-1184]],[13,"1",[-1185,-1186,-1187,-1188,-1189]],[12,"2",false,[-1190,-1191,-1192,-1193,-1194]],[12,"0",false,[-1195,-1196,-1197,-1198,-1199]],[13,"1",[-1200,-1201,-1202,-1203,-1204]],[12,"2",false,[-1205,-1206,-1207,-1208,-1209]],[12,"0",false,[-1210,-1211,-1212,-1213,-1214]],[13,"1",[-1215,-1216,-1217,-1218,-1219]],[12,"2",false,[-1220,-1221,-1222,-1223,-1224]],[12,"0",false,[-1225,-1226,-1227,-1228,-1229]],[12,"1",false,[-1230,-1231,-1232,-1233,-1234]],[13,"2",[-1235,-1236,-1237,-1238,-1239]],[12,"0",false,[-1240,-1241,-1242,-1243,-1244]],[12,"1",false,[-1245,-1246,-1247,-1248,-1249]],[13,"2",[-1250,-1251,-1252,-1253,-1254]],[12,"0",false,[-1255,-1256,-1257,-1258,-1259]],[12,"1",false,[-1260,-1261,-1262,-1263,-1264]],[13,"2",[-1265,-1266,-1267,-1268,-1269]],[12,"0",false,[-1270,-1271,-1272,-1273,-1274]],[12,"1",false,[-1275,-1276,-1277,-1278,-1279]],[13,"2",[-1280,-1281,-1282,-1283,-1284]],[12,"0",false,[-1285,-1286,-1287,-1288,-1289]],[12,"1",false,[-1290,-1291,-1292,-1293,-1294]],[13,"2",[-1295,-1296,-1297,-1298,-1299]],[12,"0",false,[-1300,-1301,-1302,-1303,-1304]],[12,"1",false,[-1305,-1306,-1307,-1308,-1309]],[13,"2",[-1310,-1311,-1312,-1313,-1314]],[12,"0",false,[-1315,-1316,-1317,-1318,-1319]],[12,"1",false,[-1320,-1321,-1322,-1323,-1324]],[13,"2",[-1325,-1326,-1327,-1328,-1329]],[12,"0",false,[-1330,-1331,-1332,-1333,-1334]],[12,"1",false,[-1335,-1336,-1337,-1338,-1339]],[13,"2",[-1340,-1341,-1342,-1343,-1344]],[12,"0",false,[-1345,-1346,-1347,-1348,-1349]],[12,"1",false,[-1350,-1351,-1352,-1353,-1354]],[13,"2",[-1355,-1356,-1357,-1358,-1359]],[12,"0",false,[-1360,-1361,-1362,-1363,-1364]],[12,"1",false,[-1365,-1366,-1367,-1368,-1369]],[13,"2",[-1370,-1371,-1372,-1373,-1374]],[12,"0",false,[-1375,-1376,-1377,-1378,-1379]],[12,"1",false,[-1380,-1381,-1382,-1383,-1384]],[13,"2",[-1385,-1386,-1387,-1388,-1389]],[12,"0",false,[-1390,-1391,-1392,-1393,-1394]],[12,"1",false,[-1395,-1396,-1397,-1398,-1399]],[13,"2",[-1400,-1401,-1402,-1403,-1404]],[62,"Scene_Stage","10VYUHeKJECasddpCNTb5a",22,[-1405,-1406,59,-1407],[1,-7,0,0]],[12,"0",false,[-1408,-1409,-1410,-1411,-1412]],[13,"1",[-1413,-1414,-1415,-1416,-1417]],[12,"2",false,[-1418,-1419,-1420,-1421,-1422]],[12,"0",false,[-1423,-1424,-1425,-1426,-1427]],[13,"1",[-1428,-1429,-1430,-1431,-1432]],[12,"2",false,[-1433,-1434,-1435,-1436,-1437]],[12,"0",false,[-1438,-1439,-1440,-1441,-1442]],[13,"1",[-1443,-1444,-1445,-1446,-1447]],[12,"2",false,[-1448,-1449,-1450,-1451,-1452]],[12,"0",false,[-1453,-1454,-1455,-1456,-1457]],[13,"1",[-1458,-1459,-1460,-1461,-1462]],[12,"2",false,[-1463,-1464,-1465,-1466,-1467]],[12,"0",false,[-1468,-1469,-1470,-1471,-1472]],[13,"1",[-1473,-1474,-1475,-1476,-1477]],[12,"2",false,[-1478,-1479,-1480,-1481,-1482]],[17,"Stop",33554432,6,[[11,-1483,[5,38,40]],[42,1,-1484,[4,4294938803],3010],[35,3,-1486,[[24,"7b372oinhlHeoFVI2p6iZbU","dountStop",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1485,3011],[156,false,-1487]],[1,0,9,0]],[44,"Teach1",false,33554432,56,[-1490,-1491,-1492],[[11,-1488,[5,1334,750]],[38,45,100,100,-1489]]],[41,"0",33554432,224,[-1497],[[11,-1493,[5,900,135]],[64,0,-1494,3031],[45,20,-1495],[54,true,-1496]],[1,0,-307.5,0]],[39,"1",33554432,224,[-1501,-1502],[[11,-1498,[5,0,0]],[75,33,810.212,395,-1499],[55,true,-1500,[3034],3035]],[1,-143.212,-20,0],[1,1.75,1.5,1]],[36,"0",33554432,[-1507],[[11,-1503,[5,900,135]],[64,0,-1504,3039],[45,20,-1505],[54,true,-1506]],[1,0,-307.5,0]],[36,"1",33554432,[-1510,-1511,-1512],[[132,-1508],[55,true,-1509,[3043],3044]],[1,90,10,0]],[36,"0",33554432,[-1517],[[11,-1513,[5,900,135]],[64,0,-1514,3046],[45,20,-1515],[54,true,-1516]],[1,0,-307.5,0]],[36,"0",33554432,[-1522],[[11,-1518,[5,774,135]],[14,-1519,3050],[45,20,-1520],[54,true,-1521]],[1,0,-307.5,0]],[36,"0",33554432,[-1527],[[11,-1523,[5,900,135]],[64,0,-1524,3052],[45,20,-1525],[54,true,-1526]],[1,0,-307.5,0]],[41,"tstk_dk-001",33554432,8,[-1532],[[11,-1528,[5,300,98]],[34,-1529,[4,4294938803],3063],[65,3,-1530,[[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2],[24,"7b372oinhlHeoFVI2p6iZbU","closeEnergy",2]],3064],[27,-1531]],[1,0,-173.79,0]],[41,"tstk_dk-001",33554432,9,[-1537],[[11,-1533,[5,300,98]],[34,-1534,[4,4294938803],3073],[65,3,-1535,[[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2],[24,"7b372oinhlHeoFVI2p6iZbU","closeTipsPanel",2]],3074],[27,-1536]],[1,0,-173.79,0]],[62,"Prefabs","58JTOPVDRDeqdRmNF0LzBE",22,[-1538,18,-1539,-1540],[1,1000,1000,1000]],[12,"0",false,[-1541,-1542,-1543,-1544,-1545]],[13,"1",[-1546,-1547,-1548,-1549,-1550]],[12,"2",false,[-1551,-1552,-1553,-1554,-1555]],[12,"0",false,[-1556,-1557,-1558,-1559,-1560]],[13,"1",[-1561,-1562,-1563,-1564,-1565]],[12,"2",false,[-1566,-1567,-1568,-1569,-1570]],[126,"HomeController",68,[1,10,11],[-1571]],[5,"Donut",3,[-1574,-1575],[[15,1,1,-1572],[22,"StageChoose_Stage_Click",1,-1573]],[1,1.2,0,0.6]],[5,"Donut-001",3,[-1578,-1579],[[15,1,1,-1576],[22,"StageChoose_Stage_Click",2,-1577]],[1,0.4,0,0.6]],[5,"Donut-002",3,[-1582,-1583],[[15,1,1,-1580],[22,"StageChoose_Stage_Click",3,-1581]],[1,-0.4,0,0.6]],[5,"Donut-003",3,[-1586,-1587],[[15,1,1,-1584],[22,"StageChoose_Stage_Click",4,-1585]],[1,-1.2,0,0.6]],[5,"Donut-004",3,[-1590,-1591],[[15,1,1,-1588],[22,"StageChoose_Stage_Click",5,-1589]],[1,1.2,0,-0.1]],[5,"Donut-005",3,[-1594,-1595],[[15,1,1,-1592],[22,"StageChoose_Stage_Click",6,-1593]],[1,0.4,0,-0.1]],[5,"Donut-006",3,[-1598,-1599],[[15,1,1,-1596],[22,"StageChoose_Stage_Click",7,-1597]],[1,-0.4,0,-0.1]],[5,"Donut-007",3,[-1602,-1603],[[15,1,1,-1600],[22,"StageChoose_Stage_Click",8,-1601]],[1,-1.2,0,-0.1]],[5,"Donut-008",3,[-1606,-1607],[[15,1,1,-1604],[22,"StageChoose_Stage_Click",9,-1605]],[1,1.2,0,-0.8]],[5,"Donut-009",3,[-1610,-1611],[[15,1,1,-1608],[22,"StageChoose_Stage_Click",10,-1609]],[1,0.4,0,-0.8]],[5,"Donut-010",3,[-1614,-1615],[[15,1,1,-1612],[22,"StageChoose_Stage_Click",11,-1613]],[1,-0.4,0,-0.8]],[5,"Donut-011",3,[-1618,-1619],[[15,1,1,-1616],[22,"StageChoose_Stage_Click",12,-1617]],[1,-1.2,0,-0.8]],[5,"Donut",4,[-1622,-1623],[[15,1,1,-1620],[22,"StageChoose_Stage_Click",13,-1621]],[1,1.2,0,0.6]],[5,"Donut-001",4,[-1626,-1627],[[15,1,1,-1624],[22,"StageChoose_Stage_Click",14,-1625]],[1,0.4,0,0.6]],[5,"Donut-002",4,[-1630,-1631],[[15,1,1,-1628],[22,"StageChoose_Stage_Click",15,-1629]],[1,-0.4,0,0.6]],[5,"Donut-003",4,[-1634,-1635],[[15,1,1,-1632],[22,"StageChoose_Stage_Click",16,-1633]],[1,-1.2,0,0.6]],[5,"Donut-004",4,[-1638,-1639],[[15,1,1,-1636],[22,"StageChoose_Stage_Click",17,-1637]],[1,1.2,0,-0.1]],[5,"Donut-005",4,[-1642,-1643],[[15,1,1,-1640],[22,"StageChoose_Stage_Click",18,-1641]],[1,0.4,0,-0.1]],[5,"Donut-006",4,[-1646,-1647],[[15,1,1,-1644],[22,"StageChoose_Stage_Click",19,-1645]],[1,-0.4,0,-0.1]],[5,"Donut-007",4,[-1650,-1651],[[15,1,1,-1648],[22,"StageChoose_Stage_Click",20,-1649]],[1,-1.2,0,-0.1]],[5,"Donut-008",4,[-1654,-1655],[[15,1,1,-1652],[22,"StageChoose_Stage_Click",21,-1653]],[1,1.2,0,-0.8]],[5,"Donut-009",4,[-1658,-1659],[[15,1,1,-1656],[22,"StageChoose_Stage_Click",22,-1657]],[1,0.4,0,-0.8]],[5,"Donut-010",4,[-1662,-1663],[[15,1,1,-1660],[22,"StageChoose_Stage_Click",23,-1661]],[1,-0.4,0,-0.8]],[5,"Donut-011",4,[-1666,-1667],[[15,1,1,-1664],[22,"StageChoose_Stage_Click",24,-1665]],[1,-1.2,0,-0.8]],[5,"Donut",5,[-1670,-1671],[[15,1,2,-1668],[22,"StageChoose_Stage_Click",25,-1669]],[1,1.25,0,0.5]],[5,"Donut-001",5,[-1674,-1675],[[15,1,2,-1672],[22,"StageChoose_Stage_Click",26,-1673]],[1,0.75,0,0.5]],[5,"Donut-002",5,[-1678,-1679],[[15,1,2,-1676],[22,"StageChoose_Stage_Click",27,-1677]],[1,0.25,0,0.5]],[5,"Donut-003",5,[-1682,-1683],[[15,1,2,-1680],[22,"StageChoose_Stage_Click",28,-1681]],[1,-0.25,0,0.5]],[5,"Donut-004",5,[-1686,-1687],[[15,1,2,-1684],[22,"StageChoose_Stage_Click",29,-1685]],[1,-0.75,0,0.5]],[5,"Donut-005",5,[-1690,-1691],[[15,1,2,-1688],[22,"StageChoose_Stage_Click",30,-1689]],[1,-1.25,0,0.5]],[5,"Donut-006",5,[-1694,-1695],[[15,1,2,-1692],[22,"StageChoose_Stage_Click",31,-1693]],[1,1.25,0,-0.5]],[5,"Donut-007",5,[-1698,-1699],[[15,1,2,-1696],[22,"StageChoose_Stage_Click",32,-1697]],[1,0.75,0,-0.5]],[5,"Donut-008",5,[-1702,-1703],[[15,1,2,-1700],[22,"StageChoose_Stage_Click",33,-1701]],[1,0.25,0,-0.5]],[5,"Donut-009",5,[-1706,-1707],[[15,1,2,-1704],[22,"StageChoose_Stage_Click",34,-1705]],[1,-0.25,0,-0.5]],[5,"Donut-010",5,[-1710,-1711],[[15,1,2,-1708],[22,"StageChoose_Stage_Click",35,-1709]],[1,-0.75,0,-0.5]],[5,"Donut-011",5,[-1714,-1715],[[15,1,2,-1712],[22,"StageChoose_Stage_Click",36,-1713]],[1,-1.25,0,-0.5]],[39,"Tips",33554432,12,[13],[[31,-1716,[5,700,78],[0,1,0.5]],[59,1,0,-1717,[4,4294938803],2812],[27,-1718]],[1,-35.888,-61.023,0],[1,0.8,0.8,1]],[39,"Tips-001",33554432,12,[14],[[31,-1719,[5,700,78],[0,1,0.5]],[59,1,0,-1720,[4,4294938803],2821],[27,-1721]],[1,-35.888,-134.135,0],[1,0.8,0.8,1]],[39,"Tips-002",33554432,12,[15],[[31,-1722,[5,700,78],[0,1,0.5]],[59,1,0,-1723,[4,4294938803],2830],[27,-1724]],[1,-35.888,-200.744,0],[1,0.8,0.8,1]],[39,"Tips-003",33554432,12,[16],[[31,-1725,[5,700,78],[0,1,0.5]],[59,1,0,-1726,[4,4294938803],2839],[27,-1727]],[1,-35.888,-270.589,0],[1,0.8,0.8,1]],[39,"Tips-004",33554432,12,[17],[[31,-1728,[5,700,78],[0,1,0.5]],[59,1,0,-1729,[4,4294938803],2848],[27,-1730]],[1,-35.888,-343.417,0],[1,0.8,0.8,1]],[17,"BackStageChoose",33554432,6,[[11,-1731,[5,40,38]],[42,1,-1732,[4,4294938803],3006],[35,3,-1734,[[24,"7b372oinhlHeoFVI2p6iZbU","backStageChoose",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1733,3007]],[1,0,138,0]],[17,"Start",33554432,6,[[11,-1735,[5,27,40]],[42,1,-1736,[4,4294938803],3008],[35,3,-1738,[[24,"7b372oinhlHeoFVI2p6iZbU","dountStart",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1737,3009]],[1,0,74,0]],[17,"SpeedUp",33554432,6,[[11,-1739,[5,41,34]],[42,1,-1740,[4,4294938803],3012],[35,3,-1742,[[24,"7b372oinhlHeoFVI2p6iZbU","beatSpeedUp",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1741,3013]],[1,0,-53,0]],[25,"SpeedDown",33554432,6,[[11,-1743,[5,41,34]],[42,1,-1744,[4,4294938803],3014],[35,3,-1746,[[24,"7b372oinhlHeoFVI2p6iZbU","beatSlowDown",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1745,3015]],[1,0,-112,0],[1,-1,1,1]],[17,"BackStep",33554432,6,[[11,-1747,[5,40,34]],[42,1,-1748,[4,4294938803],3016],[35,3,-1750,[[24,"7b372oinhlHeoFVI2p6iZbU","getLastStep",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1749,3017]],[1,0,-171,0]],[25,"ForwardStep",33554432,6,[[11,-1751,[5,40,34]],[42,1,-1752,[4,4294938803],3018],[35,3,-1754,[[24,"7b372oinhlHeoFVI2p6iZbU","getNextStep",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1753,3019]],[1,0,-230,0],[1,-1,1,1]],[25,"Clear",33554432,6,[[11,-1755,[5,32,42]],[42,1,-1756,[4,4294938803],3020],[35,3,-1758,[[24,"7b372oinhlHeoFVI2p6iZbU","getInitStep",2],[24,"7b372oinhlHeoFVI2p6iZbU","playBtnSound",2]],[4,4292269782],-1757,3021]],[1,0,-293,0],[1,-1,1,1]],[41,"2",33554432,224,[-1761,-1762],[[11,-1759,[5,0,0]],[75,33,387.774,315.843,-1760]],[1,279.226,59.15699999999998,0]],[44,"Teach2",false,33554432,56,[227,228],[[11,-1763,[5,1334,750]],[38,45,100,100,-1764]]],[44,"Teach3",false,33554432,56,[229,-1767],[[11,-1765,[5,1334,750]],[38,45,100,100,-1766]]],[41,"1",33554432,292,[-1770,-1771],[[11,-1768,[5,0,0]],[75,33,400.615,420.974,-1769]],[1,266.385,-45.97399999999999,0]],[63,"Model",[-1773,-1774,-1775],[[66,-1772,[3146,3147],3148]],[1,0,0.1,0]],[63,"Model",[-1777,-1778,-1779],[[66,-1776,[3155,3156],3157]],[1,0,0.1,0]],[63,"Model",[-1781,-1782,-1783],[[66,-1780,[3164,3165],3166]],[1,0,0.1,0]],[63,"Model",[-1785,-1786,-1787],[[66,-1784,[3173,3174],3175]],[1,0,0.1,0]],[5,"Floor",1,[-1789,-1790],[[9,-1788]],[1,-7,0,-4.5]],[7,"Model",298,[-1791,-1792,-1793]],[5,"Floor",1,[-1795,-1796],[[9,-1794]],[1,-7,0,-3.5]],[7,"Model",300,[-1797,-1798,-1799]],[5,"Floor",1,[-1801,-1802],[[9,-1800]],[1,-7,0,-2.5]],[7,"Model",302,[-1803,-1804,-1805]],[5,"Floor",1,[-1807,-1808],[[9,-1806]],[1,-7,0,-1.5]],[7,"Model",304,[-1809,-1810,-1811]],[5,"Floor",1,[-1813,-1814],[[9,-1812]],[1,-7,0,-0.5]],[7,"Model",306,[-1815,-1816,-1817]],[5,"Floor",1,[-1819,-1820],[[9,-1818]],[1,-7,0,0.5]],[7,"Model",308,[-1821,-1822,-1823]],[5,"Floor",1,[-1825,-1826],[[9,-1824]],[1,-7,0,1.5]],[7,"Model",310,[-1827,-1828,-1829]],[5,"Floor",1,[-1831,-1832],[[9,-1830]],[1,-7,0,2.5]],[7,"Model",312,[-1833,-1834,-1835]],[5,"Floor",1,[-1837,-1838],[[9,-1836]],[1,-7,0,3.5]],[7,"Model",314,[-1839,-1840,-1841]],[5,"Floor",1,[-1843,-1844],[[9,-1842]],[1,-7,0,4.5]],[7,"Model",316,[-1845,-1846,-1847]],[5,"Floor",1,[-1849,-1850],[[9,-1848]],[1,-6,0,-4.5]],[7,"Model",318,[-1851,-1852,-1853]],[5,"Floor",1,[-1855,-1856],[[9,-1854]],[1,-6,0,-3.5]],[7,"Model",320,[-1857,-1858,-1859]],[5,"Floor",1,[-1861,-1862],[[9,-1860]],[1,-6,0,-2.5]],[7,"Model",322,[-1863,-1864,-1865]],[5,"Floor",1,[-1867,-1868],[[9,-1866]],[1,-6,0,-1.5]],[7,"Model",324,[-1869,-1870,-1871]],[5,"Floor",1,[-1873,-1874],[[9,-1872]],[1,-6,0,-0.5]],[7,"Model",326,[-1875,-1876,-1877]],[5,"Floor",1,[-1879,-1880],[[9,-1878]],[1,-6,0,0.5]],[7,"Model",328,[-1881,-1882,-1883]],[5,"Floor",1,[-1885,-1886],[[9,-1884]],[1,-6,0,1.5]],[7,"Model",330,[-1887,-1888,-1889]],[5,"Floor",1,[-1891,-1892],[[9,-1890]],[1,-6,0,2.5]],[7,"Model",332,[-1893,-1894,-1895]],[5,"Floor",1,[-1897,-1898],[[9,-1896]],[1,-6,0,3.5]],[7,"Model",334,[-1899,-1900,-1901]],[5,"Floor",1,[-1903,-1904],[[9,-1902]],[1,-6,0,4.5]],[7,"Model",336,[-1905,-1906,-1907]],[5,"Floor",1,[-1909,-1910],[[9,-1908]],[1,-5,0,-4.5]],[7,"Model",338,[-1911,-1912,-1913]],[5,"Floor",1,[-1915,-1916],[[9,-1914]],[1,-5,0,-3.5]],[7,"Model",340,[-1917,-1918,-1919]],[5,"Floor",1,[-1921,-1922],[[9,-1920]],[1,-5,0,-2.5]],[7,"Model",342,[-1923,-1924,-1925]],[5,"Floor",1,[-1927,-1928],[[9,-1926]],[1,-5,0,-1.5]],[7,"Model",344,[-1929,-1930,-1931]],[5,"Floor",1,[-1933,-1934],[[9,-1932]],[1,-5,0,-0.5]],[7,"Model",346,[-1935,-1936,-1937]],[5,"Floor",1,[-1939,-1940],[[9,-1938]],[1,-5,0,0.5]],[7,"Model",348,[-1941,-1942,-1943]],[5,"Floor",1,[-1945,-1946],[[9,-1944]],[1,-5,0,1.5]],[7,"Model",350,[-1947,-1948,-1949]],[5,"Floor",1,[-1951,-1952],[[9,-1950]],[1,-5,0,2.5]],[7,"Model",352,[-1953,-1954,-1955]],[5,"Floor",1,[-1957,-1958],[[9,-1956]],[1,-5,0,3.5]],[7,"Model",354,[-1959,-1960,-1961]],[5,"Floor",1,[-1963,-1964],[[9,-1962]],[1,-5,0,4.5]],[7,"Model",356,[-1965,-1966,-1967]],[5,"Floor",1,[-1969,-1970],[[9,-1968]],[1,-4,0,-4.5]],[7,"Model",358,[-1971,-1972,-1973]],[5,"Floor",1,[-1975,-1976],[[9,-1974]],[1,-4,0,-3.5]],[7,"Model",360,[-1977,-1978,-1979]],[5,"Floor",1,[-1981,-1982],[[9,-1980]],[1,-4,0,-2.5]],[7,"Model",362,[-1983,-1984,-1985]],[5,"Floor",1,[-1987,-1988],[[9,-1986]],[1,-4,0,-1.5]],[7,"Model",364,[-1989,-1990,-1991]],[5,"Floor",1,[-1993,-1994],[[9,-1992]],[1,-4,0,-0.5]],[7,"Model",366,[-1995,-1996,-1997]],[5,"Floor",1,[-1999,-2000],[[9,-1998]],[1,-4,0,0.5]],[7,"Model",368,[-2001,-2002,-2003]],[5,"Floor",1,[-2005,-2006],[[9,-2004]],[1,-4,0,1.5]],[7,"Model",370,[-2007,-2008,-2009]],[5,"Floor",1,[-2011,-2012],[[9,-2010]],[1,-4,0,2.5]],[7,"Model",372,[-2013,-2014,-2015]],[5,"Floor",1,[-2017,-2018],[[9,-2016]],[1,-4,0,3.5]],[7,"Model",374,[-2019,-2020,-2021]],[5,"Floor",1,[-2023,-2024],[[9,-2022]],[1,-4,0,4.5]],[7,"Model",376,[-2025,-2026,-2027]],[5,"Floor",1,[-2029,-2030],[[9,-2028]],[1,-3,0,-4.5]],[7,"Model",378,[-2031,-2032,-2033]],[5,"Floor",1,[-2035,-2036],[[9,-2034]],[1,-3,0,-3.5]],[7,"Model",380,[-2037,-2038,-2039]],[5,"Floor",1,[-2041,-2042],[[9,-2040]],[1,-3,0,-2.5]],[7,"Model",382,[-2043,-2044,-2045]],[5,"Floor",1,[-2047,-2048],[[9,-2046]],[1,-3,0,-1.5]],[7,"Model",384,[-2049,-2050,-2051]],[5,"Floor",1,[-2053,-2054],[[9,-2052]],[1,-3,0,-0.5]],[7,"Model",386,[-2055,-2056,-2057]],[5,"Floor",1,[-2059,-2060],[[9,-2058]],[1,-3,0,0.5]],[7,"Model",388,[-2061,-2062,-2063]],[5,"Floor",1,[-2065,-2066],[[9,-2064]],[1,-3,0,1.5]],[7,"Model",390,[-2067,-2068,-2069]],[5,"Floor",1,[-2071,-2072],[[9,-2070]],[1,-3,0,2.5]],[7,"Model",392,[-2073,-2074,-2075]],[5,"Floor",1,[-2077,-2078],[[9,-2076]],[1,-3,0,3.5]],[7,"Model",394,[-2079,-2080,-2081]],[5,"Floor",1,[-2083,-2084],[[9,-2082]],[1,-3,0,4.5]],[7,"Model",396,[-2085,-2086,-2087]],[5,"Floor",1,[-2089,-2090],[[9,-2088]],[1,-2,0,-4.5]],[7,"Model",398,[-2091,-2092,-2093]],[5,"Floor",1,[-2095,-2096],[[9,-2094]],[1,-2,0,-3.5]],[7,"Model",400,[-2097,-2098,-2099]],[5,"Floor",1,[-2101,-2102],[[9,-2100]],[1,-2,0,-2.5]],[7,"Model",402,[-2103,-2104,-2105]],[5,"Floor",1,[-2107,-2108],[[9,-2106]],[1,-2,0,-1.5]],[7,"Model",404,[-2109,-2110,-2111]],[5,"Floor",1,[-2113,-2114],[[9,-2112]],[1,-2,0,-0.5]],[7,"Model",406,[-2115,-2116,-2117]],[5,"Floor",1,[-2119,-2120],[[9,-2118]],[1,-2,0,0.5]],[7,"Model",408,[-2121,-2122,-2123]],[5,"Floor",1,[-2125,-2126],[[9,-2124]],[1,-2,0,1.5]],[7,"Model",410,[-2127,-2128,-2129]],[5,"Floor",1,[-2131,-2132],[[9,-2130]],[1,-2,0,2.5]],[7,"Model",412,[-2133,-2134,-2135]],[5,"Floor",1,[-2137,-2138],[[9,-2136]],[1,-2,0,3.5]],[7,"Model",414,[-2139,-2140,-2141]],[5,"Floor",1,[-2143,-2144],[[9,-2142]],[1,-2,0,4.5]],[7,"Model",416,[-2145,-2146,-2147]],[5,"Floor",1,[-2149,-2150],[[9,-2148]],[1,-1,0,-4.5]],[7,"Model",418,[-2151,-2152,-2153]],[5,"Floor",1,[-2155,-2156],[[9,-2154]],[1,-1,0,-3.5]],[7,"Model",420,[-2157,-2158,-2159]],[5,"Floor",1,[-2161,-2162],[[9,-2160]],[1,-1,0,-2.5]],[7,"Model",422,[-2163,-2164,-2165]],[5,"Floor",1,[-2167,-2168],[[9,-2166]],[1,-1,0,-1.5]],[7,"Model",424,[-2169,-2170,-2171]],[5,"Floor",1,[-2173,-2174],[[9,-2172]],[1,-1,0,-0.5]],[7,"Model",426,[-2175,-2176,-2177]],[5,"Floor",1,[-2179,-2180],[[9,-2178]],[1,-1,0,0.5]],[7,"Model",428,[-2181,-2182,-2183]],[5,"Floor",1,[-2185,-2186],[[9,-2184]],[1,-1,0,1.5]],[7,"Model",430,[-2187,-2188,-2189]],[5,"Floor",1,[-2191,-2192],[[9,-2190]],[1,-1,0,2.5]],[7,"Model",432,[-2193,-2194,-2195]],[5,"Floor",1,[-2197,-2198],[[9,-2196]],[1,-1,0,3.5]],[7,"Model",434,[-2199,-2200,-2201]],[5,"Floor",1,[-2203,-2204],[[9,-2202]],[1,-1,0,4.5]],[7,"Model",436,[-2205,-2206,-2207]],[5,"Floor",1,[-2209,-2210],[[9,-2208]],[1,0,0,-4.5]],[7,"Model",438,[-2211,-2212,-2213]],[5,"Floor",1,[-2215,-2216],[[9,-2214]],[1,0,0,-3.5]],[7,"Model",440,[-2217,-2218,-2219]],[5,"Floor",1,[-2221,-2222],[[9,-2220]],[1,0,0,-2.5]],[7,"Model",442,[-2223,-2224,-2225]],[5,"Floor",1,[-2227,-2228],[[9,-2226]],[1,0,0,-1.5]],[7,"Model",444,[-2229,-2230,-2231]],[5,"Floor",1,[-2233,-2234],[[9,-2232]],[1,0,0,-0.5]],[7,"Model",446,[-2235,-2236,-2237]],[5,"Floor",1,[-2239,-2240],[[9,-2238]],[1,0,0,0.5]],[7,"Model",448,[-2241,-2242,-2243]],[5,"Floor",1,[-2245,-2246],[[9,-2244]],[1,0,0,1.5]],[7,"Model",450,[-2247,-2248,-2249]],[5,"Floor",1,[-2251,-2252],[[9,-2250]],[1,0,0,2.5]],[7,"Model",452,[-2253,-2254,-2255]],[5,"Floor",1,[-2257,-2258],[[9,-2256]],[1,0,0,3.5]],[7,"Model",454,[-2259,-2260,-2261]],[5,"Floor",1,[-2263,-2264],[[9,-2262]],[1,0,0,4.5]],[7,"Model",456,[-2265,-2266,-2267]],[5,"Floor",1,[-2269,-2270],[[9,-2268]],[1,1,0,-4.5]],[7,"Model",458,[-2271,-2272,-2273]],[5,"Floor",1,[-2275,-2276],[[9,-2274]],[1,1,0,-3.5]],[7,"Model",460,[-2277,-2278,-2279]],[5,"Floor",1,[-2281,-2282],[[9,-2280]],[1,1,0,-2.5]],[7,"Model",462,[-2283,-2284,-2285]],[5,"Floor",1,[-2287,-2288],[[9,-2286]],[1,1,0,-1.5]],[7,"Model",464,[-2289,-2290,-2291]],[5,"Floor",1,[-2293,-2294],[[9,-2292]],[1,1,0,-0.5]],[7,"Model",466,[-2295,-2296,-2297]],[5,"Floor",1,[-2299,-2300],[[9,-2298]],[1,1,0,0.5]],[7,"Model",468,[-2301,-2302,-2303]],[5,"Floor",1,[-2305,-2306],[[9,-2304]],[1,1,0,1.5]],[7,"Model",470,[-2307,-2308,-2309]],[5,"Floor",1,[-2311,-2312],[[9,-2310]],[1,1,0,2.5]],[7,"Model",472,[-2313,-2314,-2315]],[5,"Floor",1,[-2317,-2318],[[9,-2316]],[1,1,0,3.5]],[7,"Model",474,[-2319,-2320,-2321]],[5,"Floor",1,[-2323,-2324],[[9,-2322]],[1,1,0,4.5]],[7,"Model",476,[-2325,-2326,-2327]],[5,"Floor",1,[-2329,-2330],[[9,-2328]],[1,2,0,-4.5]],[7,"Model",478,[-2331,-2332,-2333]],[5,"Floor",1,[-2335,-2336],[[9,-2334]],[1,2,0,-3.5]],[7,"Model",480,[-2337,-2338,-2339]],[5,"Floor",1,[-2341,-2342],[[9,-2340]],[1,2,0,-2.5]],[7,"Model",482,[-2343,-2344,-2345]],[5,"Floor",1,[-2347,-2348],[[9,-2346]],[1,2,0,-1.5]],[7,"Model",484,[-2349,-2350,-2351]],[5,"Floor",1,[-2353,-2354],[[9,-2352]],[1,2,0,-0.5]],[7,"Model",486,[-2355,-2356,-2357]],[5,"Floor",1,[-2359,-2360],[[9,-2358]],[1,2,0,0.5]],[7,"Model",488,[-2361,-2362,-2363]],[5,"Floor",1,[-2365,-2366],[[9,-2364]],[1,2,0,1.5]],[7,"Model",490,[-2367,-2368,-2369]],[5,"Floor",1,[-2371,-2372],[[9,-2370]],[1,2,0,2.5]],[7,"Model",492,[-2373,-2374,-2375]],[5,"Floor",1,[-2377,-2378],[[9,-2376]],[1,2,0,3.5]],[7,"Model",494,[-2379,-2380,-2381]],[5,"Floor",1,[-2383,-2384],[[9,-2382]],[1,2,0,4.5]],[7,"Model",496,[-2385,-2386,-2387]],[5,"Floor",1,[-2389,-2390],[[9,-2388]],[1,3,0,-4.5]],[7,"Model",498,[-2391,-2392,-2393]],[5,"Floor",1,[-2395,-2396],[[9,-2394]],[1,3,0,-3.5]],[7,"Model",500,[-2397,-2398,-2399]],[5,"Floor",1,[-2401,-2402],[[9,-2400]],[1,3,0,-2.5]],[7,"Model",502,[-2403,-2404,-2405]],[5,"Floor",1,[-2407,-2408],[[9,-2406]],[1,3,0,-1.5]],[7,"Model",504,[-2409,-2410,-2411]],[5,"Floor",1,[-2413,-2414],[[9,-2412]],[1,3,0,-0.5]],[7,"Model",506,[-2415,-2416,-2417]],[5,"Floor",1,[-2419,-2420],[[9,-2418]],[1,3,0,0.5]],[7,"Model",508,[-2421,-2422,-2423]],[5,"Floor",1,[-2425,-2426],[[9,-2424]],[1,3,0,1.5]],[7,"Model",510,[-2427,-2428,-2429]],[5,"Floor",1,[-2431,-2432],[[9,-2430]],[1,3,0,2.5]],[7,"Model",512,[-2433,-2434,-2435]],[5,"Floor",1,[-2437,-2438],[[9,-2436]],[1,3,0,3.5]],[7,"Model",514,[-2439,-2440,-2441]],[5,"Floor",1,[-2443,-2444],[[9,-2442]],[1,3,0,4.5]],[7,"Model",516,[-2445,-2446,-2447]],[5,"Floor",1,[-2449,-2450],[[9,-2448]],[1,4,0,-4.5]],[7,"Model",518,[-2451,-2452,-2453]],[5,"Floor",1,[-2455,-2456],[[9,-2454]],[1,4,0,-3.5]],[7,"Model",520,[-2457,-2458,-2459]],[5,"Floor",1,[-2461,-2462],[[9,-2460]],[1,4,0,-2.5]],[7,"Model",522,[-2463,-2464,-2465]],[5,"Floor",1,[-2467,-2468],[[9,-2466]],[1,4,0,-1.5]],[7,"Model",524,[-2469,-2470,-2471]],[5,"Floor",1,[-2473,-2474],[[9,-2472]],[1,4,0,-0.5]],[7,"Model",526,[-2475,-2476,-2477]],[5,"Floor",1,[-2479,-2480],[[9,-2478]],[1,4,0,0.5]],[7,"Model",528,[-2481,-2482,-2483]],[5,"Floor",1,[-2485,-2486],[[9,-2484]],[1,4,0,1.5]],[7,"Model",530,[-2487,-2488,-2489]],[5,"Floor",1,[-2491,-2492],[[9,-2490]],[1,4,0,2.5]],[7,"Model",532,[-2493,-2494,-2495]],[5,"Floor",1,[-2497,-2498],[[9,-2496]],[1,4,0,3.5]],[7,"Model",534,[-2499,-2500,-2501]],[5,"Floor",1,[-2503,-2504],[[9,-2502]],[1,4,0,4.5]],[7,"Model",536,[-2505,-2506,-2507]],[5,"Floor",1,[-2509,-2510],[[9,-2508]],[1,5,0,-4.5]],[7,"Model",538,[-2511,-2512,-2513]],[5,"Floor",1,[-2515,-2516],[[9,-2514]],[1,5,0,-3.5]],[7,"Model",540,[-2517,-2518,-2519]],[5,"Floor",1,[-2521,-2522],[[9,-2520]],[1,5,0,-2.5]],[7,"Model",542,[-2523,-2524,-2525]],[5,"Floor",1,[-2527,-2528],[[9,-2526]],[1,5,0,-1.5]],[7,"Model",544,[-2529,-2530,-2531]],[5,"Floor",1,[-2533,-2534],[[9,-2532]],[1,5,0,-0.5]],[7,"Model",546,[-2535,-2536,-2537]],[5,"Floor",1,[-2539,-2540],[[9,-2538]],[1,5,0,0.5]],[7,"Model",548,[-2541,-2542,-2543]],[5,"Floor",1,[-2545,-2546],[[9,-2544]],[1,5,0,1.5]],[7,"Model",550,[-2547,-2548,-2549]],[5,"Floor",1,[-2551,-2552],[[9,-2550]],[1,5,0,2.5]],[7,"Model",552,[-2553,-2554,-2555]],[5,"Floor",1,[-2557,-2558],[[9,-2556]],[1,5,0,3.5]],[7,"Model",554,[-2559,-2560,-2561]],[5,"Floor",1,[-2563,-2564],[[9,-2562]],[1,5,0,4.5]],[7,"Model",556,[-2565,-2566,-2567]],[5,"Floor",1,[-2569,-2570],[[9,-2568]],[1,6,0,-4.5]],[7,"Model",558,[-2571,-2572,-2573]],[5,"Floor",1,[-2575,-2576],[[9,-2574]],[1,6,0,-3.5]],[7,"Model",560,[-2577,-2578,-2579]],[5,"Floor",1,[-2581,-2582],[[9,-2580]],[1,6,0,-2.5]],[7,"Model",562,[-2583,-2584,-2585]],[5,"Floor",1,[-2587,-2588],[[9,-2586]],[1,6,0,-1.5]],[7,"Model",564,[-2589,-2590,-2591]],[5,"Floor",1,[-2593,-2594],[[9,-2592]],[1,6,0,-0.5]],[7,"Model",566,[-2595,-2596,-2597]],[5,"Floor",1,[-2599,-2600],[[9,-2598]],[1,6,0,0.5]],[7,"Model",568,[-2601,-2602,-2603]],[5,"Floor",1,[-2605,-2606],[[9,-2604]],[1,6,0,1.5]],[7,"Model",570,[-2607,-2608,-2609]],[5,"Floor",1,[-2611,-2612],[[9,-2610]],[1,6,0,2.5]],[7,"Model",572,[-2613,-2614,-2615]],[5,"Floor",1,[-2617,-2618],[[9,-2616]],[1,6,0,3.5]],[7,"Model",574,[-2619,-2620,-2621]],[5,"Floor",1,[-2623,-2624],[[9,-2622]],[1,6,0,4.5]],[7,"Model",576,[-2625,-2626,-2627]],[5,"Floor",1,[-2629,-2630],[[9,-2628]],[1,7,0,-4.5]],[7,"Model",578,[-2631,-2632,-2633]],[5,"Floor",1,[-2635,-2636],[[9,-2634]],[1,7,0,-3.5]],[7,"Model",580,[-2637,-2638,-2639]],[5,"Floor",1,[-2641,-2642],[[9,-2640]],[1,7,0,-2.5]],[7,"Model",582,[-2643,-2644,-2645]],[5,"Floor",1,[-2647,-2648],[[9,-2646]],[1,7,0,-1.5]],[7,"Model",584,[-2649,-2650,-2651]],[5,"Floor",1,[-2653,-2654],[[9,-2652]],[1,7,0,-0.5]],[7,"Model",586,[-2655,-2656,-2657]],[5,"Floor",1,[-2659,-2660],[[9,-2658]],[1,7,0,0.5]],[7,"Model",588,[-2661,-2662,-2663]],[5,"Floor",1,[-2665,-2666],[[9,-2664]],[1,7,0,1.5]],[7,"Model",590,[-2667,-2668,-2669]],[5,"Floor",1,[-2671,-2672],[[9,-2670]],[1,7,0,2.5]],[7,"Model",592,[-2673,-2674,-2675]],[5,"Floor",1,[-2677,-2678],[[9,-2676]],[1,7,0,3.5]],[7,"Model",594,[-2679,-2680,-2681]],[5,"Floor",1,[-2683,-2684],[[9,-2682]],[1,7,0,4.5]],[7,"Model",596,[-2685,-2686,-2687]],[26,"Model",[23,24,25],[1,0,0.1,0]],[26,"Model",[27,28,29],[1,0,0.1,0]],[26,"Model",[30,31,32],[1,0,0.1,0]],[26,"Model",[33,34,35],[1,0,0.1,0]],[26,"Model",[36,37,38],[1,0,0.1,0]],[26,"Model",[39,40,41],[1,0,0.1,0]],[26,"Model",[42,43,44],[1,0,0.1,0]],[26,"Model",[45,46,47],[1,0,0.1,0]],[26,"Model",[48,49,50],[1,0,0.1,0]],[26,"Model",[51,52,53],[1,0,0.1,0]],[26,"Model",[69,70,71],[1,0,1.1,0]],[26,"Model",[72,73,74],[1,0,1.1,0]],[26,"Model",[75,76,77],[1,0,1.1,0]],[26,"Model",[78,79,80],[1,0,1.1,0]],[26,"Model",[81,82,83],[1,0,1.1,0]],[26,"Model",[84,85,86],[1,0,1.1,0]],[26,"Model",[87,88,89],[1,0,1.1,0]],[26,"Model",[90,91,92],[1,0,1.1,0]],[26,"Model",[93,94,95],[1,0,1.1,0]],[26,"Model",[96,97,98],[1,0,1.1,0]],[5,"StartBtn",68,[-2689,-2690],[[104,"Home_StartGame_Click",-2688]],[1,-0.62,0,-0.278]],[5,"StageChooseBtn",68,[-2692,-2693],[[104,"Home_StageChoose_Click",-2691]],[1,-0.62,0,0.425]],[62,"Scene_StageChoose","64wYZi5K1HWJyqa9suWcjH",22,[-2694,61],[1,-17,0,11.543]],[119,"Box1",61,[-2696,3],[[55,true,-2695,[2065,2066],2067]],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[16,"Model",242,[99,100,101],[1,0,0.5,0]],[16,"Model",243,[102,103,104],[1,0,0.5,0]],[16,"Model",244,[105,106,107],[1,0,0.5,0]],[16,"Model",245,[108,109,110],[1,0,0.5,0]],[16,"Model",246,[111,112,113],[1,0,0.5,0]],[16,"Model",247,[114,115,116],[1,0,0.5,0]],[16,"Model",248,[117,118,119],[1,0,0.5,0]],[16,"Model",249,[120,121,122],[1,0,0.5,0]],[16,"Model",250,[123,124,125],[1,0,0.5,0]],[16,"Model",251,[126,127,128],[1,0,0.5,0]],[16,"Model",252,[129,130,131],[1,0,0.5,0]],[16,"Model",253,[132,133,134],[1,0,0.5,0]],[94,"Box2",61,[-2698,4],[[55,true,-2697,[2433,2434],2435]],[1,10,0,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[16,"Model",254,[135,136,137],[1,0,0.5,0]],[16,"Model",255,[138,139,140],[1,0,0.5,0]],[16,"Model",256,[141,142,143],[1,0,0.5,0]],[16,"Model",257,[144,145,146],[1,0,0.5,0]],[16,"Model",258,[147,148,149],[1,0,0.5,0]],[16,"Model",259,[150,151,152],[1,0,0.5,0]],[16,"Model",260,[153,154,155],[1,0,0.5,0]],[16,"Model",261,[156,157,158],[1,0,0.5,0]],[16,"Model",262,[159,160,161],[1,0,0.5,0]],[16,"Model",263,[162,163,164],[1,0,0.5,0]],[16,"Model",264,[165,166,167],[1,0,0.5,0]],[16,"Model",265,[168,169,170],[1,0,0.5,0]],[94,"Box3",61,[-2700,5],[[55,true,-2699,[2801,2802],2803]],[1,20,0,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[16,"Model",266,[171,172,173],[1,0,0.5,0]],[16,"Model",267,[174,175,176],[1,0,0.5,0]],[16,"Model",268,[177,178,179],[1,0,0.5,0]],[16,"Model",269,[180,181,182],[1,0,0.5,0]],[16,"Model",270,[183,184,185],[1,0,0.5,0]],[16,"Model",271,[186,187,188],[1,0,0.5,0]],[16,"Model",272,[189,190,191],[1,0,0.5,0]],[16,"Model",273,[192,193,194],[1,0,0.5,0]],[16,"Model",274,[195,196,197],[1,0,0.5,0]],[16,"Model",275,[198,199,200],[1,0,0.5,0]],[16,"Model",276,[201,202,203],[1,0,0.5,0]],[16,"Model",277,[204,205,206],[1,0,0.5,0]],[40,"bg",33554432,12,[[31,-2701,[5,160,394],[0,0,1]],[140,1,1,0,1,1,-2702,2849],[54,true,-2703]]],[25,"Image_3D",33554432,12,[[31,-2704,[5,40,36],[0,0,1]],[141,0,-2705],[157,-2707,-2706]],[1,-15,-20,0],[1,0.5,0.5,1]],[13,"Model",[208,209,210]],[13,"Model",[211,212,213]],[13,"Model",[214,215,216]],[13,"Model",[217,218,219]],[13,"Model",[220,221,222]],[25,"yxjm_ts",33554432,55,[[11,-2708,[5,68,91]],[14,-2709,3026],[27,-2710]],[1,-109.795,0,0],[1,1.25,1.25,1]],[25,"ycjm_zj",33554432,55,[[11,-2711,[5,62,62]],[14,-2712,3027],[27,-2713]],[1,112.932,0,0],[1,1.25,1.25,1]],[40,"Label",33554432,55,[[11,-2714,[5,55.62,50.4]],[67,"99",50,50,true,-2715,[4,4278190080]],[158,-2716]]],[44,"Teach4",false,33554432,56,[230],[[11,-2717,[5,1334,750]],[38,45,100,100,-2718]]],[44,"Teach5",false,33554432,56,[231],[[11,-2719,[5,1334,750]],[38,45,100,100,-2720]]],[120,"ErrorFinger",33554432,54,[-2722],[[133,-2721,[0,0.5,1]]],[3,0,0,1,6.123233995736766e-17],[1,180,180,7.016709298534876e-15]],[17,"Sprite",33554432,672,[[31,-2723,[5,99,118],[0,0.5,1]],[34,-2724,[4,2667577343],3053],[55,true,-2725,[3054],3055]],[1,-15.428,-70.783,0]],[25,"yxjm_ts",33554432,26,[[11,-2726,[5,57,91]],[14,-2727,3056],[27,-2728]],[1,-109.795,0,0],[1,1.25,1.25,1]],[25,"ycjm_zj",33554432,26,[[11,-2729,[5,62,62]],[14,-2730,3057],[27,-2731]],[1,112.932,0,0],[1,1.25,1.25,1]],[40,"Label",33554432,26,[[11,-2732,[5,55.62,50.4]],[67,"99",50,50,true,-2733,[4,4278190080]],[159,-2734]]],[17,"title",33554432,8,[[11,-2735,[5,264,67]],[34,-2736,[4,4294938803],3061],[27,-2737]],[1,0,172.155,0]],[17,"yxjm_tl",33554432,8,[[11,-2738,[5,57,91]],[34,-2739,[4,4294938803],3069],[27,-2740]],[1,-82.436,72.842,0]],[17,"title",33554432,9,[[11,-2741,[5,265,67]],[34,-2742,[4,4294938803],3071],[27,-2743]],[1,0,172.155,0]],[17,"yxjm_tl",33554432,9,[[11,-2744,[5,68,91]],[34,-2745,[4,4294938803],3079],[27,-2746]],[1,-82.436,72.842,0]],[26,"WallCorner_1_1",[-2747,-2748,-2749],[1,-4.185,0,3.477]],[26,"WallCorner_1_2",[-2750,-2751,-2752],[1,-1.041,0,3.477]],[5,"Floor",18,[-2754,-2755],[[9,-2753]],[1,-2,0,5]],[7,"Model",683,[-2756,-2757,-2758]],[26,"Model",[235,236,237],[1,0,1.1,0]],[26,"Model",[238,239,240],[1,0,1.1,0]],[26,"Model",[19,20,21],[1,0,0.1,0]],[7,"FX",234,[-2759,-2760,-2761]],[2,"collider",298,[[8,true,-2762],[10,2,-2763]]],[2,"collider",300,[[8,true,-2764],[10,2,-2765]]],[2,"collider",302,[[8,true,-2766],[10,2,-2767]]],[2,"collider",304,[[8,true,-2768],[10,2,-2769]]],[2,"collider",306,[[8,true,-2770],[10,2,-2771]]],[2,"collider",308,[[8,true,-2772],[10,2,-2773]]],[2,"collider",310,[[8,true,-2774],[10,2,-2775]]],[2,"collider",312,[[8,true,-2776],[10,2,-2777]]],[2,"collider",314,[[8,true,-2778],[10,2,-2779]]],[2,"collider",316,[[8,true,-2780],[10,2,-2781]]],[2,"collider",318,[[8,true,-2782],[10,2,-2783]]],[2,"collider",320,[[8,true,-2784],[10,2,-2785]]],[2,"collider",322,[[8,true,-2786],[10,2,-2787]]],[2,"collider",324,[[8,true,-2788],[10,2,-2789]]],[2,"collider",326,[[8,true,-2790],[10,2,-2791]]],[2,"collider",328,[[8,true,-2792],[10,2,-2793]]],[2,"collider",330,[[8,true,-2794],[10,2,-2795]]],[2,"collider",332,[[8,true,-2796],[10,2,-2797]]],[2,"collider",334,[[8,true,-2798],[10,2,-2799]]],[2,"collider",336,[[8,true,-2800],[10,2,-2801]]],[2,"collider",338,[[8,true,-2802],[10,2,-2803]]],[2,"collider",340,[[8,true,-2804],[10,2,-2805]]],[2,"collider",342,[[8,true,-2806],[10,2,-2807]]],[2,"collider",344,[[8,true,-2808],[10,2,-2809]]],[2,"collider",346,[[8,true,-2810],[10,2,-2811]]],[2,"collider",348,[[8,true,-2812],[10,2,-2813]]],[2,"collider",350,[[8,true,-2814],[10,2,-2815]]],[2,"collider",352,[[8,true,-2816],[10,2,-2817]]],[2,"collider",354,[[8,true,-2818],[10,2,-2819]]],[2,"collider",356,[[8,true,-2820],[10,2,-2821]]],[2,"collider",358,[[8,true,-2822],[10,2,-2823]]],[2,"collider",360,[[8,true,-2824],[10,2,-2825]]],[2,"collider",362,[[8,true,-2826],[10,2,-2827]]],[2,"collider",364,[[8,true,-2828],[10,2,-2829]]],[2,"collider",366,[[8,true,-2830],[10,2,-2831]]],[2,"collider",368,[[8,true,-2832],[10,2,-2833]]],[2,"collider",370,[[8,true,-2834],[10,2,-2835]]],[2,"collider",372,[[8,true,-2836],[10,2,-2837]]],[2,"collider",374,[[8,true,-2838],[10,2,-2839]]],[2,"collider",376,[[8,true,-2840],[10,2,-2841]]],[2,"collider",378,[[8,true,-2842],[10,2,-2843]]],[2,"collider",380,[[8,true,-2844],[10,2,-2845]]],[2,"collider",382,[[8,true,-2846],[10,2,-2847]]],[2,"collider",384,[[8,true,-2848],[10,2,-2849]]],[2,"collider",386,[[8,true,-2850],[10,2,-2851]]],[2,"collider",388,[[8,true,-2852],[10,2,-2853]]],[2,"collider",390,[[8,true,-2854],[10,2,-2855]]],[2,"collider",392,[[8,true,-2856],[10,2,-2857]]],[2,"collider",394,[[8,true,-2858],[10,2,-2859]]],[2,"collider",396,[[8,true,-2860],[10,2,-2861]]],[2,"collider",398,[[8,true,-2862],[10,2,-2863]]],[2,"collider",400,[[8,true,-2864],[10,2,-2865]]],[2,"collider",402,[[8,true,-2866],[10,2,-2867]]],[2,"collider",404,[[8,true,-2868],[10,2,-2869]]],[2,"collider",406,[[8,true,-2870],[10,2,-2871]]],[2,"collider",408,[[8,true,-2872],[10,2,-2873]]],[2,"collider",410,[[8,true,-2874],[10,2,-2875]]],[2,"collider",412,[[8,true,-2876],[10,2,-2877]]],[2,"collider",414,[[8,true,-2878],[10,2,-2879]]],[2,"collider",416,[[8,true,-2880],[10,2,-2881]]],[2,"collider",418,[[8,true,-2882],[10,2,-2883]]],[2,"collider",420,[[8,true,-2884],[10,2,-2885]]],[2,"collider",422,[[8,true,-2886],[10,2,-2887]]],[2,"collider",424,[[8,true,-2888],[10,2,-2889]]],[2,"collider",426,[[8,true,-2890],[10,2,-2891]]],[2,"collider",428,[[8,true,-2892],[10,2,-2893]]],[2,"collider",430,[[8,true,-2894],[10,2,-2895]]],[2,"collider",432,[[8,true,-2896],[10,2,-2897]]],[2,"collider",434,[[8,true,-2898],[10,2,-2899]]],[2,"collider",436,[[8,true,-2900],[10,2,-2901]]],[2,"collider",438,[[8,true,-2902],[10,2,-2903]]],[2,"collider",440,[[8,true,-2904],[10,2,-2905]]],[2,"collider",442,[[8,true,-2906],[10,2,-2907]]],[2,"collider",444,[[8,true,-2908],[10,2,-2909]]],[2,"collider",446,[[8,true,-2910],[10,2,-2911]]],[2,"collider",448,[[8,true,-2912],[10,2,-2913]]],[2,"collider",450,[[8,true,-2914],[10,2,-2915]]],[2,"collider",452,[[8,true,-2916],[10,2,-2917]]],[2,"collider",454,[[8,true,-2918],[10,2,-2919]]],[2,"collider",456,[[8,true,-2920],[10,2,-2921]]],[2,"collider",458,[[8,true,-2922],[10,2,-2923]]],[2,"collider",460,[[8,true,-2924],[10,2,-2925]]],[2,"collider",462,[[8,true,-2926],[10,2,-2927]]],[2,"collider",464,[[8,true,-2928],[10,2,-2929]]],[2,"collider",466,[[8,true,-2930],[10,2,-2931]]],[2,"collider",468,[[8,true,-2932],[10,2,-2933]]],[2,"collider",470,[[8,true,-2934],[10,2,-2935]]],[2,"collider",472,[[8,true,-2936],[10,2,-2937]]],[2,"collider",474,[[8,true,-2938],[10,2,-2939]]],[2,"collider",476,[[8,true,-2940],[10,2,-2941]]],[2,"collider",478,[[8,true,-2942],[10,2,-2943]]],[2,"collider",480,[[8,true,-2944],[10,2,-2945]]],[2,"collider",482,[[8,true,-2946],[10,2,-2947]]],[2,"collider",484,[[8,true,-2948],[10,2,-2949]]],[2,"collider",486,[[8,true,-2950],[10,2,-2951]]],[2,"collider",488,[[8,true,-2952],[10,2,-2953]]],[2,"collider",490,[[8,true,-2954],[10,2,-2955]]],[2,"collider",492,[[8,true,-2956],[10,2,-2957]]],[2,"collider",494,[[8,true,-2958],[10,2,-2959]]],[2,"collider",496,[[8,true,-2960],[10,2,-2961]]],[2,"collider",498,[[8,true,-2962],[10,2,-2963]]],[2,"collider",500,[[8,true,-2964],[10,2,-2965]]],[2,"collider",502,[[8,true,-2966],[10,2,-2967]]],[2,"collider",504,[[8,true,-2968],[10,2,-2969]]],[2,"collider",506,[[8,true,-2970],[10,2,-2971]]],[2,"collider",508,[[8,true,-2972],[10,2,-2973]]],[2,"collider",510,[[8,true,-2974],[10,2,-2975]]],[2,"collider",512,[[8,true,-2976],[10,2,-2977]]],[2,"collider",514,[[8,true,-2978],[10,2,-2979]]],[2,"collider",516,[[8,true,-2980],[10,2,-2981]]],[2,"collider",518,[[8,true,-2982],[10,2,-2983]]],[2,"collider",520,[[8,true,-2984],[10,2,-2985]]],[2,"collider",522,[[8,true,-2986],[10,2,-2987]]],[2,"collider",524,[[8,true,-2988],[10,2,-2989]]],[2,"collider",526,[[8,true,-2990],[10,2,-2991]]],[2,"collider",528,[[8,true,-2992],[10,2,-2993]]],[2,"collider",530,[[8,true,-2994],[10,2,-2995]]],[2,"collider",532,[[8,true,-2996],[10,2,-2997]]],[2,"collider",534,[[8,true,-2998],[10,2,-2999]]],[2,"collider",536,[[8,true,-3000],[10,2,-3001]]],[2,"collider",538,[[8,true,-3002],[10,2,-3003]]],[2,"collider",540,[[8,true,-3004],[10,2,-3005]]],[2,"collider",542,[[8,true,-3006],[10,2,-3007]]],[2,"collider",544,[[8,true,-3008],[10,2,-3009]]],[2,"collider",546,[[8,true,-3010],[10,2,-3011]]],[2,"collider",548,[[8,true,-3012],[10,2,-3013]]],[2,"collider",550,[[8,true,-3014],[10,2,-3015]]],[2,"collider",552,[[8,true,-3016],[10,2,-3017]]],[2,"collider",554,[[8,true,-3018],[10,2,-3019]]],[2,"collider",556,[[8,true,-3020],[10,2,-3021]]],[2,"collider",558,[[8,true,-3022],[10,2,-3023]]],[2,"collider",560,[[8,true,-3024],[10,2,-3025]]],[2,"collider",562,[[8,true,-3026],[10,2,-3027]]],[2,"collider",564,[[8,true,-3028],[10,2,-3029]]],[2,"collider",566,[[8,true,-3030],[10,2,-3031]]],[2,"collider",568,[[8,true,-3032],[10,2,-3033]]],[2,"collider",570,[[8,true,-3034],[10,2,-3035]]],[2,"collider",572,[[8,true,-3036],[10,2,-3037]]],[2,"collider",574,[[8,true,-3038],[10,2,-3039]]],[2,"collider",576,[[8,true,-3040],[10,2,-3041]]],[2,"collider",578,[[8,true,-3042],[10,2,-3043]]],[2,"collider",580,[[8,true,-3044],[10,2,-3045]]],[2,"collider",582,[[8,true,-3046],[10,2,-3047]]],[2,"collider",584,[[8,true,-3048],[10,2,-3049]]],[2,"collider",586,[[8,true,-3050],[10,2,-3051]]],[2,"collider",588,[[8,true,-3052],[10,2,-3053]]],[2,"collider",590,[[8,true,-3054],[10,2,-3055]]],[2,"collider",592,[[8,true,-3056],[10,2,-3057]]],[2,"collider",594,[[8,true,-3058],[10,2,-3059]]],[2,"collider",596,[[8,true,-3060],[10,2,-3061]]],[5,"Donut-009",11,[608],[[15,1,1,-3062]],[1,-4,0,-1.5]],[5,"Donut",11,[609],[[15,1,1,-3063]],[1,-3,0,-1.5]],[5,"Donut-001",11,[610],[[15,1,1,-3064]],[1,-2,0,-1.5]],[5,"Donut-002",11,[611],[[15,1,1,-3065]],[1,-1,0,-1.5]],[5,"Donut-003",11,[612],[[15,1,1,-3066]],[1,0,0,-1.5]],[5,"Donut-004",11,[613],[[15,1,1,-3067]],[1,1,0,-1.5]],[5,"Donut-005",11,[614],[[15,1,1,-3068]],[1,1,0,-0.5]],[5,"Donut-006",11,[615],[[15,1,1,-3069]],[1,1,0,0.5]],[5,"Donut-007",11,[616],[[15,1,1,-3070]],[1,1,0,1.5]],[5,"Donut-008",11,[617],[[15,1,1,-3071]],[1,1,0,2.5]],[2,"collider",618,[[8,true,-3072],[20,4,2,-3073]]],[2,"collider",619,[[8,true,-3074],[20,4,2,-3075]]],[7,"Model",621,[-3076,-3077]],[2,"collider",242,[[23,-3078,[1,0,0.6,0]],[20,4,2,-3079]]],[2,"collider",243,[[23,-3080,[1,0,0.6,0]],[20,4,2,-3081]]],[2,"collider",244,[[23,-3082,[1,0,0.6,0]],[20,4,2,-3083]]],[2,"collider",245,[[23,-3084,[1,0,0.6,0]],[20,4,2,-3085]]],[2,"collider",246,[[23,-3086,[1,0,0.6,0]],[20,4,2,-3087]]],[2,"collider",247,[[23,-3088,[1,0,0.6,0]],[20,4,2,-3089]]],[2,"collider",248,[[23,-3090,[1,0,0.6,0]],[20,4,2,-3091]]],[2,"collider",249,[[23,-3092,[1,0,0.6,0]],[20,4,2,-3093]]],[2,"collider",250,[[23,-3094,[1,0,0.6,0]],[20,4,2,-3095]]],[2,"collider",251,[[23,-3096,[1,0,0.6,0]],[20,4,2,-3097]]],[2,"collider",252,[[23,-3098,[1,0,0.6,0]],[20,4,2,-3099]]],[2,"collider",253,[[23,-3100,[1,0,0.6,0]],[20,4,2,-3101]]],[7,"Model",634,[-3102,-3103]],[2,"collider",254,[[23,-3104,[1,0,0.6,0]],[20,4,2,-3105]]],[2,"collider",255,[[23,-3106,[1,0,0.6,0]],[20,4,2,-3107]]],[2,"collider",256,[[23,-3108,[1,0,0.6,0]],[20,4,2,-3109]]],[2,"collider",257,[[23,-3110,[1,0,0.6,0]],[20,4,2,-3111]]],[2,"collider",258,[[23,-3112,[1,0,0.6,0]],[20,4,2,-3113]]],[2,"collider",259,[[23,-3114,[1,0,0.6,0]],[20,4,2,-3115]]],[2,"collider",260,[[23,-3116,[1,0,0.6,0]],[20,4,2,-3117]]],[2,"collider",261,[[23,-3118,[1,0,0.6,0]],[20,4,2,-3119]]],[2,"collider",262,[[23,-3120,[1,0,0.6,0]],[20,4,2,-3121]]],[2,"collider",263,[[23,-3122,[1,0,0.6,0]],[20,4,2,-3123]]],[2,"collider",264,[[23,-3124,[1,0,0.6,0]],[20,4,2,-3125]]],[2,"collider",265,[[23,-3126,[1,0,0.6,0]],[20,4,2,-3127]]],[7,"Model",647,[-3128,-3129]],[2,"collider",266,[[23,-3130,[1,0,0.6,0]],[20,4,2,-3131]]],[2,"collider",267,[[23,-3132,[1,0,0.6,0]],[20,4,2,-3133]]],[2,"collider",268,[[23,-3134,[1,0,0.6,0]],[20,4,2,-3135]]],[2,"collider",269,[[23,-3136,[1,0,0.6,0]],[20,4,2,-3137]]],[2,"collider",270,[[23,-3138,[1,0,0.6,0]],[20,4,2,-3139]]],[2,"collider",271,[[23,-3140,[1,0,0.6,0]],[20,4,2,-3141]]],[2,"collider",272,[[23,-3142,[1,0,0.6,0]],[20,4,2,-3143]]],[2,"collider",273,[[23,-3144,[1,0,0.6,0]],[20,4,2,-3145]]],[2,"collider",274,[[23,-3146,[1,0,0.6,0]],[20,4,2,-3147]]],[2,"collider",275,[[23,-3148,[1,0,0.6,0]],[20,4,2,-3149]]],[2,"collider",276,[[23,-3150,[1,0,0.6,0]],[20,4,2,-3151]]],[2,"collider",277,[[23,-3152,[1,0,0.6,0]],[20,4,2,-3153]]],[25,"arrow4",33554432,13,[[11,-3154,[5,80,60]],[14,-3155,2804]],[1,-40,0,0],[1,-0.5,0.5,1]],[17,"step4",33554432,13,[[11,-3156,[5,91,43]],[14,-3157,2805]],[1,-128.5,0,0]],[25,"arrow3",33554432,13,[[11,-3158,[5,80,60]],[14,-3159,2806]],[1,-217,0,0],[1,-0.5,0.5,1]],[17,"step3",33554432,13,[[11,-3160,[5,129,43]],[14,-3161,2807]],[1,-324.5,0,0]],[25,"arrow2",33554432,13,[[11,-3162,[5,80,60]],[14,-3163,2808]],[1,-432,0,0],[1,-0.5,0.5,1]],[17,"step2",33554432,13,[[11,-3164,[5,91,43]],[14,-3165,2809]],[1,-520.5,0,0]],[25,"arrow1",33554432,13,[[11,-3166,[5,80,60]],[14,-3167,2810]],[1,-609,0,0],[1,-0.5,0.5,1]],[17,"step1",33554432,13,[[11,-3168,[5,91,43]],[14,-3169,2811]],[1,-697.5,0,0]],[25,"arrow4",33554432,14,[[11,-3170,[5,80,60]],[14,-3171,2813]],[1,-40,0,0],[1,-0.5,0.5,1]],[17,"step4",33554432,14,[[11,-3172,[5,91,43]],[14,-3173,2814]],[1,-128.5,0,0]],[25,"arrow3",33554432,14,[[11,-3174,[5,80,60]],[14,-3175,2815]],[1,-217,0,0],[1,-0.5,0.5,1]],[17,"step3",33554432,14,[[11,-3176,[5,129,43]],[14,-3177,2816]],[1,-324.5,0,0]],[25,"arrow2",33554432,14,[[11,-3178,[5,80,60]],[14,-3179,2817]],[1,-432,0,0],[1,-0.5,0.5,1]],[17,"step2",33554432,14,[[11,-3180,[5,91,43]],[14,-3181,2818]],[1,-520.5,0,0]],[25,"arrow1",33554432,14,[[11,-3182,[5,80,60]],[14,-3183,2819]],[1,-609,0,0],[1,-0.5,0.5,1]],[17,"step1",33554432,14,[[11,-3184,[5,91,43]],[14,-3185,2820]],[1,-697.5,0,0]],[25,"arrow4",33554432,15,[[11,-3186,[5,80,60]],[14,-3187,2822]],[1,-40,0,0],[1,-0.5,0.5,1]],[17,"step4",33554432,15,[[11,-3188,[5,91,43]],[14,-3189,2823]],[1,-128.5,0,0]],[25,"arrow3",33554432,15,[[11,-3190,[5,80,60]],[14,-3191,2824]],[1,-217,0,0],[1,-0.5,0.5,1]],[17,"step3",33554432,15,[[11,-3192,[5,129,43]],[14,-3193,2825]],[1,-324.5,0,0]],[25,"arrow2",33554432,15,[[11,-3194,[5,80,60]],[14,-3195,2826]],[1,-432,0,0],[1,-0.5,0.5,1]],[17,"step2",33554432,15,[[11,-3196,[5,91,43]],[14,-3197,2827]],[1,-520.5,0,0]],[25,"arrow1",33554432,15,[[11,-3198,[5,80,60]],[14,-3199,2828]],[1,-609,0,0],[1,-0.5,0.5,1]],[17,"step1",33554432,15,[[11,-3200,[5,91,43]],[14,-3201,2829]],[1,-697.5,0,0]],[25,"arrow4",33554432,16,[[11,-3202,[5,80,60]],[14,-3203,2831]],[1,-40,0,0],[1,-0.5,0.5,1]],[17,"step4",33554432,16,[[11,-3204,[5,91,43]],[14,-3205,2832]],[1,-128.5,0,0]],[25,"arrow3",33554432,16,[[11,-3206,[5,80,60]],[14,-3207,2833]],[1,-217,0,0],[1,-0.5,0.5,1]],[17,"step3",33554432,16,[[11,-3208,[5,129,43]],[14,-3209,2834]],[1,-324.5,0,0]],[25,"arrow2",33554432,16,[[11,-3210,[5,80,60]],[14,-3211,2835]],[1,-432,0,0],[1,-0.5,0.5,1]],[17,"step2",33554432,16,[[11,-3212,[5,91,43]],[14,-3213,2836]],[1,-520.5,0,0]],[25,"arrow1",33554432,16,[[11,-3214,[5,80,60]],[14,-3215,2837]],[1,-609,0,0],[1,-0.5,0.5,1]],[17,"step1",33554432,16,[[11,-3216,[5,91,43]],[14,-3217,2838]],[1,-697.5,0,0]],[25,"arrow4",33554432,17,[[11,-3218,[5,80,60]],[14,-3219,2840]],[1,-40,0,0],[1,-0.5,0.5,1]],[17,"step4",33554432,17,[[11,-3220,[5,91,43]],[14,-3221,2841]],[1,-128.5,0,0]],[25,"arrow3",33554432,17,[[11,-3222,[5,80,60]],[14,-3223,2842]],[1,-217,0,0],[1,-0.5,0.5,1]],[17,"step3",33554432,17,[[11,-3224,[5,129,43]],[14,-3225,2843]],[1,-324.5,0,0]],[25,"arrow2",33554432,17,[[11,-3226,[5,80,60]],[14,-3227,2844]],[1,-432,0,0],[1,-0.5,0.5,1]],[17,"step2",33554432,17,[[11,-3228,[5,91,43]],[14,-3229,2845]],[1,-520.5,0,0]],[25,"arrow1",33554432,17,[[11,-3230,[5,80,60]],[14,-3231,2846]],[1,-609,0,0],[1,-0.5,0.5,1]],[17,"step1",33554432,17,[[11,-3232,[5,91,43]],[14,-3233,2847]],[1,-697.5,0,0]],[53,"ShowTarget",207,[-3234,63],[1,32.866,0,-41.431],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[7,"Select",207,[-3235]],[57,"Donut",63,[662],[[15,4,1,-3236]],[1,0,0.75,-3.155000000000001],[3,0.36964381061438617,-0.23911761839433449,0.09904576054128764,0.8923991008325228],[1,0.8,0.8,0.8],[1,45.00000000000001,-30,0]],[57,"Donut-001",63,[663],[[15,4,1,-3237]],[1,0,0.25,-3.155000000000001],[3,0.36964381061438617,-0.23911761839433449,0.09904576054128764,0.8923991008325228],[1,0.8,0.8,0.8],[1,45.00000000000001,-30,0]],[57,"Donut-003",63,[664],[[15,4,1,-3238]],[1,0,-0.25,-3.155000000000001],[3,0.36964381061438617,-0.23911761839433449,0.09904576054128764,0.8923991008325228],[1,0.8,0.8,0.8],[1,45.00000000000001,-30,0]],[57,"Donut-002",63,[665],[[15,4,1,-3239]],[1,0,-0.75,-3.155000000000001],[3,0.36964381061438617,-0.23911761839433449,0.09904576054128764,0.8923991008325228],[1,0.8,0.8,0.8],[1,45.00000000000001,-30,0]],[57,"Donut-004",63,[666],[[15,4,1,-3240]],[1,0,-1.25,-3.155],[3,0.36964381061438617,-0.23911761839433449,0.09904576054128764,0.8923991008325228],[1,0.8,0.8,0.8],[1,45.00000000000001,-30,0]],[95,"label",33554432,64,[[11,-3241,[5,369,34]],[14,-3242,3023]],[1,0.6,0.6,1]],[40,"tips1",33554432,225,[[11,-3243,[5,765,36]],[14,-3244,3030]]],[121,"arrow_point",33554432,226,[[11,-3245,[5,127,192]],[34,-3246,[4,2701131775],3032]],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[25,"yxjm_sz",33554432,226,[[31,-3247,[5,99,118],[0,0.5,0]],[34,-3248,[4,2617245695],3033]],[1,-68.966,-52.698,0],[1,0.5,0.5,1]],[72,"arrow_point",33554432,290,[[11,-3249,[5,127,192]],[14,-3250,3036]],[1,161.472,31.895,0],[3,0,0,0.766044443118978,0.6427876096865394],[1,0,0,100]],[17,"RunTeach",33554432,290,[[11,-3251,[5,186,98]],[14,-3252,3037]],[1,6.488,0,0]],[40,"tips1",33554432,227,[[11,-3253,[5,848,36]],[14,-3254,3038]]],[17,"1",33554432,228,[[11,-3255,[5,127,192]],[34,-3256,[4,2533359615],3040]],[1,0,-56.142,0]],[72,"2",33554432,228,[[11,-3257,[5,127,192]],[34,-3258,[4,2533359615],3041]],[1,-81.889,47.74,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[17,"yxjm_sz",33554432,228,[[11,-3259,[5,99,118]],[34,-3260,[4,2617245695],3042]],[1,-156.622,0,0]],[40,"tips1",33554432,229,[[11,-3261,[5,850,36]],[14,-3262,3045]]],[72,"arrow_point",33554432,293,[[11,-3263,[5,127,192]],[14,-3264,3047]],[1,161.472,31.895,0],[3,0,0,0.766044443118978,0.6427876096865394],[1,0,0,100]],[17,"RunTeach",33554432,293,[[11,-3265,[5,186,98]],[14,-3266,3048]],[1,6.488,0,0]],[40,"tips1",33554432,230,[[11,-3267,[5,695,85]],[14,-3268,3049]]],[95,"tips1",33554432,231,[[11,-3269,[5,951,40]],[14,-3270,3051]],[1,0.9,0.9,1]],[40,"bg",33554432,8,[[11,-3271,[5,540,649]],[14,-3272,3060]]],[17,"giveUp",33554432,232,[[11,-3273,[5,111,38]],[14,-3274,3062]],[1,0,4.769,0]],[17,"Get",33554432,65,[[11,-3275,[5,111,38]],[14,-3276,3065]],[1,0,6.182,0]],[17,"gg",33554432,65,[[11,-3277,[5,36,30]],[14,-3278,3066]],[1,99.373,-20.278,0]],[17,"Label",33554432,8,[[11,-3279,[5,68.41,50.4]],[67,"+5",60,60,true,-3280,[4,4278190080]]],[1,28.674,76.325,0]],[40,"bg",33554432,9,[[11,-3281,[5,540,649]],[14,-3282,3070]]],[17,"giveUp",33554432,233,[[11,-3283,[5,111,38]],[14,-3284,3072]],[1,0,4.769,0]],[17,"Get",33554432,66,[[11,-3285,[5,111,38]],[14,-3286,3075]],[1,0,6.182,0]],[17,"gg",33554432,66,[[11,-3287,[5,36,30]],[14,-3288,3076]],[1,99.373,-20.278,0]],[17,"Label",33554432,9,[[11,-3289,[5,68.41,90.4]],[67,"+1\n",60,60,true,-3290,[4,4278190080]]],[1,28.674,55.423,0]],[7,"Scene",234,[681,682]],[3,"collider",683,[[160,true,-3291],[10,2,-3292]],[1,0,0.5,0]],[26,"Model",[-3293,-3294],[1,0,0.1,0]],[16,"End",18,[-3295,-3296],[1,2,0,5]],[122,"Donut",965,[685],[[15,1,1,-3297]],[1,0.079,0,0],[1,0.5,1,0.5]],[5,"Donut",18,[686],[[15,1,1,-3298]],[1,2,0,3.468]],[99,"1",[-3300],[-3299],[1,0,1.2,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[99,"1",[-3302],[-3301],[1,0,1.2,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[123,"cloud1","0fNTChNZlOrJzG1egTYCi6",22,[[78,"Plane<ModelComponent>",-3303,[3281],[0],3282],[161,-3304,[3283,3284,3285]]],[1,-12.292,-4,0],[1,6,6,3.5]],[96,"Camera","c9DMICJLFO5IeO07EPon7U",22,[[162,1,40,1822425087,-3305,[4,4289593088]],[165,-3306,[166,10]]],[1,-31.308,4.9,1.163],[3,-0.6035533905932737,-0.10355339059327376,-0.07945931129894554,0.7865660924854931],[1,-75,-14.999999999999998,7.951386703658792e-16]],[73,"Cam",68,[[79,3,-3307,[80,40],[81,[82],[83,[84]]],[85,[86],[87]],[88],[89]]],[1,-0.445,4.9,1.044],[3,-0.6035533905932737,-0.10355339059327374,-0.07945931129894555,0.786566092485493],[1,-75,-15,0]],[2,"Floor_1",299,[[1,-3308,[0],[0],1]]],[2,"Floor_2",299,[[1,-3309,[2],[0],3]]],[2,"Floor_3",299,[[1,-3310,[4],[0],5]]],[2,"Floor_1",301,[[1,-3311,[6],[0],7]]],[2,"Floor_2",301,[[1,-3312,[8],[0],9]]],[2,"Floor_3",301,[[1,-3313,[10],[0],11]]],[2,"Floor_1",303,[[1,-3314,[12],[0],13]]],[2,"Floor_2",303,[[1,-3315,[14],[0],15]]],[2,"Floor_3",303,[[1,-3316,[16],[0],17]]],[2,"Floor_1",305,[[1,-3317,[18],[0],19]]],[2,"Floor_2",305,[[1,-3318,[20],[0],21]]],[2,"Floor_3",305,[[1,-3319,[22],[0],23]]],[2,"Floor_1",307,[[1,-3320,[24],[0],25]]],[2,"Floor_2",307,[[1,-3321,[26],[0],27]]],[2,"Floor_3",307,[[1,-3322,[28],[0],29]]],[2,"Floor_1",309,[[1,-3323,[30],[0],31]]],[2,"Floor_2",309,[[1,-3324,[32],[0],33]]],[2,"Floor_3",309,[[1,-3325,[34],[0],35]]],[2,"Floor_1",311,[[1,-3326,[36],[0],37]]],[2,"Floor_2",311,[[1,-3327,[38],[0],39]]],[2,"Floor_3",311,[[1,-3328,[40],[0],41]]],[2,"Floor_1",313,[[1,-3329,[42],[0],43]]],[2,"Floor_2",313,[[1,-3330,[44],[0],45]]],[2,"Floor_3",313,[[1,-3331,[46],[0],47]]],[2,"Floor_1",315,[[1,-3332,[48],[0],49]]],[2,"Floor_2",315,[[1,-3333,[50],[0],51]]],[2,"Floor_3",315,[[1,-3334,[52],[0],53]]],[2,"Floor_1",317,[[1,-3335,[54],[0],55]]],[2,"Floor_2",317,[[1,-3336,[56],[0],57]]],[2,"Floor_3",317,[[1,-3337,[58],[0],59]]],[2,"Floor_1",319,[[1,-3338,[60],[0],61]]],[2,"Floor_2",319,[[1,-3339,[62],[0],63]]],[2,"Floor_3",319,[[1,-3340,[64],[0],65]]],[2,"Floor_1",321,[[1,-3341,[66],[0],67]]],[2,"Floor_2",321,[[1,-3342,[68],[0],69]]],[2,"Floor_3",321,[[1,-3343,[70],[0],71]]],[2,"Floor_1",323,[[1,-3344,[72],[0],73]]],[2,"Floor_2",323,[[1,-3345,[74],[0],75]]],[2,"Floor_3",323,[[1,-3346,[76],[0],77]]],[2,"Floor_1",325,[[1,-3347,[78],[0],79]]],[2,"Floor_2",325,[[1,-3348,[80],[0],81]]],[2,"Floor_3",325,[[1,-3349,[82],[0],83]]],[2,"Floor_1",327,[[1,-3350,[84],[0],85]]],[2,"Floor_2",327,[[1,-3351,[86],[0],87]]],[2,"Floor_3",327,[[1,-3352,[88],[0],89]]],[2,"Floor_1",329,[[1,-3353,[90],[0],91]]],[2,"Floor_2",329,[[1,-3354,[92],[0],93]]],[2,"Floor_3",329,[[1,-3355,[94],[0],95]]],[2,"Floor_1",331,[[1,-3356,[96],[0],97]]],[2,"Floor_2",331,[[1,-3357,[98],[0],99]]],[2,"Floor_3",331,[[1,-3358,[100],[0],101]]],[2,"Floor_1",333,[[1,-3359,[102],[0],103]]],[2,"Floor_2",333,[[1,-3360,[104],[0],105]]],[2,"Floor_3",333,[[1,-3361,[106],[0],107]]],[2,"Floor_1",335,[[1,-3362,[108],[0],109]]],[2,"Floor_2",335,[[1,-3363,[110],[0],111]]],[2,"Floor_3",335,[[1,-3364,[112],[0],113]]],[2,"Floor_1",337,[[1,-3365,[114],[0],115]]],[2,"Floor_2",337,[[1,-3366,[116],[0],117]]],[2,"Floor_3",337,[[1,-3367,[118],[0],119]]],[2,"Floor_1",339,[[1,-3368,[120],[0],121]]],[2,"Floor_2",339,[[1,-3369,[122],[0],123]]],[2,"Floor_3",339,[[1,-3370,[124],[0],125]]],[2,"Floor_1",341,[[1,-3371,[126],[0],127]]],[2,"Floor_2",341,[[1,-3372,[128],[0],129]]],[2,"Floor_3",341,[[1,-3373,[130],[0],131]]],[2,"Floor_1",343,[[1,-3374,[132],[0],133]]],[2,"Floor_2",343,[[1,-3375,[134],[0],135]]],[2,"Floor_3",343,[[1,-3376,[136],[0],137]]],[2,"Floor_1",345,[[1,-3377,[138],[0],139]]],[2,"Floor_2",345,[[1,-3378,[140],[0],141]]],[2,"Floor_3",345,[[1,-3379,[142],[0],143]]],[2,"Floor_1",347,[[1,-3380,[144],[0],145]]],[2,"Floor_2",347,[[1,-3381,[146],[0],147]]],[2,"Floor_3",347,[[1,-3382,[148],[0],149]]],[2,"Floor_1",349,[[1,-3383,[150],[0],151]]],[2,"Floor_2",349,[[1,-3384,[152],[0],153]]],[2,"Floor_3",349,[[1,-3385,[154],[0],155]]],[2,"Floor_1",351,[[1,-3386,[156],[0],157]]],[2,"Floor_2",351,[[1,-3387,[158],[0],159]]],[2,"Floor_3",351,[[1,-3388,[160],[0],161]]],[2,"Floor_1",353,[[1,-3389,[162],[0],163]]],[2,"Floor_2",353,[[1,-3390,[164],[0],165]]],[2,"Floor_3",353,[[1,-3391,[166],[0],167]]],[2,"Floor_1",355,[[1,-3392,[168],[0],169]]],[2,"Floor_2",355,[[1,-3393,[170],[0],171]]],[2,"Floor_3",355,[[1,-3394,[172],[0],173]]],[2,"Floor_1",357,[[1,-3395,[174],[0],175]]],[2,"Floor_2",357,[[1,-3396,[176],[0],177]]],[2,"Floor_3",357,[[1,-3397,[178],[0],179]]],[2,"Floor_1",359,[[1,-3398,[180],[0],181]]],[2,"Floor_2",359,[[1,-3399,[182],[0],183]]],[2,"Floor_3",359,[[1,-3400,[184],[0],185]]],[2,"Floor_1",361,[[1,-3401,[186],[0],187]]],[2,"Floor_2",361,[[1,-3402,[188],[0],189]]],[2,"Floor_3",361,[[1,-3403,[190],[0],191]]],[2,"Floor_1",363,[[1,-3404,[192],[0],193]]],[2,"Floor_2",363,[[1,-3405,[194],[0],195]]],[2,"Floor_3",363,[[1,-3406,[196],[0],197]]],[2,"Floor_1",365,[[1,-3407,[198],[0],199]]],[2,"Floor_2",365,[[1,-3408,[200],[0],201]]],[2,"Floor_3",365,[[1,-3409,[202],[0],203]]],[2,"Floor_1",367,[[1,-3410,[204],[0],205]]],[2,"Floor_2",367,[[1,-3411,[206],[0],207]]],[2,"Floor_3",367,[[1,-3412,[208],[0],209]]],[2,"Floor_1",369,[[1,-3413,[210],[0],211]]],[2,"Floor_2",369,[[1,-3414,[212],[0],213]]],[2,"Floor_3",369,[[1,-3415,[214],[0],215]]],[2,"Floor_1",371,[[1,-3416,[216],[0],217]]],[2,"Floor_2",371,[[1,-3417,[218],[0],219]]],[2,"Floor_3",371,[[1,-3418,[220],[0],221]]],[2,"Floor_1",373,[[1,-3419,[222],[0],223]]],[2,"Floor_2",373,[[1,-3420,[224],[0],225]]],[2,"Floor_3",373,[[1,-3421,[226],[0],227]]],[2,"Floor_1",375,[[1,-3422,[228],[0],229]]],[2,"Floor_2",375,[[1,-3423,[230],[0],231]]],[2,"Floor_3",375,[[1,-3424,[232],[0],233]]],[2,"Floor_1",377,[[1,-3425,[234],[0],235]]],[2,"Floor_2",377,[[1,-3426,[236],[0],237]]],[2,"Floor_3",377,[[1,-3427,[238],[0],239]]],[2,"Floor_1",379,[[1,-3428,[240],[0],241]]],[2,"Floor_2",379,[[1,-3429,[242],[0],243]]],[2,"Floor_3",379,[[1,-3430,[244],[0],245]]],[2,"Floor_1",381,[[1,-3431,[246],[0],247]]],[2,"Floor_2",381,[[1,-3432,[248],[0],249]]],[2,"Floor_3",381,[[1,-3433,[250],[0],251]]],[2,"Floor_1",383,[[1,-3434,[252],[0],253]]],[2,"Floor_2",383,[[1,-3435,[254],[0],255]]],[2,"Floor_3",383,[[1,-3436,[256],[0],257]]],[2,"Floor_1",385,[[1,-3437,[258],[0],259]]],[2,"Floor_2",385,[[1,-3438,[260],[0],261]]],[2,"Floor_3",385,[[1,-3439,[262],[0],263]]],[2,"Floor_1",387,[[1,-3440,[264],[0],265]]],[2,"Floor_2",387,[[1,-3441,[266],[0],267]]],[2,"Floor_3",387,[[1,-3442,[268],[0],269]]],[2,"Floor_1",389,[[1,-3443,[270],[0],271]]],[2,"Floor_2",389,[[1,-3444,[272],[0],273]]],[2,"Floor_3",389,[[1,-3445,[274],[0],275]]],[2,"Floor_1",391,[[1,-3446,[276],[0],277]]],[2,"Floor_2",391,[[1,-3447,[278],[0],279]]],[2,"Floor_3",391,[[1,-3448,[280],[0],281]]],[2,"Floor_1",393,[[1,-3449,[282],[0],283]]],[2,"Floor_2",393,[[1,-3450,[284],[0],285]]],[2,"Floor_3",393,[[1,-3451,[286],[0],287]]],[2,"Floor_1",395,[[1,-3452,[288],[0],289]]],[2,"Floor_2",395,[[1,-3453,[290],[0],291]]],[2,"Floor_3",395,[[1,-3454,[292],[0],293]]],[2,"Floor_1",397,[[1,-3455,[294],[0],295]]],[2,"Floor_2",397,[[1,-3456,[296],[0],297]]],[2,"Floor_3",397,[[1,-3457,[298],[0],299]]],[2,"Floor_1",399,[[1,-3458,[300],[0],301]]],[2,"Floor_2",399,[[1,-3459,[302],[0],303]]],[2,"Floor_3",399,[[1,-3460,[304],[0],305]]],[2,"Floor_1",401,[[1,-3461,[306],[0],307]]],[2,"Floor_2",401,[[1,-3462,[308],[0],309]]],[2,"Floor_3",401,[[1,-3463,[310],[0],311]]],[2,"Floor_1",403,[[1,-3464,[312],[0],313]]],[2,"Floor_2",403,[[1,-3465,[314],[0],315]]],[2,"Floor_3",403,[[1,-3466,[316],[0],317]]],[2,"Floor_1",405,[[1,-3467,[318],[0],319]]],[2,"Floor_2",405,[[1,-3468,[320],[0],321]]],[2,"Floor_3",405,[[1,-3469,[322],[0],323]]],[2,"Floor_1",407,[[1,-3470,[324],[0],325]]],[2,"Floor_2",407,[[1,-3471,[326],[0],327]]],[2,"Floor_3",407,[[1,-3472,[328],[0],329]]],[2,"Floor_1",409,[[1,-3473,[330],[0],331]]],[2,"Floor_2",409,[[1,-3474,[332],[0],333]]],[2,"Floor_3",409,[[1,-3475,[334],[0],335]]],[2,"Floor_1",411,[[1,-3476,[336],[0],337]]],[2,"Floor_2",411,[[1,-3477,[338],[0],339]]],[2,"Floor_3",411,[[1,-3478,[340],[0],341]]],[2,"Floor_1",413,[[1,-3479,[342],[0],343]]],[2,"Floor_2",413,[[1,-3480,[344],[0],345]]],[2,"Floor_3",413,[[1,-3481,[346],[0],347]]],[2,"Floor_1",415,[[1,-3482,[348],[0],349]]],[2,"Floor_2",415,[[1,-3483,[350],[0],351]]],[2,"Floor_3",415,[[1,-3484,[352],[0],353]]],[2,"Floor_1",417,[[1,-3485,[354],[0],355]]],[2,"Floor_2",417,[[1,-3486,[356],[0],357]]],[2,"Floor_3",417,[[1,-3487,[358],[0],359]]],[2,"Floor_1",419,[[1,-3488,[360],[0],361]]],[2,"Floor_2",419,[[1,-3489,[362],[0],363]]],[2,"Floor_3",419,[[1,-3490,[364],[0],365]]],[2,"Floor_1",421,[[1,-3491,[366],[0],367]]],[2,"Floor_2",421,[[1,-3492,[368],[0],369]]],[2,"Floor_3",421,[[1,-3493,[370],[0],371]]],[2,"Floor_1",423,[[1,-3494,[372],[0],373]]],[2,"Floor_2",423,[[1,-3495,[374],[0],375]]],[2,"Floor_3",423,[[1,-3496,[376],[0],377]]],[2,"Floor_1",425,[[1,-3497,[378],[0],379]]],[2,"Floor_2",425,[[1,-3498,[380],[0],381]]],[2,"Floor_3",425,[[1,-3499,[382],[0],383]]],[2,"Floor_1",427,[[1,-3500,[384],[0],385]]],[2,"Floor_2",427,[[1,-3501,[386],[0],387]]],[2,"Floor_3",427,[[1,-3502,[388],[0],389]]],[2,"Floor_1",429,[[1,-3503,[390],[0],391]]],[2,"Floor_2",429,[[1,-3504,[392],[0],393]]],[2,"Floor_3",429,[[1,-3505,[394],[0],395]]],[2,"Floor_1",431,[[1,-3506,[396],[0],397]]],[2,"Floor_2",431,[[1,-3507,[398],[0],399]]],[2,"Floor_3",431,[[1,-3508,[400],[0],401]]],[2,"Floor_1",433,[[1,-3509,[402],[0],403]]],[2,"Floor_2",433,[[1,-3510,[404],[0],405]]],[2,"Floor_3",433,[[1,-3511,[406],[0],407]]],[2,"Floor_1",435,[[1,-3512,[408],[0],409]]],[2,"Floor_2",435,[[1,-3513,[410],[0],411]]],[2,"Floor_3",435,[[1,-3514,[412],[0],413]]],[2,"Floor_1",437,[[1,-3515,[414],[0],415]]],[2,"Floor_2",437,[[1,-3516,[416],[0],417]]],[2,"Floor_3",437,[[1,-3517,[418],[0],419]]],[2,"Floor_1",439,[[1,-3518,[420],[0],421]]],[2,"Floor_2",439,[[1,-3519,[422],[0],423]]],[2,"Floor_3",439,[[1,-3520,[424],[0],425]]],[2,"Floor_1",441,[[1,-3521,[426],[0],427]]],[2,"Floor_2",441,[[1,-3522,[428],[0],429]]],[2,"Floor_3",441,[[1,-3523,[430],[0],431]]],[2,"Floor_1",443,[[1,-3524,[432],[0],433]]],[2,"Floor_2",443,[[1,-3525,[434],[0],435]]],[2,"Floor_3",443,[[1,-3526,[436],[0],437]]],[2,"Floor_1",445,[[1,-3527,[438],[0],439]]],[2,"Floor_2",445,[[1,-3528,[440],[0],441]]],[2,"Floor_3",445,[[1,-3529,[442],[0],443]]],[2,"Floor_1",447,[[1,-3530,[444],[0],445]]],[2,"Floor_2",447,[[1,-3531,[446],[0],447]]],[2,"Floor_3",447,[[1,-3532,[448],[0],449]]],[2,"Floor_1",449,[[1,-3533,[450],[0],451]]],[2,"Floor_2",449,[[1,-3534,[452],[0],453]]],[2,"Floor_3",449,[[1,-3535,[454],[0],455]]],[2,"Floor_1",451,[[1,-3536,[456],[0],457]]],[2,"Floor_2",451,[[1,-3537,[458],[0],459]]],[2,"Floor_3",451,[[1,-3538,[460],[0],461]]],[2,"Floor_1",453,[[1,-3539,[462],[0],463]]],[2,"Floor_2",453,[[1,-3540,[464],[0],465]]],[2,"Floor_3",453,[[1,-3541,[466],[0],467]]],[2,"Floor_1",455,[[1,-3542,[468],[0],469]]],[2,"Floor_2",455,[[1,-3543,[470],[0],471]]],[2,"Floor_3",455,[[1,-3544,[472],[0],473]]],[2,"Floor_1",457,[[1,-3545,[474],[0],475]]],[2,"Floor_2",457,[[1,-3546,[476],[0],477]]],[2,"Floor_3",457,[[1,-3547,[478],[0],479]]],[2,"Floor_1",459,[[1,-3548,[480],[0],481]]],[2,"Floor_2",459,[[1,-3549,[482],[0],483]]],[2,"Floor_3",459,[[1,-3550,[484],[0],485]]],[2,"Floor_1",461,[[1,-3551,[486],[0],487]]],[2,"Floor_2",461,[[1,-3552,[488],[0],489]]],[2,"Floor_3",461,[[1,-3553,[490],[0],491]]],[2,"Floor_1",463,[[1,-3554,[492],[0],493]]],[2,"Floor_2",463,[[1,-3555,[494],[0],495]]],[2,"Floor_3",463,[[1,-3556,[496],[0],497]]],[2,"Floor_1",465,[[1,-3557,[498],[0],499]]],[2,"Floor_2",465,[[1,-3558,[500],[0],501]]],[2,"Floor_3",465,[[1,-3559,[502],[0],503]]],[2,"Floor_1",467,[[1,-3560,[504],[0],505]]],[2,"Floor_2",467,[[1,-3561,[506],[0],507]]],[2,"Floor_3",467,[[1,-3562,[508],[0],509]]],[2,"Floor_1",469,[[1,-3563,[510],[0],511]]],[2,"Floor_2",469,[[1,-3564,[512],[0],513]]],[2,"Floor_3",469,[[1,-3565,[514],[0],515]]],[2,"Floor_1",471,[[1,-3566,[516],[0],517]]],[2,"Floor_2",471,[[1,-3567,[518],[0],519]]],[2,"Floor_3",471,[[1,-3568,[520],[0],521]]],[2,"Floor_1",473,[[1,-3569,[522],[0],523]]],[2,"Floor_2",473,[[1,-3570,[524],[0],525]]],[2,"Floor_3",473,[[1,-3571,[526],[0],527]]],[2,"Floor_1",475,[[1,-3572,[528],[0],529]]],[2,"Floor_2",475,[[1,-3573,[530],[0],531]]],[2,"Floor_3",475,[[1,-3574,[532],[0],533]]],[2,"Floor_1",477,[[1,-3575,[534],[0],535]]],[2,"Floor_2",477,[[1,-3576,[536],[0],537]]],[2,"Floor_3",477,[[1,-3577,[538],[0],539]]],[2,"Floor_1",479,[[1,-3578,[540],[0],541]]],[2,"Floor_2",479,[[1,-3579,[542],[0],543]]],[2,"Floor_3",479,[[1,-3580,[544],[0],545]]],[2,"Floor_1",481,[[1,-3581,[546],[0],547]]],[2,"Floor_2",481,[[1,-3582,[548],[0],549]]],[2,"Floor_3",481,[[1,-3583,[550],[0],551]]],[2,"Floor_1",483,[[1,-3584,[552],[0],553]]],[2,"Floor_2",483,[[1,-3585,[554],[0],555]]],[2,"Floor_3",483,[[1,-3586,[556],[0],557]]],[2,"Floor_1",485,[[1,-3587,[558],[0],559]]],[2,"Floor_2",485,[[1,-3588,[560],[0],561]]],[2,"Floor_3",485,[[1,-3589,[562],[0],563]]],[2,"Floor_1",487,[[1,-3590,[564],[0],565]]],[2,"Floor_2",487,[[1,-3591,[566],[0],567]]],[2,"Floor_3",487,[[1,-3592,[568],[0],569]]],[2,"Floor_1",489,[[1,-3593,[570],[0],571]]],[2,"Floor_2",489,[[1,-3594,[572],[0],573]]],[2,"Floor_3",489,[[1,-3595,[574],[0],575]]],[2,"Floor_1",491,[[1,-3596,[576],[0],577]]],[2,"Floor_2",491,[[1,-3597,[578],[0],579]]],[2,"Floor_3",491,[[1,-3598,[580],[0],581]]],[2,"Floor_1",493,[[1,-3599,[582],[0],583]]],[2,"Floor_2",493,[[1,-3600,[584],[0],585]]],[2,"Floor_3",493,[[1,-3601,[586],[0],587]]],[2,"Floor_1",495,[[1,-3602,[588],[0],589]]],[2,"Floor_2",495,[[1,-3603,[590],[0],591]]],[2,"Floor_3",495,[[1,-3604,[592],[0],593]]],[2,"Floor_1",497,[[1,-3605,[594],[0],595]]],[2,"Floor_2",497,[[1,-3606,[596],[0],597]]],[2,"Floor_3",497,[[1,-3607,[598],[0],599]]],[2,"Floor_1",499,[[1,-3608,[600],[0],601]]],[2,"Floor_2",499,[[1,-3609,[602],[0],603]]],[2,"Floor_3",499,[[1,-3610,[604],[0],605]]],[2,"Floor_1",501,[[1,-3611,[606],[0],607]]],[2,"Floor_2",501,[[1,-3612,[608],[0],609]]],[2,"Floor_3",501,[[1,-3613,[610],[0],611]]],[2,"Floor_1",503,[[1,-3614,[612],[0],613]]],[2,"Floor_2",503,[[1,-3615,[614],[0],615]]],[2,"Floor_3",503,[[1,-3616,[616],[0],617]]],[2,"Floor_1",505,[[1,-3617,[618],[0],619]]],[2,"Floor_2",505,[[1,-3618,[620],[0],621]]],[2,"Floor_3",505,[[1,-3619,[622],[0],623]]],[2,"Floor_1",507,[[1,-3620,[624],[0],625]]],[2,"Floor_2",507,[[1,-3621,[626],[0],627]]],[2,"Floor_3",507,[[1,-3622,[628],[0],629]]],[2,"Floor_1",509,[[1,-3623,[630],[0],631]]],[2,"Floor_2",509,[[1,-3624,[632],[0],633]]],[2,"Floor_3",509,[[1,-3625,[634],[0],635]]],[2,"Floor_1",511,[[1,-3626,[636],[0],637]]],[2,"Floor_2",511,[[1,-3627,[638],[0],639]]],[2,"Floor_3",511,[[1,-3628,[640],[0],641]]],[2,"Floor_1",513,[[1,-3629,[642],[0],643]]],[2,"Floor_2",513,[[1,-3630,[644],[0],645]]],[2,"Floor_3",513,[[1,-3631,[646],[0],647]]],[2,"Floor_1",515,[[1,-3632,[648],[0],649]]],[2,"Floor_2",515,[[1,-3633,[650],[0],651]]],[2,"Floor_3",515,[[1,-3634,[652],[0],653]]],[2,"Floor_1",517,[[1,-3635,[654],[0],655]]],[2,"Floor_2",517,[[1,-3636,[656],[0],657]]],[2,"Floor_3",517,[[1,-3637,[658],[0],659]]],[2,"Floor_1",519,[[1,-3638,[660],[0],661]]],[2,"Floor_2",519,[[1,-3639,[662],[0],663]]],[2,"Floor_3",519,[[1,-3640,[664],[0],665]]],[2,"Floor_1",521,[[1,-3641,[666],[0],667]]],[2,"Floor_2",521,[[1,-3642,[668],[0],669]]],[2,"Floor_3",521,[[1,-3643,[670],[0],671]]],[2,"Floor_1",523,[[1,-3644,[672],[0],673]]],[2,"Floor_2",523,[[1,-3645,[674],[0],675]]],[2,"Floor_3",523,[[1,-3646,[676],[0],677]]],[2,"Floor_1",525,[[1,-3647,[678],[0],679]]],[2,"Floor_2",525,[[1,-3648,[680],[0],681]]],[2,"Floor_3",525,[[1,-3649,[682],[0],683]]],[2,"Floor_1",527,[[1,-3650,[684],[0],685]]],[2,"Floor_2",527,[[1,-3651,[686],[0],687]]],[2,"Floor_3",527,[[1,-3652,[688],[0],689]]],[2,"Floor_1",529,[[1,-3653,[690],[0],691]]],[2,"Floor_2",529,[[1,-3654,[692],[0],693]]],[2,"Floor_3",529,[[1,-3655,[694],[0],695]]],[2,"Floor_1",531,[[1,-3656,[696],[0],697]]],[2,"Floor_2",531,[[1,-3657,[698],[0],699]]],[2,"Floor_3",531,[[1,-3658,[700],[0],701]]],[2,"Floor_1",533,[[1,-3659,[702],[0],703]]],[2,"Floor_2",533,[[1,-3660,[704],[0],705]]],[2,"Floor_3",533,[[1,-3661,[706],[0],707]]],[2,"Floor_1",535,[[1,-3662,[708],[0],709]]],[2,"Floor_2",535,[[1,-3663,[710],[0],711]]],[2,"Floor_3",535,[[1,-3664,[712],[0],713]]],[2,"Floor_1",537,[[1,-3665,[714],[0],715]]],[2,"Floor_2",537,[[1,-3666,[716],[0],717]]],[2,"Floor_3",537,[[1,-3667,[718],[0],719]]],[2,"Floor_1",539,[[1,-3668,[720],[0],721]]],[2,"Floor_2",539,[[1,-3669,[722],[0],723]]],[2,"Floor_3",539,[[1,-3670,[724],[0],725]]],[2,"Floor_1",541,[[1,-3671,[726],[0],727]]],[2,"Floor_2",541,[[1,-3672,[728],[0],729]]],[2,"Floor_3",541,[[1,-3673,[730],[0],731]]],[2,"Floor_1",543,[[1,-3674,[732],[0],733]]],[2,"Floor_2",543,[[1,-3675,[734],[0],735]]],[2,"Floor_3",543,[[1,-3676,[736],[0],737]]],[2,"Floor_1",545,[[1,-3677,[738],[0],739]]],[2,"Floor_2",545,[[1,-3678,[740],[0],741]]],[2,"Floor_3",545,[[1,-3679,[742],[0],743]]],[2,"Floor_1",547,[[1,-3680,[744],[0],745]]],[2,"Floor_2",547,[[1,-3681,[746],[0],747]]],[2,"Floor_3",547,[[1,-3682,[748],[0],749]]],[2,"Floor_1",549,[[1,-3683,[750],[0],751]]],[2,"Floor_2",549,[[1,-3684,[752],[0],753]]],[2,"Floor_3",549,[[1,-3685,[754],[0],755]]],[2,"Floor_1",551,[[1,-3686,[756],[0],757]]],[2,"Floor_2",551,[[1,-3687,[758],[0],759]]],[2,"Floor_3",551,[[1,-3688,[760],[0],761]]],[2,"Floor_1",553,[[1,-3689,[762],[0],763]]],[2,"Floor_2",553,[[1,-3690,[764],[0],765]]],[2,"Floor_3",553,[[1,-3691,[766],[0],767]]],[2,"Floor_1",555,[[1,-3692,[768],[0],769]]],[2,"Floor_2",555,[[1,-3693,[770],[0],771]]],[2,"Floor_3",555,[[1,-3694,[772],[0],773]]],[2,"Floor_1",557,[[1,-3695,[774],[0],775]]],[2,"Floor_2",557,[[1,-3696,[776],[0],777]]],[2,"Floor_3",557,[[1,-3697,[778],[0],779]]],[2,"Floor_1",559,[[1,-3698,[780],[0],781]]],[2,"Floor_2",559,[[1,-3699,[782],[0],783]]],[2,"Floor_3",559,[[1,-3700,[784],[0],785]]],[2,"Floor_1",561,[[1,-3701,[786],[0],787]]],[2,"Floor_2",561,[[1,-3702,[788],[0],789]]],[2,"Floor_3",561,[[1,-3703,[790],[0],791]]],[2,"Floor_1",563,[[1,-3704,[792],[0],793]]],[2,"Floor_2",563,[[1,-3705,[794],[0],795]]],[2,"Floor_3",563,[[1,-3706,[796],[0],797]]],[2,"Floor_1",565,[[1,-3707,[798],[0],799]]],[2,"Floor_2",565,[[1,-3708,[800],[0],801]]],[2,"Floor_3",565,[[1,-3709,[802],[0],803]]],[2,"Floor_1",567,[[1,-3710,[804],[0],805]]],[2,"Floor_2",567,[[1,-3711,[806],[0],807]]],[2,"Floor_3",567,[[1,-3712,[808],[0],809]]],[2,"Floor_1",569,[[1,-3713,[810],[0],811]]],[2,"Floor_2",569,[[1,-3714,[812],[0],813]]],[2,"Floor_3",569,[[1,-3715,[814],[0],815]]],[2,"Floor_1",571,[[1,-3716,[816],[0],817]]],[2,"Floor_2",571,[[1,-3717,[818],[0],819]]],[2,"Floor_3",571,[[1,-3718,[820],[0],821]]],[2,"Floor_1",573,[[1,-3719,[822],[0],823]]],[2,"Floor_2",573,[[1,-3720,[824],[0],825]]],[2,"Floor_3",573,[[1,-3721,[826],[0],827]]],[2,"Floor_1",575,[[1,-3722,[828],[0],829]]],[2,"Floor_2",575,[[1,-3723,[830],[0],831]]],[2,"Floor_3",575,[[1,-3724,[832],[0],833]]],[2,"Floor_1",577,[[1,-3725,[834],[0],835]]],[2,"Floor_2",577,[[1,-3726,[836],[0],837]]],[2,"Floor_3",577,[[1,-3727,[838],[0],839]]],[2,"Floor_1",579,[[1,-3728,[840],[0],841]]],[2,"Floor_2",579,[[1,-3729,[842],[0],843]]],[2,"Floor_3",579,[[1,-3730,[844],[0],845]]],[2,"Floor_1",581,[[1,-3731,[846],[0],847]]],[2,"Floor_2",581,[[1,-3732,[848],[0],849]]],[2,"Floor_3",581,[[1,-3733,[850],[0],851]]],[2,"Floor_1",583,[[1,-3734,[852],[0],853]]],[2,"Floor_2",583,[[1,-3735,[854],[0],855]]],[2,"Floor_3",583,[[1,-3736,[856],[0],857]]],[2,"Floor_1",585,[[1,-3737,[858],[0],859]]],[2,"Floor_2",585,[[1,-3738,[860],[0],861]]],[2,"Floor_3",585,[[1,-3739,[862],[0],863]]],[2,"Floor_1",587,[[1,-3740,[864],[0],865]]],[2,"Floor_2",587,[[1,-3741,[866],[0],867]]],[2,"Floor_3",587,[[1,-3742,[868],[0],869]]],[2,"Floor_1",589,[[1,-3743,[870],[0],871]]],[2,"Floor_2",589,[[1,-3744,[872],[0],873]]],[2,"Floor_3",589,[[1,-3745,[874],[0],875]]],[2,"Floor_1",591,[[1,-3746,[876],[0],877]]],[2,"Floor_2",591,[[1,-3747,[878],[0],879]]],[2,"Floor_3",591,[[1,-3748,[880],[0],881]]],[2,"Floor_1",593,[[1,-3749,[882],[0],883]]],[2,"Floor_2",593,[[1,-3750,[884],[0],885]]],[2,"Floor_3",593,[[1,-3751,[886],[0],887]]],[2,"Floor_1",595,[[1,-3752,[888],[0],889]]],[2,"Floor_2",595,[[1,-3753,[890],[0],891]]],[2,"Floor_3",595,[[1,-3754,[892],[0],893]]],[2,"Floor_1",597,[[1,-3755,[894],[0],895]]],[2,"Floor_2",597,[[1,-3756,[896],[0],897]]],[2,"Floor_3",597,[[1,-3757,[898],[0],899]]],[16,"Road",10,[598],[1,-4,0,-1.5]],[2,"Bottom",23,[[1,-3758,[900],[0],901]]],[3,"Up",23,[[1,-3759,[902],[0],903]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",23,[[1,-3760,[904,905],[0],906]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",23,[[1,-3761,[907],[0],908]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Side_Back",23,[[1,-3762,[909],[0],910]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",23,[[1,-3763,[911],[0],912]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",23,[[1,-3764,[913],[0],914]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",23,[[1,-3765,[915],[0],916]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",23,[[1,-3766,[917],[0],918]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",24,[[1,-3767,[919],[0],920]]],[3,"Up",24,[[1,-3768,[921],[0],922]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",24,[[1,-3769,[923],[0],924]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",24,[[1,-3770,[925],[0],926]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Side_Back",24,[[1,-3771,[927],[0],928]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",24,[[1,-3772,[929],[0],930]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",24,[[1,-3773,[931],[0],932]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",24,[[1,-3774,[933],[0],934]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",24,[[1,-3775,[935],[0],936]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",25,[[1,-3776,[937],[0],938]]],[3,"Up",25,[[1,-3777,[939],[0],940]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",25,[[1,-3778,[941],[0],942]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",25,[[1,-3779,[943],[0],944]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Side_Back",25,[[1,-3780,[945],[0],946]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",25,[[1,-3781,[947],[0],948]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",25,[[1,-3782,[949],[0],950]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",25,[[1,-3783,[951],[0],952]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",25,[[1,-3784,[953],[0],954]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[16,"Road-002",10,[599],[1,-3,0,-1.5]],[2,"Bottom",27,[[1,-3785,[955],[0],956]]],[3,"Up",27,[[1,-3786,[957],[0],958]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",27,[[1,-3787,[959,960],[0],961]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",27,[[1,-3788,[962],[0],963]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",27,[[1,-3789,[964],[0],965]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",27,[[1,-3790,[966],[0],967]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",27,[[1,-3791,[968],[0],969]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",27,[[1,-3792,[970],[0],971]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",28,[[1,-3793,[972],[0],973]]],[3,"Up",28,[[1,-3794,[974],[0],975]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",28,[[1,-3795,[976],[0],977]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",28,[[1,-3796,[978],[0],979]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",28,[[1,-3797,[980],[0],981]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",28,[[1,-3798,[982],[0],983]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",28,[[1,-3799,[984],[0],985]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",28,[[1,-3800,[986],[0],987]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",29,[[1,-3801,[988],[0],989]]],[3,"Up",29,[[1,-3802,[990],[0],991]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",29,[[1,-3803,[992],[0],993]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",29,[[1,-3804,[994],[0],995]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",29,[[1,-3805,[996],[0],997]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",29,[[1,-3806,[998],[0],999]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",29,[[1,-3807,[1000],[0],1001]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",29,[[1,-3808,[1002],[0],1003]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[16,"Road-003",10,[600],[1,-2,0,-1.5]],[2,"Bottom",30,[[1,-3809,[1004],[0],1005]]],[3,"Up",30,[[1,-3810,[1006],[0],1007]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",30,[[1,-3811,[1008,1009],[0],1010]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",30,[[1,-3812,[1011],[0],1012]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",30,[[1,-3813,[1013],[0],1014]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",30,[[1,-3814,[1015],[0],1016]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",30,[[1,-3815,[1017],[0],1018]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",30,[[1,-3816,[1019],[0],1020]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",31,[[1,-3817,[1021],[0],1022]]],[3,"Up",31,[[1,-3818,[1023],[0],1024]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",31,[[1,-3819,[1025],[0],1026]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",31,[[1,-3820,[1027],[0],1028]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",31,[[1,-3821,[1029],[0],1030]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",31,[[1,-3822,[1031],[0],1032]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",31,[[1,-3823,[1033],[0],1034]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",31,[[1,-3824,[1035],[0],1036]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",32,[[1,-3825,[1037],[0],1038]]],[3,"Up",32,[[1,-3826,[1039],[0],1040]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",32,[[1,-3827,[1041],[0],1042]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",32,[[1,-3828,[1043],[0],1044]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",32,[[1,-3829,[1045],[0],1046]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",32,[[1,-3830,[1047],[0],1048]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",32,[[1,-3831,[1049],[0],1050]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",32,[[1,-3832,[1051],[0],1052]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[16,"Road-004",10,[601],[1,-1,0,-1.5]],[2,"Bottom",33,[[1,-3833,[1053],[0],1054]]],[3,"Up",33,[[1,-3834,[1055],[0],1056]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",33,[[1,-3835,[1057,1058],[0],1059]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",33,[[1,-3836,[1060],[0],1061]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",33,[[1,-3837,[1062],[0],1063]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",33,[[1,-3838,[1064],[0],1065]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",33,[[1,-3839,[1066],[0],1067]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",33,[[1,-3840,[1068],[0],1069]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",34,[[1,-3841,[1070],[0],1071]]],[3,"Up",34,[[1,-3842,[1072],[0],1073]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",34,[[1,-3843,[1074],[0],1075]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",34,[[1,-3844,[1076],[0],1077]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",34,[[1,-3845,[1078],[0],1079]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",34,[[1,-3846,[1080],[0],1081]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",34,[[1,-3847,[1082],[0],1083]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",34,[[1,-3848,[1084],[0],1085]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",35,[[1,-3849,[1086],[0],1087]]],[3,"Up",35,[[1,-3850,[1088],[0],1089]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",35,[[1,-3851,[1090],[0],1091]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",35,[[1,-3852,[1092],[0],1093]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",35,[[1,-3853,[1094],[0],1095]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",35,[[1,-3854,[1096],[0],1097]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",35,[[1,-3855,[1098],[0],1099]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",35,[[1,-3856,[1100],[0],1101]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[16,"Road-005",10,[602],[1,0,0,-1.5]],[2,"Bottom",36,[[1,-3857,[1102],[0],1103]]],[3,"Up",36,[[1,-3858,[1104],[0],1105]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",36,[[1,-3859,[1106,1107],[0],1108]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",36,[[1,-3860,[1109],[0],1110]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",36,[[1,-3861,[1111],[0],1112]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",36,[[1,-3862,[1113],[0],1114]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",36,[[1,-3863,[1115],[0],1116]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",36,[[1,-3864,[1117],[0],1118]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",37,[[1,-3865,[1119],[0],1120]]],[3,"Up",37,[[1,-3866,[1121],[0],1122]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",37,[[1,-3867,[1123],[0],1124]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",37,[[1,-3868,[1125],[0],1126]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",37,[[1,-3869,[1127],[0],1128]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",37,[[1,-3870,[1129],[0],1130]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",37,[[1,-3871,[1131],[0],1132]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",37,[[1,-3872,[1133],[0],1134]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",38,[[1,-3873,[1135],[0],1136]]],[3,"Up",38,[[1,-3874,[1137],[0],1138]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",38,[[1,-3875,[1139],[0],1140]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",38,[[1,-3876,[1141],[0],1142]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",38,[[1,-3877,[1143],[0],1144]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",38,[[1,-3878,[1145],[0],1146]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",38,[[1,-3879,[1147],[0],1148]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",38,[[1,-3880,[1149],[0],1150]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[53,"Road-001",10,[603],[1,1,0,-1.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[2,"Bottom",39,[[1,-3881,[1151],[0],1152]]],[3,"Up",39,[[1,-3882,[1153],[0],1154]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",39,[[1,-3883,[1155,1156],[0],1157]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Back",39,[[1,-3884,[1158],[0],1159]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",39,[[1,-3885,[1160],[0],1161]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",39,[[1,-3886,[1162],[0],1163]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",39,[[1,-3887,[1164],[0],1165]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",39,[[1,-3888,[1166],[0],1167]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",40,[[1,-3889,[1168],[0],1169]]],[3,"Up",40,[[1,-3890,[1170],[0],1171]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",40,[[1,-3891,[1172],[0],1173]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Back",40,[[1,-3892,[1174],[0],1175]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",40,[[1,-3893,[1176],[0],1177]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",40,[[1,-3894,[1178],[0],1179]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",40,[[1,-3895,[1180],[0],1181]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",40,[[1,-3896,[1182],[0],1183]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",41,[[1,-3897,[1184],[0],1185]]],[3,"Up",41,[[1,-3898,[1186],[0],1187]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",41,[[1,-3899,[1188],[0],1189]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Back",41,[[1,-3900,[1190],[0],1191]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",41,[[1,-3901,[1192],[0],1193]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",41,[[1,-3902,[1194],[0],1195]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",41,[[1,-3903,[1196],[0],1197]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",41,[[1,-3904,[1198],[0],1199]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[53,"Road-006",10,[604],[1,1,0,-0.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[2,"Bottom",42,[[1,-3905,[1200],[0],1201]]],[3,"Up",42,[[1,-3906,[1202],[0],1203]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",42,[[1,-3907,[1204,1205],[0],1206]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",42,[[1,-3908,[1207],[0],1208]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",42,[[1,-3909,[1209],[0],1210]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",42,[[1,-3910,[1211],[0],1212]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",42,[[1,-3911,[1213],[0],1214]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",42,[[1,-3912,[1215],[0],1216]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",43,[[1,-3913,[1217],[0],1218]]],[3,"Up",43,[[1,-3914,[1219],[0],1220]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",43,[[1,-3915,[1221],[0],1222]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",43,[[1,-3916,[1223],[0],1224]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",43,[[1,-3917,[1225],[0],1226]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",43,[[1,-3918,[1227],[0],1228]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",43,[[1,-3919,[1229],[0],1230]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",43,[[1,-3920,[1231],[0],1232]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",44,[[1,-3921,[1233],[0],1234]]],[3,"Up",44,[[1,-3922,[1235],[0],1236]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",44,[[1,-3923,[1237],[0],1238]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",44,[[1,-3924,[1239],[0],1240]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",44,[[1,-3925,[1241],[0],1242]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",44,[[1,-3926,[1243],[0],1244]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",44,[[1,-3927,[1245],[0],1246]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",44,[[1,-3928,[1247],[0],1248]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[53,"Road-007",10,[605],[1,1,0,0.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[2,"Bottom",45,[[1,-3929,[1249],[0],1250]]],[3,"Up",45,[[1,-3930,[1251],[0],1252]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",45,[[1,-3931,[1253,1254],[0],1255]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",45,[[1,-3932,[1256],[0],1257]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",45,[[1,-3933,[1258],[0],1259]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",45,[[1,-3934,[1260],[0],1261]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",45,[[1,-3935,[1262],[0],1263]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",45,[[1,-3936,[1264],[0],1265]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",46,[[1,-3937,[1266],[0],1267]]],[3,"Up",46,[[1,-3938,[1268],[0],1269]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",46,[[1,-3939,[1270],[0],1271]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",46,[[1,-3940,[1272],[0],1273]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",46,[[1,-3941,[1274],[0],1275]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",46,[[1,-3942,[1276],[0],1277]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",46,[[1,-3943,[1278],[0],1279]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",46,[[1,-3944,[1280],[0],1281]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",47,[[1,-3945,[1282],[0],1283]]],[3,"Up",47,[[1,-3946,[1284],[0],1285]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",47,[[1,-3947,[1286],[0],1287]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",47,[[1,-3948,[1288],[0],1289]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",47,[[1,-3949,[1290],[0],1291]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",47,[[1,-3950,[1292],[0],1293]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",47,[[1,-3951,[1294],[0],1295]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",47,[[1,-3952,[1296],[0],1297]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[53,"Road-008",10,[606],[1,1,0,1.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[2,"Bottom",48,[[1,-3953,[1298],[0],1299]]],[3,"Up",48,[[1,-3954,[1300],[0],1301]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",48,[[1,-3955,[1302,1303],[0],1304]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",48,[[1,-3956,[1305],[0],1306]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",48,[[1,-3957,[1307],[0],1308]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",48,[[1,-3958,[1309],[0],1310]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",48,[[1,-3959,[1311],[0],1312]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",48,[[1,-3960,[1313],[0],1314]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",49,[[1,-3961,[1315],[0],1316]]],[3,"Up",49,[[1,-3962,[1317],[0],1318]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",49,[[1,-3963,[1319],[0],1320]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",49,[[1,-3964,[1321],[0],1322]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",49,[[1,-3965,[1323],[0],1324]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",49,[[1,-3966,[1325],[0],1326]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",49,[[1,-3967,[1327],[0],1328]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",49,[[1,-3968,[1329],[0],1330]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",50,[[1,-3969,[1331],[0],1332]]],[3,"Up",50,[[1,-3970,[1333],[0],1334]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",50,[[1,-3971,[1335],[0],1336]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",50,[[1,-3972,[1337],[0],1338]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",50,[[1,-3973,[1339],[0],1340]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",50,[[1,-3974,[1341],[0],1342]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",50,[[1,-3975,[1343],[0],1344]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",50,[[1,-3976,[1345],[0],1346]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[53,"Road-009",10,[607],[1,1,0,2.5],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[2,"Bottom",51,[[1,-3977,[1347],[0],1348]]],[3,"Up",51,[[1,-3978,[1349],[0],1350]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",51,[[1,-3979,[1351,1352],[0],1353]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",51,[[1,-3980,[1354],[0],1355]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",51,[[1,-3981,[1356],[0],1357]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",51,[[1,-3982,[1358],[0],1359]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",51,[[1,-3983,[1360],[0],1361]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",51,[[1,-3984,[1362],[0],1363]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",52,[[1,-3985,[1364],[0],1365]]],[3,"Up",52,[[1,-3986,[1366],[0],1367]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",52,[[1,-3987,[1368],[0],1369]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",52,[[1,-3988,[1370],[0],1371]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",52,[[1,-3989,[1372],[0],1373]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",52,[[1,-3990,[1374],[0],1375]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",52,[[1,-3991,[1376],[0],1377]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",52,[[1,-3992,[1378],[0],1379]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",53,[[1,-3993,[1380],[0],1381]]],[3,"Up",53,[[1,-3994,[1382],[0],1383]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",53,[[1,-3995,[1384],[0],1385]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",53,[[1,-3996,[1386],[0],1387]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Corner_Front_Right",53,[[1,-3997,[1388],[0],1389]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",53,[[1,-3998,[1390],[0],1391]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",53,[[1,-3999,[1392],[0],1393]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",53,[[1,-4000,[1394],[0],1395]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Step0",69,[[1,-4001,[1396],[0],1397]]],[3,"Step1",69,[[1,-4002,[1398],[0],1399]],[1,0,0.134,0.007]],[3,"Step2",69,[[1,-4003,[1400],[0],1401]],[1,0,0.192,0]],[3,"Step3",69,[[1,-4004,[1402],[0],1403]],[1,0,0.113,0]],[3,"Step4",69,[[1,-4005,[1404],[0],1405]],[1,0,0.228,0.041]],[2,"Step0",70,[[1,-4006,[1406],[0],1407]]],[3,"Step1",70,[[1,-4007,[1408],[0],1409]],[1,0,0.134,0.007]],[4,"Step2",false,70,[[1,-4008,[1410],[0],1411]],[1,0,0.216,0]],[4,"Step3",false,70,[[1,-4009,[1412],[0],1413]],[1,0,0.124,0]],[4,"Step4",false,70,[[1,-4010,[1414],[0],1415]],[1,0,0.238,0.041]],[2,"Step0",71,[[1,-4011,[1416],[0],1417]]],[3,"Step1",71,[[1,-4012,[1418],[0],1419]],[1,0,0.142,0]],[3,"Step2",71,[[1,-4013,[1420],[0],1421]],[1,0,0.197,0]],[3,"Step3",71,[[1,-4014,[1422],[0],1423]],[1,0,0.187,0]],[3,"Step4",71,[[1,-4015,[1424],[0],1425]],[1,0.023,0.264,0]],[2,"Step0",72,[[1,-4016,[1426],[0],1427]]],[3,"Step1",72,[[1,-4017,[1428],[0],1429]],[1,0,0.134,0.007]],[3,"Step2",72,[[1,-4018,[1430],[0],1431]],[1,0,0.192,0]],[3,"Step3",72,[[1,-4019,[1432],[0],1433]],[1,0,0.113,0]],[3,"Step4",72,[[1,-4020,[1434],[0],1435]],[1,0,0.228,0.041]],[2,"Step0",73,[[1,-4021,[1436],[0],1437]]],[3,"Step1",73,[[1,-4022,[1438],[0],1439]],[1,0,0.134,0.007]],[4,"Step2",false,73,[[1,-4023,[1440],[0],1441]],[1,0,0.216,0]],[4,"Step3",false,73,[[1,-4024,[1442],[0],1443]],[1,0,0.124,0]],[4,"Step4",false,73,[[1,-4025,[1444],[0],1445]],[1,0,0.238,0.041]],[2,"Step0",74,[[1,-4026,[1446],[0],1447]]],[3,"Step1",74,[[1,-4027,[1448],[0],1449]],[1,0,0.142,0]],[3,"Step2",74,[[1,-4028,[1450],[0],1451]],[1,0,0.197,0]],[3,"Step3",74,[[1,-4029,[1452],[0],1453]],[1,0,0.187,0]],[3,"Step4",74,[[1,-4030,[1454],[0],1455]],[1,0.023,0.264,0]],[2,"Step0",75,[[1,-4031,[1456],[0],1457]]],[3,"Step1",75,[[1,-4032,[1458],[0],1459]],[1,0,0.134,0.007]],[3,"Step2",75,[[1,-4033,[1460],[0],1461]],[1,0,0.192,0]],[3,"Step3",75,[[1,-4034,[1462],[0],1463]],[1,0,0.113,0]],[3,"Step4",75,[[1,-4035,[1464],[0],1465]],[1,0,0.228,0.041]],[2,"Step0",76,[[1,-4036,[1466],[0],1467]]],[3,"Step1",76,[[1,-4037,[1468],[0],1469]],[1,0,0.134,0.007]],[4,"Step2",false,76,[[1,-4038,[1470],[0],1471]],[1,0,0.216,0]],[4,"Step3",false,76,[[1,-4039,[1472],[0],1473]],[1,0,0.124,0]],[4,"Step4",false,76,[[1,-4040,[1474],[0],1475]],[1,0,0.238,0.041]],[2,"Step0",77,[[1,-4041,[1476],[0],1477]]],[3,"Step1",77,[[1,-4042,[1478],[0],1479]],[1,0,0.142,0]],[3,"Step2",77,[[1,-4043,[1480],[0],1481]],[1,0,0.197,0]],[3,"Step3",77,[[1,-4044,[1482],[0],1483]],[1,0,0.187,0]],[3,"Step4",77,[[1,-4045,[1484],[0],1485]],[1,0.023,0.264,0]],[2,"Step0",78,[[1,-4046,[1486],[0],1487]]],[3,"Step1",78,[[1,-4047,[1488],[0],1489]],[1,0,0.134,0.007]],[3,"Step2",78,[[1,-4048,[1490],[0],1491]],[1,0,0.192,0]],[3,"Step3",78,[[1,-4049,[1492],[0],1493]],[1,0,0.113,0]],[3,"Step4",78,[[1,-4050,[1494],[0],1495]],[1,0,0.228,0.041]],[2,"Step0",79,[[1,-4051,[1496],[0],1497]]],[3,"Step1",79,[[1,-4052,[1498],[0],1499]],[1,0,0.134,0.007]],[4,"Step2",false,79,[[1,-4053,[1500],[0],1501]],[1,0,0.216,0]],[4,"Step3",false,79,[[1,-4054,[1502],[0],1503]],[1,0,0.124,0]],[4,"Step4",false,79,[[1,-4055,[1504],[0],1505]],[1,0,0.238,0.041]],[2,"Step0",80,[[1,-4056,[1506],[0],1507]]],[3,"Step1",80,[[1,-4057,[1508],[0],1509]],[1,0,0.142,0]],[3,"Step2",80,[[1,-4058,[1510],[0],1511]],[1,0,0.197,0]],[3,"Step3",80,[[1,-4059,[1512],[0],1513]],[1,0,0.187,0]],[3,"Step4",80,[[1,-4060,[1514],[0],1515]],[1,0.023,0.264,0]],[2,"Step0",81,[[1,-4061,[1516],[0],1517]]],[3,"Step1",81,[[1,-4062,[1518],[0],1519]],[1,0,0.134,0.007]],[3,"Step2",81,[[1,-4063,[1520],[0],1521]],[1,0,0.192,0]],[3,"Step3",81,[[1,-4064,[1522],[0],1523]],[1,0,0.113,0]],[3,"Step4",81,[[1,-4065,[1524],[0],1525]],[1,0,0.228,0.041]],[2,"Step0",82,[[1,-4066,[1526],[0],1527]]],[3,"Step1",82,[[1,-4067,[1528],[0],1529]],[1,0,0.134,0.007]],[4,"Step2",false,82,[[1,-4068,[1530],[0],1531]],[1,0,0.216,0]],[4,"Step3",false,82,[[1,-4069,[1532],[0],1533]],[1,0,0.124,0]],[4,"Step4",false,82,[[1,-4070,[1534],[0],1535]],[1,0,0.238,0.041]],[2,"Step0",83,[[1,-4071,[1536],[0],1537]]],[3,"Step1",83,[[1,-4072,[1538],[0],1539]],[1,0,0.142,0]],[3,"Step2",83,[[1,-4073,[1540],[0],1541]],[1,0,0.197,0]],[3,"Step3",83,[[1,-4074,[1542],[0],1543]],[1,0,0.187,0]],[3,"Step4",83,[[1,-4075,[1544],[0],1545]],[1,0.023,0.264,0]],[2,"Step0",84,[[1,-4076,[1546],[0],1547]]],[3,"Step1",84,[[1,-4077,[1548],[0],1549]],[1,0,0.134,0.007]],[3,"Step2",84,[[1,-4078,[1550],[0],1551]],[1,0,0.192,0]],[3,"Step3",84,[[1,-4079,[1552],[0],1553]],[1,0,0.113,0]],[3,"Step4",84,[[1,-4080,[1554],[0],1555]],[1,0,0.228,0.041]],[2,"Step0",85,[[1,-4081,[1556],[0],1557]]],[3,"Step1",85,[[1,-4082,[1558],[0],1559]],[1,0,0.134,0.007]],[4,"Step2",false,85,[[1,-4083,[1560],[0],1561]],[1,0,0.216,0]],[4,"Step3",false,85,[[1,-4084,[1562],[0],1563]],[1,0,0.124,0]],[4,"Step4",false,85,[[1,-4085,[1564],[0],1565]],[1,0,0.238,0.041]],[2,"Step0",86,[[1,-4086,[1566],[0],1567]]],[3,"Step1",86,[[1,-4087,[1568],[0],1569]],[1,0,0.142,0]],[3,"Step2",86,[[1,-4088,[1570],[0],1571]],[1,0,0.197,0]],[3,"Step3",86,[[1,-4089,[1572],[0],1573]],[1,0,0.187,0]],[3,"Step4",86,[[1,-4090,[1574],[0],1575]],[1,0.023,0.264,0]],[2,"Step0",87,[[1,-4091,[1576],[0],1577]]],[3,"Step1",87,[[1,-4092,[1578],[0],1579]],[1,0,0.134,0.007]],[3,"Step2",87,[[1,-4093,[1580],[0],1581]],[1,0,0.192,0]],[3,"Step3",87,[[1,-4094,[1582],[0],1583]],[1,0,0.113,0]],[3,"Step4",87,[[1,-4095,[1584],[0],1585]],[1,0,0.228,0.041]],[2,"Step0",88,[[1,-4096,[1586],[0],1587]]],[3,"Step1",88,[[1,-4097,[1588],[0],1589]],[1,0,0.134,0.007]],[4,"Step2",false,88,[[1,-4098,[1590],[0],1591]],[1,0,0.216,0]],[4,"Step3",false,88,[[1,-4099,[1592],[0],1593]],[1,0,0.124,0]],[4,"Step4",false,88,[[1,-4100,[1594],[0],1595]],[1,0,0.238,0.041]],[2,"Step0",89,[[1,-4101,[1596],[0],1597]]],[3,"Step1",89,[[1,-4102,[1598],[0],1599]],[1,0,0.142,0]],[3,"Step2",89,[[1,-4103,[1600],[0],1601]],[1,0,0.197,0]],[3,"Step3",89,[[1,-4104,[1602],[0],1603]],[1,0,0.187,0]],[3,"Step4",89,[[1,-4105,[1604],[0],1605]],[1,0.023,0.264,0]],[2,"Step0",90,[[1,-4106,[1606],[0],1607]]],[3,"Step1",90,[[1,-4107,[1608],[0],1609]],[1,0,0.134,0.007]],[3,"Step2",90,[[1,-4108,[1610],[0],1611]],[1,0,0.192,0]],[3,"Step3",90,[[1,-4109,[1612],[0],1613]],[1,0,0.113,0]],[3,"Step4",90,[[1,-4110,[1614],[0],1615]],[1,0,0.228,0.041]],[2,"Step0",91,[[1,-4111,[1616],[0],1617]]],[3,"Step1",91,[[1,-4112,[1618],[0],1619]],[1,0,0.134,0.007]],[4,"Step2",false,91,[[1,-4113,[1620],[0],1621]],[1,0,0.216,0]],[4,"Step3",false,91,[[1,-4114,[1622],[0],1623]],[1,0,0.124,0]],[4,"Step4",false,91,[[1,-4115,[1624],[0],1625]],[1,0,0.238,0.041]],[2,"Step0",92,[[1,-4116,[1626],[0],1627]]],[3,"Step1",92,[[1,-4117,[1628],[0],1629]],[1,0,0.142,0]],[3,"Step2",92,[[1,-4118,[1630],[0],1631]],[1,0,0.197,0]],[3,"Step3",92,[[1,-4119,[1632],[0],1633]],[1,0,0.187,0]],[3,"Step4",92,[[1,-4120,[1634],[0],1635]],[1,0.023,0.264,0]],[2,"Step0",93,[[1,-4121,[1636],[0],1637]]],[3,"Step1",93,[[1,-4122,[1638],[0],1639]],[1,0,0.134,0.007]],[3,"Step2",93,[[1,-4123,[1640],[0],1641]],[1,0,0.192,0]],[3,"Step3",93,[[1,-4124,[1642],[0],1643]],[1,0,0.113,0]],[3,"Step4",93,[[1,-4125,[1644],[0],1645]],[1,0,0.228,0.041]],[2,"Step0",94,[[1,-4126,[1646],[0],1647]]],[3,"Step1",94,[[1,-4127,[1648],[0],1649]],[1,0,0.134,0.007]],[4,"Step2",false,94,[[1,-4128,[1650],[0],1651]],[1,0,0.216,0]],[4,"Step3",false,94,[[1,-4129,[1652],[0],1653]],[1,0,0.124,0]],[4,"Step4",false,94,[[1,-4130,[1654],[0],1655]],[1,0,0.238,0.041]],[2,"Step0",95,[[1,-4131,[1656],[0],1657]]],[3,"Step1",95,[[1,-4132,[1658],[0],1659]],[1,0,0.142,0]],[3,"Step2",95,[[1,-4133,[1660],[0],1661]],[1,0,0.197,0]],[3,"Step3",95,[[1,-4134,[1662],[0],1663]],[1,0,0.187,0]],[3,"Step4",95,[[1,-4135,[1664],[0],1665]],[1,0.023,0.264,0]],[2,"Step0",96,[[1,-4136,[1666],[0],1667]]],[3,"Step1",96,[[1,-4137,[1668],[0],1669]],[1,0,0.134,0.007]],[3,"Step2",96,[[1,-4138,[1670],[0],1671]],[1,0,0.192,0]],[3,"Step3",96,[[1,-4139,[1672],[0],1673]],[1,0,0.113,0]],[3,"Step4",96,[[1,-4140,[1674],[0],1675]],[1,0,0.228,0.041]],[2,"Step0",97,[[1,-4141,[1676],[0],1677]]],[3,"Step1",97,[[1,-4142,[1678],[0],1679]],[1,0,0.134,0.007]],[4,"Step2",false,97,[[1,-4143,[1680],[0],1681]],[1,0,0.216,0]],[4,"Step3",false,97,[[1,-4144,[1682],[0],1683]],[1,0,0.124,0]],[4,"Step4",false,97,[[1,-4145,[1684],[0],1685]],[1,0,0.238,0.041]],[2,"Step0",98,[[1,-4146,[1686],[0],1687]]],[3,"Step1",98,[[1,-4147,[1688],[0],1689]],[1,0,0.142,0]],[3,"Step2",98,[[1,-4148,[1690],[0],1691]],[1,0,0.197,0]],[3,"Step3",98,[[1,-4149,[1692],[0],1693]],[1,0,0.187,0]],[3,"Step4",98,[[1,-4150,[1694],[0],1695]],[1,0.023,0.264,0]],[167,15,10,241],[97,"Word",618,[-4151],[1,0.5,1,0.5]],[98,"Plane",1827,[[78,"Plane<ModelComponent>",-4152,[1696],[0],1697]],[1,0,0.472,0],[3,0,-0.13052619222005157,0,0.9914448613738104],[1,0.31,1,0.172],[1,0,-15,0]],[97,"Word",619,[-4153],[1,0.5,1,0.5]],[98,"Plane",1829,[[78,"Plane<ModelComponent>",-4154,[1698],[0],1699]],[1,0,0.472,0],[3,0,-0.13052619222005157,0,0.9914448613738104],[1,0.31,1,0.172],[1,0,-15,0]],[73,"Cam",620,[[79,2,-4155,[80,40],[81,[82],[83,[84]]],[85,[86],[87]],[88],[89]]],[1,0,6.125,1.545],[3,-0.6087614290087207,0,0,0.7933533402912352],[1,-75,0,0]],[2,"Giftbox_1",851,[[1,-4156,[1700],[0],1701]]],[3,"Giftbox_2",851,[[1,-4157,[1702,1703],[0],1704]],[1,0,0.8798682689666748,1.1072489023208618]],[2,"Step0",99,[[1,-4158,[1705],[0],1706]]],[4,"Step1",false,99,[[1,-4159,[1707],[0],1708]],[1,0,0.134,0.007]],[4,"Step2",false,99,[[1,-4160,[1709],[0],1710]],[1,0,0.192,0]],[4,"Step3",false,99,[[1,-4161,[1711],[0],1712]],[1,0,0.113,0]],[4,"Step4",false,99,[[1,-4162,[1713],[0],1714]],[1,0,0.228,0.041]],[2,"Step0",100,[[1,-4163,[1715],[0],1716]]],[3,"Step1",100,[[1,-4164,[1717],[0],1718]],[1,0,0.134,0.007]],[4,"Step2",false,100,[[1,-4165,[1719],[0],1720]],[1,0,0.216,0]],[4,"Step3",false,100,[[1,-4166,[1721],[0],1722]],[1,0,0.124,0]],[4,"Step4",false,100,[[1,-4167,[1723],[0],1724]],[1,0,0.238,0.041]],[2,"Step0",101,[[1,-4168,[1725],[0],1726]]],[3,"Step1",101,[[1,-4169,[1727],[0],1728]],[1,0,0.142,0]],[3,"Step2",101,[[1,-4170,[1729],[0],1730]],[1,0,0.197,0]],[3,"Step3",101,[[1,-4171,[1731],[0],1732]],[1,0,0.187,0]],[3,"Step4",101,[[1,-4172,[1733],[0],1734]],[1,0.023,0.264,0]],[2,"Step0",102,[[1,-4173,[1735],[0],1736]]],[3,"Step1",102,[[1,-4174,[1737],[0],1738]],[1,0,0.134,0.007]],[4,"Step2",false,102,[[1,-4175,[1739],[0],1740]],[1,0,0.192,0]],[4,"Step3",false,102,[[1,-4176,[1741],[0],1742]],[1,0,0.113,0]],[4,"Step4",false,102,[[1,-4177,[1743],[0],1744]],[1,0,0.228,0.041]],[2,"Step0",103,[[1,-4178,[1745],[0],1746]]],[3,"Step1",103,[[1,-4179,[1747],[0],1748]],[1,0,0.134,0.007]],[4,"Step2",false,103,[[1,-4180,[1749],[0],1750]],[1,0,0.216,0]],[4,"Step3",false,103,[[1,-4181,[1751],[0],1752]],[1,0,0.124,0]],[4,"Step4",false,103,[[1,-4182,[1753],[0],1754]],[1,0,0.238,0.041]],[2,"Step0",104,[[1,-4183,[1755],[0],1756]]],[3,"Step1",104,[[1,-4184,[1757],[0],1758]],[1,0,0.142,0]],[3,"Step2",104,[[1,-4185,[1759],[0],1760]],[1,0,0.197,0]],[3,"Step3",104,[[1,-4186,[1761],[0],1762]],[1,0,0.187,0]],[3,"Step4",104,[[1,-4187,[1763],[0],1764]],[1,0.023,0.264,0]],[2,"Step0",105,[[1,-4188,[1765],[0],1766]]],[3,"Step1",105,[[1,-4189,[1767],[0],1768]],[1,0,0.134,0.007]],[4,"Step2",false,105,[[1,-4190,[1769],[0],1770]],[1,0,0.192,0]],[4,"Step3",false,105,[[1,-4191,[1771],[0],1772]],[1,0,0.113,0]],[4,"Step4",false,105,[[1,-4192,[1773],[0],1774]],[1,0,0.228,0.041]],[2,"Step0",106,[[1,-4193,[1775],[0],1776]]],[3,"Step1",106,[[1,-4194,[1777],[0],1778]],[1,0,0.134,0.007]],[4,"Step2",false,106,[[1,-4195,[1779],[0],1780]],[1,0,0.216,0]],[4,"Step3",false,106,[[1,-4196,[1781],[0],1782]],[1,0,0.124,0]],[4,"Step4",false,106,[[1,-4197,[1783],[0],1784]],[1,0,0.238,0.041]],[2,"Step0",107,[[1,-4198,[1785],[0],1786]]],[3,"Step1",107,[[1,-4199,[1787],[0],1788]],[1,0,0.142,0]],[3,"Step2",107,[[1,-4200,[1789],[0],1790]],[1,0,0.197,0]],[3,"Step3",107,[[1,-4201,[1791],[0],1792]],[1,0,0.187,0]],[3,"Step4",107,[[1,-4202,[1793],[0],1794]],[1,0.023,0.264,0]],[2,"Step0",108,[[1,-4203,[1795],[0],1796]]],[3,"Step1",108,[[1,-4204,[1797],[0],1798]],[1,0,0.134,0.007]],[4,"Step2",false,108,[[1,-4205,[1799],[0],1800]],[1,0,0.192,0]],[4,"Step3",false,108,[[1,-4206,[1801],[0],1802]],[1,0,0.113,0]],[4,"Step4",false,108,[[1,-4207,[1803],[0],1804]],[1,0,0.228,0.041]],[2,"Step0",109,[[1,-4208,[1805],[0],1806]]],[3,"Step1",109,[[1,-4209,[1807],[0],1808]],[1,0,0.134,0.007]],[4,"Step2",false,109,[[1,-4210,[1809],[0],1810]],[1,0,0.216,0]],[4,"Step3",false,109,[[1,-4211,[1811],[0],1812]],[1,0,0.124,0]],[4,"Step4",false,109,[[1,-4212,[1813],[0],1814]],[1,0,0.238,0.041]],[2,"Step0",110,[[1,-4213,[1815],[0],1816]]],[3,"Step1",110,[[1,-4214,[1817],[0],1818]],[1,0,0.142,0]],[3,"Step2",110,[[1,-4215,[1819],[0],1820]],[1,0,0.197,0]],[3,"Step3",110,[[1,-4216,[1821],[0],1822]],[1,0,0.187,0]],[3,"Step4",110,[[1,-4217,[1823],[0],1824]],[1,0.023,0.264,0]],[2,"Step0",111,[[1,-4218,[1825],[0],1826]]],[3,"Step1",111,[[1,-4219,[1827],[0],1828]],[1,0,0.134,0.007]],[4,"Step2",false,111,[[1,-4220,[1829],[0],1830]],[1,0,0.192,0]],[4,"Step3",false,111,[[1,-4221,[1831],[0],1832]],[1,0,0.113,0]],[4,"Step4",false,111,[[1,-4222,[1833],[0],1834]],[1,0,0.228,0.041]],[2,"Step0",112,[[1,-4223,[1835],[0],1836]]],[3,"Step1",112,[[1,-4224,[1837],[0],1838]],[1,0,0.134,0.007]],[4,"Step2",false,112,[[1,-4225,[1839],[0],1840]],[1,0,0.216,0]],[4,"Step3",false,112,[[1,-4226,[1841],[0],1842]],[1,0,0.124,0]],[4,"Step4",false,112,[[1,-4227,[1843],[0],1844]],[1,0,0.238,0.041]],[2,"Step0",113,[[1,-4228,[1845],[0],1846]]],[3,"Step1",113,[[1,-4229,[1847],[0],1848]],[1,0,0.142,0]],[3,"Step2",113,[[1,-4230,[1849],[0],1850]],[1,0,0.197,0]],[3,"Step3",113,[[1,-4231,[1851],[0],1852]],[1,0,0.187,0]],[3,"Step4",113,[[1,-4232,[1853],[0],1854]],[1,0.023,0.264,0]],[2,"Step0",114,[[1,-4233,[1855],[0],1856]]],[3,"Step1",114,[[1,-4234,[1857],[0],1858]],[1,0,0.134,0.007]],[4,"Step2",false,114,[[1,-4235,[1859],[0],1860]],[1,0,0.192,0]],[4,"Step3",false,114,[[1,-4236,[1861],[0],1862]],[1,0,0.113,0]],[4,"Step4",false,114,[[1,-4237,[1863],[0],1864]],[1,0,0.228,0.041]],[2,"Step0",115,[[1,-4238,[1865],[0],1866]]],[3,"Step1",115,[[1,-4239,[1867],[0],1868]],[1,0,0.134,0.007]],[4,"Step2",false,115,[[1,-4240,[1869],[0],1870]],[1,0,0.216,0]],[4,"Step3",false,115,[[1,-4241,[1871],[0],1872]],[1,0,0.124,0]],[4,"Step4",false,115,[[1,-4242,[1873],[0],1874]],[1,0,0.238,0.041]],[2,"Step0",116,[[1,-4243,[1875],[0],1876]]],[3,"Step1",116,[[1,-4244,[1877],[0],1878]],[1,0,0.142,0]],[3,"Step2",116,[[1,-4245,[1879],[0],1880]],[1,0,0.197,0]],[3,"Step3",116,[[1,-4246,[1881],[0],1882]],[1,0,0.187,0]],[3,"Step4",116,[[1,-4247,[1883],[0],1884]],[1,0.023,0.264,0]],[2,"Step0",117,[[1,-4248,[1885],[0],1886]]],[3,"Step1",117,[[1,-4249,[1887],[0],1888]],[1,0,0.134,0.007]],[4,"Step2",false,117,[[1,-4250,[1889],[0],1890]],[1,0,0.192,0]],[4,"Step3",false,117,[[1,-4251,[1891],[0],1892]],[1,0,0.113,0]],[4,"Step4",false,117,[[1,-4252,[1893],[0],1894]],[1,0,0.228,0.041]],[2,"Step0",118,[[1,-4253,[1895],[0],1896]]],[3,"Step1",118,[[1,-4254,[1897],[0],1898]],[1,0,0.134,0.007]],[4,"Step2",false,118,[[1,-4255,[1899],[0],1900]],[1,0,0.216,0]],[4,"Step3",false,118,[[1,-4256,[1901],[0],1902]],[1,0,0.124,0]],[4,"Step4",false,118,[[1,-4257,[1903],[0],1904]],[1,0,0.238,0.041]],[2,"Step0",119,[[1,-4258,[1905],[0],1906]]],[3,"Step1",119,[[1,-4259,[1907],[0],1908]],[1,0,0.142,0]],[3,"Step2",119,[[1,-4260,[1909],[0],1910]],[1,0,0.197,0]],[3,"Step3",119,[[1,-4261,[1911],[0],1912]],[1,0,0.187,0]],[3,"Step4",119,[[1,-4262,[1913],[0],1914]],[1,0.023,0.264,0]],[2,"Step0",120,[[1,-4263,[1915],[0],1916]]],[3,"Step1",120,[[1,-4264,[1917],[0],1918]],[1,0,0.134,0.007]],[4,"Step2",false,120,[[1,-4265,[1919],[0],1920]],[1,0,0.192,0]],[4,"Step3",false,120,[[1,-4266,[1921],[0],1922]],[1,0,0.113,0]],[4,"Step4",false,120,[[1,-4267,[1923],[0],1924]],[1,0,0.228,0.041]],[2,"Step0",121,[[1,-4268,[1925],[0],1926]]],[3,"Step1",121,[[1,-4269,[1927],[0],1928]],[1,0,0.134,0.007]],[4,"Step2",false,121,[[1,-4270,[1929],[0],1930]],[1,0,0.216,0]],[4,"Step3",false,121,[[1,-4271,[1931],[0],1932]],[1,0,0.124,0]],[4,"Step4",false,121,[[1,-4272,[1933],[0],1934]],[1,0,0.238,0.041]],[2,"Step0",122,[[1,-4273,[1935],[0],1936]]],[3,"Step1",122,[[1,-4274,[1937],[0],1938]],[1,0,0.142,0]],[3,"Step2",122,[[1,-4275,[1939],[0],1940]],[1,0,0.197,0]],[3,"Step3",122,[[1,-4276,[1941],[0],1942]],[1,0,0.187,0]],[3,"Step4",122,[[1,-4277,[1943],[0],1944]],[1,0.023,0.264,0]],[2,"Step0",123,[[1,-4278,[1945],[0],1946]]],[3,"Step1",123,[[1,-4279,[1947],[0],1948]],[1,0,0.134,0.007]],[4,"Step2",false,123,[[1,-4280,[1949],[0],1950]],[1,0,0.192,0]],[4,"Step3",false,123,[[1,-4281,[1951],[0],1952]],[1,0,0.113,0]],[4,"Step4",false,123,[[1,-4282,[1953],[0],1954]],[1,0,0.228,0.041]],[2,"Step0",124,[[1,-4283,[1955],[0],1956]]],[3,"Step1",124,[[1,-4284,[1957],[0],1958]],[1,0,0.134,0.007]],[4,"Step2",false,124,[[1,-4285,[1959],[0],1960]],[1,0,0.216,0]],[4,"Step3",false,124,[[1,-4286,[1961],[0],1962]],[1,0,0.124,0]],[4,"Step4",false,124,[[1,-4287,[1963],[0],1964]],[1,0,0.238,0.041]],[2,"Step0",125,[[1,-4288,[1965],[0],1966]]],[3,"Step1",125,[[1,-4289,[1967],[0],1968]],[1,0,0.142,0]],[3,"Step2",125,[[1,-4290,[1969],[0],1970]],[1,0,0.197,0]],[3,"Step3",125,[[1,-4291,[1971],[0],1972]],[1,0,0.187,0]],[3,"Step4",125,[[1,-4292,[1973],[0],1974]],[1,0.023,0.264,0]],[2,"Step0",126,[[1,-4293,[1975],[0],1976]]],[3,"Step1",126,[[1,-4294,[1977],[0],1978]],[1,0,0.134,0.007]],[4,"Step2",false,126,[[1,-4295,[1979],[0],1980]],[1,0,0.192,0]],[4,"Step3",false,126,[[1,-4296,[1981],[0],1982]],[1,0,0.113,0]],[4,"Step4",false,126,[[1,-4297,[1983],[0],1984]],[1,0,0.228,0.041]],[2,"Step0",127,[[1,-4298,[1985],[0],1986]]],[3,"Step1",127,[[1,-4299,[1987],[0],1988]],[1,0,0.134,0.007]],[4,"Step2",false,127,[[1,-4300,[1989],[0],1990]],[1,0,0.216,0]],[4,"Step3",false,127,[[1,-4301,[1991],[0],1992]],[1,0,0.124,0]],[4,"Step4",false,127,[[1,-4302,[1993],[0],1994]],[1,0,0.238,0.041]],[2,"Step0",128,[[1,-4303,[1995],[0],1996]]],[3,"Step1",128,[[1,-4304,[1997],[0],1998]],[1,0,0.142,0]],[3,"Step2",128,[[1,-4305,[1999],[0],2000]],[1,0,0.197,0]],[3,"Step3",128,[[1,-4306,[2001],[0],2002]],[1,0,0.187,0]],[3,"Step4",128,[[1,-4307,[2003],[0],2004]],[1,0.023,0.264,0]],[2,"Step0",129,[[1,-4308,[2005],[0],2006]]],[3,"Step1",129,[[1,-4309,[2007],[0],2008]],[1,0,0.134,0.007]],[4,"Step2",false,129,[[1,-4310,[2009],[0],2010]],[1,0,0.192,0]],[4,"Step3",false,129,[[1,-4311,[2011],[0],2012]],[1,0,0.113,0]],[4,"Step4",false,129,[[1,-4312,[2013],[0],2014]],[1,0,0.228,0.041]],[2,"Step0",130,[[1,-4313,[2015],[0],2016]]],[3,"Step1",130,[[1,-4314,[2017],[0],2018]],[1,0,0.134,0.007]],[4,"Step2",false,130,[[1,-4315,[2019],[0],2020]],[1,0,0.216,0]],[4,"Step3",false,130,[[1,-4316,[2021],[0],2022]],[1,0,0.124,0]],[4,"Step4",false,130,[[1,-4317,[2023],[0],2024]],[1,0,0.238,0.041]],[2,"Step0",131,[[1,-4318,[2025],[0],2026]]],[3,"Step1",131,[[1,-4319,[2027],[0],2028]],[1,0,0.142,0]],[3,"Step2",131,[[1,-4320,[2029],[0],2030]],[1,0,0.197,0]],[3,"Step3",131,[[1,-4321,[2031],[0],2032]],[1,0,0.187,0]],[3,"Step4",131,[[1,-4322,[2033],[0],2034]],[1,0.023,0.264,0]],[2,"Step0",132,[[1,-4323,[2035],[0],2036]]],[3,"Step1",132,[[1,-4324,[2037],[0],2038]],[1,0,0.134,0.007]],[4,"Step2",false,132,[[1,-4325,[2039],[0],2040]],[1,0,0.192,0]],[4,"Step3",false,132,[[1,-4326,[2041],[0],2042]],[1,0,0.113,0]],[4,"Step4",false,132,[[1,-4327,[2043],[0],2044]],[1,0,0.228,0.041]],[2,"Step0",133,[[1,-4328,[2045],[0],2046]]],[3,"Step1",133,[[1,-4329,[2047],[0],2048]],[1,0,0.134,0.007]],[4,"Step2",false,133,[[1,-4330,[2049],[0],2050]],[1,0,0.216,0]],[4,"Step3",false,133,[[1,-4331,[2051],[0],2052]],[1,0,0.124,0]],[4,"Step4",false,133,[[1,-4332,[2053],[0],2054]],[1,0,0.238,0.041]],[2,"Step0",134,[[1,-4333,[2055],[0],2056]]],[3,"Step1",134,[[1,-4334,[2057],[0],2058]],[1,0,0.142,0]],[3,"Step2",134,[[1,-4335,[2059],[0],2060]],[1,0,0.197,0]],[3,"Step3",134,[[1,-4336,[2061],[0],2062]],[1,0,0.187,0]],[3,"Step4",134,[[1,-4337,[2063],[0],2064]],[1,0.023,0.264,0]],[2,"Giftbox_1",864,[[1,-4338,[2068],[0],2069]]],[3,"Giftbox_2",864,[[1,-4339,[2070,2071],[0],2072]],[1,0,0.8798682689666748,1.1072489023208618]],[2,"Step0",135,[[1,-4340,[2073],[0],2074]]],[3,"Step1",135,[[1,-4341,[2075],[0],2076]],[1,0,0.134,0.007]],[3,"Step2",135,[[1,-4342,[2077],[0],2078]],[1,0,0.192,0]],[3,"Step3",135,[[1,-4343,[2079],[0],2080]],[1,0,0.113,0]],[3,"Step4",135,[[1,-4344,[2081],[0],2082]],[1,0,0.228,0.041]],[2,"Step0",136,[[1,-4345,[2083],[0],2084]]],[3,"Step1",136,[[1,-4346,[2085],[0],2086]],[1,0,0.134,0.007]],[4,"Step2",false,136,[[1,-4347,[2087],[0],2088]],[1,0,0.216,0]],[4,"Step3",false,136,[[1,-4348,[2089],[0],2090]],[1,0,0.124,0]],[4,"Step4",false,136,[[1,-4349,[2091],[0],2092]],[1,0,0.238,0.041]],[2,"Step0",137,[[1,-4350,[2093],[0],2094]]],[3,"Step1",137,[[1,-4351,[2095],[0],2096]],[1,0,0.142,0]],[3,"Step2",137,[[1,-4352,[2097],[0],2098]],[1,0,0.197,0]],[3,"Step3",137,[[1,-4353,[2099],[0],2100]],[1,0,0.187,0]],[3,"Step4",137,[[1,-4354,[2101],[0],2102]],[1,0.023,0.264,0]],[2,"Step0",138,[[1,-4355,[2103],[0],2104]]],[3,"Step1",138,[[1,-4356,[2105],[0],2106]],[1,0,0.134,0.007]],[3,"Step2",138,[[1,-4357,[2107],[0],2108]],[1,0,0.192,0]],[3,"Step3",138,[[1,-4358,[2109],[0],2110]],[1,0,0.113,0]],[3,"Step4",138,[[1,-4359,[2111],[0],2112]],[1,0,0.228,0.041]],[2,"Step0",139,[[1,-4360,[2113],[0],2114]]],[3,"Step1",139,[[1,-4361,[2115],[0],2116]],[1,0,0.134,0.007]],[4,"Step2",false,139,[[1,-4362,[2117],[0],2118]],[1,0,0.216,0]],[4,"Step3",false,139,[[1,-4363,[2119],[0],2120]],[1,0,0.124,0]],[4,"Step4",false,139,[[1,-4364,[2121],[0],2122]],[1,0,0.238,0.041]],[2,"Step0",140,[[1,-4365,[2123],[0],2124]]],[3,"Step1",140,[[1,-4366,[2125],[0],2126]],[1,0,0.142,0]],[3,"Step2",140,[[1,-4367,[2127],[0],2128]],[1,0,0.197,0]],[3,"Step3",140,[[1,-4368,[2129],[0],2130]],[1,0,0.187,0]],[3,"Step4",140,[[1,-4369,[2131],[0],2132]],[1,0.023,0.264,0]],[2,"Step0",141,[[1,-4370,[2133],[0],2134]]],[3,"Step1",141,[[1,-4371,[2135],[0],2136]],[1,0,0.134,0.007]],[3,"Step2",141,[[1,-4372,[2137],[0],2138]],[1,0,0.192,0]],[3,"Step3",141,[[1,-4373,[2139],[0],2140]],[1,0,0.113,0]],[3,"Step4",141,[[1,-4374,[2141],[0],2142]],[1,0,0.228,0.041]],[2,"Step0",142,[[1,-4375,[2143],[0],2144]]],[3,"Step1",142,[[1,-4376,[2145],[0],2146]],[1,0,0.134,0.007]],[4,"Step2",false,142,[[1,-4377,[2147],[0],2148]],[1,0,0.216,0]],[4,"Step3",false,142,[[1,-4378,[2149],[0],2150]],[1,0,0.124,0]],[4,"Step4",false,142,[[1,-4379,[2151],[0],2152]],[1,0,0.238,0.041]],[2,"Step0",143,[[1,-4380,[2153],[0],2154]]],[3,"Step1",143,[[1,-4381,[2155],[0],2156]],[1,0,0.142,0]],[3,"Step2",143,[[1,-4382,[2157],[0],2158]],[1,0,0.197,0]],[3,"Step3",143,[[1,-4383,[2159],[0],2160]],[1,0,0.187,0]],[3,"Step4",143,[[1,-4384,[2161],[0],2162]],[1,0.023,0.264,0]],[2,"Step0",144,[[1,-4385,[2163],[0],2164]]],[3,"Step1",144,[[1,-4386,[2165],[0],2166]],[1,0,0.134,0.007]],[3,"Step2",144,[[1,-4387,[2167],[0],2168]],[1,0,0.192,0]],[3,"Step3",144,[[1,-4388,[2169],[0],2170]],[1,0,0.113,0]],[3,"Step4",144,[[1,-4389,[2171],[0],2172]],[1,0,0.228,0.041]],[2,"Step0",145,[[1,-4390,[2173],[0],2174]]],[3,"Step1",145,[[1,-4391,[2175],[0],2176]],[1,0,0.134,0.007]],[4,"Step2",false,145,[[1,-4392,[2177],[0],2178]],[1,0,0.216,0]],[4,"Step3",false,145,[[1,-4393,[2179],[0],2180]],[1,0,0.124,0]],[4,"Step4",false,145,[[1,-4394,[2181],[0],2182]],[1,0,0.238,0.041]],[2,"Step0",146,[[1,-4395,[2183],[0],2184]]],[3,"Step1",146,[[1,-4396,[2185],[0],2186]],[1,0,0.142,0]],[3,"Step2",146,[[1,-4397,[2187],[0],2188]],[1,0,0.197,0]],[3,"Step3",146,[[1,-4398,[2189],[0],2190]],[1,0,0.187,0]],[3,"Step4",146,[[1,-4399,[2191],[0],2192]],[1,0.023,0.264,0]],[2,"Step0",147,[[1,-4400,[2193],[0],2194]]],[3,"Step1",147,[[1,-4401,[2195],[0],2196]],[1,0,0.134,0.007]],[3,"Step2",147,[[1,-4402,[2197],[0],2198]],[1,0,0.192,0]],[3,"Step3",147,[[1,-4403,[2199],[0],2200]],[1,0,0.113,0]],[3,"Step4",147,[[1,-4404,[2201],[0],2202]],[1,0,0.228,0.041]],[2,"Step0",148,[[1,-4405,[2203],[0],2204]]],[3,"Step1",148,[[1,-4406,[2205],[0],2206]],[1,0,0.134,0.007]],[4,"Step2",false,148,[[1,-4407,[2207],[0],2208]],[1,0,0.216,0]],[4,"Step3",false,148,[[1,-4408,[2209],[0],2210]],[1,0,0.124,0]],[4,"Step4",false,148,[[1,-4409,[2211],[0],2212]],[1,0,0.238,0.041]],[2,"Step0",149,[[1,-4410,[2213],[0],2214]]],[3,"Step1",149,[[1,-4411,[2215],[0],2216]],[1,0,0.142,0]],[3,"Step2",149,[[1,-4412,[2217],[0],2218]],[1,0,0.197,0]],[3,"Step3",149,[[1,-4413,[2219],[0],2220]],[1,0,0.187,0]],[3,"Step4",149,[[1,-4414,[2221],[0],2222]],[1,0.023,0.264,0]],[2,"Step0",150,[[1,-4415,[2223],[0],2224]]],[3,"Step1",150,[[1,-4416,[2225],[0],2226]],[1,0,0.134,0.007]],[3,"Step2",150,[[1,-4417,[2227],[0],2228]],[1,0,0.192,0]],[3,"Step3",150,[[1,-4418,[2229],[0],2230]],[1,0,0.113,0]],[3,"Step4",150,[[1,-4419,[2231],[0],2232]],[1,0,0.228,0.041]],[2,"Step0",151,[[1,-4420,[2233],[0],2234]]],[3,"Step1",151,[[1,-4421,[2235],[0],2236]],[1,0,0.134,0.007]],[4,"Step2",false,151,[[1,-4422,[2237],[0],2238]],[1,0,0.216,0]],[4,"Step3",false,151,[[1,-4423,[2239],[0],2240]],[1,0,0.124,0]],[4,"Step4",false,151,[[1,-4424,[2241],[0],2242]],[1,0,0.238,0.041]],[2,"Step0",152,[[1,-4425,[2243],[0],2244]]],[3,"Step1",152,[[1,-4426,[2245],[0],2246]],[1,0,0.142,0]],[3,"Step2",152,[[1,-4427,[2247],[0],2248]],[1,0,0.197,0]],[3,"Step3",152,[[1,-4428,[2249],[0],2250]],[1,0,0.187,0]],[3,"Step4",152,[[1,-4429,[2251],[0],2252]],[1,0.023,0.264,0]],[2,"Step0",153,[[1,-4430,[2253],[0],2254]]],[3,"Step1",153,[[1,-4431,[2255],[0],2256]],[1,0,0.134,0.007]],[3,"Step2",153,[[1,-4432,[2257],[0],2258]],[1,0,0.192,0]],[3,"Step3",153,[[1,-4433,[2259],[0],2260]],[1,0,0.113,0]],[3,"Step4",153,[[1,-4434,[2261],[0],2262]],[1,0,0.228,0.041]],[2,"Step0",154,[[1,-4435,[2263],[0],2264]]],[3,"Step1",154,[[1,-4436,[2265],[0],2266]],[1,0,0.134,0.007]],[4,"Step2",false,154,[[1,-4437,[2267],[0],2268]],[1,0,0.216,0]],[4,"Step3",false,154,[[1,-4438,[2269],[0],2270]],[1,0,0.124,0]],[4,"Step4",false,154,[[1,-4439,[2271],[0],2272]],[1,0,0.238,0.041]],[2,"Step0",155,[[1,-4440,[2273],[0],2274]]],[3,"Step1",155,[[1,-4441,[2275],[0],2276]],[1,0,0.142,0]],[3,"Step2",155,[[1,-4442,[2277],[0],2278]],[1,0,0.197,0]],[3,"Step3",155,[[1,-4443,[2279],[0],2280]],[1,0,0.187,0]],[3,"Step4",155,[[1,-4444,[2281],[0],2282]],[1,0.023,0.264,0]],[2,"Step0",156,[[1,-4445,[2283],[0],2284]]],[3,"Step1",156,[[1,-4446,[2285],[0],2286]],[1,0,0.134,0.007]],[3,"Step2",156,[[1,-4447,[2287],[0],2288]],[1,0,0.192,0]],[3,"Step3",156,[[1,-4448,[2289],[0],2290]],[1,0,0.113,0]],[3,"Step4",156,[[1,-4449,[2291],[0],2292]],[1,0,0.228,0.041]],[2,"Step0",157,[[1,-4450,[2293],[0],2294]]],[3,"Step1",157,[[1,-4451,[2295],[0],2296]],[1,0,0.134,0.007]],[4,"Step2",false,157,[[1,-4452,[2297],[0],2298]],[1,0,0.216,0]],[4,"Step3",false,157,[[1,-4453,[2299],[0],2300]],[1,0,0.124,0]],[4,"Step4",false,157,[[1,-4454,[2301],[0],2302]],[1,0,0.238,0.041]],[2,"Step0",158,[[1,-4455,[2303],[0],2304]]],[3,"Step1",158,[[1,-4456,[2305],[0],2306]],[1,0,0.142,0]],[3,"Step2",158,[[1,-4457,[2307],[0],2308]],[1,0,0.197,0]],[3,"Step3",158,[[1,-4458,[2309],[0],2310]],[1,0,0.187,0]],[3,"Step4",158,[[1,-4459,[2311],[0],2312]],[1,0.023,0.264,0]],[2,"Step0",159,[[1,-4460,[2313],[0],2314]]],[3,"Step1",159,[[1,-4461,[2315],[0],2316]],[1,0,0.134,0.007]],[3,"Step2",159,[[1,-4462,[2317],[0],2318]],[1,0,0.192,0]],[3,"Step3",159,[[1,-4463,[2319],[0],2320]],[1,0,0.113,0]],[3,"Step4",159,[[1,-4464,[2321],[0],2322]],[1,0,0.228,0.041]],[2,"Step0",160,[[1,-4465,[2323],[0],2324]]],[3,"Step1",160,[[1,-4466,[2325],[0],2326]],[1,0,0.134,0.007]],[4,"Step2",false,160,[[1,-4467,[2327],[0],2328]],[1,0,0.216,0]],[4,"Step3",false,160,[[1,-4468,[2329],[0],2330]],[1,0,0.124,0]],[4,"Step4",false,160,[[1,-4469,[2331],[0],2332]],[1,0,0.238,0.041]],[2,"Step0",161,[[1,-4470,[2333],[0],2334]]],[3,"Step1",161,[[1,-4471,[2335],[0],2336]],[1,0,0.142,0]],[3,"Step2",161,[[1,-4472,[2337],[0],2338]],[1,0,0.197,0]],[3,"Step3",161,[[1,-4473,[2339],[0],2340]],[1,0,0.187,0]],[3,"Step4",161,[[1,-4474,[2341],[0],2342]],[1,0.023,0.264,0]],[2,"Step0",162,[[1,-4475,[2343],[0],2344]]],[3,"Step1",162,[[1,-4476,[2345],[0],2346]],[1,0,0.134,0.007]],[3,"Step2",162,[[1,-4477,[2347],[0],2348]],[1,0,0.192,0]],[3,"Step3",162,[[1,-4478,[2349],[0],2350]],[1,0,0.113,0]],[3,"Step4",162,[[1,-4479,[2351],[0],2352]],[1,0,0.228,0.041]],[2,"Step0",163,[[1,-4480,[2353],[0],2354]]],[3,"Step1",163,[[1,-4481,[2355],[0],2356]],[1,0,0.134,0.007]],[4,"Step2",false,163,[[1,-4482,[2357],[0],2358]],[1,0,0.216,0]],[4,"Step3",false,163,[[1,-4483,[2359],[0],2360]],[1,0,0.124,0]],[4,"Step4",false,163,[[1,-4484,[2361],[0],2362]],[1,0,0.238,0.041]],[2,"Step0",164,[[1,-4485,[2363],[0],2364]]],[3,"Step1",164,[[1,-4486,[2365],[0],2366]],[1,0,0.142,0]],[3,"Step2",164,[[1,-4487,[2367],[0],2368]],[1,0,0.197,0]],[3,"Step3",164,[[1,-4488,[2369],[0],2370]],[1,0,0.187,0]],[3,"Step4",164,[[1,-4489,[2371],[0],2372]],[1,0.023,0.264,0]],[2,"Step0",165,[[1,-4490,[2373],[0],2374]]],[3,"Step1",165,[[1,-4491,[2375],[0],2376]],[1,0,0.134,0.007]],[3,"Step2",165,[[1,-4492,[2377],[0],2378]],[1,0,0.192,0]],[3,"Step3",165,[[1,-4493,[2379],[0],2380]],[1,0,0.113,0]],[3,"Step4",165,[[1,-4494,[2381],[0],2382]],[1,0,0.228,0.041]],[2,"Step0",166,[[1,-4495,[2383],[0],2384]]],[3,"Step1",166,[[1,-4496,[2385],[0],2386]],[1,0,0.134,0.007]],[4,"Step2",false,166,[[1,-4497,[2387],[0],2388]],[1,0,0.216,0]],[4,"Step3",false,166,[[1,-4498,[2389],[0],2390]],[1,0,0.124,0]],[4,"Step4",false,166,[[1,-4499,[2391],[0],2392]],[1,0,0.238,0.041]],[2,"Step0",167,[[1,-4500,[2393],[0],2394]]],[3,"Step1",167,[[1,-4501,[2395],[0],2396]],[1,0,0.142,0]],[3,"Step2",167,[[1,-4502,[2397],[0],2398]],[1,0,0.197,0]],[3,"Step3",167,[[1,-4503,[2399],[0],2400]],[1,0,0.187,0]],[3,"Step4",167,[[1,-4504,[2401],[0],2402]],[1,0.023,0.264,0]],[2,"Step0",168,[[1,-4505,[2403],[0],2404]]],[3,"Step1",168,[[1,-4506,[2405],[0],2406]],[1,0,0.134,0.007]],[3,"Step2",168,[[1,-4507,[2407],[0],2408]],[1,0,0.192,0]],[3,"Step3",168,[[1,-4508,[2409],[0],2410]],[1,0,0.113,0]],[3,"Step4",168,[[1,-4509,[2411],[0],2412]],[1,0,0.228,0.041]],[2,"Step0",169,[[1,-4510,[2413],[0],2414]]],[3,"Step1",169,[[1,-4511,[2415],[0],2416]],[1,0,0.134,0.007]],[4,"Step2",false,169,[[1,-4512,[2417],[0],2418]],[1,0,0.216,0]],[4,"Step3",false,169,[[1,-4513,[2419],[0],2420]],[1,0,0.124,0]],[4,"Step4",false,169,[[1,-4514,[2421],[0],2422]],[1,0,0.238,0.041]],[2,"Step0",170,[[1,-4515,[2423],[0],2424]]],[3,"Step1",170,[[1,-4516,[2425],[0],2426]],[1,0,0.142,0]],[3,"Step2",170,[[1,-4517,[2427],[0],2428]],[1,0,0.197,0]],[3,"Step3",170,[[1,-4518,[2429],[0],2430]],[1,0,0.187,0]],[3,"Step4",170,[[1,-4519,[2431],[0],2432]],[1,0.023,0.264,0]],[2,"Giftbox_1",877,[[1,-4520,[2436],[0],2437]]],[3,"Giftbox_2",877,[[1,-4521,[2438,2439],[0],2440]],[1,0,0.8798682689666748,1.1072489023208618]],[2,"Step0",171,[[1,-4522,[2441],[0],2442]]],[3,"Step1",171,[[1,-4523,[2443],[0],2444]],[1,0,0.134,0.007]],[3,"Step2",171,[[1,-4524,[2445],[0],2446]],[1,0,0.192,0]],[3,"Step3",171,[[1,-4525,[2447],[0],2448]],[1,0,0.113,0]],[3,"Step4",171,[[1,-4526,[2449],[0],2450]],[1,0,0.228,0.041]],[2,"Step0",172,[[1,-4527,[2451],[0],2452]]],[3,"Step1",172,[[1,-4528,[2453],[0],2454]],[1,0,0.134,0.007]],[4,"Step2",false,172,[[1,-4529,[2455],[0],2456]],[1,0,0.216,0]],[4,"Step3",false,172,[[1,-4530,[2457],[0],2458]],[1,0,0.124,0]],[4,"Step4",false,172,[[1,-4531,[2459],[0],2460]],[1,0,0.238,0.041]],[2,"Step0",173,[[1,-4532,[2461],[0],2462]]],[3,"Step1",173,[[1,-4533,[2463],[0],2464]],[1,0,0.142,0]],[4,"Step2",false,173,[[1,-4534,[2465],[0],2466]],[1,0,0.197,0]],[4,"Step3",false,173,[[1,-4535,[2467],[0],2468]],[1,0,0.187,0]],[4,"Step4",false,173,[[1,-4536,[2469],[0],2470]],[1,0.023,0.264,0]],[2,"Step0",174,[[1,-4537,[2471],[0],2472]]],[3,"Step1",174,[[1,-4538,[2473],[0],2474]],[1,0,0.134,0.007]],[3,"Step2",174,[[1,-4539,[2475],[0],2476]],[1,0,0.192,0]],[3,"Step3",174,[[1,-4540,[2477],[0],2478]],[1,0,0.113,0]],[3,"Step4",174,[[1,-4541,[2479],[0],2480]],[1,0,0.228,0.041]],[2,"Step0",175,[[1,-4542,[2481],[0],2482]]],[3,"Step1",175,[[1,-4543,[2483],[0],2484]],[1,0,0.134,0.007]],[4,"Step2",false,175,[[1,-4544,[2485],[0],2486]],[1,0,0.216,0]],[4,"Step3",false,175,[[1,-4545,[2487],[0],2488]],[1,0,0.124,0]],[4,"Step4",false,175,[[1,-4546,[2489],[0],2490]],[1,0,0.238,0.041]],[2,"Step0",176,[[1,-4547,[2491],[0],2492]]],[3,"Step1",176,[[1,-4548,[2493],[0],2494]],[1,0,0.142,0]],[4,"Step2",false,176,[[1,-4549,[2495],[0],2496]],[1,0,0.197,0]],[4,"Step3",false,176,[[1,-4550,[2497],[0],2498]],[1,0,0.187,0]],[4,"Step4",false,176,[[1,-4551,[2499],[0],2500]],[1,0.023,0.264,0]],[2,"Step0",177,[[1,-4552,[2501],[0],2502]]],[3,"Step1",177,[[1,-4553,[2503],[0],2504]],[1,0,0.134,0.007]],[3,"Step2",177,[[1,-4554,[2505],[0],2506]],[1,0,0.192,0]],[3,"Step3",177,[[1,-4555,[2507],[0],2508]],[1,0,0.113,0]],[3,"Step4",177,[[1,-4556,[2509],[0],2510]],[1,0,0.228,0.041]],[2,"Step0",178,[[1,-4557,[2511],[0],2512]]],[3,"Step1",178,[[1,-4558,[2513],[0],2514]],[1,0,0.134,0.007]],[4,"Step2",false,178,[[1,-4559,[2515],[0],2516]],[1,0,0.216,0]],[4,"Step3",false,178,[[1,-4560,[2517],[0],2518]],[1,0,0.124,0]],[4,"Step4",false,178,[[1,-4561,[2519],[0],2520]],[1,0,0.238,0.041]],[2,"Step0",179,[[1,-4562,[2521],[0],2522]]],[3,"Step1",179,[[1,-4563,[2523],[0],2524]],[1,0,0.142,0]],[4,"Step2",false,179,[[1,-4564,[2525],[0],2526]],[1,0,0.197,0]],[4,"Step3",false,179,[[1,-4565,[2527],[0],2528]],[1,0,0.187,0]],[4,"Step4",false,179,[[1,-4566,[2529],[0],2530]],[1,0.023,0.264,0]],[2,"Step0",180,[[1,-4567,[2531],[0],2532]]],[3,"Step1",180,[[1,-4568,[2533],[0],2534]],[1,0,0.134,0.007]],[3,"Step2",180,[[1,-4569,[2535],[0],2536]],[1,0,0.192,0]],[3,"Step3",180,[[1,-4570,[2537],[0],2538]],[1,0,0.113,0]],[3,"Step4",180,[[1,-4571,[2539],[0],2540]],[1,0,0.228,0.041]],[2,"Step0",181,[[1,-4572,[2541],[0],2542]]],[3,"Step1",181,[[1,-4573,[2543],[0],2544]],[1,0,0.134,0.007]],[4,"Step2",false,181,[[1,-4574,[2545],[0],2546]],[1,0,0.216,0]],[4,"Step3",false,181,[[1,-4575,[2547],[0],2548]],[1,0,0.124,0]],[4,"Step4",false,181,[[1,-4576,[2549],[0],2550]],[1,0,0.238,0.041]],[2,"Step0",182,[[1,-4577,[2551],[0],2552]]],[3,"Step1",182,[[1,-4578,[2553],[0],2554]],[1,0,0.142,0]],[4,"Step2",false,182,[[1,-4579,[2555],[0],2556]],[1,0,0.197,0]],[4,"Step3",false,182,[[1,-4580,[2557],[0],2558]],[1,0,0.187,0]],[4,"Step4",false,182,[[1,-4581,[2559],[0],2560]],[1,0.023,0.264,0]],[2,"Step0",183,[[1,-4582,[2561],[0],2562]]],[3,"Step1",183,[[1,-4583,[2563],[0],2564]],[1,0,0.134,0.007]],[3,"Step2",183,[[1,-4584,[2565],[0],2566]],[1,0,0.192,0]],[3,"Step3",183,[[1,-4585,[2567],[0],2568]],[1,0,0.113,0]],[3,"Step4",183,[[1,-4586,[2569],[0],2570]],[1,0,0.228,0.041]],[2,"Step0",184,[[1,-4587,[2571],[0],2572]]],[3,"Step1",184,[[1,-4588,[2573],[0],2574]],[1,0,0.134,0.007]],[4,"Step2",false,184,[[1,-4589,[2575],[0],2576]],[1,0,0.216,0]],[4,"Step3",false,184,[[1,-4590,[2577],[0],2578]],[1,0,0.124,0]],[4,"Step4",false,184,[[1,-4591,[2579],[0],2580]],[1,0,0.238,0.041]],[2,"Step0",185,[[1,-4592,[2581],[0],2582]]],[3,"Step1",185,[[1,-4593,[2583],[0],2584]],[1,0,0.142,0]],[4,"Step2",false,185,[[1,-4594,[2585],[0],2586]],[1,0,0.197,0]],[4,"Step3",false,185,[[1,-4595,[2587],[0],2588]],[1,0,0.187,0]],[4,"Step4",false,185,[[1,-4596,[2589],[0],2590]],[1,0.023,0.264,0]],[2,"Step0",186,[[1,-4597,[2591],[0],2592]]],[3,"Step1",186,[[1,-4598,[2593],[0],2594]],[1,0,0.134,0.007]],[3,"Step2",186,[[1,-4599,[2595],[0],2596]],[1,0,0.192,0]],[3,"Step3",186,[[1,-4600,[2597],[0],2598]],[1,0,0.113,0]],[3,"Step4",186,[[1,-4601,[2599],[0],2600]],[1,0,0.228,0.041]],[2,"Step0",187,[[1,-4602,[2601],[0],2602]]],[3,"Step1",187,[[1,-4603,[2603],[0],2604]],[1,0,0.134,0.007]],[4,"Step2",false,187,[[1,-4604,[2605],[0],2606]],[1,0,0.216,0]],[4,"Step3",false,187,[[1,-4605,[2607],[0],2608]],[1,0,0.124,0]],[4,"Step4",false,187,[[1,-4606,[2609],[0],2610]],[1,0,0.238,0.041]],[2,"Step0",188,[[1,-4607,[2611],[0],2612]]],[3,"Step1",188,[[1,-4608,[2613],[0],2614]],[1,0,0.142,0]],[4,"Step2",false,188,[[1,-4609,[2615],[0],2616]],[1,0,0.197,0]],[4,"Step3",false,188,[[1,-4610,[2617],[0],2618]],[1,0,0.187,0]],[4,"Step4",false,188,[[1,-4611,[2619],[0],2620]],[1,0.023,0.264,0]],[2,"Step0",189,[[1,-4612,[2621],[0],2622]]],[3,"Step1",189,[[1,-4613,[2623],[0],2624]],[1,0,0.134,0.007]],[3,"Step2",189,[[1,-4614,[2625],[0],2626]],[1,0,0.192,0]],[3,"Step3",189,[[1,-4615,[2627],[0],2628]],[1,0,0.113,0]],[3,"Step4",189,[[1,-4616,[2629],[0],2630]],[1,0,0.228,0.041]],[2,"Step0",190,[[1,-4617,[2631],[0],2632]]],[3,"Step1",190,[[1,-4618,[2633],[0],2634]],[1,0,0.134,0.007]],[4,"Step2",false,190,[[1,-4619,[2635],[0],2636]],[1,0,0.216,0]],[4,"Step3",false,190,[[1,-4620,[2637],[0],2638]],[1,0,0.124,0]],[4,"Step4",false,190,[[1,-4621,[2639],[0],2640]],[1,0,0.238,0.041]],[2,"Step0",191,[[1,-4622,[2641],[0],2642]]],[3,"Step1",191,[[1,-4623,[2643],[0],2644]],[1,0,0.142,0]],[4,"Step2",false,191,[[1,-4624,[2645],[0],2646]],[1,0,0.197,0]],[4,"Step3",false,191,[[1,-4625,[2647],[0],2648]],[1,0,0.187,0]],[4,"Step4",false,191,[[1,-4626,[2649],[0],2650]],[1,0.023,0.264,0]],[2,"Step0",192,[[1,-4627,[2651],[0],2652]]],[3,"Step1",192,[[1,-4628,[2653],[0],2654]],[1,0,0.134,0.007]],[3,"Step2",192,[[1,-4629,[2655],[0],2656]],[1,0,0.192,0]],[3,"Step3",192,[[1,-4630,[2657],[0],2658]],[1,0,0.113,0]],[3,"Step4",192,[[1,-4631,[2659],[0],2660]],[1,0,0.228,0.041]],[2,"Step0",193,[[1,-4632,[2661],[0],2662]]],[3,"Step1",193,[[1,-4633,[2663],[0],2664]],[1,0,0.134,0.007]],[4,"Step2",false,193,[[1,-4634,[2665],[0],2666]],[1,0,0.216,0]],[4,"Step3",false,193,[[1,-4635,[2667],[0],2668]],[1,0,0.124,0]],[4,"Step4",false,193,[[1,-4636,[2669],[0],2670]],[1,0,0.238,0.041]],[2,"Step0",194,[[1,-4637,[2671],[0],2672]]],[3,"Step1",194,[[1,-4638,[2673],[0],2674]],[1,0,0.142,0]],[4,"Step2",false,194,[[1,-4639,[2675],[0],2676]],[1,0,0.197,0]],[4,"Step3",false,194,[[1,-4640,[2677],[0],2678]],[1,0,0.187,0]],[4,"Step4",false,194,[[1,-4641,[2679],[0],2680]],[1,0.023,0.264,0]],[2,"Step0",195,[[1,-4642,[2681],[0],2682]]],[3,"Step1",195,[[1,-4643,[2683],[0],2684]],[1,0,0.134,0.007]],[3,"Step2",195,[[1,-4644,[2685],[0],2686]],[1,0,0.192,0]],[3,"Step3",195,[[1,-4645,[2687],[0],2688]],[1,0,0.113,0]],[3,"Step4",195,[[1,-4646,[2689],[0],2690]],[1,0,0.228,0.041]],[2,"Step0",196,[[1,-4647,[2691],[0],2692]]],[3,"Step1",196,[[1,-4648,[2693],[0],2694]],[1,0,0.134,0.007]],[4,"Step2",false,196,[[1,-4649,[2695],[0],2696]],[1,0,0.216,0]],[4,"Step3",false,196,[[1,-4650,[2697],[0],2698]],[1,0,0.124,0]],[4,"Step4",false,196,[[1,-4651,[2699],[0],2700]],[1,0,0.238,0.041]],[2,"Step0",197,[[1,-4652,[2701],[0],2702]]],[3,"Step1",197,[[1,-4653,[2703],[0],2704]],[1,0,0.142,0]],[4,"Step2",false,197,[[1,-4654,[2705],[0],2706]],[1,0,0.197,0]],[4,"Step3",false,197,[[1,-4655,[2707],[0],2708]],[1,0,0.187,0]],[4,"Step4",false,197,[[1,-4656,[2709],[0],2710]],[1,0.023,0.264,0]],[2,"Step0",198,[[1,-4657,[2711],[0],2712]]],[3,"Step1",198,[[1,-4658,[2713],[0],2714]],[1,0,0.134,0.007]],[3,"Step2",198,[[1,-4659,[2715],[0],2716]],[1,0,0.192,0]],[3,"Step3",198,[[1,-4660,[2717],[0],2718]],[1,0,0.113,0]],[3,"Step4",198,[[1,-4661,[2719],[0],2720]],[1,0,0.228,0.041]],[2,"Step0",199,[[1,-4662,[2721],[0],2722]]],[3,"Step1",199,[[1,-4663,[2723],[0],2724]],[1,0,0.134,0.007]],[4,"Step2",false,199,[[1,-4664,[2725],[0],2726]],[1,0,0.216,0]],[4,"Step3",false,199,[[1,-4665,[2727],[0],2728]],[1,0,0.124,0]],[4,"Step4",false,199,[[1,-4666,[2729],[0],2730]],[1,0,0.238,0.041]],[2,"Step0",200,[[1,-4667,[2731],[0],2732]]],[3,"Step1",200,[[1,-4668,[2733],[0],2734]],[1,0,0.142,0]],[4,"Step2",false,200,[[1,-4669,[2735],[0],2736]],[1,0,0.197,0]],[4,"Step3",false,200,[[1,-4670,[2737],[0],2738]],[1,0,0.187,0]],[4,"Step4",false,200,[[1,-4671,[2739],[0],2740]],[1,0.023,0.264,0]],[2,"Step0",201,[[1,-4672,[2741],[0],2742]]],[3,"Step1",201,[[1,-4673,[2743],[0],2744]],[1,0,0.134,0.007]],[3,"Step2",201,[[1,-4674,[2745],[0],2746]],[1,0,0.192,0]],[3,"Step3",201,[[1,-4675,[2747],[0],2748]],[1,0,0.113,0]],[3,"Step4",201,[[1,-4676,[2749],[0],2750]],[1,0,0.228,0.041]],[2,"Step0",202,[[1,-4677,[2751],[0],2752]]],[3,"Step1",202,[[1,-4678,[2753],[0],2754]],[1,0,0.134,0.007]],[4,"Step2",false,202,[[1,-4679,[2755],[0],2756]],[1,0,0.216,0]],[4,"Step3",false,202,[[1,-4680,[2757],[0],2758]],[1,0,0.124,0]],[4,"Step4",false,202,[[1,-4681,[2759],[0],2760]],[1,0,0.238,0.041]],[2,"Step0",203,[[1,-4682,[2761],[0],2762]]],[3,"Step1",203,[[1,-4683,[2763],[0],2764]],[1,0,0.142,0]],[4,"Step2",false,203,[[1,-4684,[2765],[0],2766]],[1,0,0.197,0]],[4,"Step3",false,203,[[1,-4685,[2767],[0],2768]],[1,0,0.187,0]],[4,"Step4",false,203,[[1,-4686,[2769],[0],2770]],[1,0.023,0.264,0]],[2,"Step0",204,[[1,-4687,[2771],[0],2772]]],[3,"Step1",204,[[1,-4688,[2773],[0],2774]],[1,0,0.134,0.007]],[3,"Step2",204,[[1,-4689,[2775],[0],2776]],[1,0,0.192,0]],[3,"Step3",204,[[1,-4690,[2777],[0],2778]],[1,0,0.113,0]],[3,"Step4",204,[[1,-4691,[2779],[0],2780]],[1,0,0.228,0.041]],[2,"Step0",205,[[1,-4692,[2781],[0],2782]]],[3,"Step1",205,[[1,-4693,[2783],[0],2784]],[1,0,0.134,0.007]],[4,"Step2",false,205,[[1,-4694,[2785],[0],2786]],[1,0,0.216,0]],[4,"Step3",false,205,[[1,-4695,[2787],[0],2788]],[1,0,0.124,0]],[4,"Step4",false,205,[[1,-4696,[2789],[0],2790]],[1,0,0.238,0.041]],[2,"Step0",206,[[1,-4697,[2791],[0],2792]]],[3,"Step1",206,[[1,-4698,[2793],[0],2794]],[1,0,0.142,0]],[4,"Step2",false,206,[[1,-4699,[2795],[0],2796]],[1,0,0.197,0]],[4,"Step3",false,206,[[1,-4700,[2797],[0],2798]],[1,0,0.187,0]],[4,"Step4",false,206,[[1,-4701,[2799],[0],2800]],[1,0.023,0.264,0]],[168,61,57,60],[74,"Camera",7,[-4702],[1,0,0,1000]],[163,0,1073741824,375,2000,6,41943040,2379,[4,4278190080]],[164,"Camera<CameraComponent>",0,1.3,1822425087,[4,7883827]],[74,"Camera",930,[2381],[1,0,0,-0.589]],[127,"cloud",207,[-4703],[1,2.712,-1.349,0],[3,0,-0.7071067811865476,0,0.7071067811865475],[1,-1,1,1],[1,0,-90.00000000000003,0]],[169,10,2383,[2850],[28],[18,5],[6],[6],[18,1],[6],[6],[18,3.141592653589793],[6],[18,10],[6],[18,1],[18,1000],[47,true,[46,1,[48,[[43,0],[30,255,0.11607142857142858],[30,255,0.84375],[30,0,1]]]]],[106,true,0,[18,1],[1,21.913,0,29.244]],[92,[6],[6],[6],[6]],[56,[6],[6],[6],[18,1]],[49,[6],[6],[6]],[50,[6],[6],[6],[6]],[51,[6],[6],[6]],[177,true,1,5,1,true,[37,1,[32,[0,1],[[70,2,1],[70,2,1]]]],[6]],[52,[18,1],[6],[28],[28],-4704],[110,1,2,2851]],[2,"Box_1",931,[[1,-4705,[2852],[0],2853]]],[73,"Cam",59,[[79,1,-4706,[80,40],[81,[82],[83,[84]]],[85,[86],[87]],[88],[89]]],[1,0,10,3],[3,-0.6087614290087207,0,0,0.7933533402912352],[1,-75,0,0]],[7,"GroundBaseCloud",59,[-4707]],[100,"1",2387,[-4708],[1,0,-1.326,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[170,true,5,2388,[2854],[28],[18,15],[6],[6],[6],[6],[6],[171,360],[6],[18,5],[6],[18,1],[6],[47,true,[46,1,[48,[[43,0],[30,255,0.15],[30,255,0.85],[30,0,1]]]]],[106,true,0,[18,1],[1,1,2,0]],[92,[6],[6],[6],[6]],[56,[6],[6],[6],[18,1]],[49,[6],[6],[6]],[50,[6],[6],[6],[6]],[51,[6],[6],[6]],[178,true,2,1,[37,1,[32,[0,1],[[70,2,1],[70,2,1]]]],[172,3,1]],[52,[18,1],[6],[28],[28],-4709],[111,2,2855]],[2,"Step0",208,[[1,-4710,[2856],[0],2857]]],[3,"Step1",208,[[1,-4711,[2858],[0],2859]],[1,0,0.134,0.007]],[3,"Step2",208,[[1,-4712,[2860],[0],2861]],[1,0,0.192,0]],[3,"Step3",208,[[1,-4713,[2862],[0],2863]],[1,0,0.113,0]],[3,"Step4",208,[[1,-4714,[2864],[0],2865]],[1,0,0.228,0.041]],[2,"Step0",209,[[1,-4715,[2866],[0],2867]]],[3,"Step1",209,[[1,-4716,[2868],[0],2869]],[1,0,0.134,0.007]],[3,"Step2",209,[[1,-4717,[2870],[0],2871]],[1,0,0.216,0]],[3,"Step3",209,[[1,-4718,[2872],[0],2873]],[1,0,0.124,0]],[3,"Step4",209,[[1,-4719,[2874],[0],2875]],[1,0,0.238,0.041]],[2,"Step0",210,[[1,-4720,[2876],[0],2877]]],[3,"Step1",210,[[1,-4721,[2878],[0],2879]],[1,0,0.142,0]],[3,"Step2",210,[[1,-4722,[2880],[0],2881]],[1,0,0.197,0]],[3,"Step3",210,[[1,-4723,[2882],[0],2883]],[1,0,0.187,0]],[3,"Step4",210,[[1,-4724,[2884],[0],2885]],[1,0.023,0.264,0]],[2,"Step0",211,[[1,-4725,[2886],[0],2887]]],[3,"Step1",211,[[1,-4726,[2888],[0],2889]],[1,0,0.134,0.007]],[3,"Step2",211,[[1,-4727,[2890],[0],2891]],[1,0,0.192,0]],[3,"Step3",211,[[1,-4728,[2892],[0],2893]],[1,0,0.113,0]],[3,"Step4",211,[[1,-4729,[2894],[0],2895]],[1,0,0.228,0.041]],[2,"Step0",212,[[1,-4730,[2896],[0],2897]]],[3,"Step1",212,[[1,-4731,[2898],[0],2899]],[1,0,0.134,0.007]],[3,"Step2",212,[[1,-4732,[2900],[0],2901]],[1,0,0.216,0]],[3,"Step3",212,[[1,-4733,[2902],[0],2903]],[1,0,0.124,0]],[3,"Step4",212,[[1,-4734,[2904],[0],2905]],[1,0,0.238,0.041]],[2,"Step0",213,[[1,-4735,[2906],[0],2907]]],[3,"Step1",213,[[1,-4736,[2908],[0],2909]],[1,0,0.142,0]],[3,"Step2",213,[[1,-4737,[2910],[0],2911]],[1,0,0.197,0]],[3,"Step3",213,[[1,-4738,[2912],[0],2913]],[1,0,0.187,0]],[3,"Step4",213,[[1,-4739,[2914],[0],2915]],[1,0.023,0.264,0]],[2,"Step0",214,[[1,-4740,[2916],[0],2917]]],[3,"Step1",214,[[1,-4741,[2918],[0],2919]],[1,0,0.134,0.007]],[3,"Step2",214,[[1,-4742,[2920],[0],2921]],[1,0,0.192,0]],[3,"Step3",214,[[1,-4743,[2922],[0],2923]],[1,0,0.113,0]],[3,"Step4",214,[[1,-4744,[2924],[0],2925]],[1,0,0.228,0.041]],[2,"Step0",215,[[1,-4745,[2926],[0],2927]]],[3,"Step1",215,[[1,-4746,[2928],[0],2929]],[1,0,0.134,0.007]],[3,"Step2",215,[[1,-4747,[2930],[0],2931]],[1,0,0.216,0]],[3,"Step3",215,[[1,-4748,[2932],[0],2933]],[1,0,0.124,0]],[3,"Step4",215,[[1,-4749,[2934],[0],2935]],[1,0,0.238,0.041]],[2,"Step0",216,[[1,-4750,[2936],[0],2937]]],[3,"Step1",216,[[1,-4751,[2938],[0],2939]],[1,0,0.142,0]],[3,"Step2",216,[[1,-4752,[2940],[0],2941]],[1,0,0.197,0]],[3,"Step3",216,[[1,-4753,[2942],[0],2943]],[1,0,0.187,0]],[3,"Step4",216,[[1,-4754,[2944],[0],2945]],[1,0.023,0.264,0]],[2,"Step0",217,[[1,-4755,[2946],[0],2947]]],[3,"Step1",217,[[1,-4756,[2948],[0],2949]],[1,0,0.134,0.007]],[3,"Step2",217,[[1,-4757,[2950],[0],2951]],[1,0,0.192,0]],[3,"Step3",217,[[1,-4758,[2952],[0],2953]],[1,0,0.113,0]],[3,"Step4",217,[[1,-4759,[2954],[0],2955]],[1,0,0.228,0.041]],[2,"Step0",218,[[1,-4760,[2956],[0],2957]]],[3,"Step1",218,[[1,-4761,[2958],[0],2959]],[1,0,0.134,0.007]],[3,"Step2",218,[[1,-4762,[2960],[0],2961]],[1,0,0.216,0]],[3,"Step3",218,[[1,-4763,[2962],[0],2963]],[1,0,0.124,0]],[3,"Step4",218,[[1,-4764,[2964],[0],2965]],[1,0,0.238,0.041]],[2,"Step0",219,[[1,-4765,[2966],[0],2967]]],[3,"Step1",219,[[1,-4766,[2968],[0],2969]],[1,0,0.142,0]],[3,"Step2",219,[[1,-4767,[2970],[0],2971]],[1,0,0.197,0]],[3,"Step3",219,[[1,-4768,[2972],[0],2973]],[1,0,0.187,0]],[3,"Step4",219,[[1,-4769,[2974],[0],2975]],[1,0.023,0.264,0]],[2,"Step0",220,[[1,-4770,[2976],[0],2977]]],[3,"Step1",220,[[1,-4771,[2978],[0],2979]],[1,0,0.134,0.007]],[3,"Step2",220,[[1,-4772,[2980],[0],2981]],[1,0,0.192,0]],[3,"Step3",220,[[1,-4773,[2982],[0],2983]],[1,0,0.113,0]],[3,"Step4",220,[[1,-4774,[2984],[0],2985]],[1,0,0.228,0.041]],[2,"Step0",221,[[1,-4775,[2986],[0],2987]]],[3,"Step1",221,[[1,-4776,[2988],[0],2989]],[1,0,0.134,0.007]],[3,"Step2",221,[[1,-4777,[2990],[0],2991]],[1,0,0.216,0]],[3,"Step3",221,[[1,-4778,[2992],[0],2993]],[1,0,0.124,0]],[3,"Step4",221,[[1,-4779,[2994],[0],2995]],[1,0,0.238,0.041]],[2,"Step0",222,[[1,-4780,[2996],[0],2997]]],[3,"Step1",222,[[1,-4781,[2998],[0],2999]],[1,0,0.142,0]],[3,"Step2",222,[[1,-4782,[3000],[0],3001]],[1,0,0.197,0]],[3,"Step3",222,[[1,-4783,[3002],[0],3003]],[1,0,0.187,0]],[3,"Step4",222,[[1,-4784,[3004],[0],3005]],[1,0.023,0.264,0]],[2,"WallCorner_1",681,[[1,-4785,[3086],[0],3087]]],[2,"WallCorner_2",681,[[1,-4786,[3088],[0],3089]]],[2,"WallCorner_3",681,[[1,-4787,[3090],[0],3091]]],[2,"WallCorner_2",682,[[1,-4788,[3092],[0],3093]]],[2,"WallCorner_3",682,[[1,-4789,[3094],[0],3095]]],[2,"WallCorner_4",682,[[1,-4790,[3096],[0],3097]]],[2,"Floor_1",684,[[1,-4791,[3098],[0],3099]]],[2,"Floor_2",684,[[1,-4792,[3100],[0],3101]]],[2,"Floor_3",684,[[1,-4793,[3102],[0],3103]]],[16,"Start",18,[964],[1,0,0,5]],[2,"Oven_1",964,[[1,-4794,[3104],[0],3105]]],[3,"Oven_1_1",964,[[1,-4795,[3106],[0],3107]],[1,0.06256839632987976,0.9000015258789062,0.0019658482633531094]],[16,"Model",965,[-4796],[1,0,0.1,0]],[2,"Counter_1",2477,[[1,-4797,[3108],[0],3109]]],[2,"Step0",235,[[1,-4798,[3110],[0],3111]]],[3,"Step1",235,[[1,-4799,[3112],[0],3113]],[1,0,0.134,0.007]],[3,"Step2",235,[[1,-4800,[3114],[0],3115]],[1,0,0.192,0]],[3,"Step3",235,[[1,-4801,[3116],[0],3117]],[1,0,0.113,0]],[3,"Step4",235,[[1,-4802,[3118],[0],3119]],[1,0,0.228,0.041]],[2,"Step0",236,[[1,-4803,[3120],[0],3121]]],[3,"Step1",236,[[1,-4804,[3122],[0],3123]],[1,0,0.134,0.007]],[4,"Step2",false,236,[[1,-4805,[3124],[0],3125]],[1,0,0.216,0]],[4,"Step3",false,236,[[1,-4806,[3126],[0],3127]],[1,0,0.124,0]],[4,"Step4",false,236,[[1,-4807,[3128],[0],3129]],[1,0,0.238,0.041]],[2,"Step0",237,[[1,-4808,[3130],[0],3131]]],[3,"Step1",237,[[1,-4809,[3132],[0],3133]],[1,0,0.142,0]],[3,"Step2",237,[[1,-4810,[3134],[0],3135]],[1,0,0.197,0]],[3,"Step3",237,[[1,-4811,[3136],[0],3137]],[1,0,0.187,0]],[3,"Step4",237,[[1,-4812,[3138],[0],3139]],[1,0.023,0.264,0]],[16,"Step1_Machine",18,[294],[1,4,0,5]],[2,"Base",294,[[1,-4813,[3140],[0],3141]]],[3,"Move",294,[[1,-4814,[3142],[0],3143]],[1,0.5049796104431152,1.282552719116211,0]],[3,"Floor_1",294,[[1,-4815,[3144],[0],3145]],[1,1,-0.09,0]],[16,"Step2_Machine",18,[295],[1,6,0,5]],[2,"Base",295,[[1,-4816,[3149],[0],3150]]],[3,"Move",295,[[1,-4817,[3151],[0],3152]],[1,0.4989512264728546,1.2769582271575928,0]],[3,"Floor_1",295,[[1,-4818,[3153],[0],3154]],[1,1,-0.09,0]],[16,"Step3_Machine",18,[296],[1,8,0,5]],[2,"Base",296,[[1,-4819,[3158],[0],3159]]],[3,"Move",296,[[1,-4820,[3160],[0],3161]],[1,0.5040755271911621,1.2825144529342651,0]],[3,"Floor_1",296,[[1,-4821,[3162],[0],3163]],[1,1,-0.09,0]],[16,"Step4_Machine",18,[297],[1,10,0,5]],[2,"Base",297,[[1,-4822,[3167],[0],3168]]],[3,"Move",297,[[1,-4823,[3169],[0],3170]],[1,0.49880674481391907,1.274608850479126,0]],[3,"Floor_1",297,[[1,-4824,[3171],[0],3172]],[1,1,-0.09,0]],[2,"Step0",238,[[1,-4825,[3176],[0],3177]]],[3,"Step1",238,[[1,-4826,[3178],[0],3179]],[1,0,0.134,0.007]],[3,"Step2",238,[[1,-4827,[3180],[0],3181]],[1,0,0.192,0]],[3,"Step3",238,[[1,-4828,[3182],[0],3183]],[1,0,0.113,0]],[3,"Step4",238,[[1,-4829,[3184],[0],3185]],[1,0,0.228,0.041]],[2,"Step0",239,[[1,-4830,[3186],[0],3187]]],[3,"Step1",239,[[1,-4831,[3188],[0],3189]],[1,0,0.134,0.007]],[4,"Step2",false,239,[[1,-4832,[3190],[0],3191]],[1,0,0.216,0]],[4,"Step3",false,239,[[1,-4833,[3192],[0],3193]],[1,0,0.124,0]],[4,"Step4",false,239,[[1,-4834,[3194],[0],3195]],[1,0,0.238,0.041]],[2,"Step0",240,[[1,-4835,[3196],[0],3197]]],[3,"Step1",240,[[1,-4836,[3198],[0],3199]],[1,0,0.142,0]],[3,"Step2",240,[[1,-4837,[3200],[0],3201]],[1,0,0.197,0]],[3,"Step3",240,[[1,-4838,[3202],[0],3203]],[1,0,0.187,0]],[3,"Step4",240,[[1,-4839,[3204],[0],3205]],[1,0.023,0.264,0]],[16,"Road",18,[687],[1,12,0,5]],[2,"Bottom",19,[[1,-4840,[3206],[0],3207]]],[3,"Up",19,[[1,-4841,[3208],[0],3209]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",19,[[1,-4842,[3210,3211],[0],3212]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",19,[[1,-4843,[3213],[0],3214]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Side_Front",19,[[1,-4844,[3215],[0],3216]],[1,0.44450104236602783,0.8799406290054321,-3.54534677171614e-8]],[3,"Side_Back",19,[[1,-4845,[3217],[0],3218]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",19,[[1,-4846,[3219],[0],3220]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",19,[[1,-4847,[3221],[0],3222]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",19,[[1,-4848,[3223],[0],3224]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",19,[[1,-4849,[3225],[0],3226]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",20,[[1,-4850,[3227],[0],3228]]],[3,"Up",20,[[1,-4851,[3229],[0],3230]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",20,[[1,-4852,[3231],[0],3232]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",20,[[1,-4853,[3233],[0],3234]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Side_Front",20,[[1,-4854,[3235],[0],3236]],[1,0.44450104236602783,0.8799406290054321,-3.54534677171614e-8]],[3,"Side_Back",20,[[1,-4855,[3237],[0],3238]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",20,[[1,-4856,[3239],[0],3240]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",20,[[1,-4857,[3241],[0],3242]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",20,[[1,-4858,[3243],[0],3244]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",20,[[1,-4859,[3245],[0],3246]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[2,"Bottom",21,[[1,-4860,[3247],[0],3248]]],[3,"Up",21,[[1,-4861,[3249],[0],3250]],[1,0,0.9000015258789062,1.466288495066692e-7]],[3,"Side_Left",21,[[1,-4862,[3251],[0],3252]],[1,-3.2782554626464844e-7,0.8799406886100769,-0.43866488337516785]],[3,"Side_Right",21,[[1,-4863,[3253],[0],3254]],[1,2.9802322387695312e-8,0.8799405097961426,0.4386651813983917]],[3,"Side_Front",21,[[1,-4864,[3255],[0],3256]],[1,0.44450104236602783,0.8799406290054321,-3.54534677171614e-8]],[3,"Side_Back",21,[[1,-4865,[3257],[0],3258]],[1,-0.44522029161453247,0.8799405694007874,0.0000010374301382398698]],[3,"Corner_Front_Right",21,[[1,-4866,[3259],[0],3260]],[1,0.44374775886535645,0.8783205151557922,0.4379602372646332]],[3,"Corner_Back_Right",21,[[1,-4867,[3261],[0],3262]],[1,-0.4442025423049927,0.8779359459877014,0.43771544098854065]],[3,"Corner_Front_Left",21,[[1,-4868,[3263],[0],3264]],[1,0.44367024302482605,0.8773919939994812,-0.438084214925766]],[3,"Corner_Back_Left",21,[[1,-4869,[3265],[0],3266]],[1,-0.44448089599609375,0.8783488869667053,-0.4378247559070587]],[16,"Block",18,[-4870],[1,14,0,5]],[16,"Model",2556,[-4871],[1,0,0.1,0]],[2,"BlockWall_1",2557,[[1,-4872,[3267],[0],3268]]],[7,"Model",234,[-4873]],[16,"Box_1",2559,[-4874],[1,7.273000000000025,0,-5.416000000000054]],[2,"Box_1",2560,[[1,-4875,[3269],[0],3270]]],[7,"SteamFX",688,[-4876]],[100,"1",2562,[-4877],[1,0,1.5,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[90,0.02,false,1,2563,[3271],[28],[18,0.5],[6],[6],[6],[6],[6],[6],[6],[18,0.4],[6],[18,1000],[6],[47,true,[46,1,[48,[[43,255],[43,255],[30,0,1]]]]],[107,true,4,0.176,[18,1]],[69,true,[68,1,2,[32,[0,1],[[29,0.4925925925925926,1,1,1,1],[29,1,0.5074074074074074,1,0.5074074074074074,1]]]],[6],[6],[6]],[56,[6],[6],[6],[37,1,[32,[0,0.4025641025641026],[[29,1,-1,1,-1,1],[29,-0.02962962962962963,-2.5576786978060864,1,-2.5576786978060864,1]]]]],[49,[6],[6],[6]],[50,[6],[6],[6],[6]],[51,[6],[6],[6]],[108,true,2,2,1,[37,1,[32,[0,1],[[60,1,1,1,1],[29,1,1,1,1,1]]]],[6]],[52,[18,1],[6],[28],[28],-4878],[112,3272]],[7,"StartFX",688,[968]],[128,"2",968,[-4879]],[90,0.02,false,1,2566,[3273],[91,[4,4278242559]],[18,1.5],[6],[6],[6],[6],[6],[6],[6],[18,0.3],[6],[18,10000],[6],[47,true,[46,1,[48,[[43,0],[30,255,0.14732142857142858],[30,255,0.7678571428571429],[30,0,0.9955357142857143]]]]],[173,[6]],[69,true,[37,1,[32,[0,1],[[180,2,2.353909465020576,1,2.353909465020576,1],[181,2,1,0.027064146688186644,1,0.027064146688186644,1]]]],[6],[6],[6]],[56,[6],[6],[6],[18,1]],[49,[6],[6],[6]],[50,[6],[6],[6],[6]],[51,[6],[6],[6]],[179,[6],[6]],[52,[6],[6],[28],[28],-4880],[111,2,3274]],[90,0.02,false,50,968,[3275],[91,[4,4278242559]],[18,0.05],[6],[6],[18,3],[6],[6],[6],[6],[18,0.3],[6],[18,100000],[6],[47,true,[46,1,[48,[[43,255],[30,255,0.5848214285714286],[30,0,1]]]]],[174,true,1,0,0.301,[18,1]],[92,[68,1,2,[32,[0,1],[[29,0.4925925925925926,1,1,1,1],[29,1,0.5074074074074074,1,0.5074074074074074,1]]]],[6],[6],[6]],[176,true,[6],[6],[6],[37,1,[32,[0,1],[[182,2,1,1,1],[183,2,1,1]]]]],[49,[6],[6],[6]],[50,[6],[6],[6],[6]],[51,[6],[6],[6]],[109,2,2,1,[37,1,[32,[0,1],[[60,1,1,1,1],[29,1,1,1,1,1]]]],[6]],[52,[18,1],[6],[28],[28],-4881],[184,1,0,-3,3276]],[7,"EndFX",688,[969]],[74,"2",969,[-4882],[1,0,0,-0.211]],[105,0.5,false,2570,[3277],[91,[4,4278245119]],[18,0.5],[6],[6],[18,2],[6],[6],[6],[6],[18,0.3],[6],[18,20],[6],[47,true,[46,1,[48,[[43,255],[30,255,0.5848214285714286],[30,0,1]]]]],[107,true,4,0.349,[18,1]],[69,true,[68,1,2,[32,[0.6256410256410256,1],[[60,1,1,1,1],[29,1,2.671232876712329,1,2.671232876712329,1]]]],[6],[6],[6]],[56,[6],[6],[6],[37,1,[32,[0,0.4025641025641026],[[29,1,-1,1,-1,1],[29,-0.02962962962962963,-2.5576786978060864,1,-2.5576786978060864,1]]]]],[49,[6],[6],[6]],[50,[6],[6],[6],[6]],[51,[6],[6],[6]],[109,2,2,1,[37,1,[32,[0,1],[[60,1,1,1,1],[29,1,1,1,1,1]]]],[6]],[52,[18,1],[6],[28],[28],-4883],[110,1,0,3278]],[105,0.5,false,969,[3279],[28],[18,0.5],[6],[6],[18,0.5],[6],[6],[6],[6],[18,0.3],[6],[18,20],[6],[47,true,[46,1,[48,[[43,255],[30,255,0.5848214285714286],[30,0,1]]]]],[175,true,0,0.301,[18,1]],[69,true,[68,1,2,[32,[0,1],[[29,0.4925925925925926,1,1,1,1],[29,1,0.5074074074074074,1,0.5074074074074074,1]]]],[6],[6],[6]],[56,[6],[6],[6],[37,1,[32,[0,0.4025641025641026],[[29,1,-1,1,-1,1],[29,-0.02962962962962963,-2.5576786978060864,1,-2.5576786978060864,1]]]]],[49,[6],[6],[6]],[50,[6],[6],[6],[6]],[51,[6],[6],[6]],[108,true,2,2,1,[37,1,[32,[0,1],[[60,1,1,1,1],[29,1,1,1,1,1]]]],[6]],[52,[18,1],[6],[28],[28],-4884],[112,3280]],[96,"Light","c0y6F5f+pAvI805TdmxIjx",22,[[185,2,-4885,[186]]],[1,1005.4882329433035,1012.1576756360139,1015.2779630762034],[3,-0.39794263532108054,-0.14918555499681296,-0.06575945053538801,0.9028072803314908],[1,-47.57420979309558,-18.766284623949314,-0.00009371145027960186]]],0,[0,-1,298,0,-2,300,0,-3,302,0,-4,304,0,-5,306,0,-6,308,0,-7,310,0,-8,312,0,-9,314,0,-10,316,0,-11,318,0,-12,320,0,-13,322,0,-14,324,0,-15,326,0,-16,328,0,-17,330,0,-18,332,0,-19,334,0,-20,336,0,-21,338,0,-22,340,0,-23,342,0,-24,344,0,-25,346,0,-26,348,0,-27,350,0,-28,352,0,-29,354,0,-30,356,0,-31,358,0,-32,360,0,-33,362,0,-34,364,0,-35,366,0,-36,368,0,-37,370,0,-38,372,0,-39,374,0,-40,376,0,-41,378,0,-42,380,0,-43,382,0,-44,384,0,-45,386,0,-46,388,0,-47,390,0,-48,392,0,-49,394,0,-50,396,0,-51,398,0,-52,400,0,-53,402,0,-54,404,0,-55,406,0,-56,408,0,-57,410,0,-58,412,0,-59,414,0,-60,416,0,-61,418,0,-62,420,0,-63,422,0,-64,424,0,-65,426,0,-66,428,0,-67,430,0,-68,432,0,-69,434,0,-70,436,0,-71,438,0,-72,440,0,-73,442,0,-74,444,0,-75,446,0,-76,448,0,-77,450,0,-78,452,0,-79,454,0,-80,456,0,-81,458,0,-82,460,0,-83,462,0,-84,464,0,-85,466,0,-86,468,0,-87,470,0,-88,472,0,-89,474,0,-90,476,0,-91,478,0,-92,480,0,-93,482,0,-94,484,0,-95,486,0,-96,488,0,-97,490,0,-98,492,0,-99,494,0,-100,496,0,-101,498,0,-102,500,0,-103,502,0,-104,504,0,-105,506,0,-106,508,0,-107,510,0,-108,512,0,-109,514,0,-110,516,0,-111,518,0,-112,520,0,-113,522,0,-114,524,0,-115,526,0,-116,528,0,-117,530,0,-118,532,0,-119,534,0,-120,536,0,-121,538,0,-122,540,0,-123,542,0,-124,544,0,-125,546,0,-126,548,0,-127,550,0,-128,552,0,-129,554,0,-130,556,0,-131,558,0,-132,560,0,-133,562,0,-134,564,0,-135,566,0,-136,568,0,-137,570,0,-138,572,0,-139,574,0,-140,576,0,-141,578,0,-142,580,0,-143,582,0,-144,584,0,-145,586,0,-146,588,0,-147,590,0,-148,592,0,-149,594,0,-150,596,0,14,234,0,15,207,0,16,620,0,13,68,0,0,2,0,17,672,0,18,12,0,19,56,0,20,26,0,21,9,0,22,8,0,23,63,0,24,58,0,13,1826,0,25,2378,0,26,62,0,27,54,0,28,931,0,0,2,0,0,2,0,-1,242,0,-2,243,0,-3,244,0,-4,245,0,-5,246,0,-6,247,0,-7,248,0,-8,249,0,-9,250,0,-10,251,0,-11,252,0,-12,253,0,-1,254,0,-2,255,0,-3,256,0,-4,257,0,-5,258,0,-6,259,0,-7,260,0,-8,261,0,-9,262,0,-10,263,0,-11,264,0,-12,265,0,-1,266,0,-2,267,0,-3,268,0,-4,269,0,-5,270,0,-6,271,0,-7,272,0,-8,273,0,-9,274,0,-10,275,0,-11,276,0,-12,277,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,283,0,-2,284,0,-3,223,0,-4,285,0,-5,286,0,-6,287,0,-7,288,0,-8,289,0,0,7,0,29,2380,0,0,7,0,0,7,0,0,7,0,-1,2379,0,-2,58,0,-3,54,0,-4,62,0,-5,26,0,-6,8,0,-7,9,0,0,8,0,0,8,0,0,8,0,0,8,0,-1,952,0,-2,677,0,-3,232,0,-4,65,0,-5,678,0,-6,956,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,957,0,-2,679,0,-3,233,0,-4,66,0,-5,680,0,-6,961,0,-1,1423,0,-2,1451,0,-3,1476,0,-4,1501,0,-5,1526,0,-6,1551,0,-7,1576,0,-8,1601,0,-9,1626,0,-10,1651,0,-1,839,0,-2,840,0,-3,841,0,-4,842,0,-5,843,0,-6,844,0,-7,845,0,-8,846,0,-9,847,0,-10,848,0,0,12,0,0,12,0,-1,278,0,-2,279,0,-3,280,0,-4,281,0,-5,282,0,-6,660,0,-7,661,0,0,13,0,0,13,0,-1,890,0,-2,891,0,-3,892,0,-4,893,0,-5,894,0,-6,895,0,-7,896,0,-8,897,0,0,14,0,0,14,0,-1,898,0,-2,899,0,-3,900,0,-4,901,0,-5,902,0,-6,903,0,-7,904,0,-8,905,0,0,15,0,0,15,0,-1,906,0,-2,907,0,-3,908,0,-4,909,0,-5,910,0,-6,911,0,-7,912,0,-8,913,0,0,16,0,0,16,0,-1,914,0,-2,915,0,-3,916,0,-4,917,0,-5,918,0,-6,919,0,-7,920,0,-8,921,0,0,17,0,0,17,0,-1,922,0,-2,923,0,-3,924,0,-4,925,0,-5,926,0,-6,927,0,-7,928,0,-8,929,0,-1,683,0,-2,2474,0,-3,965,0,-4,2494,0,-5,2498,0,-6,2502,0,-7,2506,0,-8,967,0,-9,2525,0,-10,2556,0,-1,2526,0,-2,2527,0,-3,2528,0,-4,2529,0,-5,2530,0,-6,2531,0,-7,2532,0,-8,2533,0,-9,2534,0,-10,2535,0,-1,2536,0,-2,2537,0,-3,2538,0,-4,2539,0,-5,2540,0,-6,2541,0,-7,2542,0,-8,2543,0,-9,2544,0,-10,2545,0,-1,2546,0,-2,2547,0,-3,2548,0,-4,2549,0,-5,2550,0,-6,2551,0,-7,2552,0,-8,2553,0,-9,2554,0,-10,2555,0,-2,2573,0,-3,970,0,-4,971,0,-5,68,0,-6,620,0,-7,207,0,-8,234,0,-1,1424,0,-2,1425,0,-3,1426,0,-4,1427,0,-5,1428,0,-6,1429,0,-7,1430,0,-8,1431,0,-9,1432,0,-1,1433,0,-2,1434,0,-3,1435,0,-4,1436,0,-5,1437,0,-6,1438,0,-7,1439,0,-8,1440,0,-9,1441,0,-1,1442,0,-2,1443,0,-3,1444,0,-4,1445,0,-5,1446,0,-6,1447,0,-7,1448,0,-8,1449,0,-9,1450,0,0,26,0,0,26,0,8,26,0,0,26,0,0,26,0,-1,674,0,-2,675,0,-3,676,0,-1,1452,0,-2,1453,0,-3,1454,0,-4,1455,0,-5,1456,0,-6,1457,0,-7,1458,0,-8,1459,0,-1,1460,0,-2,1461,0,-3,1462,0,-4,1463,0,-5,1464,0,-6,1465,0,-7,1466,0,-8,1467,0,-1,1468,0,-2,1469,0,-3,1470,0,-4,1471,0,-5,1472,0,-6,1473,0,-7,1474,0,-8,1475,0,-1,1477,0,-2,1478,0,-3,1479,0,-4,1480,0,-5,1481,0,-6,1482,0,-7,1483,0,-8,1484,0,-1,1485,0,-2,1486,0,-3,1487,0,-4,1488,0,-5,1489,0,-6,1490,0,-7,1491,0,-8,1492,0,-1,1493,0,-2,1494,0,-3,1495,0,-4,1496,0,-5,1497,0,-6,1498,0,-7,1499,0,-8,1500,0,-1,1502,0,-2,1503,0,-3,1504,0,-4,1505,0,-5,1506,0,-6,1507,0,-7,1508,0,-8,1509,0,-1,1510,0,-2,1511,0,-3,1512,0,-4,1513,0,-5,1514,0,-6,1515,0,-7,1516,0,-8,1517,0,-1,1518,0,-2,1519,0,-3,1520,0,-4,1521,0,-5,1522,0,-6,1523,0,-7,1524,0,-8,1525,0,-1,1527,0,-2,1528,0,-3,1529,0,-4,1530,0,-5,1531,0,-6,1532,0,-7,1533,0,-8,1534,0,-1,1535,0,-2,1536,0,-3,1537,0,-4,1538,0,-5,1539,0,-6,1540,0,-7,1541,0,-8,1542,0,-1,1543,0,-2,1544,0,-3,1545,0,-4,1546,0,-5,1547,0,-6,1548,0,-7,1549,0,-8,1550,0,-1,1552,0,-2,1553,0,-3,1554,0,-4,1555,0,-5,1556,0,-6,1557,0,-7,1558,0,-8,1559,0,-1,1560,0,-2,1561,0,-3,1562,0,-4,1563,0,-5,1564,0,-6,1565,0,-7,1566,0,-8,1567,0,-1,1568,0,-2,1569,0,-3,1570,0,-4,1571,0,-5,1572,0,-6,1573,0,-7,1574,0,-8,1575,0,-1,1577,0,-2,1578,0,-3,1579,0,-4,1580,0,-5,1581,0,-6,1582,0,-7,1583,0,-8,1584,0,-1,1585,0,-2,1586,0,-3,1587,0,-4,1588,0,-5,1589,0,-6,1590,0,-7,1591,0,-8,1592,0,-1,1593,0,-2,1594,0,-3,1595,0,-4,1596,0,-5,1597,0,-6,1598,0,-7,1599,0,-8,1600,0,-1,1602,0,-2,1603,0,-3,1604,0,-4,1605,0,-5,1606,0,-6,1607,0,-7,1608,0,-8,1609,0,-1,1610,0,-2,1611,0,-3,1612,0,-4,1613,0,-5,1614,0,-6,1615,0,-7,1616,0,-8,1617,0,-1,1618,0,-2,1619,0,-3,1620,0,-4,1621,0,-5,1622,0,-6,1623,0,-7,1624,0,-8,1625,0,-1,1627,0,-2,1628,0,-3,1629,0,-4,1630,0,-5,1631,0,-6,1632,0,-7,1633,0,-8,1634,0,-1,1635,0,-2,1636,0,-3,1637,0,-4,1638,0,-5,1639,0,-6,1640,0,-7,1641,0,-8,1642,0,-1,1643,0,-2,1644,0,-3,1645,0,-4,1646,0,-5,1647,0,-6,1648,0,-7,1649,0,-8,1650,0,-1,1652,0,-2,1653,0,-3,1654,0,-4,1655,0,-5,1656,0,-6,1657,0,-7,1658,0,-8,1659,0,-1,1660,0,-2,1661,0,-3,1662,0,-4,1663,0,-5,1664,0,-6,1665,0,-7,1666,0,-8,1667,0,-1,1668,0,-2,1669,0,-3,1670,0,-4,1671,0,-5,1672,0,-6,1673,0,-7,1674,0,-8,1675,0,0,54,0,0,54,0,-2,64,0,-3,55,0,-4,56,0,-5,672,0,0,55,0,0,55,0,8,55,0,0,55,0,0,55,0,-1,667,0,-2,668,0,-3,669,0,0,56,0,0,56,0,-1,224,0,-2,291,0,-3,292,0,-4,670,0,-5,671,0,0,57,0,0,57,0,8,57,0,12,61,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,12,58,0,0,58,0,0,58,0,0,59,0,2,59,0,2,59,0,2,59,0,2,59,0,-5,2386,0,-6,2387,0,0,60,0,0,60,0,8,60,0,12,61,0,0,60,0,0,60,0,0,60,0,-1,2378,0,-1,621,0,-2,634,0,-3,647,0,0,62,0,0,62,0,-1,67,0,-1,932,0,-2,933,0,-3,934,0,-4,935,0,-5,936,0,0,64,0,0,64,0,8,64,0,0,64,0,0,64,0,-1,937,0,0,65,0,0,65,0,0,65,0,0,65,0,-1,954,0,-2,955,0,0,66,0,0,66,0,0,66,0,0,66,0,-1,959,0,-2,960,0,0,67,0,0,67,0,8,67,0,0,67,0,0,67,0,0,67,0,-1,972,0,-2,241,0,-3,618,0,-4,619,0,-1,1676,0,-2,1677,0,-3,1678,0,-4,1679,0,-5,1680,0,-1,1681,0,-2,1682,0,-3,1683,0,-4,1684,0,-5,1685,0,-1,1686,0,-2,1687,0,-3,1688,0,-4,1689,0,-5,1690,0,-1,1691,0,-2,1692,0,-3,1693,0,-4,1694,0,-5,1695,0,-1,1696,0,-2,1697,0,-3,1698,0,-4,1699,0,-5,1700,0,-1,1701,0,-2,1702,0,-3,1703,0,-4,1704,0,-5,1705,0,-1,1706,0,-2,1707,0,-3,1708,0,-4,1709,0,-5,1710,0,-1,1711,0,-2,1712,0,-3,1713,0,-4,1714,0,-5,1715,0,-1,1716,0,-2,1717,0,-3,1718,0,-4,1719,0,-5,1720,0,-1,1721,0,-2,1722,0,-3,1723,0,-4,1724,0,-5,1725,0,-1,1726,0,-2,1727,0,-3,1728,0,-4,1729,0,-5,1730,0,-1,1731,0,-2,1732,0,-3,1733,0,-4,1734,0,-5,1735,0,-1,1736,0,-2,1737,0,-3,1738,0,-4,1739,0,-5,1740,0,-1,1741,0,-2,1742,0,-3,1743,0,-4,1744,0,-5,1745,0,-1,1746,0,-2,1747,0,-3,1748,0,-4,1749,0,-5,1750,0,-1,1751,0,-2,1752,0,-3,1753,0,-4,1754,0,-5,1755,0,-1,1756,0,-2,1757,0,-3,1758,0,-4,1759,0,-5,1760,0,-1,1761,0,-2,1762,0,-3,1763,0,-4,1764,0,-5,1765,0,-1,1766,0,-2,1767,0,-3,1768,0,-4,1769,0,-5,1770,0,-1,1771,0,-2,1772,0,-3,1773,0,-4,1774,0,-5,1775,0,-1,1776,0,-2,1777,0,-3,1778,0,-4,1779,0,-5,1780,0,-1,1781,0,-2,1782,0,-3,1783,0,-4,1784,0,-5,1785,0,-1,1786,0,-2,1787,0,-3,1788,0,-4,1789,0,-5,1790,0,-1,1791,0,-2,1792,0,-3,1793,0,-4,1794,0,-5,1795,0,-1,1796,0,-2,1797,0,-3,1798,0,-4,1799,0,-5,1800,0,-1,1801,0,-2,1802,0,-3,1803,0,-4,1804,0,-5,1805,0,-1,1806,0,-2,1807,0,-3,1808,0,-4,1809,0,-5,1810,0,-1,1811,0,-2,1812,0,-3,1813,0,-4,1814,0,-5,1815,0,-1,1816,0,-2,1817,0,-3,1818,0,-4,1819,0,-5,1820,0,-1,1821,0,-2,1822,0,-3,1823,0,-4,1824,0,-5,1825,0,-1,1834,0,-2,1835,0,-3,1836,0,-4,1837,0,-5,1838,0,-1,1839,0,-2,1840,0,-3,1841,0,-4,1842,0,-5,1843,0,-1,1844,0,-2,1845,0,-3,1846,0,-4,1847,0,-5,1848,0,-1,1849,0,-2,1850,0,-3,1851,0,-4,1852,0,-5,1853,0,-1,1854,0,-2,1855,0,-3,1856,0,-4,1857,0,-5,1858,0,-1,1859,0,-2,1860,0,-3,1861,0,-4,1862,0,-5,1863,0,-1,1864,0,-2,1865,0,-3,1866,0,-4,1867,0,-5,1868,0,-1,1869,0,-2,1870,0,-3,1871,0,-4,1872,0,-5,1873,0,-1,1874,0,-2,1875,0,-3,1876,0,-4,1877,0,-5,1878,0,-1,1879,0,-2,1880,0,-3,1881,0,-4,1882,0,-5,1883,0,-1,1884,0,-2,1885,0,-3,1886,0,-4,1887,0,-5,1888,0,-1,1889,0,-2,1890,0,-3,1891,0,-4,1892,0,-5,1893,0,-1,1894,0,-2,1895,0,-3,1896,0,-4,1897,0,-5,1898,0,-1,1899,0,-2,1900,0,-3,1901,0,-4,1902,0,-5,1903,0,-1,1904,0,-2,1905,0,-3,1906,0,-4,1907,0,-5,1908,0,-1,1909,0,-2,1910,0,-3,1911,0,-4,1912,0,-5,1913,0,-1,1914,0,-2,1915,0,-3,1916,0,-4,1917,0,-5,1918,0,-1,1919,0,-2,1920,0,-3,1921,0,-4,1922,0,-5,1923,0,-1,1924,0,-2,1925,0,-3,1926,0,-4,1927,0,-5,1928,0,-1,1929,0,-2,1930,0,-3,1931,0,-4,1932,0,-5,1933,0,-1,1934,0,-2,1935,0,-3,1936,0,-4,1937,0,-5,1938,0,-1,1939,0,-2,1940,0,-3,1941,0,-4,1942,0,-5,1943,0,-1,1944,0,-2,1945,0,-3,1946,0,-4,1947,0,-5,1948,0,-1,1949,0,-2,1950,0,-3,1951,0,-4,1952,0,-5,1953,0,-1,1954,0,-2,1955,0,-3,1956,0,-4,1957,0,-5,1958,0,-1,1959,0,-2,1960,0,-3,1961,0,-4,1962,0,-5,1963,0,-1,1964,0,-2,1965,0,-3,1966,0,-4,1967,0,-5,1968,0,-1,1969,0,-2,1970,0,-3,1971,0,-4,1972,0,-5,1973,0,-1,1974,0,-2,1975,0,-3,1976,0,-4,1977,0,-5,1978,0,-1,1979,0,-2,1980,0,-3,1981,0,-4,1982,0,-5,1983,0,-1,1984,0,-2,1985,0,-3,1986,0,-4,1987,0,-5,1988,0,-1,1989,0,-2,1990,0,-3,1991,0,-4,1992,0,-5,1993,0,-1,1994,0,-2,1995,0,-3,1996,0,-4,1997,0,-5,1998,0,-1,1999,0,-2,2000,0,-3,2001,0,-4,2002,0,-5,2003,0,-1,2004,0,-2,2005,0,-3,2006,0,-4,2007,0,-5,2008,0,-1,2009,0,-2,2010,0,-3,2011,0,-4,2012,0,-5,2013,0,-1,2016,0,-2,2017,0,-3,2018,0,-4,2019,0,-5,2020,0,-1,2021,0,-2,2022,0,-3,2023,0,-4,2024,0,-5,2025,0,-1,2026,0,-2,2027,0,-3,2028,0,-4,2029,0,-5,2030,0,-1,2031,0,-2,2032,0,-3,2033,0,-4,2034,0,-5,2035,0,-1,2036,0,-2,2037,0,-3,2038,0,-4,2039,0,-5,2040,0,-1,2041,0,-2,2042,0,-3,2043,0,-4,2044,0,-5,2045,0,-1,2046,0,-2,2047,0,-3,2048,0,-4,2049,0,-5,2050,0,-1,2051,0,-2,2052,0,-3,2053,0,-4,2054,0,-5,2055,0,-1,2056,0,-2,2057,0,-3,2058,0,-4,2059,0,-5,2060,0,-1,2061,0,-2,2062,0,-3,2063,0,-4,2064,0,-5,2065,0,-1,2066,0,-2,2067,0,-3,2068,0,-4,2069,0,-5,2070,0,-1,2071,0,-2,2072,0,-3,2073,0,-4,2074,0,-5,2075,0,-1,2076,0,-2,2077,0,-3,2078,0,-4,2079,0,-5,2080,0,-1,2081,0,-2,2082,0,-3,2083,0,-4,2084,0,-5,2085,0,-1,2086,0,-2,2087,0,-3,2088,0,-4,2089,0,-5,2090,0,-1,2091,0,-2,2092,0,-3,2093,0,-4,2094,0,-5,2095,0,-1,2096,0,-2,2097,0,-3,2098,0,-4,2099,0,-5,2100,0,-1,2101,0,-2,2102,0,-3,2103,0,-4,2104,0,-5,2105,0,-1,2106,0,-2,2107,0,-3,2108,0,-4,2109,0,-5,2110,0,-1,2111,0,-2,2112,0,-3,2113,0,-4,2114,0,-5,2115,0,-1,2116,0,-2,2117,0,-3,2118,0,-4,2119,0,-5,2120,0,-1,2121,0,-2,2122,0,-3,2123,0,-4,2124,0,-5,2125,0,-1,2126,0,-2,2127,0,-3,2128,0,-4,2129,0,-5,2130,0,-1,2131,0,-2,2132,0,-3,2133,0,-4,2134,0,-5,2135,0,-1,2136,0,-2,2137,0,-3,2138,0,-4,2139,0,-5,2140,0,-1,2141,0,-2,2142,0,-3,2143,0,-4,2144,0,-5,2145,0,-1,2146,0,-2,2147,0,-3,2148,0,-4,2149,0,-5,2150,0,-1,2151,0,-2,2152,0,-3,2153,0,-4,2154,0,-5,2155,0,-1,2156,0,-2,2157,0,-3,2158,0,-4,2159,0,-5,2160,0,-1,2161,0,-2,2162,0,-3,2163,0,-4,2164,0,-5,2165,0,-1,2166,0,-2,2167,0,-3,2168,0,-4,2169,0,-5,2170,0,-1,2171,0,-2,2172,0,-3,2173,0,-4,2174,0,-5,2175,0,-1,2176,0,-2,2177,0,-3,2178,0,-4,2179,0,-5,2180,0,-1,2181,0,-2,2182,0,-3,2183,0,-4,2184,0,-5,2185,0,-1,2186,0,-2,2187,0,-3,2188,0,-4,2189,0,-5,2190,0,-1,2191,0,-2,2192,0,-3,2193,0,-4,2194,0,-5,2195,0,-1,2198,0,-2,2199,0,-3,2200,0,-4,2201,0,-5,2202,0,-1,2203,0,-2,2204,0,-3,2205,0,-4,2206,0,-5,2207,0,-1,2208,0,-2,2209,0,-3,2210,0,-4,2211,0,-5,2212,0,-1,2213,0,-2,2214,0,-3,2215,0,-4,2216,0,-5,2217,0,-1,2218,0,-2,2219,0,-3,2220,0,-4,2221,0,-5,2222,0,-1,2223,0,-2,2224,0,-3,2225,0,-4,2226,0,-5,2227,0,-1,2228,0,-2,2229,0,-3,2230,0,-4,2231,0,-5,2232,0,-1,2233,0,-2,2234,0,-3,2235,0,-4,2236,0,-5,2237,0,-1,2238,0,-2,2239,0,-3,2240,0,-4,2241,0,-5,2242,0,-1,2243,0,-2,2244,0,-3,2245,0,-4,2246,0,-5,2247,0,-1,2248,0,-2,2249,0,-3,2250,0,-4,2251,0,-5,2252,0,-1,2253,0,-2,2254,0,-3,2255,0,-4,2256,0,-5,2257,0,-1,2258,0,-2,2259,0,-3,2260,0,-4,2261,0,-5,2262,0,-1,2263,0,-2,2264,0,-3,2265,0,-4,2266,0,-5,2267,0,-1,2268,0,-2,2269,0,-3,2270,0,-4,2271,0,-5,2272,0,-1,2273,0,-2,2274,0,-3,2275,0,-4,2276,0,-5,2277,0,-1,2278,0,-2,2279,0,-3,2280,0,-4,2281,0,-5,2282,0,-1,2283,0,-2,2284,0,-3,2285,0,-4,2286,0,-5,2287,0,-1,2288,0,-2,2289,0,-3,2290,0,-4,2291,0,-5,2292,0,-1,2293,0,-2,2294,0,-3,2295,0,-4,2296,0,-5,2297,0,-1,2298,0,-2,2299,0,-3,2300,0,-4,2301,0,-5,2302,0,-1,2303,0,-2,2304,0,-3,2305,0,-4,2306,0,-5,2307,0,-1,2308,0,-2,2309,0,-3,2310,0,-4,2311,0,-5,2312,0,-1,2313,0,-2,2314,0,-3,2315,0,-4,2316,0,-5,2317,0,-1,2318,0,-2,2319,0,-3,2320,0,-4,2321,0,-5,2322,0,-1,2323,0,-2,2324,0,-3,2325,0,-4,2326,0,-5,2327,0,-1,2328,0,-2,2329,0,-3,2330,0,-4,2331,0,-5,2332,0,-1,2333,0,-2,2334,0,-3,2335,0,-4,2336,0,-5,2337,0,-1,2338,0,-2,2339,0,-3,2340,0,-4,2341,0,-5,2342,0,-1,2343,0,-2,2344,0,-3,2345,0,-4,2346,0,-5,2347,0,-1,2348,0,-2,2349,0,-3,2350,0,-4,2351,0,-5,2352,0,-1,2353,0,-2,2354,0,-3,2355,0,-4,2356,0,-5,2357,0,-1,2358,0,-2,2359,0,-3,2360,0,-4,2361,0,-5,2362,0,-1,2363,0,-2,2364,0,-3,2365,0,-4,2366,0,-5,2367,0,-1,2368,0,-2,2369,0,-3,2370,0,-4,2371,0,-5,2372,0,-1,2373,0,-2,2374,0,-3,2375,0,-4,2376,0,-5,2377,0,-1,2383,0,-2,931,0,-4,930,0,-1,2390,0,-2,2391,0,-3,2392,0,-4,2393,0,-5,2394,0,-1,2395,0,-2,2396,0,-3,2397,0,-4,2398,0,-5,2399,0,-1,2400,0,-2,2401,0,-3,2402,0,-4,2403,0,-5,2404,0,-1,2405,0,-2,2406,0,-3,2407,0,-4,2408,0,-5,2409,0,-1,2410,0,-2,2411,0,-3,2412,0,-4,2413,0,-5,2414,0,-1,2415,0,-2,2416,0,-3,2417,0,-4,2418,0,-5,2419,0,-1,2420,0,-2,2421,0,-3,2422,0,-4,2423,0,-5,2424,0,-1,2425,0,-2,2426,0,-3,2427,0,-4,2428,0,-5,2429,0,-1,2430,0,-2,2431,0,-3,2432,0,-4,2433,0,-5,2434,0,-1,2435,0,-2,2436,0,-3,2437,0,-4,2438,0,-5,2439,0,-1,2440,0,-2,2441,0,-3,2442,0,-4,2443,0,-5,2444,0,-1,2445,0,-2,2446,0,-3,2447,0,-4,2448,0,-5,2449,0,-1,2450,0,-2,2451,0,-3,2452,0,-4,2453,0,-5,2454,0,-1,2455,0,-2,2456,0,-3,2457,0,-4,2458,0,-5,2459,0,-1,2460,0,-2,2461,0,-3,2462,0,-4,2463,0,-5,2464,0,0,223,0,0,223,0,8,223,0,0,223,0,0,223,0,0,224,0,0,224,0,-1,225,0,-2,226,0,-3,290,0,0,225,0,0,225,0,0,225,0,0,225,0,-1,938,0,0,226,0,0,226,0,0,226,0,-1,939,0,-2,940,0,0,227,0,0,227,0,0,227,0,0,227,0,-1,943,0,0,228,0,0,228,0,-1,944,0,-2,945,0,-3,946,0,0,229,0,0,229,0,0,229,0,0,229,0,-1,947,0,0,230,0,0,230,0,0,230,0,0,230,0,-1,950,0,0,231,0,0,231,0,0,231,0,0,231,0,-1,951,0,0,232,0,0,232,0,0,232,0,0,232,0,-1,953,0,0,233,0,0,233,0,0,233,0,0,233,0,-1,958,0,-1,962,0,-3,2559,0,-4,688,0,-1,2479,0,-2,2480,0,-3,2481,0,-4,2482,0,-5,2483,0,-1,2484,0,-2,2485,0,-3,2486,0,-4,2487,0,-5,2488,0,-1,2489,0,-2,2490,0,-3,2491,0,-4,2492,0,-5,2493,0,-1,2510,0,-2,2511,0,-3,2512,0,-4,2513,0,-5,2514,0,-1,2515,0,-2,2516,0,-3,2517,0,-4,2518,0,-5,2519,0,-1,2520,0,-2,2521,0,-3,2522,0,-4,2523,0,-5,2524,0,-1,1826,0,0,242,0,0,242,0,-1,622,0,-2,852,0,0,243,0,0,243,0,-1,623,0,-2,853,0,0,244,0,0,244,0,-1,624,0,-2,854,0,0,245,0,0,245,0,-1,625,0,-2,855,0,0,246,0,0,246,0,-1,626,0,-2,856,0,0,247,0,0,247,0,-1,627,0,-2,857,0,0,248,0,0,248,0,-1,628,0,-2,858,0,0,249,0,0,249,0,-1,629,0,-2,859,0,0,250,0,0,250,0,-1,630,0,-2,860,0,0,251,0,0,251,0,-1,631,0,-2,861,0,0,252,0,0,252,0,-1,632,0,-2,862,0,0,253,0,0,253,0,-1,633,0,-2,863,0,0,254,0,0,254,0,-1,635,0,-2,865,0,0,255,0,0,255,0,-1,636,0,-2,866,0,0,256,0,0,256,0,-1,637,0,-2,867,0,0,257,0,0,257,0,-1,638,0,-2,868,0,0,258,0,0,258,0,-1,639,0,-2,869,0,0,259,0,0,259,0,-1,640,0,-2,870,0,0,260,0,0,260,0,-1,641,0,-2,871,0,0,261,0,0,261,0,-1,642,0,-2,872,0,0,262,0,0,262,0,-1,643,0,-2,873,0,0,263,0,0,263,0,-1,644,0,-2,874,0,0,264,0,0,264,0,-1,645,0,-2,875,0,0,265,0,0,265,0,-1,646,0,-2,876,0,0,266,0,0,266,0,-1,648,0,-2,878,0,0,267,0,0,267,0,-1,649,0,-2,879,0,0,268,0,0,268,0,-1,650,0,-2,880,0,0,269,0,0,269,0,-1,651,0,-2,881,0,0,270,0,0,270,0,-1,652,0,-2,882,0,0,271,0,0,271,0,-1,653,0,-2,883,0,0,272,0,0,272,0,-1,654,0,-2,884,0,0,273,0,0,273,0,-1,655,0,-2,885,0,0,274,0,0,274,0,-1,656,0,-2,886,0,0,275,0,0,275,0,-1,657,0,-2,887,0,0,276,0,0,276,0,-1,658,0,-2,888,0,0,277,0,0,277,0,-1,659,0,-2,889,0,0,278,0,0,278,0,0,278,0,0,279,0,0,279,0,0,279,0,0,280,0,0,280,0,0,280,0,0,281,0,0,281,0,0,281,0,0,282,0,0,282,0,0,282,0,0,283,0,0,283,0,8,283,0,0,283,0,0,284,0,0,284,0,8,284,0,0,284,0,0,285,0,0,285,0,8,285,0,0,285,0,0,286,0,0,286,0,8,286,0,0,286,0,0,287,0,0,287,0,8,287,0,0,287,0,0,288,0,0,288,0,8,288,0,0,288,0,0,289,0,0,289,0,8,289,0,0,289,0,0,290,0,0,290,0,-1,941,0,-2,942,0,0,291,0,0,291,0,0,292,0,0,292,0,-2,293,0,0,293,0,0,293,0,-1,948,0,-2,949,0,0,294,0,-1,2495,0,-2,2496,0,-3,2497,0,0,295,0,-1,2499,0,-2,2500,0,-3,2501,0,0,296,0,-1,2503,0,-2,2504,0,-3,2505,0,0,297,0,-1,2507,0,-2,2508,0,-3,2509,0,0,298,0,-1,299,0,-2,689,0,-1,973,0,-2,974,0,-3,975,0,0,300,0,-1,301,0,-2,690,0,-1,976,0,-2,977,0,-3,978,0,0,302,0,-1,303,0,-2,691,0,-1,979,0,-2,980,0,-3,981,0,0,304,0,-1,305,0,-2,692,0,-1,982,0,-2,983,0,-3,984,0,0,306,0,-1,307,0,-2,693,0,-1,985,0,-2,986,0,-3,987,0,0,308,0,-1,309,0,-2,694,0,-1,988,0,-2,989,0,-3,990,0,0,310,0,-1,311,0,-2,695,0,-1,991,0,-2,992,0,-3,993,0,0,312,0,-1,313,0,-2,696,0,-1,994,0,-2,995,0,-3,996,0,0,314,0,-1,315,0,-2,697,0,-1,997,0,-2,998,0,-3,999,0,0,316,0,-1,317,0,-2,698,0,-1,1000,0,-2,1001,0,-3,1002,0,0,318,0,-1,319,0,-2,699,0,-1,1003,0,-2,1004,0,-3,1005,0,0,320,0,-1,321,0,-2,700,0,-1,1006,0,-2,1007,0,-3,1008,0,0,322,0,-1,323,0,-2,701,0,-1,1009,0,-2,1010,0,-3,1011,0,0,324,0,-1,325,0,-2,702,0,-1,1012,0,-2,1013,0,-3,1014,0,0,326,0,-1,327,0,-2,703,0,-1,1015,0,-2,1016,0,-3,1017,0,0,328,0,-1,329,0,-2,704,0,-1,1018,0,-2,1019,0,-3,1020,0,0,330,0,-1,331,0,-2,705,0,-1,1021,0,-2,1022,0,-3,1023,0,0,332,0,-1,333,0,-2,706,0,-1,1024,0,-2,1025,0,-3,1026,0,0,334,0,-1,335,0,-2,707,0,-1,1027,0,-2,1028,0,-3,1029,0,0,336,0,-1,337,0,-2,708,0,-1,1030,0,-2,1031,0,-3,1032,0,0,338,0,-1,339,0,-2,709,0,-1,1033,0,-2,1034,0,-3,1035,0,0,340,0,-1,341,0,-2,710,0,-1,1036,0,-2,1037,0,-3,1038,0,0,342,0,-1,343,0,-2,711,0,-1,1039,0,-2,1040,0,-3,1041,0,0,344,0,-1,345,0,-2,712,0,-1,1042,0,-2,1043,0,-3,1044,0,0,346,0,-1,347,0,-2,713,0,-1,1045,0,-2,1046,0,-3,1047,0,0,348,0,-1,349,0,-2,714,0,-1,1048,0,-2,1049,0,-3,1050,0,0,350,0,-1,351,0,-2,715,0,-1,1051,0,-2,1052,0,-3,1053,0,0,352,0,-1,353,0,-2,716,0,-1,1054,0,-2,1055,0,-3,1056,0,0,354,0,-1,355,0,-2,717,0,-1,1057,0,-2,1058,0,-3,1059,0,0,356,0,-1,357,0,-2,718,0,-1,1060,0,-2,1061,0,-3,1062,0,0,358,0,-1,359,0,-2,719,0,-1,1063,0,-2,1064,0,-3,1065,0,0,360,0,-1,361,0,-2,720,0,-1,1066,0,-2,1067,0,-3,1068,0,0,362,0,-1,363,0,-2,721,0,-1,1069,0,-2,1070,0,-3,1071,0,0,364,0,-1,365,0,-2,722,0,-1,1072,0,-2,1073,0,-3,1074,0,0,366,0,-1,367,0,-2,723,0,-1,1075,0,-2,1076,0,-3,1077,0,0,368,0,-1,369,0,-2,724,0,-1,1078,0,-2,1079,0,-3,1080,0,0,370,0,-1,371,0,-2,725,0,-1,1081,0,-2,1082,0,-3,1083,0,0,372,0,-1,373,0,-2,726,0,-1,1084,0,-2,1085,0,-3,1086,0,0,374,0,-1,375,0,-2,727,0,-1,1087,0,-2,1088,0,-3,1089,0,0,376,0,-1,377,0,-2,728,0,-1,1090,0,-2,1091,0,-3,1092,0,0,378,0,-1,379,0,-2,729,0,-1,1093,0,-2,1094,0,-3,1095,0,0,380,0,-1,381,0,-2,730,0,-1,1096,0,-2,1097,0,-3,1098,0,0,382,0,-1,383,0,-2,731,0,-1,1099,0,-2,1100,0,-3,1101,0,0,384,0,-1,385,0,-2,732,0,-1,1102,0,-2,1103,0,-3,1104,0,0,386,0,-1,387,0,-2,733,0,-1,1105,0,-2,1106,0,-3,1107,0,0,388,0,-1,389,0,-2,734,0,-1,1108,0,-2,1109,0,-3,1110,0,0,390,0,-1,391,0,-2,735,0,-1,1111,0,-2,1112,0,-3,1113,0,0,392,0,-1,393,0,-2,736,0,-1,1114,0,-2,1115,0,-3,1116,0,0,394,0,-1,395,0,-2,737,0,-1,1117,0,-2,1118,0,-3,1119,0,0,396,0,-1,397,0,-2,738,0,-1,1120,0,-2,1121,0,-3,1122,0,0,398,0,-1,399,0,-2,739,0,-1,1123,0,-2,1124,0,-3,1125,0,0,400,0,-1,401,0,-2,740,0,-1,1126,0,-2,1127,0,-3,1128,0,0,402,0,-1,403,0,-2,741,0,-1,1129,0,-2,1130,0,-3,1131,0,0,404,0,-1,405,0,-2,742,0,-1,1132,0,-2,1133,0,-3,1134,0,0,406,0,-1,407,0,-2,743,0,-1,1135,0,-2,1136,0,-3,1137,0,0,408,0,-1,409,0,-2,744,0,-1,1138,0,-2,1139,0,-3,1140,0,0,410,0,-1,411,0,-2,745,0,-1,1141,0,-2,1142,0,-3,1143,0,0,412,0,-1,413,0,-2,746,0,-1,1144,0,-2,1145,0,-3,1146,0,0,414,0,-1,415,0,-2,747,0,-1,1147,0,-2,1148,0,-3,1149,0,0,416,0,-1,417,0,-2,748,0,-1,1150,0,-2,1151,0,-3,1152,0,0,418,0,-1,419,0,-2,749,0,-1,1153,0,-2,1154,0,-3,1155,0,0,420,0,-1,421,0,-2,750,0,-1,1156,0,-2,1157,0,-3,1158,0,0,422,0,-1,423,0,-2,751,0,-1,1159,0,-2,1160,0,-3,1161,0,0,424,0,-1,425,0,-2,752,0,-1,1162,0,-2,1163,0,-3,1164,0,0,426,0,-1,427,0,-2,753,0,-1,1165,0,-2,1166,0,-3,1167,0,0,428,0,-1,429,0,-2,754,0,-1,1168,0,-2,1169,0,-3,1170,0,0,430,0,-1,431,0,-2,755,0,-1,1171,0,-2,1172,0,-3,1173,0,0,432,0,-1,433,0,-2,756,0,-1,1174,0,-2,1175,0,-3,1176,0,0,434,0,-1,435,0,-2,757,0,-1,1177,0,-2,1178,0,-3,1179,0,0,436,0,-1,437,0,-2,758,0,-1,1180,0,-2,1181,0,-3,1182,0,0,438,0,-1,439,0,-2,759,0,-1,1183,0,-2,1184,0,-3,1185,0,0,440,0,-1,441,0,-2,760,0,-1,1186,0,-2,1187,0,-3,1188,0,0,442,0,-1,443,0,-2,761,0,-1,1189,0,-2,1190,0,-3,1191,0,0,444,0,-1,445,0,-2,762,0,-1,1192,0,-2,1193,0,-3,1194,0,0,446,0,-1,447,0,-2,763,0,-1,1195,0,-2,1196,0,-3,1197,0,0,448,0,-1,449,0,-2,764,0,-1,1198,0,-2,1199,0,-3,1200,0,0,450,0,-1,451,0,-2,765,0,-1,1201,0,-2,1202,0,-3,1203,0,0,452,0,-1,453,0,-2,766,0,-1,1204,0,-2,1205,0,-3,1206,0,0,454,0,-1,455,0,-2,767,0,-1,1207,0,-2,1208,0,-3,1209,0,0,456,0,-1,457,0,-2,768,0,-1,1210,0,-2,1211,0,-3,1212,0,0,458,0,-1,459,0,-2,769,0,-1,1213,0,-2,1214,0,-3,1215,0,0,460,0,-1,461,0,-2,770,0,-1,1216,0,-2,1217,0,-3,1218,0,0,462,0,-1,463,0,-2,771,0,-1,1219,0,-2,1220,0,-3,1221,0,0,464,0,-1,465,0,-2,772,0,-1,1222,0,-2,1223,0,-3,1224,0,0,466,0,-1,467,0,-2,773,0,-1,1225,0,-2,1226,0,-3,1227,0,0,468,0,-1,469,0,-2,774,0,-1,1228,0,-2,1229,0,-3,1230,0,0,470,0,-1,471,0,-2,775,0,-1,1231,0,-2,1232,0,-3,1233,0,0,472,0,-1,473,0,-2,776,0,-1,1234,0,-2,1235,0,-3,1236,0,0,474,0,-1,475,0,-2,777,0,-1,1237,0,-2,1238,0,-3,1239,0,0,476,0,-1,477,0,-2,778,0,-1,1240,0,-2,1241,0,-3,1242,0,0,478,0,-1,479,0,-2,779,0,-1,1243,0,-2,1244,0,-3,1245,0,0,480,0,-1,481,0,-2,780,0,-1,1246,0,-2,1247,0,-3,1248,0,0,482,0,-1,483,0,-2,781,0,-1,1249,0,-2,1250,0,-3,1251,0,0,484,0,-1,485,0,-2,782,0,-1,1252,0,-2,1253,0,-3,1254,0,0,486,0,-1,487,0,-2,783,0,-1,1255,0,-2,1256,0,-3,1257,0,0,488,0,-1,489,0,-2,784,0,-1,1258,0,-2,1259,0,-3,1260,0,0,490,0,-1,491,0,-2,785,0,-1,1261,0,-2,1262,0,-3,1263,0,0,492,0,-1,493,0,-2,786,0,-1,1264,0,-2,1265,0,-3,1266,0,0,494,0,-1,495,0,-2,787,0,-1,1267,0,-2,1268,0,-3,1269,0,0,496,0,-1,497,0,-2,788,0,-1,1270,0,-2,1271,0,-3,1272,0,0,498,0,-1,499,0,-2,789,0,-1,1273,0,-2,1274,0,-3,1275,0,0,500,0,-1,501,0,-2,790,0,-1,1276,0,-2,1277,0,-3,1278,0,0,502,0,-1,503,0,-2,791,0,-1,1279,0,-2,1280,0,-3,1281,0,0,504,0,-1,505,0,-2,792,0,-1,1282,0,-2,1283,0,-3,1284,0,0,506,0,-1,507,0,-2,793,0,-1,1285,0,-2,1286,0,-3,1287,0,0,508,0,-1,509,0,-2,794,0,-1,1288,0,-2,1289,0,-3,1290,0,0,510,0,-1,511,0,-2,795,0,-1,1291,0,-2,1292,0,-3,1293,0,0,512,0,-1,513,0,-2,796,0,-1,1294,0,-2,1295,0,-3,1296,0,0,514,0,-1,515,0,-2,797,0,-1,1297,0,-2,1298,0,-3,1299,0,0,516,0,-1,517,0,-2,798,0,-1,1300,0,-2,1301,0,-3,1302,0,0,518,0,-1,519,0,-2,799,0,-1,1303,0,-2,1304,0,-3,1305,0,0,520,0,-1,521,0,-2,800,0,-1,1306,0,-2,1307,0,-3,1308,0,0,522,0,-1,523,0,-2,801,0,-1,1309,0,-2,1310,0,-3,1311,0,0,524,0,-1,525,0,-2,802,0,-1,1312,0,-2,1313,0,-3,1314,0,0,526,0,-1,527,0,-2,803,0,-1,1315,0,-2,1316,0,-3,1317,0,0,528,0,-1,529,0,-2,804,0,-1,1318,0,-2,1319,0,-3,1320,0,0,530,0,-1,531,0,-2,805,0,-1,1321,0,-2,1322,0,-3,1323,0,0,532,0,-1,533,0,-2,806,0,-1,1324,0,-2,1325,0,-3,1326,0,0,534,0,-1,535,0,-2,807,0,-1,1327,0,-2,1328,0,-3,1329,0,0,536,0,-1,537,0,-2,808,0,-1,1330,0,-2,1331,0,-3,1332,0,0,538,0,-1,539,0,-2,809,0,-1,1333,0,-2,1334,0,-3,1335,0,0,540,0,-1,541,0,-2,810,0,-1,1336,0,-2,1337,0,-3,1338,0,0,542,0,-1,543,0,-2,811,0,-1,1339,0,-2,1340,0,-3,1341,0,0,544,0,-1,545,0,-2,812,0,-1,1342,0,-2,1343,0,-3,1344,0,0,546,0,-1,547,0,-2,813,0,-1,1345,0,-2,1346,0,-3,1347,0,0,548,0,-1,549,0,-2,814,0,-1,1348,0,-2,1349,0,-3,1350,0,0,550,0,-1,551,0,-2,815,0,-1,1351,0,-2,1352,0,-3,1353,0,0,552,0,-1,553,0,-2,816,0,-1,1354,0,-2,1355,0,-3,1356,0,0,554,0,-1,555,0,-2,817,0,-1,1357,0,-2,1358,0,-3,1359,0,0,556,0,-1,557,0,-2,818,0,-1,1360,0,-2,1361,0,-3,1362,0,0,558,0,-1,559,0,-2,819,0,-1,1363,0,-2,1364,0,-3,1365,0,0,560,0,-1,561,0,-2,820,0,-1,1366,0,-2,1367,0,-3,1368,0,0,562,0,-1,563,0,-2,821,0,-1,1369,0,-2,1370,0,-3,1371,0,0,564,0,-1,565,0,-2,822,0,-1,1372,0,-2,1373,0,-3,1374,0,0,566,0,-1,567,0,-2,823,0,-1,1375,0,-2,1376,0,-3,1377,0,0,568,0,-1,569,0,-2,824,0,-1,1378,0,-2,1379,0,-3,1380,0,0,570,0,-1,571,0,-2,825,0,-1,1381,0,-2,1382,0,-3,1383,0,0,572,0,-1,573,0,-2,826,0,-1,1384,0,-2,1385,0,-3,1386,0,0,574,0,-1,575,0,-2,827,0,-1,1387,0,-2,1388,0,-3,1389,0,0,576,0,-1,577,0,-2,828,0,-1,1390,0,-2,1391,0,-3,1392,0,0,578,0,-1,579,0,-2,829,0,-1,1393,0,-2,1394,0,-3,1395,0,0,580,0,-1,581,0,-2,830,0,-1,1396,0,-2,1397,0,-3,1398,0,0,582,0,-1,583,0,-2,831,0,-1,1399,0,-2,1400,0,-3,1401,0,0,584,0,-1,585,0,-2,832,0,-1,1402,0,-2,1403,0,-3,1404,0,0,586,0,-1,587,0,-2,833,0,-1,1405,0,-2,1406,0,-3,1407,0,0,588,0,-1,589,0,-2,834,0,-1,1408,0,-2,1409,0,-3,1410,0,0,590,0,-1,591,0,-2,835,0,-1,1411,0,-2,1412,0,-3,1413,0,0,592,0,-1,593,0,-2,836,0,-1,1414,0,-2,1415,0,-3,1416,0,0,594,0,-1,595,0,-2,837,0,-1,1417,0,-2,1418,0,-3,1419,0,0,596,0,-1,597,0,-2,838,0,-1,1420,0,-2,1421,0,-3,1422,0,0,618,0,-1,1827,0,-2,849,0,0,619,0,-1,1829,0,-2,850,0,-1,1831,0,0,621,0,-1,851,0,0,634,0,-1,864,0,0,647,0,-1,877,0,0,660,0,0,660,0,0,660,0,0,661,0,0,661,0,30,2381,0,0,661,0,0,667,0,0,667,0,0,667,0,0,668,0,0,668,0,0,668,0,0,669,0,0,669,0,0,669,0,0,670,0,0,670,0,0,671,0,0,671,0,0,672,0,-1,673,0,0,673,0,0,673,0,0,673,0,0,674,0,0,674,0,0,674,0,0,675,0,0,675,0,0,675,0,0,676,0,0,676,0,0,676,0,0,677,0,0,677,0,0,677,0,0,678,0,0,678,0,0,678,0,0,679,0,0,679,0,0,679,0,0,680,0,0,680,0,0,680,0,-1,2465,0,-2,2466,0,-3,2467,0,-1,2468,0,-2,2469,0,-3,2470,0,0,683,0,-1,684,0,-2,963,0,-1,2471,0,-2,2472,0,-3,2473,0,-1,2562,0,-2,2565,0,-3,2569,0,0,689,0,0,689,0,0,690,0,0,690,0,0,691,0,0,691,0,0,692,0,0,692,0,0,693,0,0,693,0,0,694,0,0,694,0,0,695,0,0,695,0,0,696,0,0,696,0,0,697,0,0,697,0,0,698,0,0,698,0,0,699,0,0,699,0,0,700,0,0,700,0,0,701,0,0,701,0,0,702,0,0,702,0,0,703,0,0,703,0,0,704,0,0,704,0,0,705,0,0,705,0,0,706,0,0,706,0,0,707,0,0,707,0,0,708,0,0,708,0,0,709,0,0,709,0,0,710,0,0,710,0,0,711,0,0,711,0,0,712,0,0,712,0,0,713,0,0,713,0,0,714,0,0,714,0,0,715,0,0,715,0,0,716,0,0,716,0,0,717,0,0,717,0,0,718,0,0,718,0,0,719,0,0,719,0,0,720,0,0,720,0,0,721,0,0,721,0,0,722,0,0,722,0,0,723,0,0,723,0,0,724,0,0,724,0,0,725,0,0,725,0,0,726,0,0,726,0,0,727,0,0,727,0,0,728,0,0,728,0,0,729,0,0,729,0,0,730,0,0,730,0,0,731,0,0,731,0,0,732,0,0,732,0,0,733,0,0,733,0,0,734,0,0,734,0,0,735,0,0,735,0,0,736,0,0,736,0,0,737,0,0,737,0,0,738,0,0,738,0,0,739,0,0,739,0,0,740,0,0,740,0,0,741,0,0,741,0,0,742,0,0,742,0,0,743,0,0,743,0,0,744,0,0,744,0,0,745,0,0,745,0,0,746,0,0,746,0,0,747,0,0,747,0,0,748,0,0,748,0,0,749,0,0,749,0,0,750,0,0,750,0,0,751,0,0,751,0,0,752,0,0,752,0,0,753,0,0,753,0,0,754,0,0,754,0,0,755,0,0,755,0,0,756,0,0,756,0,0,757,0,0,757,0,0,758,0,0,758,0,0,759,0,0,759,0,0,760,0,0,760,0,0,761,0,0,761,0,0,762,0,0,762,0,0,763,0,0,763,0,0,764,0,0,764,0,0,765,0,0,765,0,0,766,0,0,766,0,0,767,0,0,767,0,0,768,0,0,768,0,0,769,0,0,769,0,0,770,0,0,770,0,0,771,0,0,771,0,0,772,0,0,772,0,0,773,0,0,773,0,0,774,0,0,774,0,0,775,0,0,775,0,0,776,0,0,776,0,0,777,0,0,777,0,0,778,0,0,778,0,0,779,0,0,779,0,0,780,0,0,780,0,0,781,0,0,781,0,0,782,0,0,782,0,0,783,0,0,783,0,0,784,0,0,784,0,0,785,0,0,785,0,0,786,0,0,786,0,0,787,0,0,787,0,0,788,0,0,788,0,0,789,0,0,789,0,0,790,0,0,790,0,0,791,0,0,791,0,0,792,0,0,792,0,0,793,0,0,793,0,0,794,0,0,794,0,0,795,0,0,795,0,0,796,0,0,796,0,0,797,0,0,797,0,0,798,0,0,798,0,0,799,0,0,799,0,0,800,0,0,800,0,0,801,0,0,801,0,0,802,0,0,802,0,0,803,0,0,803,0,0,804,0,0,804,0,0,805,0,0,805,0,0,806,0,0,806,0,0,807,0,0,807,0,0,808,0,0,808,0,0,809,0,0,809,0,0,810,0,0,810,0,0,811,0,0,811,0,0,812,0,0,812,0,0,813,0,0,813,0,0,814,0,0,814,0,0,815,0,0,815,0,0,816,0,0,816,0,0,817,0,0,817,0,0,818,0,0,818,0,0,819,0,0,819,0,0,820,0,0,820,0,0,821,0,0,821,0,0,822,0,0,822,0,0,823,0,0,823,0,0,824,0,0,824,0,0,825,0,0,825,0,0,826,0,0,826,0,0,827,0,0,827,0,0,828,0,0,828,0,0,829,0,0,829,0,0,830,0,0,830,0,0,831,0,0,831,0,0,832,0,0,832,0,0,833,0,0,833,0,0,834,0,0,834,0,0,835,0,0,835,0,0,836,0,0,836,0,0,837,0,0,837,0,0,838,0,0,838,0,0,839,0,0,840,0,0,841,0,0,842,0,0,843,0,0,844,0,0,845,0,0,846,0,0,847,0,0,848,0,0,849,0,0,849,0,0,850,0,0,850,0,-1,1832,0,-2,1833,0,0,852,0,0,852,0,0,853,0,0,853,0,0,854,0,0,854,0,0,855,0,0,855,0,0,856,0,0,856,0,0,857,0,0,857,0,0,858,0,0,858,0,0,859,0,0,859,0,0,860,0,0,860,0,0,861,0,0,861,0,0,862,0,0,862,0,0,863,0,0,863,0,-1,2014,0,-2,2015,0,0,865,0,0,865,0,0,866,0,0,866,0,0,867,0,0,867,0,0,868,0,0,868,0,0,869,0,0,869,0,0,870,0,0,870,0,0,871,0,0,871,0,0,872,0,0,872,0,0,873,0,0,873,0,0,874,0,0,874,0,0,875,0,0,875,0,0,876,0,0,876,0,-1,2196,0,-2,2197,0,0,878,0,0,878,0,0,879,0,0,879,0,0,880,0,0,880,0,0,881,0,0,881,0,0,882,0,0,882,0,0,883,0,0,883,0,0,884,0,0,884,0,0,885,0,0,885,0,0,886,0,0,886,0,0,887,0,0,887,0,0,888,0,0,888,0,0,889,0,0,889,0,0,890,0,0,890,0,0,891,0,0,891,0,0,892,0,0,892,0,0,893,0,0,893,0,0,894,0,0,894,0,0,895,0,0,895,0,0,896,0,0,896,0,0,897,0,0,897,0,0,898,0,0,898,0,0,899,0,0,899,0,0,900,0,0,900,0,0,901,0,0,901,0,0,902,0,0,902,0,0,903,0,0,903,0,0,904,0,0,904,0,0,905,0,0,905,0,0,906,0,0,906,0,0,907,0,0,907,0,0,908,0,0,908,0,0,909,0,0,909,0,0,910,0,0,910,0,0,911,0,0,911,0,0,912,0,0,912,0,0,913,0,0,913,0,0,914,0,0,914,0,0,915,0,0,915,0,0,916,0,0,916,0,0,917,0,0,917,0,0,918,0,0,918,0,0,919,0,0,919,0,0,920,0,0,920,0,0,921,0,0,921,0,0,922,0,0,922,0,0,923,0,0,923,0,0,924,0,0,924,0,0,925,0,0,925,0,0,926,0,0,926,0,0,927,0,0,927,0,0,928,0,0,928,0,0,929,0,0,929,0,-1,2382,0,-1,2385,0,0,932,0,0,933,0,0,934,0,0,935,0,0,936,0,0,937,0,0,937,0,0,938,0,0,938,0,0,939,0,0,939,0,0,940,0,0,940,0,0,941,0,0,941,0,0,942,0,0,942,0,0,943,0,0,943,0,0,944,0,0,944,0,0,945,0,0,945,0,0,946,0,0,946,0,0,947,0,0,947,0,0,948,0,0,948,0,0,949,0,0,949,0,0,950,0,0,950,0,0,951,0,0,951,0,0,952,0,0,952,0,0,953,0,0,953,0,0,954,0,0,954,0,0,955,0,0,955,0,0,956,0,0,956,0,0,957,0,0,957,0,0,958,0,0,958,0,0,959,0,0,959,0,0,960,0,0,960,0,0,961,0,0,961,0,0,963,0,0,963,0,-1,2475,0,-2,2476,0,-1,2477,0,-2,966,0,0,966,0,0,967,0,-1,2568,0,-1,2566,0,-1,2572,0,-1,2570,0,0,970,0,0,970,0,0,971,0,0,971,0,0,972,0,0,973,0,0,974,0,0,975,0,0,976,0,0,977,0,0,978,0,0,979,0,0,980,0,0,981,0,0,982,0,0,983,0,0,984,0,0,985,0,0,986,0,0,987,0,0,988,0,0,989,0,0,990,0,0,991,0,0,992,0,0,993,0,0,994,0,0,995,0,0,996,0,0,997,0,0,998,0,0,999,0,0,1000,0,0,1001,0,0,1002,0,0,1003,0,0,1004,0,0,1005,0,0,1006,0,0,1007,0,0,1008,0,0,1009,0,0,1010,0,0,1011,0,0,1012,0,0,1013,0,0,1014,0,0,1015,0,0,1016,0,0,1017,0,0,1018,0,0,1019,0,0,1020,0,0,1021,0,0,1022,0,0,1023,0,0,1024,0,0,1025,0,0,1026,0,0,1027,0,0,1028,0,0,1029,0,0,1030,0,0,1031,0,0,1032,0,0,1033,0,0,1034,0,0,1035,0,0,1036,0,0,1037,0,0,1038,0,0,1039,0,0,1040,0,0,1041,0,0,1042,0,0,1043,0,0,1044,0,0,1045,0,0,1046,0,0,1047,0,0,1048,0,0,1049,0,0,1050,0,0,1051,0,0,1052,0,0,1053,0,0,1054,0,0,1055,0,0,1056,0,0,1057,0,0,1058,0,0,1059,0,0,1060,0,0,1061,0,0,1062,0,0,1063,0,0,1064,0,0,1065,0,0,1066,0,0,1067,0,0,1068,0,0,1069,0,0,1070,0,0,1071,0,0,1072,0,0,1073,0,0,1074,0,0,1075,0,0,1076,0,0,1077,0,0,1078,0,0,1079,0,0,1080,0,0,1081,0,0,1082,0,0,1083,0,0,1084,0,0,1085,0,0,1086,0,0,1087,0,0,1088,0,0,1089,0,0,1090,0,0,1091,0,0,1092,0,0,1093,0,0,1094,0,0,1095,0,0,1096,0,0,1097,0,0,1098,0,0,1099,0,0,1100,0,0,1101,0,0,1102,0,0,1103,0,0,1104,0,0,1105,0,0,1106,0,0,1107,0,0,1108,0,0,1109,0,0,1110,0,0,1111,0,0,1112,0,0,1113,0,0,1114,0,0,1115,0,0,1116,0,0,1117,0,0,1118,0,0,1119,0,0,1120,0,0,1121,0,0,1122,0,0,1123,0,0,1124,0,0,1125,0,0,1126,0,0,1127,0,0,1128,0,0,1129,0,0,1130,0,0,1131,0,0,1132,0,0,1133,0,0,1134,0,0,1135,0,0,1136,0,0,1137,0,0,1138,0,0,1139,0,0,1140,0,0,1141,0,0,1142,0,0,1143,0,0,1144,0,0,1145,0,0,1146,0,0,1147,0,0,1148,0,0,1149,0,0,1150,0,0,1151,0,0,1152,0,0,1153,0,0,1154,0,0,1155,0,0,1156,0,0,1157,0,0,1158,0,0,1159,0,0,1160,0,0,1161,0,0,1162,0,0,1163,0,0,1164,0,0,1165,0,0,1166,0,0,1167,0,0,1168,0,0,1169,0,0,1170,0,0,1171,0,0,1172,0,0,1173,0,0,1174,0,0,1175,0,0,1176,0,0,1177,0,0,1178,0,0,1179,0,0,1180,0,0,1181,0,0,1182,0,0,1183,0,0,1184,0,0,1185,0,0,1186,0,0,1187,0,0,1188,0,0,1189,0,0,1190,0,0,1191,0,0,1192,0,0,1193,0,0,1194,0,0,1195,0,0,1196,0,0,1197,0,0,1198,0,0,1199,0,0,1200,0,0,1201,0,0,1202,0,0,1203,0,0,1204,0,0,1205,0,0,1206,0,0,1207,0,0,1208,0,0,1209,0,0,1210,0,0,1211,0,0,1212,0,0,1213,0,0,1214,0,0,1215,0,0,1216,0,0,1217,0,0,1218,0,0,1219,0,0,1220,0,0,1221,0,0,1222,0,0,1223,0,0,1224,0,0,1225,0,0,1226,0,0,1227,0,0,1228,0,0,1229,0,0,1230,0,0,1231,0,0,1232,0,0,1233,0,0,1234,0,0,1235,0,0,1236,0,0,1237,0,0,1238,0,0,1239,0,0,1240,0,0,1241,0,0,1242,0,0,1243,0,0,1244,0,0,1245,0,0,1246,0,0,1247,0,0,1248,0,0,1249,0,0,1250,0,0,1251,0,0,1252,0,0,1253,0,0,1254,0,0,1255,0,0,1256,0,0,1257,0,0,1258,0,0,1259,0,0,1260,0,0,1261,0,0,1262,0,0,1263,0,0,1264,0,0,1265,0,0,1266,0,0,1267,0,0,1268,0,0,1269,0,0,1270,0,0,1271,0,0,1272,0,0,1273,0,0,1274,0,0,1275,0,0,1276,0,0,1277,0,0,1278,0,0,1279,0,0,1280,0,0,1281,0,0,1282,0,0,1283,0,0,1284,0,0,1285,0,0,1286,0,0,1287,0,0,1288,0,0,1289,0,0,1290,0,0,1291,0,0,1292,0,0,1293,0,0,1294,0,0,1295,0,0,1296,0,0,1297,0,0,1298,0,0,1299,0,0,1300,0,0,1301,0,0,1302,0,0,1303,0,0,1304,0,0,1305,0,0,1306,0,0,1307,0,0,1308,0,0,1309,0,0,1310,0,0,1311,0,0,1312,0,0,1313,0,0,1314,0,0,1315,0,0,1316,0,0,1317,0,0,1318,0,0,1319,0,0,1320,0,0,1321,0,0,1322,0,0,1323,0,0,1324,0,0,1325,0,0,1326,0,0,1327,0,0,1328,0,0,1329,0,0,1330,0,0,1331,0,0,1332,0,0,1333,0,0,1334,0,0,1335,0,0,1336,0,0,1337,0,0,1338,0,0,1339,0,0,1340,0,0,1341,0,0,1342,0,0,1343,0,0,1344,0,0,1345,0,0,1346,0,0,1347,0,0,1348,0,0,1349,0,0,1350,0,0,1351,0,0,1352,0,0,1353,0,0,1354,0,0,1355,0,0,1356,0,0,1357,0,0,1358,0,0,1359,0,0,1360,0,0,1361,0,0,1362,0,0,1363,0,0,1364,0,0,1365,0,0,1366,0,0,1367,0,0,1368,0,0,1369,0,0,1370,0,0,1371,0,0,1372,0,0,1373,0,0,1374,0,0,1375,0,0,1376,0,0,1377,0,0,1378,0,0,1379,0,0,1380,0,0,1381,0,0,1382,0,0,1383,0,0,1384,0,0,1385,0,0,1386,0,0,1387,0,0,1388,0,0,1389,0,0,1390,0,0,1391,0,0,1392,0,0,1393,0,0,1394,0,0,1395,0,0,1396,0,0,1397,0,0,1398,0,0,1399,0,0,1400,0,0,1401,0,0,1402,0,0,1403,0,0,1404,0,0,1405,0,0,1406,0,0,1407,0,0,1408,0,0,1409,0,0,1410,0,0,1411,0,0,1412,0,0,1413,0,0,1414,0,0,1415,0,0,1416,0,0,1417,0,0,1418,0,0,1419,0,0,1420,0,0,1421,0,0,1422,0,0,1424,0,0,1425,0,0,1426,0,0,1427,0,0,1428,0,0,1429,0,0,1430,0,0,1431,0,0,1432,0,0,1433,0,0,1434,0,0,1435,0,0,1436,0,0,1437,0,0,1438,0,0,1439,0,0,1440,0,0,1441,0,0,1442,0,0,1443,0,0,1444,0,0,1445,0,0,1446,0,0,1447,0,0,1448,0,0,1449,0,0,1450,0,0,1452,0,0,1453,0,0,1454,0,0,1455,0,0,1456,0,0,1457,0,0,1458,0,0,1459,0,0,1460,0,0,1461,0,0,1462,0,0,1463,0,0,1464,0,0,1465,0,0,1466,0,0,1467,0,0,1468,0,0,1469,0,0,1470,0,0,1471,0,0,1472,0,0,1473,0,0,1474,0,0,1475,0,0,1477,0,0,1478,0,0,1479,0,0,1480,0,0,1481,0,0,1482,0,0,1483,0,0,1484,0,0,1485,0,0,1486,0,0,1487,0,0,1488,0,0,1489,0,0,1490,0,0,1491,0,0,1492,0,0,1493,0,0,1494,0,0,1495,0,0,1496,0,0,1497,0,0,1498,0,0,1499,0,0,1500,0,0,1502,0,0,1503,0,0,1504,0,0,1505,0,0,1506,0,0,1507,0,0,1508,0,0,1509,0,0,1510,0,0,1511,0,0,1512,0,0,1513,0,0,1514,0,0,1515,0,0,1516,0,0,1517,0,0,1518,0,0,1519,0,0,1520,0,0,1521,0,0,1522,0,0,1523,0,0,1524,0,0,1525,0,0,1527,0,0,1528,0,0,1529,0,0,1530,0,0,1531,0,0,1532,0,0,1533,0,0,1534,0,0,1535,0,0,1536,0,0,1537,0,0,1538,0,0,1539,0,0,1540,0,0,1541,0,0,1542,0,0,1543,0,0,1544,0,0,1545,0,0,1546,0,0,1547,0,0,1548,0,0,1549,0,0,1550,0,0,1552,0,0,1553,0,0,1554,0,0,1555,0,0,1556,0,0,1557,0,0,1558,0,0,1559,0,0,1560,0,0,1561,0,0,1562,0,0,1563,0,0,1564,0,0,1565,0,0,1566,0,0,1567,0,0,1568,0,0,1569,0,0,1570,0,0,1571,0,0,1572,0,0,1573,0,0,1574,0,0,1575,0,0,1577,0,0,1578,0,0,1579,0,0,1580,0,0,1581,0,0,1582,0,0,1583,0,0,1584,0,0,1585,0,0,1586,0,0,1587,0,0,1588,0,0,1589,0,0,1590,0,0,1591,0,0,1592,0,0,1593,0,0,1594,0,0,1595,0,0,1596,0,0,1597,0,0,1598,0,0,1599,0,0,1600,0,0,1602,0,0,1603,0,0,1604,0,0,1605,0,0,1606,0,0,1607,0,0,1608,0,0,1609,0,0,1610,0,0,1611,0,0,1612,0,0,1613,0,0,1614,0,0,1615,0,0,1616,0,0,1617,0,0,1618,0,0,1619,0,0,1620,0,0,1621,0,0,1622,0,0,1623,0,0,1624,0,0,1625,0,0,1627,0,0,1628,0,0,1629,0,0,1630,0,0,1631,0,0,1632,0,0,1633,0,0,1634,0,0,1635,0,0,1636,0,0,1637,0,0,1638,0,0,1639,0,0,1640,0,0,1641,0,0,1642,0,0,1643,0,0,1644,0,0,1645,0,0,1646,0,0,1647,0,0,1648,0,0,1649,0,0,1650,0,0,1652,0,0,1653,0,0,1654,0,0,1655,0,0,1656,0,0,1657,0,0,1658,0,0,1659,0,0,1660,0,0,1661,0,0,1662,0,0,1663,0,0,1664,0,0,1665,0,0,1666,0,0,1667,0,0,1668,0,0,1669,0,0,1670,0,0,1671,0,0,1672,0,0,1673,0,0,1674,0,0,1675,0,0,1676,0,0,1677,0,0,1678,0,0,1679,0,0,1680,0,0,1681,0,0,1682,0,0,1683,0,0,1684,0,0,1685,0,0,1686,0,0,1687,0,0,1688,0,0,1689,0,0,1690,0,0,1691,0,0,1692,0,0,1693,0,0,1694,0,0,1695,0,0,1696,0,0,1697,0,0,1698,0,0,1699,0,0,1700,0,0,1701,0,0,1702,0,0,1703,0,0,1704,0,0,1705,0,0,1706,0,0,1707,0,0,1708,0,0,1709,0,0,1710,0,0,1711,0,0,1712,0,0,1713,0,0,1714,0,0,1715,0,0,1716,0,0,1717,0,0,1718,0,0,1719,0,0,1720,0,0,1721,0,0,1722,0,0,1723,0,0,1724,0,0,1725,0,0,1726,0,0,1727,0,0,1728,0,0,1729,0,0,1730,0,0,1731,0,0,1732,0,0,1733,0,0,1734,0,0,1735,0,0,1736,0,0,1737,0,0,1738,0,0,1739,0,0,1740,0,0,1741,0,0,1742,0,0,1743,0,0,1744,0,0,1745,0,0,1746,0,0,1747,0,0,1748,0,0,1749,0,0,1750,0,0,1751,0,0,1752,0,0,1753,0,0,1754,0,0,1755,0,0,1756,0,0,1757,0,0,1758,0,0,1759,0,0,1760,0,0,1761,0,0,1762,0,0,1763,0,0,1764,0,0,1765,0,0,1766,0,0,1767,0,0,1768,0,0,1769,0,0,1770,0,0,1771,0,0,1772,0,0,1773,0,0,1774,0,0,1775,0,0,1776,0,0,1777,0,0,1778,0,0,1779,0,0,1780,0,0,1781,0,0,1782,0,0,1783,0,0,1784,0,0,1785,0,0,1786,0,0,1787,0,0,1788,0,0,1789,0,0,1790,0,0,1791,0,0,1792,0,0,1793,0,0,1794,0,0,1795,0,0,1796,0,0,1797,0,0,1798,0,0,1799,0,0,1800,0,0,1801,0,0,1802,0,0,1803,0,0,1804,0,0,1805,0,0,1806,0,0,1807,0,0,1808,0,0,1809,0,0,1810,0,0,1811,0,0,1812,0,0,1813,0,0,1814,0,0,1815,0,0,1816,0,0,1817,0,0,1818,0,0,1819,0,0,1820,0,0,1821,0,0,1822,0,0,1823,0,0,1824,0,0,1825,0,-1,1828,0,0,1828,0,-1,1830,0,0,1830,0,0,1831,0,0,1832,0,0,1833,0,0,1834,0,0,1835,0,0,1836,0,0,1837,0,0,1838,0,0,1839,0,0,1840,0,0,1841,0,0,1842,0,0,1843,0,0,1844,0,0,1845,0,0,1846,0,0,1847,0,0,1848,0,0,1849,0,0,1850,0,0,1851,0,0,1852,0,0,1853,0,0,1854,0,0,1855,0,0,1856,0,0,1857,0,0,1858,0,0,1859,0,0,1860,0,0,1861,0,0,1862,0,0,1863,0,0,1864,0,0,1865,0,0,1866,0,0,1867,0,0,1868,0,0,1869,0,0,1870,0,0,1871,0,0,1872,0,0,1873,0,0,1874,0,0,1875,0,0,1876,0,0,1877,0,0,1878,0,0,1879,0,0,1880,0,0,1881,0,0,1882,0,0,1883,0,0,1884,0,0,1885,0,0,1886,0,0,1887,0,0,1888,0,0,1889,0,0,1890,0,0,1891,0,0,1892,0,0,1893,0,0,1894,0,0,1895,0,0,1896,0,0,1897,0,0,1898,0,0,1899,0,0,1900,0,0,1901,0,0,1902,0,0,1903,0,0,1904,0,0,1905,0,0,1906,0,0,1907,0,0,1908,0,0,1909,0,0,1910,0,0,1911,0,0,1912,0,0,1913,0,0,1914,0,0,1915,0,0,1916,0,0,1917,0,0,1918,0,0,1919,0,0,1920,0,0,1921,0,0,1922,0,0,1923,0,0,1924,0,0,1925,0,0,1926,0,0,1927,0,0,1928,0,0,1929,0,0,1930,0,0,1931,0,0,1932,0,0,1933,0,0,1934,0,0,1935,0,0,1936,0,0,1937,0,0,1938,0,0,1939,0,0,1940,0,0,1941,0,0,1942,0,0,1943,0,0,1944,0,0,1945,0,0,1946,0,0,1947,0,0,1948,0,0,1949,0,0,1950,0,0,1951,0,0,1952,0,0,1953,0,0,1954,0,0,1955,0,0,1956,0,0,1957,0,0,1958,0,0,1959,0,0,1960,0,0,1961,0,0,1962,0,0,1963,0,0,1964,0,0,1965,0,0,1966,0,0,1967,0,0,1968,0,0,1969,0,0,1970,0,0,1971,0,0,1972,0,0,1973,0,0,1974,0,0,1975,0,0,1976,0,0,1977,0,0,1978,0,0,1979,0,0,1980,0,0,1981,0,0,1982,0,0,1983,0,0,1984,0,0,1985,0,0,1986,0,0,1987,0,0,1988,0,0,1989,0,0,1990,0,0,1991,0,0,1992,0,0,1993,0,0,1994,0,0,1995,0,0,1996,0,0,1997,0,0,1998,0,0,1999,0,0,2000,0,0,2001,0,0,2002,0,0,2003,0,0,2004,0,0,2005,0,0,2006,0,0,2007,0,0,2008,0,0,2009,0,0,2010,0,0,2011,0,0,2012,0,0,2013,0,0,2014,0,0,2015,0,0,2016,0,0,2017,0,0,2018,0,0,2019,0,0,2020,0,0,2021,0,0,2022,0,0,2023,0,0,2024,0,0,2025,0,0,2026,0,0,2027,0,0,2028,0,0,2029,0,0,2030,0,0,2031,0,0,2032,0,0,2033,0,0,2034,0,0,2035,0,0,2036,0,0,2037,0,0,2038,0,0,2039,0,0,2040,0,0,2041,0,0,2042,0,0,2043,0,0,2044,0,0,2045,0,0,2046,0,0,2047,0,0,2048,0,0,2049,0,0,2050,0,0,2051,0,0,2052,0,0,2053,0,0,2054,0,0,2055,0,0,2056,0,0,2057,0,0,2058,0,0,2059,0,0,2060,0,0,2061,0,0,2062,0,0,2063,0,0,2064,0,0,2065,0,0,2066,0,0,2067,0,0,2068,0,0,2069,0,0,2070,0,0,2071,0,0,2072,0,0,2073,0,0,2074,0,0,2075,0,0,2076,0,0,2077,0,0,2078,0,0,2079,0,0,2080,0,0,2081,0,0,2082,0,0,2083,0,0,2084,0,0,2085,0,0,2086,0,0,2087,0,0,2088,0,0,2089,0,0,2090,0,0,2091,0,0,2092,0,0,2093,0,0,2094,0,0,2095,0,0,2096,0,0,2097,0,0,2098,0,0,2099,0,0,2100,0,0,2101,0,0,2102,0,0,2103,0,0,2104,0,0,2105,0,0,2106,0,0,2107,0,0,2108,0,0,2109,0,0,2110,0,0,2111,0,0,2112,0,0,2113,0,0,2114,0,0,2115,0,0,2116,0,0,2117,0,0,2118,0,0,2119,0,0,2120,0,0,2121,0,0,2122,0,0,2123,0,0,2124,0,0,2125,0,0,2126,0,0,2127,0,0,2128,0,0,2129,0,0,2130,0,0,2131,0,0,2132,0,0,2133,0,0,2134,0,0,2135,0,0,2136,0,0,2137,0,0,2138,0,0,2139,0,0,2140,0,0,2141,0,0,2142,0,0,2143,0,0,2144,0,0,2145,0,0,2146,0,0,2147,0,0,2148,0,0,2149,0,0,2150,0,0,2151,0,0,2152,0,0,2153,0,0,2154,0,0,2155,0,0,2156,0,0,2157,0,0,2158,0,0,2159,0,0,2160,0,0,2161,0,0,2162,0,0,2163,0,0,2164,0,0,2165,0,0,2166,0,0,2167,0,0,2168,0,0,2169,0,0,2170,0,0,2171,0,0,2172,0,0,2173,0,0,2174,0,0,2175,0,0,2176,0,0,2177,0,0,2178,0,0,2179,0,0,2180,0,0,2181,0,0,2182,0,0,2183,0,0,2184,0,0,2185,0,0,2186,0,0,2187,0,0,2188,0,0,2189,0,0,2190,0,0,2191,0,0,2192,0,0,2193,0,0,2194,0,0,2195,0,0,2196,0,0,2197,0,0,2198,0,0,2199,0,0,2200,0,0,2201,0,0,2202,0,0,2203,0,0,2204,0,0,2205,0,0,2206,0,0,2207,0,0,2208,0,0,2209,0,0,2210,0,0,2211,0,0,2212,0,0,2213,0,0,2214,0,0,2215,0,0,2216,0,0,2217,0,0,2218,0,0,2219,0,0,2220,0,0,2221,0,0,2222,0,0,2223,0,0,2224,0,0,2225,0,0,2226,0,0,2227,0,0,2228,0,0,2229,0,0,2230,0,0,2231,0,0,2232,0,0,2233,0,0,2234,0,0,2235,0,0,2236,0,0,2237,0,0,2238,0,0,2239,0,0,2240,0,0,2241,0,0,2242,0,0,2243,0,0,2244,0,0,2245,0,0,2246,0,0,2247,0,0,2248,0,0,2249,0,0,2250,0,0,2251,0,0,2252,0,0,2253,0,0,2254,0,0,2255,0,0,2256,0,0,2257,0,0,2258,0,0,2259,0,0,2260,0,0,2261,0,0,2262,0,0,2263,0,0,2264,0,0,2265,0,0,2266,0,0,2267,0,0,2268,0,0,2269,0,0,2270,0,0,2271,0,0,2272,0,0,2273,0,0,2274,0,0,2275,0,0,2276,0,0,2277,0,0,2278,0,0,2279,0,0,2280,0,0,2281,0,0,2282,0,0,2283,0,0,2284,0,0,2285,0,0,2286,0,0,2287,0,0,2288,0,0,2289,0,0,2290,0,0,2291,0,0,2292,0,0,2293,0,0,2294,0,0,2295,0,0,2296,0,0,2297,0,0,2298,0,0,2299,0,0,2300,0,0,2301,0,0,2302,0,0,2303,0,0,2304,0,0,2305,0,0,2306,0,0,2307,0,0,2308,0,0,2309,0,0,2310,0,0,2311,0,0,2312,0,0,2313,0,0,2314,0,0,2315,0,0,2316,0,0,2317,0,0,2318,0,0,2319,0,0,2320,0,0,2321,0,0,2322,0,0,2323,0,0,2324,0,0,2325,0,0,2326,0,0,2327,0,0,2328,0,0,2329,0,0,2330,0,0,2331,0,0,2332,0,0,2333,0,0,2334,0,0,2335,0,0,2336,0,0,2337,0,0,2338,0,0,2339,0,0,2340,0,0,2341,0,0,2342,0,0,2343,0,0,2344,0,0,2345,0,0,2346,0,0,2347,0,0,2348,0,0,2349,0,0,2350,0,0,2351,0,0,2352,0,0,2353,0,0,2354,0,0,2355,0,0,2356,0,0,2357,0,0,2358,0,0,2359,0,0,2360,0,0,2361,0,0,2362,0,0,2363,0,0,2364,0,0,2365,0,0,2366,0,0,2367,0,0,2368,0,0,2369,0,0,2370,0,0,2371,0,0,2372,0,0,2373,0,0,2374,0,0,2375,0,0,2376,0,0,2377,0,-1,2380,0,-1,2384,0,10,2384,0,0,2385,0,0,2386,0,-1,2388,0,-1,2389,0,10,2389,0,0,2390,0,0,2391,0,0,2392,0,0,2393,0,0,2394,0,0,2395,0,0,2396,0,0,2397,0,0,2398,0,0,2399,0,0,2400,0,0,2401,0,0,2402,0,0,2403,0,0,2404,0,0,2405,0,0,2406,0,0,2407,0,0,2408,0,0,2409,0,0,2410,0,0,2411,0,0,2412,0,0,2413,0,0,2414,0,0,2415,0,0,2416,0,0,2417,0,0,2418,0,0,2419,0,0,2420,0,0,2421,0,0,2422,0,0,2423,0,0,2424,0,0,2425,0,0,2426,0,0,2427,0,0,2428,0,0,2429,0,0,2430,0,0,2431,0,0,2432,0,0,2433,0,0,2434,0,0,2435,0,0,2436,0,0,2437,0,0,2438,0,0,2439,0,0,2440,0,0,2441,0,0,2442,0,0,2443,0,0,2444,0,0,2445,0,0,2446,0,0,2447,0,0,2448,0,0,2449,0,0,2450,0,0,2451,0,0,2452,0,0,2453,0,0,2454,0,0,2455,0,0,2456,0,0,2457,0,0,2458,0,0,2459,0,0,2460,0,0,2461,0,0,2462,0,0,2463,0,0,2464,0,0,2465,0,0,2466,0,0,2467,0,0,2468,0,0,2469,0,0,2470,0,0,2471,0,0,2472,0,0,2473,0,0,2475,0,0,2476,0,-1,2478,0,0,2478,0,0,2479,0,0,2480,0,0,2481,0,0,2482,0,0,2483,0,0,2484,0,0,2485,0,0,2486,0,0,2487,0,0,2488,0,0,2489,0,0,2490,0,0,2491,0,0,2492,0,0,2493,0,0,2495,0,0,2496,0,0,2497,0,0,2499,0,0,2500,0,0,2501,0,0,2503,0,0,2504,0,0,2505,0,0,2507,0,0,2508,0,0,2509,0,0,2510,0,0,2511,0,0,2512,0,0,2513,0,0,2514,0,0,2515,0,0,2516,0,0,2517,0,0,2518,0,0,2519,0,0,2520,0,0,2521,0,0,2522,0,0,2523,0,0,2524,0,0,2526,0,0,2527,0,0,2528,0,0,2529,0,0,2530,0,0,2531,0,0,2532,0,0,2533,0,0,2534,0,0,2535,0,0,2536,0,0,2537,0,0,2538,0,0,2539,0,0,2540,0,0,2541,0,0,2542,0,0,2543,0,0,2544,0,0,2545,0,0,2546,0,0,2547,0,0,2548,0,0,2549,0,0,2550,0,0,2551,0,0,2552,0,0,2553,0,0,2554,0,0,2555,0,-1,2557,0,-1,2558,0,0,2558,0,-1,2560,0,-1,2561,0,0,2561,0,-1,2563,0,-1,2564,0,10,2564,0,-1,2567,0,10,2567,0,10,2568,0,-1,2571,0,10,2571,0,10,2572,0,0,2573,0,31,22,1,2,241,2,2,22,3,2,621,4,2,634,5,2,647,6,2,54,7,2,22,10,2,241,11,2,241,12,2,58,13,2,278,14,2,279,15,2,280,16,2,281,17,2,282,18,2,234,19,2,687,20,2,687,21,2,687,23,2,598,24,2,598,25,2,598,27,2,599,28,2,599,29,2,599,30,2,600,31,2,600,32,2,600,33,2,601,34,2,601,35,2,601,36,2,602,37,2,602,38,2,602,39,2,603,40,2,603,41,2,603,42,2,604,43,2,604,44,2,604,45,2,605,46,2,605,47,2,605,48,2,606,49,2,606,50,2,606,51,2,607,52,2,607,53,2,607,57,2,62,59,2,207,60,2,62,61,2,620,63,2,930,69,2,608,70,2,608,71,2,608,72,2,609,73,2,609,74,2,609,75,2,610,76,2,610,77,2,610,78,2,611,79,2,611,80,2,611,81,2,612,82,2,612,83,2,612,84,2,613,85,2,613,86,2,613,87,2,614,88,2,614,89,2,614,90,2,615,91,2,615,92,2,615,93,2,616,94,2,616,95,2,616,96,2,617,97,2,617,98,2,617,99,2,622,100,2,622,101,2,622,102,2,623,103,2,623,104,2,623,105,2,624,106,2,624,107,2,624,108,2,625,109,2,625,110,2,625,111,2,626,112,2,626,113,2,626,114,2,627,115,2,627,116,2,627,117,2,628,118,2,628,119,2,628,120,2,629,121,2,629,122,2,629,123,2,630,124,2,630,125,2,630,126,2,631,127,2,631,128,2,631,129,2,632,130,2,632,131,2,632,132,2,633,133,2,633,134,2,633,135,2,635,136,2,635,137,2,635,138,2,636,139,2,636,140,2,636,141,2,637,142,2,637,143,2,637,144,2,638,145,2,638,146,2,638,147,2,639,148,2,639,149,2,639,150,2,640,151,2,640,152,2,640,153,2,641,154,2,641,155,2,641,156,2,642,157,2,642,158,2,642,159,2,643,160,2,643,161,2,643,162,2,644,163,2,644,164,2,644,165,2,645,166,2,645,167,2,645,168,2,646,169,2,646,170,2,646,171,2,648,172,2,648,173,2,648,174,2,649,175,2,649,176,2,649,177,2,650,178,2,650,179,2,650,180,2,651,181,2,651,182,2,651,183,2,652,184,2,652,185,2,652,186,2,653,187,2,653,188,2,653,189,2,654,190,2,654,191,2,654,192,2,655,193,2,655,194,2,655,195,2,656,196,2,656,197,2,656,198,2,657,199,2,657,200,2,657,201,2,658,202,2,658,203,2,658,204,2,659,205,2,659,206,2,659,208,2,662,209,2,662,210,2,662,211,2,663,212,2,663,213,2,663,214,2,664,215,2,664,216,2,664,217,2,665,218,2,665,219,2,665,220,2,666,221,2,666,222,2,666,227,2,291,228,2,291,229,2,292,230,2,670,231,2,671,235,2,685,236,2,685,237,2,685,238,2,686,239,2,686,240,2,686,294,2,2494,295,2,2498,296,2,2502,297,2,2506,598,2,1423,599,2,1451,600,2,1476,601,2,1501,602,2,1526,603,2,1551,604,2,1576,605,2,1601,606,2,1626,607,2,1651,608,2,839,609,2,840,610,2,841,611,2,842,612,2,843,613,2,844,614,2,845,615,2,846,616,2,847,617,2,848,662,2,932,663,2,933,664,2,934,665,2,935,666,2,936,681,2,962,682,2,962,685,2,966,686,2,967,687,2,2525,964,2,2474,968,2,2565,969,2,2569,2381,0,2382,4885],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2378,2378],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,9,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,9,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-1,11,-1,1,-1,11,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,7,3,3,3,7,3,3,3,7,3,3,3,3,-1,9,3,3,3,3,3,3,3,-1,9,3,3,3,3,3,3,3,3,3,-1,9,3,3,3,7,3,3,3,3,7,3,3,3,7,3,3,3,3,3,7,3,3,3,7,3,3,7,3,7,3,7,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,9,-1,1,-1,1,-1,1,-1,-2,9,-1,1,-1,1,-1,1,-1,-2,9,-1,1,-1,1,-1,1,-1,-2,9,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-2,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,11,-1,11,-1,11,-1,11,-1,11,-1,1,-1,-2,-3,32,33,34,35],[3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,3,0,4,0,5,0,9,27,38,28,9,9,29,9,34,9,41,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,41,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,41,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,41,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,41,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,41,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,9,27,38,28,9,9,29,9,34,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,30,11,31,11,32,11,33,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,104,58,105,58,69,59,69,60,61,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,44,62,44,70,59,70,60,61,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,44,62,44,71,59,71,60,61,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,44,62,44,36,46,36,47,36,48,36,49,50,36,46,36,47,36,48,36,49,50,36,46,36,47,36,48,36,49,50,36,46,36,47,36,48,36,49,50,36,46,36,47,36,48,36,49,50,72,106,73,74,75,107,76,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,77,77,78,78,79,79,54,54,54,54,55,55,55,55,80,80,72,108,45,45,81,82,45,45,109,51,52,63,83,83,52,110,111,51,52,52,63,84,84,112,51,52,113,114,51,115,51,63,85,85,86,82,45,45,87,116,88,42,42,89,90,42,42,86,87,117,88,42,42,89,90,42,42,81,36,36,56,56,56,56,118,64,119,64,120,64,121,65,122,65,123,65,3,0,4,0,5,0,124,125,126,127,128,129,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,91,130,91,131,132,0,57,43,43,92,133,92,134,135,0,57,43,43,93,136,93,137,138,0,57,43,43,94,139,94,140,141,0,57,43,43,1,12,1,13,14,6,15,7,2,8,1,16,1,17,18,6,19,7,2,8,1,20,1,21,22,23,24,25,2,26,9,27,38,28,9,9,29,9,34,9,66,9,41,9,30,9,31,9,32,9,33,10,27,39,28,10,29,10,34,10,66,10,41,10,30,10,31,10,32,10,33,11,27,40,28,11,29,11,34,11,66,11,41,11,30,11,31,11,32,11,33,142,143,74,75,95,67,144,96,97,68,97,68,95,67,98,58,98,145,146,147,148,149,1]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[150,35]],[[[19,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[19,".bin",1544167805,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":64368,"length":30288,"count":7572,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":64368,"count":1341,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.28171759843826294,-0.06897040456533432,-0.2879112958908081],"maxPosition",8,[1,0.28171759843826294,0.06897051632404327,0.2879112958908081]]],-1],0,0,[],[],[]],[[{"name":"FastTeach","rect":{"x":0,"y":0,"width":186,"height":98},"offset":{"x":0,"y":0},"originalSize":{"width":186,"height":98},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[151]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[152,37]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[153,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[154,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[155,37]],[[{"name":"giveUp","rect":{"x":0,"y":0,"width":111,"height":38},"offset":{"x":-0.5,"y":0},"originalSize":{"width":112,"height":38},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[156]],[[{"name":"yxjm_ml","rect":{"x":0,"y":0,"width":40,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":38},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[157]],[[[19,".bin",3276021356,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":60480,"length":14112,"count":3528,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":60480,"count":1260,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.14673872292041779,-0.02406216599047184,-0.3652726113796234],"maxPosition",8,[1,0.1511693149805069,0.031141377985477448,0.37732890248298645]]],-1],0,0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":1},"mainColor",8,[4,4294967295],"specular",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[158,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[76,53]],[[[19,".bin",3716488450,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25056,"length":11520,"count":2880,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25056,"count":522,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.28965920209884644,-5.613180221564923e-18,-0.2896593511104584],"maxPosition",8,[1,0.28965920209884644,0.18915829062461853,0.2896590828895569]]],-1],0,0,[],[],[]],[[{"name":"ksjm_gqml","rect":{"x":0,"y":0,"width":265,"height":67},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":266,"height":68},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[159]],[[[19,".bin",2402684923,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25248,"length":4944,"count":1236,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25248,"count":526,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4843102991580963,-2.965545397270806e-17,-0.4843102991580963],"maxPosition",8,[1,0.7178250551223755,1.337717056274414,0.4843102991580963]]],-1],0,0,[],[],[]],[[[19,".bin",918105917,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":34464,"length":10248,"count":2562,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":34464,"count":718,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8613842129707336,-0.47216904163360596,-0.3564043939113617],"maxPosition",8,[1,0.030212759971618652,-0.00012874603271484375,0.3564048111438751]]],-1],0,0,[],[],[]],[[[19,".bin",1163779617,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30384,"length":10080,"count":2520,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30384,"count":633,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11042667180299759,-1.5357063021383863e-17,-0.3452833592891693],"maxPosition",8,[1,0.11042667925357819,0.34706270694732666,0.40423348546028137]]],-1],0,0,[],[],[]],[[{"name":"mljm_fh","rect":{"x":0,"y":0,"width":80,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[160]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.371},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[161,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[162,35]],[[{"name":"yxjm_ts","rect":{"x":0,"y":0,"width":68,"height":91},"offset":{"x":0,"y":0.5},"originalSize":{"width":68,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[163]],[[{"name":"yxjm_jk","rect":{"x":0,"y":0,"width":41,"height":34},"offset":{"x":-0.5,"y":0},"originalSize":{"width":42,"height":34},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[164]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[165,35]],[[{"name":"step1","rect":{"x":0,"y":0,"width":91,"height":43},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":92,"height":44},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[166]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[99,35]],[[{"name":"step3","rect":{"x":0,"y":0,"width":129,"height":43},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":130,"height":44},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[167]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":2.01},"mainColor",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[168,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[169,37]],[[{"name":"arrow_point","rect":{"x":1,"y":9,"width":127,"height":192},"offset":{"x":0.5,"y":0},"originalSize":{"width":128,"height":210},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[170]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[171,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[172,35]],[[{"name":"tips3","rect":{"x":0,"y":0,"width":850,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":850,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[173]],[[{"name":"tips1","rect":{"x":0,"y":0,"width":765,"height":36},"offset":{"x":-0.5,"y":0},"originalSize":{"width":766,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[174]],[[[19,".bin",1739555125,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":35184,"length":16728,"count":4182,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":35184,"count":733,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30401739478111267,-0.07928265631198883,-0.30327901244163513],"maxPosition",8,[1,0.30401739478111267,0.07928265631198883,0.3032788038253784]]],-1],0,0,[],[],[]],[[[33,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[175,37]],[[{"name":"RunTeach","rect":{"x":0,"y":0,"width":186,"height":98},"offset":{"x":0,"y":0},"originalSize":{"width":186,"height":98},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[176]],[[{"name":"yxjm_fh","rect":{"x":0,"y":0,"width":40,"height":34},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":34},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[177]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[178,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[179,35]],[[{"name":"yxjm_andk","rect":{"x":0,"y":0,"width":160,"height":394},"offset":{"x":0,"y":0},"originalSize":{"width":160,"height":394},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[180]],[[{"name":"yxjm_zt","rect":{"x":0,"y":0,"width":38,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":38,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[181]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[182,37]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[183,37]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[184,37]],[[[19,".bin",2736964998,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1440,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05629351735115051,-0.13339215517044067,-0.05637550354003906],"maxPosition",8,[1,0.056293487548828125,0.13339221477508545,0.05637553334236145]]],-1],0,0,[],[],[]],[[[19,".bin",3288495307,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.49431994557380676,-0.1318787932395935,-0.055654942989349365],"maxPosition",8,[1,0.49431994557380676,0.1318787932395935,0.05565491318702698]]],-1],0,0,[],[],[]],[[[19,".bin",4134568157,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9600,"length":1704,"count":426,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9600,"count":200,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48431023955345154,-2.965545066398561e-17,-0.49057772755622864],"maxPosition",8,[1,0.48431023955345154,0.9607086181640625,0.49057772755622864]]],-1],0,0,[],[],[]],[[[19,".bin",3824457877,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1440,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.056293487548828125,-0.13339221477508545,-0.05637553334236145],"maxPosition",8,[1,0.056293487548828125,0.13339221477508545,0.05637550354003906]]],-1],0,0,[],[],[]],[[[19,".bin",1851762936,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1440,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05637550354003906,-0.13339215517044067,-0.05629351735115051],"maxPosition",8,[1,0.05637553334236145,0.13339221477508545,0.056293487548828125]]],-1],0,0,[],[],[]],[[[19,".bin",553976752,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":600,"count":150,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":56,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.09999841451644897,-0.46966552734375],"maxPosition",8,[1,0.5,0.09999847412109375,0.46966552734375]]],-1],0,0,[],[],[]],[[[19,".bin",2469326592,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.055655092000961304,-0.1318787932395935,-0.49431997537612915],"maxPosition",8,[1,0.05565512180328369,0.13187885284423828,0.49431997537612915]]],-1],0,0,[],[],[]],[[[19,".bin",2060297886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05565589666366577,-0.1318787932395935,-0.4943200647830963],"maxPosition",8,[1,0.05565589666366577,0.1318787932395935,0.4943200647830963]]],-1],0,0,[],[],[]],[[[19,".bin",2639396945,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1440,"length":264,"count":66,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1440,"count":30,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.05637553334236145,-0.13339221477508545,-0.056293487548828125],"maxPosition",8,[1,0.05637553334236145,0.13339221477508545,0.05629351735115051]]],-1],0,0,[],[],[]],[[[19,".bin",3732776951,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":120,"count":30,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.49431997537612915,-0.1318787932395935,-0.05565527081489563],"maxPosition",8,[1,0.49431997537612915,0.13187885284423828,0.05565524101257324]]],-1],0,0,[],[],[]],[[[19,".bin",2859315500,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-3.0616171314629196e-17,-0.5],"maxPosition",8,[1,0.5,1.600000023841858,0.5]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[27],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[6],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[6],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[6],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[6],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[6],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[6],0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[185,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[67,53]],[[[19,".bin",4038665767,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":53712,"length":21432,"count":5358,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":53712,"count":1119,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8569864630699158,-0.47547411918640137,-0.36266976594924927],"maxPosition",8,[1,0.028129905462265015,0.000010609626770019531,0.3764341473579407]]],-1],0,0,[],[],[]],[[[19,".bin",598287785,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26976,"length":5016,"count":1254,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26976,"count":562,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4887281656265259,-1.830905773658742e-7,-0.47742846608161926],"maxPosition",8,[1,0.7134076356887817,1.337716817855835,0.4911923408508301]]],-1],0,0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[186,37]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[187,35]],[[[19,".bin",3424055736,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":51744,"length":13800,"count":3450,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":51744,"count":1078,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8831853866577148,-0.4596036672592163,-0.37910911440849304],"maxPosition",8,[1,0.031116485595703125,0.13135957717895508,0.379109650850296]]],-1],0,0,[],[],[]],[[[19,".bin",890421507,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24528,"length":4920,"count":1230,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24528,"count":511,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4843102991580963,-2.965545397270806e-17,-0.4843102991580963],"maxPosition",8,[1,0.7193388938903809,1.337717056274414,0.4843102991580963]]],-1],0,0,[],[],[]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":2},"mainColor",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[188,35]],[[[33,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[189,37]],[[[19,".bin",2681125069,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":47664,"length":22704,"count":5676,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":47664,"count":993,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.15980654954910278,-0.0589618980884552,-0.39754819869995117],"maxPosition",8,[1,0.15980654954910278,0.058961767703294754,0.3969280421733856]]],-1],0,0,[],[],[]],[[[19,".bin",2489738356,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2496,"length":504,"count":126,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2496,"count":52,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-3.0616171314629196e-17,-0.5],"maxPosition",8,[1,0.5,0.10000000149011612,0.5]]],-1],0,0,[],[],[]],[[{"name":"ycjm_zj","rect":{"x":0,"y":0,"width":62,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":62,"height":62},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[190]],[[{"name":"ksjm_bctl","rect":{"x":0,"y":0,"width":264,"height":67},"offset":{"x":0,"y":0.5},"originalSize":{"width":264,"height":68},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[191]],[[[33,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[192,37]],[[{"name":"gg","rect":{"x":0,"y":0,"width":36,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":30},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[193]],[[{"name":"yxjm_sx","rect":{"x":0,"y":0,"width":32,"height":42},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":42},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[194]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[195,37]],[[[19,".bin",150064558,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14640,"length":6912,"count":1728,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14640,"count":305,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.17239169776439667,-8.940696716308594e-7,-0.17085571587085724],"maxPosition",8,[1,0.17239169776439667,0.24986305832862854,0.17085571587085724]]],-1],0,0,[],[],[]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":2},"mainColor",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[196,35]],[[[33,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"mainColor",8,[4,2113928960]]],11]]],0,0,[0],[4],[37]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[197,37]],[[{"name":"tips2","rect":{"x":0,"y":0,"width":848,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":848,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[198]],[[[33,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2147483647],"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[73,53]],[[{"name":"tips4","rect":{"x":0,"y":0,"width":695,"height":85},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":696,"height":86},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[199]],[[[19,".bin",2758137717,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3264,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3264,"count":68,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.11542892456054688,0.058695435523986816,-0.5],"maxPosition",8,[1,0.11542856693267822,1.5710194110870361,0.5]]],-1],0,0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[200,37]],[[[19,".bin",1790721709,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6720,"length":1080,"count":270,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6720,"count":140,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48431020975112915,-2.965544735526316e-17,-0.48431020975112915],"maxPosition",8,[1,0.48431020975112915,1.482851505279541,0.48431020975112915]]],-1],0,0,[],[],[]],[[[93,"builtin-unlit",[{"hash":3152709001,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 14) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":198,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[{"name":"Get","rect":{"x":0,"y":0,"width":111,"height":38},"offset":{"x":-0.5,"y":0},"originalSize":{"width":112,"height":38},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[201]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[202,35]],[[[19,".bin",1140416249,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6336,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6336,"count":132,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7410178184509277,0.054082274436950684,-0.5042800903320312],"maxPosition",8,[1,0.5011355876922607,1.56640625,0.739995002746582]]],-1],0,0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[203,35]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":2},"mainColor",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[204,35]],[[[93,"builtin-toon",[{"hash":2285632444,"name":"builtin-toon|outline-vs:vert|outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":198,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}]},{"hash":3307737695,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":4,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":5,"defines":["USE_NORMAL_MAP"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec2 v_uv;\nlayout(location = 3) out mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 4) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 5) out mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    layout(location = 0) in highp vec4 v_shadowPos;\n    layout(set = 0, binding = 2) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n    #if CC_RECEIVE_SHADOW\n      layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n      layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in vec3 v_position;\nlayout(location = 2) in vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  layout(location = 4) in mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\nlayout(location = 3) in mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 5) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  layout(set = 1, binding = 3) uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  layout(set = 1, binding = 4) uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  layout(set = 1, binding = 5) uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nout vec3 v_position;\nout vec2 v_uv;\nout mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    in highp vec4 v_shadowPos;\n    layout(std140) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":227,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":79}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_1ST_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_2ND_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean","defines":["USE_1ST_SHADE_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean","defines":["USE_BASE_COLOR_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean","defines":["USE_BASE_COLOR_MAP"]}]},{"hash":3596762244,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_worldPos;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_worldPos;\nlayout(location = 2) in float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nout vec2 v_uv;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture2D(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":188,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":79}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"passes":[{"program":"builtin-toon|outline-vs:vert|outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[19,".bin",4159893985,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14112,"length":5280,"count":1320,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14112,"count":294,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.29413771629333496,-7.450580596923828e-9,-0.2941378057003021],"maxPosition",8,[1,0.29413771629333496,0.1853230595588684,0.29413774609565735]]],-1],0,0,[],[],[]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":2},"mainColor",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[205,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[206,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":1},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4294967295],"shadeColor2",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[207,35]],[[[19,".bin",1114235394,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19248,"length":3168,"count":792,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19248,"count":401,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5067849159240723,-2.965545066398561e-17,-0.4905233383178711],"maxPosition",8,[1,0.49052321910858154,1.4477671384811401,0.4905232787132263]]],-1],0,0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[208,37]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[68,53]],[[{"name":"yxjm_gold_dk","rect":{"x":0,"y":0,"width":274,"height":94},"offset":{"x":0,"y":0},"originalSize":{"width":274,"height":94},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[209]],[[{"name":"Word_1","rect":{"x":0,"y":0,"width":369,"height":34},"offset":{"x":-0.5,"y":0},"originalSize":{"width":370,"height":34},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[210]],[[[19,".bin",1145208716,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38160,"length":11988,"count":2997,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38160,"count":795,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7846535444259644,-0.44421225786209106,-0.39999979734420776],"maxPosition",8,[1,0.03638562560081482,0.007815122604370117,0.4000002145767212]]],-1],0,0,[],[],[]],[[[19,".bin",1106380652,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25248,"length":4944,"count":1236,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25248,"count":526,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4843102991580963,-2.965545397270806e-17,-0.4843102991580963],"maxPosition",8,[1,0.7178250551223755,1.337717056274414,0.4843102991580963]]],-1],0,0,[],[],[]],[[{"name":"yxjm_tl","rect":{"x":0,"y":0,"width":57,"height":91},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":58,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[211]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[96,53]],[[{"name":"ydjm_dk","rect":{"x":0,"y":1,"width":774,"height":135},"offset":{"x":0,"y":-0.5},"originalSize":{"width":774,"height":136},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[212]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[213,37]],[[[33,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{"alphaThreshold":0.1},"mainColor",8,[4,2617245695],"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[99,37]],[[{"name":"step2","rect":{"x":0,"y":0,"width":91,"height":43},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":92,"height":44},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[214]],[[[93,"builtin-particle",[{"hash":585841727,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1223598056,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3735404623,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":2524517876,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[19,".bin",260858124,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43920,"length":20736,"count":5184,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43920,"count":915,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.13698509335517883,-7.152557373046875e-7,-0.36740922927856445],"maxPosition",8,[1,0.13698507845401764,0.19854500889778137,0.3667893409729004]]],-1],0,0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[215,35]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[[{},"baseColor",8,[4,4294967295]],[{"baseStep":1,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],11,11,0,0]]],0,0,[0,0],[5,4],[216,35]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":2},"mainColor",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[217,35]],[[[19,".bin",3300708901,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2112,"length":456,"count":114,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2112,"count":44,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4374317228794098,-0.09999841451644897,-0.3440372347831726],"maxPosition",8,[1,0.4374317228794098,0.09999847412109375,0.3440372347831726]]],-1],0,0,[],[],[]],[[[19,".bin",1406036802,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16800,"length":2688,"count":672,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":16800,"count":350,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4843102693557739,-2.965545066398561e-17,-0.4843102693557739],"maxPosition",8,[1,0.4843102693557739,1.4402329921722412,0.4843102693557739]]],-1],0,0,[],[],[]],[[{"name":"mljm_jt","rect":{"x":0,"y":0,"width":64,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[218]],[[[33,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{},[{"baseStep":2},"mainColor",8,[4,4294967295],"specular",8,[4,1275068416],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[5,4],[219,35]],[[[19,".bin",1718770758,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9888,"length":4800,"count":1200,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9888,"count":206,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.14845965802669525,-1.4365501768781847e-17,-0.3896123170852661],"maxPosition",8,[1,0.14845965802669525,0.19893468916416168,0.3889921307563782]]],-1],0,0,[],[],[]],[[[21,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[5,4],[220,37]],[[[19,".bin",445217468,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11088,"length":3360,"count":840,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11088,"count":231,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.07531146705150604,8.686732328496064e-19,-0.11800442636013031],"maxPosition",8,[1,0.11496500670909882,0.2990124225616455,0.11800442636013031]]],-1],0,0,[],[],[]],[[{"name":"tstk_dk","rect":{"x":0,"y":0,"width":300,"height":98},"offset":{"x":0,"y":0},"originalSize":{"width":300,"height":98},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[221]],[[{"name":"yxjm_bf","rect":{"x":0,"y":0,"width":27,"height":40},"offset":{"x":-0.5,"y":0},"originalSize":{"width":28,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[222]],[[{"name":"yxjm_yddk","rect":{"x":0,"y":0,"width":120,"height":78},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":78},"rotated":false,"capInsets":[28,0,28,0],"packable":true}],[1],0,[0],[6],[223]],[[[19,".bin",3278413842,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3744,"length":600,"count":150,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3744,"count":78,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8128865957260132,0.04440658539533615,-1.1646440029144287],"maxPosition",8,[1,1.7998034954071045,0.885813295841217,1.1382935047149658]]],-1],0,0,[],[],[]],[[[19,".bin",1305356912,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4368,"length":672,"count":168,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":5232,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4368,"count":91,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":5040,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8929635286331177,-5.960464477539063e-8,-0.019899606704711914],"maxPosition",8,[1,1.8722294569015503,1.4571943283081055,2.177415609359741]]],-1],0,0,[],[],[]],[[{"name":"tstk_dk-2","rect":{"x":0,"y":0,"width":540,"height":649},"offset":{"x":0,"y":0.5},"originalSize":{"width":540,"height":650},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[6],[224]]]]
