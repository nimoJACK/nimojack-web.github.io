System.register("chunks:///_virtual/2DShow3D.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, RenderTexture, SpriteFrame, Rect, UITransform, Sprite, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      RenderTexture = module.RenderTexture;
      SpriteFrame = module.SpriteFrame;
      Rect = module.Rect;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "860e4GyAQpJ/pFumbHbSlQB", "2DShow3D", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DShow3D = exports('DShow3D', (_dec = ccclass('DShow3D'), _dec2 = property(Camera), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DShow3D, _Component);

        function DShow3D() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "camera", _descriptor, _assertThisInitialized(_this));

          _this.renderTexture = null;
          _this.scaleAxis = 0.5;
          _this.frame = void 0;
          return _this;
        }

        var _proto = DShow3D.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.renderTexture = new RenderTexture();
          this.renderTexture.reset({
            width: 375,
            height: 667
          });
          this.node.active = false;
          this.scheduleOnce(function () {
            _this2.node.active = true;
          });
          this.frame = new SpriteFrame();
          this.frame.texture = this.renderTexture;
          this.frame.rect = new Rect(0, 0, this.renderTexture.width, this.renderTexture.height);
          this.frame.flipUVY = true;
          this.node.getComponent(UITransform).setContentSize(this.renderTexture.width, this.renderTexture.height);
          this.camera.targetTexture = this.renderTexture;
        };

        _proto.update = function update() {
          this.node.getComponent(Sprite).spriteFrame = this.frame;
        };

        return DShow3D;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Aim.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Vec3, Sprite, Color, Component, EventType, EventMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3fc3cZmd4xCNblb85TZBkRb", "Aim", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Aim = exports('Aim', (_dec = ccclass('Aim'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Aim, _Component);

        function Aim() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.circleNode = void 0;
          _this.hitNode = void 0;
          _this.skillHitNode = void 0;
          _this.damageValue = void 0;
          _this.shootAxis = 0;
          _this.hitReduceAxis = 2;
          _this.nowRot = new Vec3();
          _this.targetRot = new Vec3();
          _this.hitAxis = 0;
          _this.targetName = "";
          _this.damageNumber = 0;
          _this.damageUpdateTime = 0;
          return _this;
        }

        var _proto = Aim.prototype;

        _proto.onLoad = function onLoad() {
          // this.baseNode = this.node.getChildByName("base");
          this.hitNode = this.node.getChildByName("hit");
          this.skillHitNode = this.node.getChildByName("skillHit");
          this.damageValue = this.node.getChildByName("damageValue").getComponent(Label);
          this.circleNode = this.node.getChildByName("circle"); // this.baseNode.active = false;

          this.hitNode.active = true;
          this.circleNode.active = true;
          this.skillHitOff();
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_Aim_Shoot, this, this.shoot);
          EventMgr.on(EventType.Game_Aim_Hit, this, this.hit);
          EventMgr.on(EventType.Game_Aim_SkillHit_On, this, this.skillHitOn);
          EventMgr.on(EventType.Game_Aim_SkillHit_Off, this, this.skillHitOff);
          EventMgr.on(EventType.Game_Aim_Lock, this, this.lock);
          EventMgr.on(EventType.Game_Aim_UnLock, this, this.unLock);
          EventMgr.on(EventType.Game_Player_Atk, this, this.damageValueUpdate);
          EventMgr.on(EventType.Game_Player_Miss, this, this.unHitUpdate);
        };

        _proto.update = function update(dt) {
          var axis = 25 + this.shootAxis * 30; // this.baseNode.children[0].setPosition(new Vec3(0, axis, 0));
          // this.baseNode.children[1].setPosition(new Vec3(0, -axis, 0));
          // this.baseNode.children[2].setPosition(new Vec3(axis, 0, 0));
          // this.baseNode.children[3].setPosition(new Vec3(-axis, 0, 0));

          this.circleNode.children[0].setScale(new Vec3(this.shootAxis, this.shootAxis, 1)); //锁定和非锁定过渡

          this.nowRot.lerp(this.targetRot, dt * 10); // this.baseNode.setRotationFromEuler(this.nowRot);

          var hitRot = new Vec3(0, 0, this.nowRot.z + 45);
          this.hitNode.setRotationFromEuler(hitRot); //击中的Alpha变化

          this.hitAxis -= dt * this.hitReduceAxis;

          if (this.hitAxis < 0) {
            this.hitAxis = 0;
          } //击中扩散


          axis = 30 + Math.pow(this.hitAxis, 2) * 10;
          this.hitNode.children[0].setPosition(new Vec3(0, axis, 0));
          this.hitNode.children[1].setPosition(new Vec3(0, -axis, 0));
          this.hitNode.children[2].setPosition(new Vec3(axis, 0, 0));
          this.hitNode.children[3].setPosition(new Vec3(-axis, 0, 0));

          for (var i = 0; i < this.hitNode.children.length; i++) {
            this.hitNode.children[i].getComponent(Sprite).color = new Color(255, 255, 255, this.hitAxis * 255);
          } //伤害冒字根据时间的变化


          if (this.damageNumber > 0) {
            var time = new Date().getTime() - this.damageUpdateTime;
            var scale = 1;
            var alpha = 1;

            if (time < 200) {
              scale = time / 200 * 0.5 + 1;
              alpha = 1;
            } else if (time < 500) {
              scale = 1.5 - (time - 200) / 300 * 0.5;
              alpha = 1;
            } else if (time < 2000) {
              scale = 1;
              alpha = 1;
            } else if (time < 3000) {
              scale = 1;
              alpha = 1 - (time - 2000) / 1000;
            } else {
              scale = 1;
              alpha = 0;
              this.damageNumber = 0;
              this.targetName = "";
            }

            this.damageValue.color = new Color(255, 255, 0, alpha * 255);
            this.damageValue.node.setScale(new Vec3(scale, scale, scale));
          } else {
            var _scale = 1;
            var _alpha = 0;
            this.damageValue.color = new Color(255, 255, 0, _alpha);
            this.damageValue.node.setScale(new Vec3(_scale, _scale, _scale));
          }
        };

        _proto.unLock = function unLock() {
          this.targetRot = new Vec3(0, 0, 0);
        };

        _proto.lock = function lock() {
          this.targetRot = new Vec3(0, 0, 45);
        };

        _proto.shoot = function shoot(axis) {
          this.shootAxis = axis;
        };

        _proto.hit = function hit() {
          this.hitAxis = 1;
        };

        _proto.skillHitOn = function skillHitOn() {
          this.skillHitNode.active = true;
        };

        _proto.skillHitOff = function skillHitOff() {
          this.skillHitNode.active = false;
        };

        _proto.damageValueUpdate = function damageValueUpdate(targetName, value) {
          if (targetName != this.targetName) {
            //刷新
            this.damageNumber = 0;
            this.targetName = targetName;
          }

          this.damageNumber += Math.floor(value) + Tool.randomInt(-20, 20);
          this.damageValue.string = this.damageNumber.toString();
          this.damageUpdateTime = new Date().getTime();
        };

        _proto.unHitUpdate = function unHitUpdate() {
          this.damageNumber = 0;
          this.damageValue.string = "未击穿敌人的装甲";
          this.damageUpdateTime = new Date().getTime();
        };

        return Aim;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AimStage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CameraHandler.ts', './ComposerHandler.ts', './HardLookAtHandler.ts', './BaseStage.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, CameraHandler, ComposerHandler, HardLookAtHandler, BaseStage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }, function (module) {
      ComposerHandler = module.ComposerHandler;
    }, function (module) {
      HardLookAtHandler = module.HardLookAtHandler;
    }, function (module) {
      BaseStage = module.BaseStage;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9aaa9R0RxZFwrBQPW5bAcZD", "AimStage", undefined);

      var AimStage = exports('AimStage', /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(AimStage, _BaseStage);

        function AimStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._handlers = [new CameraHandler(_this._vcam), new ComposerHandler(_this._vcam), new HardLookAtHandler(_this._vcam)];
          return _this;
        }

        var _proto = AimStage.prototype;

        _proto.onEnable = function onEnable() {
          this._handlers.forEach(function (v) {
            return v.enable = true;
          });
        };

        _proto.onDisable = function onDisable() {
          this._handlers.forEach(function (v) {
            return v.enable = false;
          });
        };

        _proto.updateStage = function updateStage(deltaTime) {
          var aim = this._vcam.aim;
          var handler = this._handlers[aim.type];

          if (handler) {
            handler.updateCamera(deltaTime);
          }
        };

        return AimStage;
      }(BaseStage));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AimTankShow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d760b++yN1BaJlIPbAutZB0", "AimTankShow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AimTankShow = exports('AimTankShow', (_dec = ccclass('AimTankShow'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AimTankShow, _Component);

        function AimTankShow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.body = void 0;
          return _this;
        }

        var _proto = AimTankShow.prototype;

        _proto.onLoad = function onLoad() {
          this.body = this.node.getChildByName("Body");
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_Aim_TankPose, this, this.updatePose);
        };

        _proto.updatePose = function updatePose(yAngle) {
          this.body.setRotationFromEuler(0, 0, -yAngle);
        };

        return AimTankShow;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Anim_Tank.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Material, Texture2D, Quat, MeshRenderer, Color, Vec4, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      Texture2D = module.Texture2D;
      Quat = module.Quat;
      MeshRenderer = module.MeshRenderer;
      Color = module.Color;
      Vec4 = module.Vec4;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "1bcae3GSTxJP7sLhquyHnMd", "Anim_Tank", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Anim_Tank = exports('Anim_Tank', (_dec = ccclass('Anim_Tank'), _dec2 = property({
        type: [Material]
      }), _dec3 = property(Material), _dec4 = property({
        type: [Texture2D]
      }), _dec5 = property({
        type: [Texture2D]
      }), _dec6 = property(Material), _dec7 = property(Material), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Anim_Tank, _Component);

        function Anim_Tank() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.body = void 0;
          _this.track = void 0;
          _this.cap = void 0;
          _this.wheelLength = void 0;
          _this.playerCampMat = [];
          _this.enemyCampMat = [];
          _this.normalCampMat = [];

          _initializerDefineProperty(_this, "skinMat", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deadMat", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tankTexture", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinTexture", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "normalMat", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outlineMat", _descriptor6, _assertThisInitialized(_this));

          _this.normalMats = [];
          _this.outlineMats = [];
          _this.deadMats = [];
          _this.bodySkinId = 0;
          _this.isDead = false;
          _this.isAim = true;
          _this.targetRot = new Quat();
          _this.trackOffsetHandle = void 0;
          _this.trackRender = void 0;
          return _this;
        }

        var _proto = Anim_Tank.prototype;

        _proto.onLoad = function onLoad() {
          this.body = this.node.getChildByPath("Body/Body");
          this.track = this.node.getChildByName("Track");
          this.cap = this.node.getChildByPath("Body/Cap");
          this.trackRender = this.track.getComponent(MeshRenderer);
          this.trackOffsetHandle = this.trackRender.material.passes[1].getHandle("tilingOffset");
          this.wheelLength = 2.25 * Math.PI;
          var normalMat;
          var outlineMat;

          for (var j = -1; j < this.skinTexture.length; j++) {
            for (var i = 0; i < this.tankTexture.length; i++) {
              normalMat = new Material();
              normalMat.initialize({});
              normalMat.copy(this.normalMat);
              normalMat.setProperty("mainTexture", this.tankTexture[i]);

              if (j > -1) {
                normalMat.setProperty("addTexture", this.skinTexture[j]);
              }

              outlineMat = new Material();
              outlineMat.initialize({});
              outlineMat.copy(this.outlineMat);
              outlineMat.setProperty("mainTexture", this.tankTexture[i]);

              if (j > -1) {
                outlineMat.setProperty("addTexture", this.skinTexture[j]);
              }

              this.normalMats.push(normalMat);
              this.outlineMats.push(outlineMat);
            }
          } // for (let i = 0; i < this.tankTexture.length; i++) {
          //     let mat = new Material()
          //     mat.initialize({
          //     });
          //     mat.copy(this.deadMat);
          //     mat.setProperty("mainTexture", this.tankTexture[i]);
          //     this.deadMats.push(mat);
          // }

        };

        _proto.start = function start() {};

        _proto.changeSkinMat = function changeSkinMat(skinId, heroId) {
          skinId = skinId + 1;
          this.bodySkinId = skinId * 5 + heroId;
          this.changeSelectMat(false);
        };

        _proto.changeDeadMat = function changeDeadMat(heroId) {
          this.isDead = true; // let body = this.node.getChildByName("Body");

          var renders = this.node.getComponentsInChildren(MeshRenderer);

          for (var j = 0; j < renders.length - 1; j++) {
            renders[j].setMaterial(this.deadMat, 0);
          }
        };

        _proto.changeSelectMat = function changeSelectMat(isAim) {
          if (this.isAim == isAim || this.isDead) {
            return;
          }

          this.isAim = isAim;
          var body = this.node.getChildByName("Body");
          var renders = body.getComponentsInChildren(MeshRenderer);
          var mat = isAim ? this.outlineMats[this.bodySkinId] : this.normalMats[this.bodySkinId]; //Body材质更换

          for (var j = 0; j < renders.length; j++) {
            renders[j].setMaterial(mat, 0);
          } //Track材质更换


          this.trackRender.material.setProperty("outLineColor", isAim ? new Color(255, 0, 0, 255) : new Color(0, 0, 0, 255));
          this.trackRender.material.setProperty("lineWidth", isAim ? 10000 : 10);
        };

        _proto.update = function update(dt) {
          //外壳抖动平滑化
          var nowRot = this.body.getRotation();
          nowRot.lerp(this.targetRot, 5 * dt);
          this.body.setRotation(nowRot);
        };

        _proto.setRot = function setRot(forwardRot, horizontalRot) {
          var rotZ = 0;

          if (forwardRot > 0) {
            rotZ += 0.25 * forwardRot;
          } else if (forwardRot <= 0) {
            rotZ += 0.5 * forwardRot;
          }

          if (rotZ > 3) {
            rotZ = 3;
          } else if (rotZ < -3) {
            rotZ = -3;
          }

          if (this.targetRot) Quat.fromEuler(this.targetRot, horizontalRot, 0, rotZ);
        };

        _proto.setSpeed = function setSpeed(nowSpeed, rotSpeed, isLeft) {
          if (!this.trackRender) return;

          if (isLeft) {
            nowSpeed -= 10 * rotSpeed;
          } else {
            nowSpeed += 10 * rotSpeed;
          } //履带uv变


          var offset = new Vec4();
          this.trackRender.material.passes[1].getUniform(this.trackOffsetHandle, offset);
          offset.w += nowSpeed / 7.5;
          this.trackRender.material.passes[1].setUniform(this.trackOffsetHandle, offset); //轮胎旋转

          var wheel;
          var rot = new Quat();
          var speed = nowSpeed / this.wheelLength * Math.PI * 2;

          for (var i = 0; i < this.track.children.length; i++) {
            wheel = this.track.children[i];
            rot = wheel.getRotation();
            Quat.rotateAroundLocal(rot, rot.clone(), Vec3.FORWARD, -speed);
            wheel.setRotation(rot);
          }
        };

        return Anim_Tank;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "skinMat", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "deadMat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tankTexture", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "skinTexture", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "normalMat", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "outlineMat", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AppConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0d20aYuKMNOaLpLCja1ucLs", "AppConfig", undefined);

      var AppConfig = exports('default', {
        wechat: {
          // 微信
          videoAdUnitId: ["adunit-0d5bb61ec939bf9e"],
          interstitialAdUnitId: [""],
          customAd: ["", ""],
          finishCustomAd: [""]
        }
      });
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // export default {
      //     wechat: {// 微信
      //         // 激励视频
      //         videoAdUnitId: ["adunit-15684b335e1774b2"],
      //         // 插屏广告
      //         interstitialAdUnitId: ["adunit-2477d4431a6ced01"],
      //         // 原生广告 
      //         customAd: ["adunit-6b8f3edaa1b39ac8", "adunit-19e8a40f68f2ee36"],
      //         // 原生广告（结算页）
      //         finishCustomAd: ["adunit-8dbf6ad4b82fd8eb"]
      //     },
      // 
      // 
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Platform.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, assetManager, Prefab, instantiate, Component, Platform;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      assetManager = module.assetManager;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      Platform = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "42374uvGGtHxakQ0OnO9tcP", "AssetMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AssetMgr = exports('AssetMgr', (_dec = ccclass('AssetMgr'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AssetMgr, _Component);

        function AssetMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.soundSubPackageUrl = "03_Sound";
          _this.stageSubPackageUrl = "04_Stage";
          _this.map2_VilliageMap_SubPackageUrl = "2_VilliageMap";
          _this.isSoundBundle = false;
          _this.isStageBundle = false;
          _this.isMap2_VilliageMap_Bundle = false;
          _this.isMap2_VilliageMap_Loaded = false;
          _this.mapPrefab = null;
          _this.mapData = null;
          _this.isMap2Loading = false;
          return _this;
        }

        var _proto = AssetMgr.prototype;

        _proto.onLoad = function onLoad() {
          AssetMgr.instance = this;
        };

        _proto.start = function start() {};

        _proto.startLoadStage = function startLoadStage() {
          Platform.instance.loadSubPackage(this.soundSubPackageUrl, this.soundPackageEnd.bind(this));
          Platform.instance.loadSubPackage(this.stageSubPackageUrl, this.stagePackageEnd.bind(this));
          Platform.instance.loadSubPackage(this.map2_VilliageMap_SubPackageUrl, this.map2_VilliageMap_PackageEnd.bind(this));
        };

        _proto.map2_VilliageMap_PackageEnd = function map2_VilliageMap_PackageEnd() {
          var _this2 = this; //先开始预加载


          assetManager.loadBundle(this.map2_VilliageMap_SubPackageUrl, function (err, bundle) {
            console.log("村庄分包加载成功");
            _this2.isMap2_VilliageMap_Bundle = true;
            bundle.preload("VilliageMap", Prefab, function (err, res) {
              if (err) {
                console.warn(err);
              }
            });
            bundle.preload("NavData/nav-mesh", function (err, res) {
              if (err) {
                console.warn(err);
              }
            });
          });
        };

        _proto.map2_Load = function map2_Load() {
          var _this3 = this;

          if (this.isMap2Loading) return;
          this.isMap2Loading = true;
          var bundle = assetManager.getBundle(this.map2_VilliageMap_SubPackageUrl);
          var mapDone = false;
          var dataDone = false;
          var self = this;

          var cb = function cb() {
            if (mapDone && dataDone) {
              console.log("村庄地图预加载完毕");
              self.isMap2_VilliageMap_Loaded = true;
            }
          };

          bundle.load("VilliageMap", Prefab, function (err, res) {
            if (err) {
              console.warn(err);
            }

            _this3.mapPrefab = res;
            mapDone = true;
            cb();
          });
          bundle.load("NavData/nav-mesh", function (err, res) {
            if (err) {
              console.warn(err);
            }

            var buffer = res.buffer();
            var foobar = new Uint8Array(buffer);
            _this3.mapData = foobar;
            dataDone = true;
            cb();
          });
        };

        _proto.soundPackageEnd = function soundPackageEnd() {
          var _this4 = this;

          console.log("声音资源分包加载完毕，开始加载声音系统");
          var soundStartTime = new Date().getTime();
          assetManager.loadBundle(this.soundSubPackageUrl, function (err, bundle) {
            bundle.load("Sound", Prefab, function (err, res) {
              _this4.isSoundBundle = true;
              var time = new Date().getTime() - soundStartTime;
              console.log("声音系统加载完毕");
              console.log("加载时间：" + Math.floor(time / 1000) + "s");
              var sound = instantiate(res);

              _this4.node.addChild(sound);
            });
          });
        };

        _proto.stagePackageEnd = function stagePackageEnd() {
          var _this5 = this;

          assetManager.loadBundle(this.stageSubPackageUrl, function () {
            _this5.isStageBundle = true;
            console.log("场景资源加载完毕");
          });
        };

        return AssetMgr;
      }(Component), _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AtkUpBuff.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5dcb6zIXwdBE4SKrYkvnoKp", "AtkUpBuff", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AtkUpBuff = exports('AtkUpBuff', (_dec = ccclass('AtkUpBuff'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(AtkUpBuff, _PoolComp);

        function AtkUpBuff() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;
          _this.anim = void 0;
          return _this;
        }

        var _proto = AtkUpBuff.prototype;

        _proto.firstBorn = function firstBorn() {
          this.anim = this.node.getComponent(Animation);
        };

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.node.active = true;
          this.anim.play();
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        return AtkUpBuff;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoFireSwitchBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, GameData, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8e05a4Y+htAJZumcskScDyo", "AutoFireSwitchBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoFireSwitchBtn = exports('AutoFireSwitchBtn', (_dec = ccclass('AutoFireSwitchBtn'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AutoFireSwitchBtn, _Component);

        function AutoFireSwitchBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = void 0;
          return _this;
        }

        var _proto = AutoFireSwitchBtn.prototype;

        _proto.onLoad = function onLoad() {
          this.label = this.node.getChildByName("Label").getComponent(Label);
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.node, this, this.switchAutoFire);
          this.updateUI();

          if (StorageMgr.instance.storageData.playCount == 0) {
            //新手教程隐藏
            this.node.active = false;
          }
        };

        _proto.update = function update(deltaTime) {};

        _proto.switchAutoFire = function switchAutoFire() {
          GameData.isAutoFire = !GameData.isAutoFire;
          this.updateUI();
        };

        _proto.updateUI = function updateUI() {
          this.label.string = GameData.isAutoFire ? "自动开炮\n\t已开启" : "自动开炮\n\t已关闭";
        };

        return AutoFireSwitchBtn;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoScroll.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ScrollView, v2, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
      v2 = module.v2;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "a75d1uQdLhKfJU99KUbdLWv", "AutoScroll", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoScroll = exports('default', (_dec = ccclass('AutoScroll'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AutoScroll, _Component);

        function AutoScroll() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scrollSpeed", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isVertical", _descriptor2, _assertThisInitialized(_this));

          _this.scroll = null;
          _this.isReady = false;
          _this.isDown = true;
          return _this;
        }

        var _proto = AutoScroll.prototype;

        _proto.onLoad = function onLoad() {
          this.scroll = this.node.getComponent(ScrollView);
        };

        _proto.start = function start() {
          var _this2 = this;

          this.scheduleOnce(function () {
            _this2.isReady = true;
          }, 1);
        };

        _proto.onEnable = function onEnable() {
          var _this3 = this;

          this.scheduleOnce(function () {
            _this3.isReady = true;
          }, 1);
        };

        _proto.onDisable = function onDisable() {
          this.isReady = false;
        };

        _proto.update = function update(dt) {
          var _this4 = this;

          if (!this.isReady || this.scroll.isScrolling()) return;
          var curV = this.isVertical ? this.scroll.getScrollOffset().y : -this.scroll.getScrollOffset().x;
          var maxV = this.isVertical ? this.scroll.getMaxScrollOffset().y : this.scroll.getMaxScrollOffset().x;

          if (this.isDown) {
            curV += this.scrollSpeed;

            if (curV < maxV) {
              if (this.isVertical) {
                this.scroll.scrollToOffset(v2(0, curV));
              } else {
                this.scroll.scrollToOffset(v2(curV, 0));
              }
            } else {
              this.isDown = false;
              this.isReady = false;
              this.scheduleOnce(function () {
                _this4.isReady = true;
              }, 1);
            }
          } else {
            curV -= this.scrollSpeed;

            if (curV > 0) {
              if (this.isVertical) {
                this.scroll.scrollToOffset(v2(0, curV));
              } else {
                this.scroll.scrollToOffset(v2(curV, 0));
              }
            } else {
              this.isDown = true;
              this.isReady = false;
              this.scheduleOnce(function () {
                _this4.isReady = true;
              }, 1);
            }
          }
        };

        return AutoScroll;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scrollSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isVertical", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // const { ccclass, property } = cc._decorator;
      //
      // @ccclass
      // export default class AutoScroll extends cc.Component {
      //
      //     @property
      //     scrollSpeed: number = 2
      //     @property
      //     isVertical: boolean = true
      //
      //     scroll: cc.ScrollView = null
      //
      //     isReady: boolean = false
      //     isDown: boolean = true
      //
      //     onLoad() {
      //         this.scroll = this.node.getComponent(cc.ScrollView)
      //     }
      //
      //     start() {
      //         this.scheduleOnce(() => { this.isReady = true }, 1)
      //     }
      //
      //     onEnable() {
      //         this.scheduleOnce(() => { this.isReady = true }, 1)
      //     }
      //
      //     onDisable() {
      //         this.isReady = false
      //     }
      //
      //     update(dt) {
      //         if (!this.isReady || this.scroll.isScrolling()) return
      //
      //         let curV = this.isVertical ? this.scroll.getScrollOffset().y : -this.scroll.getScrollOffset().x
      //         let maxV = this.isVertical ? this.scroll.getMaxScrollOffset().y : this.scroll.getMaxScrollOffset().x
      //         if (this.isDown) {
      //             curV += this.scrollSpeed
      //             if (curV < maxV) {
      //                 if (this.isVertical) {
      //                     this.scroll.scrollToOffset(cc.v2(0, curV))
      //                 } else {
      //                     this.scroll.scrollToOffset(cc.v2(curV, 0))
      //                 }
      //             } else {
      //                 this.isDown = false
      //                 this.isReady = false
      //                 this.scheduleOnce(() => { this.isReady = true }, 1)
      //             }
      //         } else {
      //             curV -= this.scrollSpeed
      //             if (curV > 0) {
      //                 if (this.isVertical) {
      //                     this.scroll.scrollToOffset(cc.v2(0, curV))
      //                 } else {
      //                     this.scroll.scrollToOffset(cc.v2(curV, 0))
      //                 }
      //             } else {
      //                 this.isDown = true
      //                 this.isReady = false
      //                 this.scheduleOnce(() => { this.isReady = true }, 1)
      //             }
      //         }
      //     }
      //
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, CCFloat, Sprite, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bef7diNtE1G9LMs03e0/hQp", "Bar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode,
          menu = _decorator.menu;
      var Bar = exports('Bar', (_dec = ccclass('Bar'), _dec2 = executeInEditMode(true), _dec3 = menu('UI/Comp/Bar'), _dec4 = property({
        type: Node,
        visible: true,
        displayName: '进度条的条'
      }), _dec5 = property({
        type: CCFloat,
        visible: true,
        displayName: '进度'
      }), _dec6 = property({
        visible: true,
        displayName: '翻转'
      }), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Bar, _Component);

        function Bar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bar", _descriptor, _assertThisInitialized(_this));

          _this._value = 0;
          _this._reversal = false;
          return _this;
        }

        var _proto = Bar.prototype;

        _proto.onChange = function onChange() {
          if (this.bar) {
            var sprite = this.bar.getComponent(Sprite);
            sprite.type = Sprite.Type.FILLED;
            sprite.fillType = Sprite.FillType.HORIZONTAL;

            if (this._reversal) {
              sprite.fillStart = 1 - this._value;
              sprite.fillRange = 1;
            } else {
              sprite.fillStart = 0;
              sprite.fillRange = this._value;
            }
          }
        };

        _createClass(Bar, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            this._value = v;
            if (this.value > 1) this._value = 1;else if (this.value < 0) this._value = 0;
            this.onChange();
          }
        }, {
          key: "reversal",
          get: function get() {
            return this._reversal;
          },
          set: function set(v) {
            this._reversal = v;
            this.onChange();
          }
        }]);

        return Bar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bar", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "value", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reversal", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "reversal"), _class2.prototype)), _class2)) || _class) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Base.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('BaseFlag', void 0);

      cclegacy._RF.push({}, "3be5frJskNL5ZI9D4VeEHjM", "Base", undefined);

      var BaseFlag;

      (function (BaseFlag) {
        BaseFlag[BaseFlag["None"] = 0] = "None";
        BaseFlag[BaseFlag["Enable"] = 1] = "Enable";
        BaseFlag[BaseFlag["Custom"] = 4] = "Custom";
      })(BaseFlag || (BaseFlag = exports('BaseFlag', {})));

      var Base = exports('Base', /*#__PURE__*/function () {
        function Base() {
          this._objFlag = 0;
        }

        _createClass(Base, [{
          key: "enable",
          get: function get() {
            return !!(this._objFlag & BaseFlag.Enable);
          },
          set: function set(v) {
            if (v) {
              if (!(this._objFlag & BaseFlag.Enable)) {
                this._objFlag |= BaseFlag.Enable;
                this.onEnable && this.onEnable();
              }
            } else {
              if (this._objFlag & BaseFlag.Enable) {
                this._objFlag &= ~BaseFlag.Enable;
                this.onDisable && this.onDisable();
              }
            }
          }
        }]);

        return Base;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BasePlatform.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('PlatformType', void 0);

      cclegacy._RF.push({}, "d1550qjUB1Ax5sikt2CoDP0", "BasePlatform", undefined);

      var PlatformType;

      (function (PlatformType) {
        PlatformType[PlatformType["WeiXin"] = 0] = "WeiXin";
        PlatformType[PlatformType["Qq"] = 1] = "Qq";
        PlatformType[PlatformType["Vivo"] = 2] = "Vivo";
        PlatformType[PlatformType["Oppo"] = 3] = "Oppo";
        PlatformType[PlatformType["ZiJieTiaoDong"] = 4] = "ZiJieTiaoDong";
        PlatformType[PlatformType["Mgc"] = 5] = "Mgc";
        PlatformType[PlatformType["Swan"] = 6] = "Swan";
        PlatformType[PlatformType["Android"] = 7] = "Android";
        PlatformType[PlatformType["Ios"] = 8] = "Ios";
      })(PlatformType || (PlatformType = exports('PlatformType', {})));

      var BasePlatform = exports('default', /*#__PURE__*/function () {
        function BasePlatform() {
          this.bannerId = "";
          this.videoId = "";
          this.interId = "";
          this.gridId = [];
          this.existBannerAd = false;
          this.existVideoAd = false;
          this.existInterAd = false;
          this.existGridAd = false;
          this.init();
        } // /**Banner广告 ID */


        var _proto = BasePlatform.prototype; // /**初始化平台 */

        _proto.init = function init() {
          console.error("初始化平台失败");
        } // // /**Banner广告加载 */
        // // loadBanner() { console.error("暂不支持调用接口: loadBanner"); }
        // // /**Banner广告显示 */
        // // showBanner() { console.error("暂不支持调用接口: showBanner"); }
        // // /**Banner广告隐藏 */
        // // hideBanner() { console.error("暂不支持调用接口: hideBanner"); }
        // // /**视频广告加载 */
        // // loadVideoAd() { console.error("暂不支持调用接口: loadVideoAd"); }
        // // /**视频广告显示 */
        // // showVideoAd() { console.error("暂不支持调用接口: showVideoAd"); }
        ;

        return BasePlatform;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseStage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Base;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Base = module.Base;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f3957i4i6tInKV6Rdsk1/N/", "BaseStage", undefined);

      var BaseStage = exports('BaseStage', /*#__PURE__*/function (_Base) {
        _inheritsLoose(BaseStage, _Base);

        function BaseStage(_vcam) {
          var _this;

          _this = _Base.call(this) || this;
          _this._vcam = _vcam;
          return _this;
        }

        var _proto = BaseStage.prototype;

        _proto.updateStage = function updateStage(deltaTime) {};

        return BaseStage;
      }(Base));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BodyStage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CameraHandler.ts', './FreeLookHandler.ts', './TrackedHandler.ts', './BaseStage.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, CameraHandler, FreeLookHandler, TrackedHandler, BaseStage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }, function (module) {
      FreeLookHandler = module.FreeLookHandler;
    }, function (module) {
      TrackedHandler = module.TrackedHandler;
    }, function (module) {
      BaseStage = module.BaseStage;
    }],
    execute: function () {
      cclegacy._RF.push({}, "91293QxSQ5IN51MM9zHKjye", "BodyStage", undefined);

      var BodyStage = exports('BodyStage', /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(BodyStage, _BaseStage);

        function BodyStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._handlers = [new CameraHandler(_this._vcam), new FreeLookHandler(_this._vcam), new TrackedHandler(_this._vcam)];
          return _this;
        }

        var _proto = BodyStage.prototype;

        _proto.onEnable = function onEnable() {
          this._handlers.forEach(function (v) {
            return v.enable = true;
          });
        };

        _proto.onDisable = function onDisable() {
          this._handlers.forEach(function (v) {
            return v.enable = false;
          });
        };

        _proto.updateStage = function updateStage(deltaTime) {
          var body = this._vcam.body;
          var handler = this._handlers[body.type];

          if (handler) {
            handler.updateCamera(deltaTime);
          }
        };

        return BodyStage;
      }(BaseStage));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet_Ball.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolMgr.ts', './Hero.ts', './PoolComp.ts', './SoundMgr.ts', './EnumTypes.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Vec3, CurveRange, Quat, game, PoolMgr, Hero, PoolComp, SoundMgr, SoundType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Vec3 = module.Vec3;
      CurveRange = module.CurveRange;
      Quat = module.Quat;
      game = module.game;
    }, function (module) {
      PoolMgr = module.PoolMgr;
    }, function (module) {
      Hero = module.Hero;
    }, function (module) {
      PoolComp = module.PoolComp;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }, function (module) {
      SoundType = module.SoundType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e6336GcFoBDApdib2B9edGT", "Bullet_Ball", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Bullet_Ball = exports('Bullet_Ball', (_dec = ccclass('Bullet_Ball'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(Bullet_Ball, _PoolComp);

        function Bullet_Ball() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;
          _this.anim = void 0;
          _this.fx = void 0;
          _this.chargeBall = void 0;
          _this.relaseBall = void 0;
          _this.hitEffect1 = void 0;
          _this.hitEffect2 = void 0;
          _this.nowScale = 0;
          _this.maxScale = 3;
          _this.isMove = false;
          _this.dis = 0;
          _this.maxDis = 100;
          _this.way = new Vec3(0, 0, 1);
          _this.bulletSpeed = 100;
          _this.hitTarget = void 0;
          _this.damage = 1;
          _this.borner = void 0;
          return _this;
        }

        var _proto = Bullet_Ball.prototype;

        _proto.firstBorn = function firstBorn() {
          // this.fx = this.node.getChildByName("fx").getComponent(ParticleSystem);
          this.anim = this.node.getComponent(Animation);
          this.chargeBall = this.node.getChildByPath("Charge/Force");
          this.relaseBall = this.node.getChildByName("Relase").children[0];
          this.hitEffect1 = this.node.getChildByName("HitEffect").children[0];
          this.hitEffect2 = this.hitEffect1.children[0];
        };

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.isMove = false; // this.isMove = true;

          this.node.active = true; // this.fx.play();

          this.nowScale = 0;
          var scale = new Vec3(this.nowScale, this.nowScale, this.nowScale);
          this.chargeBall.setScale(scale);
          this.relaseBall.setScale(scale);
          this.hitEffect1.setScale(scale.multiplyScalar(2));
          this.hitEffect2.setScale(scale);
          this.playCharge();
          this.borner = null;
        };

        _proto.recyle = function recyle() {
          this.isMove = false;
          this.node.active = false;

          if (this.fx) {
            var range = new CurveRange();
            range.constant = 0;
            this.fx.rateOverTime = range;
            var rangeDis = new CurveRange();
            rangeDis.constant = 10;
            this.fx.rateOverDistance = rangeDis;
          }

          this.dis = 0;
        };

        _proto.update = function update(dt) {
          if (this.isMove) {
            var pos = this.node.getPosition();
            var speedAxis = dt * this.bulletSpeed;
            pos.add(this.way.clone().multiplyScalar(speedAxis));
            this.node.setPosition(pos);
            this.dis += speedAxis;

            if (this.dis + speedAxis >= this.maxDis) {
              this.hitDo();
            }
          }
        };

        _proto.hitInit = function hitInit(target, dis, damage, speed) {
          if (damage === void 0) {
            damage = 1;
          }

          if (speed === void 0) {
            speed = 100;
          }

          this.hitTarget = target;
          this.damage = damage;
          this.maxDis = dis;
          this.bulletSpeed = speed;
          this.isMove = true;
          this.playShoot();
        };

        _proto.hitDo = function hitDo() {
          var _this2 = this;

          if (this.hitTarget) {
            var comp = this.hitTarget.getComponent(Hero);

            if (comp) {
              comp.hurt(this.damage, this.borner);
            }

            this.playHitEffect();
          }

          this.scheduleOnce(function () {
            PoolMgr.instance.recyleObj(_this2);
          }, 1);
          this.isMove = false;
        };

        _proto.addScale = function addScale(value) {
          this.nowScale += value;
          if (this.nowScale > this.maxScale) this.nowScale = this.maxScale;

          if (this.fx) {
            var rangeSize = new CurveRange();
            rangeSize.constant = this.nowScale;
            this.fx.startSizeX = rangeSize;
            this.fx.startSizeY = rangeSize;
            this.fx.startSizeZ = rangeSize;
          } else {
            // console.log(this.nowScale);
            var scale = new Vec3(this.nowScale, this.nowScale, this.nowScale);
            var newRot = this.chargeBall.getWorldRotation();
            Quat.rotateY(newRot, newRot, Math.PI * 2 * game.deltaTime);
            Quat.rotateX(newRot, newRot, Math.PI * 2 * game.deltaTime);
            this.chargeBall.setWorldRotation(newRot);
            this.chargeBall.setScale(scale);
            this.relaseBall.setScale(scale);
            this.hitEffect1.setScale(scale.multiplyScalar(2));
            this.hitEffect2.setScale(scale);
          }
        } //播放蓄力效果
        ;

        _proto.playCharge = function playCharge() {
          if (this.fx) {
            var range = new CurveRange();
            range.constant = 20;
            this.fx.rateOverTime = range;
            this.nowScale = 1;
            var rangeSize = new CurveRange();
            rangeSize.constant = this.nowScale;
            this.fx.startSizeX = rangeSize;
            this.fx.startSizeY = rangeSize;
            this.fx.startSizeZ = rangeSize;
            var rangeDis = new CurveRange();
            rangeDis.constant = 0;
            this.fx.rateOverDistance = rangeDis;
            this.fx.simulationSpace = 1;
          }

          this.anim.play("Charge");
          if (SoundMgr.instacne) SoundMgr.instacne.playChargeSound();
        } //播放释放效果
        ;

        _proto.playShoot = function playShoot() {
          if (this.fx) {
            this.isMove = true;
            var range = new CurveRange();
            range.constant = 0;
            this.fx.rateOverTime = range;
            var rangeDis = new CurveRange();
            rangeDis.constant = 10;
            this.fx.rateOverDistance = rangeDis;
            this.fx.simulationSpace = 0;
          }

          this.anim.play("Relase");

          if (SoundMgr.instacne) {
            SoundMgr.instacne.stopChargeSound();
            SoundMgr.instacne.playSound(SoundType.LaserShot);
          }
        } //播放击中效果
        ;

        _proto.playHitEffect = function playHitEffect() {
          this.anim.play("Hit");
        };

        return Bullet_Ball;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet_Line.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolMgr.ts', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, PoolMgr, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      PoolMgr = module.PoolMgr;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c9dc5jq3S5EcJo5w0NaI1wQ", "Bullet_Line", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Bullet_Line = exports('Bullet_Line', (_dec = ccclass('Bullet_Line'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(Bullet_Line, _PoolComp);

        function Bullet_Line() {
          return _PoolComp.apply(this, arguments) || this;
        }

        var _proto = Bullet_Line.prototype;

        _proto.firstBorn = function firstBorn() {};

        _proto.clear = function clear() {};

        _proto.init = function init() {
          var _this = this;

          this.node.active = true;
          this.scheduleOnce(function () {
            PoolMgr.instance.recyleObj(_this);
          }, 0.5);
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        _proto.updateLine = function updateLine() {};

        return Bullet_Line;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet_ShotGun.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts', './PoolMgr.ts', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Vec3, Quat, GameData, PoolMgr, PoolObjType, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Vec3 = module.Vec3;
      Quat = module.Quat;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      PoolMgr = module.PoolMgr;
      PoolObjType = module.PoolObjType;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "dbba4e/4b9FYqQaa+EUeq2B", "Bullet_ShotGun", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Bullet_ShotGun = exports('Bullet_ShotGun', (_dec = ccclass('Bullet_ShotGun'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(Bullet_ShotGun, _PoolComp);

        function Bullet_ShotGun() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;
          _this.anim = void 0;
          return _this;
        }

        var _proto = Bullet_ShotGun.prototype;

        _proto.firstBorn = function firstBorn() {
          this.anim = this.node.getComponent(Animation);
        };

        _proto.clear = function clear() {};

        _proto.init = function init() {
          var _this2 = this;

          this.node.active = true;
          this.playShootEffect();
          this.scheduleOnce(function () {
            PoolMgr.instance.recyleObj(_this2);
          }, 3);
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        _proto.updateLine = function updateLine() {} //播放开火效果
        ;

        _proto.playShootEffect = function playShootEffect() {
          this.anim.play("ShootEffect");
        } //播放击中效果
        ;

        _proto.playHitEffect = function playHitEffect(pos) {
          if (Vec3.squaredDistance(GameData.player.node.getWorldPosition(), pos) <= GameData.fireEffect_RangeSqr) {
            var effect = PoolMgr.instance.getObj(PoolObjType.HitEffect);

            if (effect.node) {
              this.node.scene.addChild(effect.node);
              effect.node.setWorldPosition(pos);
              var rot = this.node.getWorldRotation();
              var rotOut = new Quat();
              Quat.rotateAroundLocal(rotOut, rot, effect.node.right, Math.PI / 2);
              effect.node.setWorldRotation(rotOut);
              this.scheduleOnce(function () {
                PoolMgr.instance.recyleObj(effect);
              }, 1);
            }
          }
        };

        return Bullet_ShotGun;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts', './PoolMgr.ts', './Hero.ts', './PoolComp.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Quat, GameData, PoolMgr, PoolObjType, Hero, PoolComp, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      PoolMgr = module.PoolMgr;
      PoolObjType = module.PoolObjType;
    }, function (module) {
      Hero = module.Hero;
    }, function (module) {
      PoolComp = module.PoolComp;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "74f2ekVP91Br55VJLP5IAUD", "Bullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Bullet = exports('Bullet', (_dec = ccclass('Bullet'), _dec(_class = (_class2 = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(Bullet, _PoolComp);

        function Bullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;
          _this.isMove = false;
          _this.dis = 0;
          _this.maxDis = 100;
          _this.way = new Vec3(0, 0, 1);
          _this.bulletSpeed = 100;
          _this.hitTarget = void 0;
          _this.damage = 1;
          _this.borner = void 0;
          return _this;
        }

        var _proto = Bullet.prototype; // @property({ type: Prefab })
        // hitEffect: Prefab = null;
        // @property({ type: Prefab })
        // fireEffect: Prefab = null;

        _proto.firstBorn = function firstBorn() {};

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.isMove = true;
          this.node.active = true;
          this.borner = null;
        };

        _proto.recyle = function recyle() {
          this.isMove = false;
          this.node.active = false;
          this.dis = 0;
        };

        _proto.update = function update(dt) {
          if (this.isMove) {
            var pos = this.node.getPosition();
            var speedAxis = dt * this.bulletSpeed;
            pos.add(this.way.clone().multiplyScalar(speedAxis));
            this.node.setPosition(pos);
            this.dis += speedAxis;

            if (this.dis + speedAxis >= this.maxDis) {
              this.hitDo();
            }
          }
        };

        _proto.hitInit = function hitInit(target, dis, damage, speed) {
          if (damage === void 0) {
            damage = 1;
          }

          if (speed === void 0) {
            speed = 100;
          }

          this.hitTarget = target;
          this.damage = damage;
          this.maxDis = dis;
          this.bulletSpeed = speed;
          this.isMove = true;
        };

        _proto.hitDo = function hitDo() {
          var _this2 = this;

          if (this.hitTarget) {
            var comp = this.hitTarget.getComponent(Hero);

            if (comp) {
              if (comp.hurt(this.damage, this.borner, this.node.getWorldPosition())) {
                this.playHitEffect(this.node.getWorldPosition());
              } else {
                this.playHitFalseEffect(this.node.getWorldPosition());
              }
            } else {
              this.playHitEffect(this.node.getWorldPosition());
            }
          }

          this.scheduleOnce(function () {
            PoolMgr.instance.recyleObj(_this2);
          });
          this.isMove = false;
        } //播放开火效果
        ;

        _proto.playShootEffect = function playShootEffect(pos, targetPos) {
          if (Vec3.squaredDistance(GameData.player.node.getWorldPosition(), pos) <= GameData.fireEffect_RangeSqr) {
            var effect = PoolMgr.instance.getObj(PoolObjType.FireEffect);
            this.node.scene.addChild(effect.node);
            effect.node.setWorldPosition(pos);
            effect.node.lookAt(targetPos);
            var rot = effect.node.getRotation();
            var rotOut = new Quat();
            Quat.rotateAroundLocal(rotOut, rot, new Vec3(0, 0, -1), Tool.randomNumber(-Math.PI, Math.PI));
            effect.node.setRotation(rotOut);
          }
        } //播放击中效果
        ;

        _proto.playHitEffect = function playHitEffect(pos) {
          if (Vec3.squaredDistance(GameData.player.node.getWorldPosition(), pos) <= GameData.fireEffect_RangeSqr) {
            var delta = new Date().getTime() - Bullet.lastHitEffectTime;

            if (delta < 0.032) {
              return;
            }

            Bullet.lastHitEffectTime = new Date().getTime();
            var effect = PoolMgr.instance.getObj(PoolObjType.HitEffect);
            this.node.scene.addChild(effect.node);
            effect.node.setWorldPosition(pos);
            var rot = this.node.getWorldRotation();
            var rotOut = new Quat();
            Quat.rotateAroundLocal(rotOut, rot, this.node.right, Math.PI / 2);
            effect.node.setWorldRotation(rotOut);
          }
        } //播放击中效果
        ;

        _proto.playHitFalseEffect = function playHitFalseEffect(pos) {
          if (Vec3.squaredDistance(GameData.player.node.getWorldPosition(), pos) <= GameData.fireEffect_RangeSqr) {
            var delta = new Date().getTime() - Bullet.lastHitEffectTime;

            if (delta < 0.032) {
              return;
            }

            Bullet.lastHitEffectTime = new Date().getTime();
            var effect = PoolMgr.instance.getObj(PoolObjType.RicochetP);
            this.node.scene.addChild(effect.node);
            effect.node.setWorldPosition(pos);
            var rot = this.node.getWorldRotation();
            var rotOut = new Quat();
            Quat.rotateAroundLocal(rotOut, rot, this.node.right, Math.PI / 2);
            effect.node.setWorldRotation(rotOut);
          }
        };

        return Bullet;
      }(PoolComp), _class2.lastHitEffectTime = 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CameraHandler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Base;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Base = module.Base;
    }],
    execute: function () {
      cclegacy._RF.push({}, "afacb7lEPtHtbhSDdmkKpy2", "CameraHandler", undefined);

      var CameraHandler = exports('CameraHandler', /*#__PURE__*/function (_Base) {
        _inheritsLoose(CameraHandler, _Base);

        function CameraHandler(_vcam) {
          var _this;

          _this = _Base.call(this) || this;
          _this._vcam = _vcam;
          return _this;
        }

        var _proto = CameraHandler.prototype;

        _proto.updateCamera = function updateCamera(deltaTime) {};

        return CameraHandler;
      }(Base));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CasingController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, randomRange, RigidBody, game, Quat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      randomRange = module.randomRange;
      RigidBody = module.RigidBody;
      game = module.game;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "ca719q/Yr9HmaRsA1tO8Z7+", "CasingController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CasingController = exports('CasingController', (_dec = ccclass('CasingController'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CasingController, _Component);

        function CasingController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "minXForce", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxXForce", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minYForce", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxYForce", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minZForce", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxZForce", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minRotation", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxRotation", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "despawnTime", _descriptor9, _assertThisInitialized(_this));

          _this._euler = new Vec3(randomRange(-180, 180), randomRange(-180, 180), 0);
          return _this;
        }

        var _proto = CasingController.prototype;

        _proto.start = function start() {
          var _this2 = this;

          var rigidBody = this.getComponent(RigidBody);

          if (rigidBody) {
            rigidBody.applyLocalTorque(new Vec3(randomRange(this.minRotation, this.maxRotation), randomRange(this.minRotation, this.maxRotation), randomRange(this.minRotation, this.maxRotation)));
            rigidBody.applyLocalForce(new Vec3(randomRange(this.minXForce, this.maxXForce), randomRange(this.minYForce, this.maxYForce), randomRange(this.minZForce, this.maxZForce)));
          }

          this.scheduleOnce(function () {
            _this2.node.destroy();

            game.emit("__playCasingSound");
          }, this.despawnTime);
        };

        _proto.update = function update(dt) {
          this._euler.x += dt * 2500;
          this._euler.y += dt * 2500;
          this.node.rotation = Quat.fromEuler(this.node.rotation, this._euler.x, this._euler.y, this._euler.z);
        };

        return CasingController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "minXForce", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 25;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "maxXForce", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 40;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "minYForce", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "maxYForce", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "minZForce", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -12;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "maxZForce", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 12;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "minRotation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -360;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "maxRotation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 360;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "despawnTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CharactorController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Math.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Node, Quat, SkeletalAnimation, systemEvent, SystemEvent, lerp, KeyCode, Component, EPSILON;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      Quat = module.Quat;
      SkeletalAnimation = module.SkeletalAnimation;
      systemEvent = module.systemEvent;
      SystemEvent = module.SystemEvent;
      lerp = module.lerp;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      EPSILON = module.EPSILON;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "7746a+UgodEsIQnpKZLVysP", "CharactorController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Direction;

      (function (Direction) {
        Direction[Direction["UP"] = 1] = "UP";
        Direction[Direction["DOWN"] = 2] = "DOWN";
        Direction[Direction["LEFT"] = 4] = "LEFT";
        Direction[Direction["RIGHT"] = 8] = "RIGHT";
      })(Direction || (Direction = {}));

      var v3_1 = new Vec3();
      var CharactorController = exports('CharactorController', (_dec = ccclass('CharactorController'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CharactorController, _Component);

        function CharactorController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "cameraNode", _descriptor, _assertThisInitialized(_this));

          _this._animation = null;
          _this._state = "Idle";
          _this._rotation = new Quat();
          _this._movingSpeed = 0;
          _this._rotateSpeed = 0;
          _this._movingSpeedTo = 0;
          _this._rotationSpeedTo = 0;
          _this._direction = 0;
          return _this;
        }

        var _proto = CharactorController.prototype;

        _proto.start = function start() {
          if (this.cameraNode === null) {
            this.cameraNode = this._getRenderScene().cameras[0].node;
          }
        };

        _proto.onEnable = function onEnable() {
          this._animation = this.getComponent(SkeletalAnimation);
          systemEvent.on(SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);
          systemEvent.on(SystemEvent.EventType.KEY_UP, this._onKeyUp, this);
        };

        _proto.onDisable = function onDisable() {
          systemEvent.off(SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);
          systemEvent.off(SystemEvent.EventType.KEY_UP, this._onKeyUp, this);
        };

        _proto.update = function update(dt) {
          this._rotateSpeed = lerp(this._rotateSpeed, this._rotationSpeedTo, 10 * dt);
          this._movingSpeed = lerp(this._movingSpeed, this._movingSpeedTo, 5 * dt);
          this.node.rotation = this.node.rotation.lerp(this._rotation, this._rotateSpeed * dt);
          this.node.position = this.node.position.add(Vec3.multiplyScalar(v3_1, this.node.forward.negative(), this._movingSpeed * dt));
        };

        _proto._onKeyDown = function _onKeyDown(e) {
          var direction = this._direction;

          switch (e.keyCode) {
            case KeyCode.KEY_W:
              direction |= Direction.UP;
              break;

            case KeyCode.KEY_S:
              direction |= Direction.DOWN;
              break;

            case KeyCode.KEY_A:
              direction |= Direction.LEFT;
              break;

            case KeyCode.KEY_D:
              direction |= Direction.RIGHT;
              break;
          }

          this._updateDirection(direction);
        };

        _proto._onKeyUp = function _onKeyUp(e) {
          var direction = this._direction;

          switch (e.keyCode) {
            case KeyCode.KEY_W:
              direction &= ~Direction.UP;
              break;

            case KeyCode.KEY_S:
              direction &= ~Direction.DOWN;
              break;

            case KeyCode.KEY_A:
              direction &= ~Direction.LEFT;
              break;

            case KeyCode.KEY_D:
              direction &= ~Direction.RIGHT;
              break;
          }

          this._updateDirection(direction);
        };

        _proto._updateDirection = function _updateDirection(direction) {
          if (this._direction !== direction) {
            this._direction = direction;
            if (!this.cameraNode) return;
            var forward = this.cameraNode.forward;
            v3_1.set(0, 0, 0);

            if (this._direction & Direction.UP) {
              v3_1.add3f(forward.x, 0, forward.z);
            }

            if (this._direction & Direction.DOWN) {
              v3_1.add3f(-forward.x, 0, -forward.z);
            }

            if (this._direction & Direction.LEFT) {
              v3_1.add3f(forward.z, 0, -forward.x);
            }

            if (this._direction & Direction.RIGHT) {
              v3_1.add3f(-forward.z, 0, forward.x);
            }

            if (this._direction > 0 && v3_1.lengthSqr() > EPSILON) {
              Quat.fromViewUp(this._rotation, v3_1.normalize());
              this._movingSpeedTo = 4;
              this._rotationSpeedTo = 5;

              this._setState("Running");
            }

            if (this._direction === 0) {
              this._movingSpeedTo = this._rotationSpeedTo = 0;
              this._movingSpeed = this._rotateSpeed = 0;

              this._setState("Idle");
            }
          }
        };

        _proto._setState = function _setState(state) {
          if (this._state !== state) {
            this._state = state;
            this._animation && this._animation.crossFade(state);
          }
        };

        return CharactorController;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "cameraNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CinestaionImpulseSource.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationData.ts', './Math.ts', './VCamNoise.ts', './NoiseGenerator.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, cinestation, EPSILON, quarticDamp, VCamNoise, NoiseType, NoiseGenerator, NoiseProfile;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      cinestation = module.cinestation;
    }, function (module) {
      EPSILON = module.EPSILON;
      quarticDamp = module.quarticDamp;
    }, function (module) {
      VCamNoise = module.VCamNoise;
      NoiseType = module.NoiseType;
    }, function (module) {
      NoiseGenerator = module.NoiseGenerator;
      NoiseProfile = module.NoiseProfile;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "a2054HVIkhGUYOxTPABQa7g", "CinestaionImpulseSource", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      function createImpulseNoise() {
        var noise = new VCamNoise();
        noise.type = NoiseType.Perlin;
        noise.profile = NoiseProfile.Shake_6D;
        noise.amplitudeGain = 0.5;
        noise.frequncyGain = 4;
        return noise;
      }

      var CinestaionImpulseSource = exports('CinestaionImpulseSource', (_dec = ccclass('CinestaionImpulseSource'), _dec2 = property({
        type: VCamNoise
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CinestaionImpulseSource, _Component);

        function CinestaionImpulseSource() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._generator = new NoiseGenerator();
          _this._impluseDecay = 0;

          _initializerDefineProperty(_this, "noise", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "decayTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CinestaionImpulseSource.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("setImpulse", this._setImpulse, this);
        };

        _proto._setImpulse = function _setImpulse(v) {
          if (v === void 0) {
            v = 1;
          }

          this._impluseDecay = v;
        };

        _proto.onEnable = function onEnable() {
          cinestation.addImpulseSource(this);
        };

        _proto.onDisable = function onDisable() {
          cinestation.removeImpulseSource(this);
        };

        _proto.generateImpulse = function generateImpulse(deltaTime) {
          if (this._impluseDecay <= EPSILON) {
            return null;
          }

          this._impluseDecay = quarticDamp(this._impluseDecay, 0, this.decayTime, deltaTime);

          var values = this._generator.fractalNoise(this.noise, deltaTime);

          for (var i = 0; i < values.length; i++) {
            values[i] *= this._impluseDecay;
          }

          return values;
        };

        return CinestaionImpulseSource;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "noise", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return createImpulseNoise();
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "decayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CinestationBrain.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationData.ts', './CinestationShareAssets.ts', './Visualization.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _createClass, cclegacy, _decorator, Enum, Vec2, Camera, utils, primitives, clamp01, lerp, cinestation, cinestationShareAssets, Visualization;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Vec2 = module.Vec2;
      Camera = module.Camera;
      utils = module.utils;
      primitives = module.primitives;
      clamp01 = module.clamp01;
      lerp = module.lerp;
    }, function (module) {
      cinestation = module.cinestation;
    }, function (module) {
      cinestationShareAssets = module.cinestationShareAssets;
    }, function (module) {
      Visualization = module.Visualization;
    }],
    execute: function () {
      exports('CinestationBlendStyle', void 0);

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _class4, _class5;

      cclegacy._RF.push({}, "74f8188NbxO264ejP51X1vr", "CinestationBrain", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executionOrder = _decorator.executionOrder,
          executeInEditMode = _decorator.executeInEditMode;
      var CinestationBlendStyle;

      (function (CinestationBlendStyle) {
        CinestationBlendStyle[CinestationBlendStyle["Linear"] = 0] = "Linear";
      })(CinestationBlendStyle || (CinestationBlendStyle = exports('CinestationBlendStyle', {})));

      var CinestationBlendDefinition = exports('CinestationBlendDefinition', (_dec = ccclass('CinestationBlendDefinition'), _dec2 = property({
        tooltip: "混合插值类型。\n目前仅支持线行插值，后续会支持更多",
        type: Enum(CinestationBlendStyle)
      }), _dec3 = property({
        tooltip: "切换时间。数值为0时，为直接切换"
      }), _dec(_class = (_class2 = function CinestationBlendDefinition() {
        _initializerDefineProperty(this, "style", _descriptor, this);

        _initializerDefineProperty(this, "time", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "style", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return CinestationBlendStyle.Linear;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      })), _class2)) || _class));

      var __point = new Vec2();

      var CinestationBrain = exports('CinestationBrain', (_dec4 = ccclass('CinestationBrain'), _dec5 = executionOrder(-1), _dec6 = property(CinestationBlendDefinition), _dec4(_class4 = executeInEditMode(_class4 = _dec5(_class4 = (_class5 = /*#__PURE__*/function (_Visualization) {
        _inheritsLoose(CinestationBrain, _Visualization);

        function CinestationBrain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Visualization.call.apply(_Visualization, [this].concat(args)) || this;
          _this.__selectedCamera = null;
          _this._material = cinestationShareAssets.viewMaterial;
          _this._brainBlend = new CinestationBlendDefinition();
          _this._visibleInRuntime = true;
          return _this;
        }

        var _proto = CinestationBrain.prototype;

        _proto.onLoad = function onLoad() {
          cinestation.mainCamera = this.getComponent(Camera);
          cinestation.lerpTime = this._brainBlend.time;
        };

        _proto._updateMesh = function _updateMesh(mesh) {
          return utils.createMesh(primitives.quad(), mesh);
        };

        _proto.update = function update(dt) {
          _Visualization.prototype.update.call(this, dt);

          var vcam = this._getActiveCamera();

          if (vcam == null) return;
          vcam.updateCamera(dt);
          var blendTime = cinestation.blendTime > -1 ? cinestation.blendTime : this.brainBlend.time;

          if (cinestation.lerpTime < blendTime) {
            cinestation.lerpTime += dt;

            this._lerpToMainCamera(vcam, clamp01(cinestation.lerpTime / this._brainBlend.time));
          } else {
            this._applyToMainCamera(vcam);
          }
        };

        _proto._getActiveCamera = function _getActiveCamera() {
          var vcam = cinestation.vcam = cinestation.getPriorCamera();
          this.visible = CC_EDITOR ? !!this.__selectedCamera : vcam && vcam.debug;

          this._setDebugProperties(CC_EDITOR ? this.__selectedCamera : vcam);

          return vcam;
        };

        _proto._setDebugProperties = function _setDebugProperties(vcam) {
          if (vcam && (CC_EDITOR || vcam.debug)) {
            if (vcam._composerChanged) {
              vcam._composerChanged = false;
              var composer = vcam.aim.composer;

              cinestationShareAssets.__setDebugProperty("deadZoneWidth", composer.deadZoneWidth);

              cinestationShareAssets.__setDebugProperty("deadZoneHeight", composer.deadZoneHeight);

              cinestationShareAssets.__setDebugProperty("softZoneWidth", composer.softZoneWidth);

              cinestationShareAssets.__setDebugProperty("softZoneHeight", composer.softZoneHeight);
            }

            if (vcam.lookAt) {
              cinestationShareAssets.__setDebugProperty("lookatPoint", cinestation.worldToScreen(__point, vcam.lookaheadPosition));
            }
          }
        };

        _proto._lerpToMainCamera = function _lerpToMainCamera(vcam, t) {
          if (CC_EDITOR) return;
          if (!cinestation.mainCamera) return;
          var from = cinestation.mainCamera,
              to = vcam;

          switch (this._brainBlend.style) {
            case CinestationBlendStyle.Linear:
              {
                from.node.worldPosition = from.node.worldPosition.lerp(to.finalPosition, t);
                from.node.worldRotation = from.node.worldRotation.lerp(to.finalRotation, t);
                from.fov = lerp(from.fov, to.lens.fov, t);
                from.near = lerp(from.near, to.lens.near, t);
                from.far = lerp(from.far, to.lens.far, t);
                break;
              }
          }
        };

        _proto._applyToMainCamera = function _applyToMainCamera(vcam) {
          if (CC_EDITOR) return;
          if (!cinestation.mainCamera) return;
          var from = cinestation.mainCamera,
              to = vcam;
          from.node.worldPosition = to.finalPosition;
          from.node.worldRotation = to.finalRotation;
          from.fov = to.lens.fov;
          from.near = to.lens.near;
          from.far = to.lens.far;
        };

        _createClass(CinestationBrain, [{
          key: "brainBlend",
          get: function get() {
            return this._brainBlend;
          }
        }]);

        return CinestationBrain;
      }(Visualization), _applyDecoratedDescriptor(_class5.prototype, "brainBlend", [_dec6], Object.getOwnPropertyDescriptor(_class5.prototype, "brainBlend"), _class5.prototype), _class5)) || _class4) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CinestationData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, _createForOfIteratorHelperLoose, cclegacy, Vec3;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8557eOKYVBCHKKtG3JMOZtJ", "CinestationData", undefined);

      var __ndc = new Vec3();

      var CinestationData = /*#__PURE__*/function () {
        function CinestationData() {
          this._vcam = null;
          this._vcamSolo = null;
          this._virtualCameras = [];
          this._impulseSources = [];
          this.lerpTime = 0;
          this.blendTime = -1;
          this.mainCamera = null;
        }

        var _proto = CinestationData.prototype;

        _proto.activeCamera = function activeCamera(vcam, blendTime) {
          if (blendTime === void 0) {
            blendTime = -1;
          }

          if (this._vcamSolo !== vcam) {
            this._vcamSolo = vcam;
            this.lerpTime = 0;
            this.blendTime = blendTime;
          }
        };

        _proto.addCamera = function addCamera(vcam) {
          var index = this._virtualCameras.indexOf(vcam);

          if (index === -1) {
            this._virtualCameras.push(vcam);
          }
        };

        _proto.removeCamera = function removeCamera(vcam) {
          var index = this._virtualCameras.indexOf(vcam);

          if (index !== -1) {
            this._virtualCameras.splice(index, 1);
          }
        };

        _proto.addImpulseSource = function addImpulseSource(source) {
          var index = this._impulseSources.indexOf(source);

          if (index === -1) {
            this._impulseSources.push(source);
          }
        };

        _proto.removeImpulseSource = function removeImpulseSource(source) {
          var index = this._impulseSources.indexOf(source);

          if (index !== -1) {
            this._impulseSources.splice(index, 1);
          }
        };

        _proto.getPriorCamera = function getPriorCamera() {
          return this._vcamSolo || this._virtualCameras.filter(function (v) {
            return v.enabled;
          }).sort(function (a, b) {
            return b.priority - a.priority;
          })[0];
        };

        _proto.worldToScreen = function worldToScreen(out, wpos) {
          if (this.mainCamera) {
            var camera = CC_EDITOR ? cce.Camera.camera.camera : this.mainCamera.camera;
            var ndc = Vec3.transformMat4(__ndc, wpos, camera.matViewProj);
            var uv = ndc.add(Vec3.ONE).multiplyScalar(0.5);
            out.set(uv.x, uv.y);
          }

          return out;
        };

        _createClass(CinestationData, [{
          key: "vcam",
          get: function get() {
            if (this._vcam === null) {
              this._vcam = this.getPriorCamera();
            }

            return this._vcam;
          },
          set: function set(v) {
            if (this._vcam !== v) {
              this._vcam = v;

              for (var _iterator = _createForOfIteratorHelperLoose(this._virtualCameras), _step; !(_step = _iterator()).done;) {
                var vcam = _step.value;
                if (vcam === v) vcam.onActive();else vcam.onDeActive();
              }
            }
          }
        }, {
          key: "vcams",
          get: function get() {
            return this._virtualCameras;
          }
        }, {
          key: "impulseSources",
          get: function get() {
            return this._impulseSources;
          }
        }]);

        return CinestationData;
      }();

      var cinestation = exports('cinestation', new CinestationData());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CinestationShareAssets.ts", ['cc', './Effect.ts', './Effect3_4.ts'], function (exports) {
  'use strict';

  var cclegacy, Material, game, Game, gfx, EffectAsset, VERSION, Effect, Effect3_4;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Material = module.Material;
      game = module.game;
      Game = module.Game;
      gfx = module.gfx;
      EffectAsset = module.EffectAsset;
      VERSION = module.VERSION;
    }, function (module) {
      Effect = module.Effect;
    }, function (module) {
      Effect3_4 = module.Effect3_4;
    }],
    execute: function () {
      cclegacy._RF.push({}, "53319txRnNOJ7hdwo/uO++u", "CinestationShareAssets", undefined);

      var lineMaterial = new Material();
      lineMaterial._uuid = "cinestation-line-material";
      var viewMaterial = new Material();
      viewMaterial._uuid = "cinestation-view-material";
      game.on(Game.EVENT_GAME_INITED, function () {
        lineMaterial.initialize({
          effectName: "unlit",
          defines: {
            USE_VERTEX_COLOR: true
          },
          states: {
            primitive: gfx.PrimitiveMode.LINE_LIST
          }
        });
        lineMaterial.passes.forEach(function (v) {
          return v.tryCompile();
        });
        var effectAsset = Object.assign(new EffectAsset(), VERSION > "3.4.0" ? Effect3_4 : Effect);
        effectAsset.onLoaded();
        viewMaterial.initialize({
          effectAsset: effectAsset
        });
        viewMaterial.passes.forEach(function (v) {
          return v.tryCompile();
        });
      });

      var CinestationShareAssets = /*#__PURE__*/function () {
        function CinestationShareAssets() {
          this.viewMaterial = viewMaterial;
          this.lineMaterial = lineMaterial;
        }

        var _proto = CinestationShareAssets.prototype;

        _proto.__setDebugProperty = function __setDebugProperty(k, v) {
          this.viewMaterial.setProperty(k, v);
        };

        return CinestationShareAssets;
      }();

      var cinestationShareAssets = exports('cinestationShareAssets', new CinestationShareAssets());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CinestationSmoothPath.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Math.ts', './Visualization.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, _decorator, Vec3, Vec2, Node, Vec4, clamp, Color, utils, Spline, Vec3_closestPointOnSegment, Visualization;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Vec2 = module.Vec2;
      Node = module.Node;
      Vec4 = module.Vec4;
      clamp = module.clamp;
      Color = module.Color;
      utils = module.utils;
    }, function (module) {
      Spline = module.Spline;
      Vec3_closestPointOnSegment = module.Vec3_closestPointOnSegment;
    }, function (module) {
      Visualization = module.Visualization;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "234b1QMPE9PjaikyMraAdcc", "CinestationSmoothPath", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;

      var __v0 = new Vec3();

      var __v1 = new Vec3();

      var __dis = new Vec3();

      var __indices = new Vec2();

      var CinestationSmoothPath = exports('CinestationSmoothPath', (_dec = ccclass('CinestationSmoothPath'), _dec2 = property({
        visible: false
      }), _dec3 = property({
        visible: false
      }), _dec4 = property({
        visible: false
      }), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Visualization) {
        _inheritsLoose(CinestationSmoothPath, _Visualization);

        function CinestationSmoothPath() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Visualization.call.apply(_Visualization, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_looped", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_localControlPoints1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_localControlPoints2", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CinestationSmoothPath.prototype;

        _proto.onLoad = function onLoad() {
          if (CC_EDITOR) {
            this.node.on(Node.EventType.CHILD_ADDED, this._onChildAdded, this);
            this.node.on(Node.EventType.CHILD_REMOVED, this._onNodeChanged, this);

            for (var _iterator = _createForOfIteratorHelperLoose(this.node.children), _step; !(_step = _iterator()).done;) {
              var child = _step.value;

              this._onNodeChanged(child);
            }
          }
        };

        _proto._onChildAdded = function _onChildAdded(node) {
          var children = this.node.children;
          var length = children.length;

          if (length === 2) {
            node.position = new Vec3(children[0].position).add3f(0, 0, 5);
          } else if (length > 2) {
            var p0 = children[length - 3].position;
            var p1 = children[length - 2].position;
            var offset = new Vec3(p1).subtract(p0).normalize().multiplyScalar(5);
            node.position = offset.add(p1);
          }

          this._onNodeChanged(node);
        };

        _proto._onNodeChanged = function _onNodeChanged(node) {
          var _this2 = this;

          node.on(Node.EventType.TRANSFORM_CHANGED, function () {
            _this2._modelChanged = true;
          });
          this._modelChanged = true;
        };

        _proto._updateControlPoints = function _updateControlPoints() {
          var children = this.node.children;
          var numPoints = children.length;

          if (numPoints > 1) {
            var p1 = new Array(numPoints);
            var p2 = new Array(numPoints);
            var K = new Array(numPoints);

            for (var i = 0; i < numPoints; i++) {
              p1[i] = new Vec4();
              p2[i] = new Vec4();
              var p = children[i].position;
              K[i] = new Vec4(p.x, p.y, p.z, 0);
            }

            if (this.looped) {
              Spline.ComputeSmoothControlPointsLooped(K, p1, p2);
            } else {
              Spline.ComputeSmoothControlPoints(K, p1, p2);
            }

            this._localControlPoints1.length = numPoints;
            this._localControlPoints2.length = numPoints;

            for (var _i = 0; _i < numPoints; _i++) {
              this._localControlPoints1[_i] = new Vec3(p1[_i].x, p1[_i].y, p1[_i].z);
              this._localControlPoints2[_i] = new Vec3(p2[_i].x, p2[_i].y, p2[_i].z);
            }
          }
        };

        _proto._getBoundingIndices = function _getBoundingIndices(t, out) {
          t = this._clampProgress(t);
          var children = this.node.children;
          var numWaypoints = children.length;

          if (numWaypoints < 2) {
            out.x = out.y = 0;
          } else {
            out.x = Math.floor(t);

            if (out.x >= numWaypoints) {
              // Only true if looped
              t -= this._maxProgress;
              out.x = 0;
            }

            out.y = out.x + 1;

            if (out.y == numWaypoints) {
              if (this.looped) {
                out.y = 0;
              } else {
                --out.y;
                --out.x;
              }
            }
          }

          return t;
        };

        _proto._clampProgress = function _clampProgress(t) {
          var maxPos = this._maxProgress;

          if (this._looped && maxPos > 0) {
            t = t % maxPos;

            if (t < 0) {
              t += maxPos;
            }

            return t;
          }

          return clamp(t, 0, maxPos);
        };

        _proto.evaluatePosition = function evaluatePosition(out, t) {
          return this.evaluateLocalPosition(out, t).add(this.node.worldPosition);
        };

        _proto.evaluateLocalPosition = function evaluateLocalPosition(out, t) {
          var children = this.node.children;

          if (children.length === 0) {
            return out.set(this.node.position);
          }

          var indices = __indices.set(0, 0);

          t = this._getBoundingIndices(t, indices);

          if (indices.x === indices.y) {
            return out.set(children[indices.x].position);
          } else {
            return Spline.Bezier3(out, t - indices.x, children[indices.x].position, this._localControlPoints1[indices.x], this._localControlPoints2[indices.x], children[indices.y].position);
          }
        };

        _proto.findClosestPoint = function findClosestPoint(p, startSegment, searchRadius, stepPerSegment) {
          var start = this._minProgress,
              end = this._maxProgress;

          if (searchRadius >= 0) {
            var r = Math.floor(Math.min(searchRadius, Math.max(1, (end - start) / 2)));
            start = startSegment - r;
            end = startSegment + r + 1;

            if (!this.looped) {
              start = Math.max(start, this._minProgress);
              end = Math.min(end, this._maxProgress);
            }
          }

          var bestPos = startSegment,
              bestDistance = Infinity;
          var stepSize = 1 / clamp(stepPerSegment, 1, 100);
          var v0 = this.evaluatePosition(__v0, 0);

          for (var f = start + stepSize; f <= end; f += stepSize) {
            var v1 = this.evaluatePosition(__v1, f);
            var t = Vec3_closestPointOnSegment(p, v0, v1);
            var d = Vec3.squaredDistance(p, Vec3.lerp(__dis, v0, v1, t));

            if (d < bestDistance) {
              bestDistance = d;
              bestPos = f - (1 - t) * stepSize;
            }

            v0.set(v1);
          }

          return bestPos;
        };

        _proto._updateMesh = function _updateMesh(mesh) {
          this._updateControlPoints();

          var vertices = [];
          var step = 1 / 10;
          var children = this.node.children;

          for (var t = 0; t < children.length; t += step) {
            vertices.push(this.evaluateLocalPosition(new Vec3(), t));
          }

          var positions = [],
              colors = [];
          var point0s = [],
              point1s = [];
          var greenColor = new Color(0, 1, 0, 1);
          var grayColor = new Color(0.3, 0.3, 0.3, 1);

          function linkPoints(p0, p1, col) {
            if (!(p0 && p1)) return;
            Vec3.toArray(positions, p0, positions.length);
            Vec3.toArray(positions, p1, positions.length);
            colors.push(col.r, col.g, col.b, col.a);
            colors.push(col.r, col.g, col.b, col.a);
          }

          for (var i = 0; i + 1 < vertices.length; i++) {
            var p0 = vertices[i];
            var p1 = vertices[i + 1];
            var dir = new Vec3(p1).subtract(p0).normalize();
            var offset = new Vec3(dir.z, dir.y, -dir.x).multiplyScalar(0.1);

            if (i === 0) {
              point0s.push(new Vec3(p0).subtract(offset));
              point1s.push(new Vec3(p0).add(offset));
            }

            point0s.push(new Vec3(p1).subtract(offset));
            point1s.push(new Vec3(p1).add(offset));
            linkPoints(new Vec3(p0).subtract(offset), new Vec3(p0).add(offset), greenColor);
            linkPoints(p0, p1, grayColor);
          }

          if (this._looped) {
            linkPoints(vertices[vertices.length - 1], vertices[0], grayColor);
          }

          for (var _i2 = 0; _i2 + 1 < point0s.length; _i2++) {
            linkPoints(point0s[_i2], point0s[_i2 + 1], greenColor);
          }

          if (this._looped) {
            linkPoints(point0s[point0s.length - 1], point0s[0], greenColor);
          }

          for (var _i3 = 0; _i3 + 1 < point1s.length; _i3++) {
            linkPoints(point1s[_i3], point1s[_i3 + 1], greenColor);
          }

          if (this._looped) {
            linkPoints(point1s[point1s.length - 1], point1s[0], greenColor);
          }

          return utils.createMesh({
            positions: positions,
            colors: colors
          }, mesh);
        };

        _createClass(CinestationSmoothPath, [{
          key: "looped",
          get: function get() {
            return this._looped;
          },
          set: function set(v) {
            if (this._looped !== v) {
              this._looped = v;
              this._modelChanged = true;
            }
          }
        }, {
          key: "_minProgress",
          get: function get() {
            return 0;
          }
        }, {
          key: "_maxProgress",
          get: function get() {
            var count = this.node.children.length - 1;
            if (count < 1) return 0;
            return this.looped ? count + 1 : count;
          }
        }]);

        return CinestationSmoothPath;
      }(Visualization), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_looped", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_localControlPoints1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_localControlPoints2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "looped", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "looped"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CircleBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, CCFloat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      CCFloat = module.CCFloat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "69119QstPhOxbARLgmGmk+H", "CircleBar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CircleBar = exports('CircleBar', (_dec = ccclass('CircleBar'), _dec2 = property({
        type: Sprite,
        visible: true
      }), _dec3 = property({
        type: CCFloat,
        visible: true,
        displayName: '进度'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CircleBar, _Component);

        function CircleBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bar", _descriptor, _assertThisInitialized(_this));

          _this._value = 0;
          return _this;
        }

        _createClass(CircleBar, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            this._value = v;
            if (this.value > 1) this._value = 1;else if (this.value < 0) this._value = 0;

            if (this.bar) {
              var sprite = this.bar.getComponent(Sprite);
              sprite.type = Sprite.Type.FILLED;
              sprite.fillCenter.x = 0.5;
              sprite.fillCenter.y = 0.5;
              sprite.fillType = Sprite.FillType.RADIAL;
              sprite.fillStart = 0.25;
              sprite.fillRange = -this._value;
            }
          }
        }]);

        return CircleBar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "value", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype)), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/colliderCheck.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, _decorator, CCFloat, RigidBody, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      RigidBody = module.RigidBody;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2;

      cclegacy._RF.push({}, "74ba24tARNICI7dsbmSIo62", "colliderCheck", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var colliderCheck = exports('colliderCheck', (_dec = ccclass('colliderCheck'), _dec2 = property({
        type: CCFloat,
        visible: true,
        displayName: '随便修改一下值触发'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(colliderCheck, _Component);

        function colliderCheck() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._value = 0;
          return _this;
        }

        var _proto = colliderCheck.prototype;

        _proto.start = function start() {
          this.check();
        };

        _proto.check = function check() {
          console.log("mask", this.getComponent(RigidBody).getMask());
          console.log("group", this.getComponent(RigidBody).getGroup());
          console.log("type", this.getComponent(RigidBody).type);
        };

        _createClass(colliderCheck, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            this.check();
            this.destroy();
          }
        }]);

        return colliderCheck;
      }(Component), _applyDecoratedDescriptor(_class2.prototype, "value", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ComposerHandler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationData.ts', './Math.ts', './Predictor.ts', './CameraHandler.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Vec3, Quat, cinestation, Vec4_closeTo, SmoothDamper, Predictor, CameraHandler;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Quat = module.Quat;
    }, function (module) {
      cinestation = module.cinestation;
    }, function (module) {
      Vec4_closeTo = module.Vec4_closeTo;
      SmoothDamper = module.SmoothDamper;
    }, function (module) {
      Predictor = module.Predictor;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed040GtNkhPZ5yR4yNDSf5W", "ComposerHandler", undefined);

      var __ndc = new Vec3();

      var __worldPos = new Vec3();

      var __rotation = new Quat();

      var ComposerHandler = exports('ComposerHandler', /*#__PURE__*/function (_CameraHandler) {
        _inheritsLoose(ComposerHandler, _CameraHandler);

        function ComposerHandler() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _CameraHandler.call.apply(_CameraHandler, [this].concat(args)) || this;
          _this._predictor = new Predictor();
          _this._rotation = new Quat();
          _this._smoothDamper = new SmoothDamper();
          return _this;
        }

        var _proto = ComposerHandler.prototype;

        _proto.updateCamera = function updateCamera(deltaTime) {
          var vcam = this._vcam;

          if (vcam.lookAt) {
            var composer = vcam.aim.composer;
            Vec3.add(__worldPos, vcam.lookAt.position, composer.trackedObjectOffset);

            if (vcam.lookAt.parent) {
              __worldPos.add(vcam.lookAt.parent.worldPosition);
            }

            this._predictor.predictPosition(vcam.lookaheadPosition, __worldPos, composer.lookaheadDamping, composer.lookaheadTime, deltaTime);

            this._clampWithDeadZone(__worldPos, vcam.lookaheadPosition);

            Quat.fromViewUp(this._rotation, Vec3.subtract(__worldPos, vcam.node.worldPosition, __worldPos).normalize());

            this._smoothDamper.Quat_smoothDamp(__rotation, vcam.node.worldRotation, this._rotation, composer.lookatDamping, deltaTime);

            if (!Vec4_closeTo(__rotation, vcam.node.worldRotation)) {
              vcam.node.worldRotation = __rotation;
            }
          }
        };

        _proto._clampWithDeadZone = function _clampWithDeadZone(out, wpos) {
          var composer = this._vcam.aim.composer;
          var mainCamera = cinestation.mainCamera;

          if (mainCamera) {
            var camera = mainCamera.camera;
            var ndc = Vec3.transformMat4(__ndc, wpos, camera.matViewProj);
            var uv = ndc.add(Vec3.ONE).multiplyScalar(0.5);
            var hw = composer.deadZoneWidth / 2;
            var hh = composer.deadZoneHeight / 2;
            out.set(0.5, 0.5, uv.z);

            if (uv.x < 0.5 - hw) {
              out.x += uv.x - 0.5 + hw;
            }

            if (uv.x > 0.5 + hw) {
              out.x += uv.x - 0.5 - hw;
            }

            if (uv.y < 0.5 - hh) {
              out.y += uv.y - 0.5 + hh;
            }

            if (uv.y > 0.5 + hh) {
              out.y += uv.y - 0.5 - hh;
            }

            out.multiplyScalar(2).subtract(Vec3.ONE);
            out.transformMat4(camera.matViewProjInv);
          }

          return out;
        };

        return ComposerHandler;
      }(CameraHandler));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomAdMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JJMgr.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, JJMgr;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      JJMgr = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ec419s347BAg5UnCauMm6Br", "CustomAdMgr", undefined);

      var CustomAdMgr = exports('default', /*#__PURE__*/function () {
        function CustomAdMgr() {
          this.gridIdArr = [];
          this.gridAdArr = [];
          this.totalCount = 1;
          this.createIndex = 0;
          this.showTimes = 0;
          this.currentIndex = 0;
        }

        var _proto = CustomAdMgr.prototype;

        _proto.initCustomAd = function initCustomAd() {
          this.gridIdArr = JJMgr.instance.dataConfig.front_more_gezi_list;

          if (!this.gridIdArr) {
            return;
          }

          this.showTimes = 0;
          this.currentIndex = 0;
          this.createIndex = 0;
          this.gridIdArr = JJMgr.instance.shuffleArr(this.gridIdArr);
          this.totalCount = this.gridIdArr.length;
          this.createCustomAd();
        };

        _proto.getCustomAd = function getCustomAd(id, style, onLoadCB, errorCB) {
          if (onLoadCB === void 0) {
            onLoadCB = null;
          }

          if (errorCB === void 0) {
            errorCB = null;
          }

          var gridAd = window['wx'].createCustomAd({
            adUnitId: id,
            adIntervals: JJMgr.instance.dataConfig.front_more_gezi_time / 1000,
            style: style
          });
          gridAd.onError(function (res) {
            console.log('全屏格子加载失败');
            errorCB && errorCB();
            gridAd.offError();
            gridAd.offLoad();
          });
          gridAd.onLoad(function () {
            console.log('全屏格子加载成功');
            onLoadCB && onLoadCB();
            gridAd.offError();
            gridAd.offLoad();
          });
          return gridAd;
        };

        _proto.createCustomAd = function createCustomAd() {
          var _this = this;

          if (this.createIndex >= this.gridIdArr.length || this.gridAdArr.length >= this.totalCount) {
            return;
          }

          var style = {
            left: 0,
            top: 70
          }; // // if (this.gridAd.length > 0) style = { left: 25, top: 20 + (this.sysInfo.screenWidth - 50) * 0.755, width: this.sysInfo.screenWidth - 50, height: 10 }

          var customAd = this.getCustomAd(this.gridIdArr[this.createIndex], style, function () {
            _this.gridAdArr.push(customAd);

            _this.createIndex++;

            _this.createCustomAd();
          }, function () {
            _this.createIndex++;

            _this.createCustomAd();
          });
        };

        _proto.showGrid = function showGrid() {};

        _proto.hideGrid = function hideGrid() {};

        _proto.getIsError = function getIsError() {
          return this.gridAdArr.length <= 0;
        };

        _proto.getIsShow = function getIsShow() {
          if (this.gridAdArr.length <= 0) return false;
          return this.gridAdArr[this.currentIndex].isShow();
        };

        _createClass(CustomAdMgr, [{
          key: "sysInfo",
          get: function get() {
            return window['wx'].getSystemInfoSync();
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new CustomAdMgr();
            }

            return this._instance;
          }
        }]);

        return CustomAdMgr;
      }());
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import JJMgr from "./JJMgr"
      //
      // export default class CustomAdMgr {
      //     private static _instance: CustomAdMgr
      //     public static get instance() {
      //         if (!this._instance) {
      //             this._instance = new CustomAdMgr()
      //         }
      //         return this._instance
      //     }
      //
      //     gridIdArr: string[] = []
      //     gridAdArr: any[] = []
      //
      //     totalCount: number = 1
      //     createIndex: number = 0
      //
      //     showTimes: number = 0
      //     currentIndex: number = 0
      //
      //     get sysInfo(): any {
      //         return window['wx'].getSystemInfoSync();
      //     }
      //
      //     initCustomAd() {
      //         if (CC_PREVIEW) {
      //             return
      //         }
      //         this.gridIdArr = JJMgr.instance.dataConfig.front_more_gezi_list
      //         if (!this.gridIdArr) {
      //             return
      //         }
      //
      //         this.showTimes = 0
      //         this.currentIndex = 0
      //         this.createIndex = 0
      //         this.gridIdArr = JJMgr.instance.shuffleArr(this.gridIdArr)
      //         this.totalCount = this.gridIdArr.length
      //         this.createCustomAd()
      //     }
      //
      //     getCustomAd(id: string, style: any, onLoadCB: Function = null, errorCB: Function = null) {
      //         let gridAd: any = window['wx'].createCustomAd({ adUnitId: id, adIntervals: JJMgr.instance.dataConfig.front_more_gezi_time / 1000, style: style })
      //         gridAd.onError((res) => {
      //             console.log('全屏格子加载失败')
      //             errorCB && errorCB()
      //             gridAd.offError()
      //             gridAd.offLoad()
      //         })
      //         gridAd.onLoad(() => {
      //             console.log('全屏格子加载成功')
      //             onLoadCB && onLoadCB()
      //             gridAd.offError()
      //             gridAd.offLoad()
      //         })
      //         return gridAd
      //     }
      //
      //     createCustomAd() {
      //         if (this.createIndex >= this.gridIdArr.length || this.gridAdArr.length >= this.totalCount) {
      //             return
      //         }
      //         let style = { left: 0, top: 70 }
      //         // if (this.gridAd.length > 0) style = { left: 25, top: 20 + (this.sysInfo.screenWidth - 50) * 0.755, width: this.sysInfo.screenWidth - 50, height: 10 }
      //         let customAd: any = this.getCustomAd(this.gridIdArr[this.createIndex], style,
      //             () => {
      //                 this.gridAdArr.push(customAd)
      //                 this.createIndex++
      //                 this.createCustomAd()
      //             }, () => {
      //                 this.createIndex++
      //                 this.createCustomAd()
      //             })
      //     }
      //
      //     showGrid() {
      //         if (CC_WECHATGAME && this.getIsError()) {
      //             console.log('重新创建全屏格子')
      //             this.initCustomAd()
      //             return
      //         }
      //         if (CC_WECHATGAME && this.gridAdArr.length > 0) {
      //             this.gridAdArr[this.currentIndex].show()
      //             this.showTimes++
      //         }
      //     }
      //
      //     hideGrid() {
      //         if (CC_WECHATGAME && this.gridAdArr.length > 0) {
      //             this.gridAdArr[this.currentIndex].hide()
      //             if (this.showTimes >= JJMgr.instance.dataConfig.front_more_gezi_refresh_num) {
      //                 this.showTimes = 0
      //                 this.currentIndex++
      //                 if (this.currentIndex >= this.gridAdArr.length) {
      //                     this.currentIndex = 0
      //                 }
      //             }
      //         }
      //     }
      //
      //     getIsError() {
      //         return this.gridAdArr.length <= 0
      //     }
      //
      //     getIsShow() {
      //         if (this.gridAdArr.length <= 0) return false
      //         return this.gridAdArr[this.currentIndex].isShow()
      //     }
      // }

      CustomAdMgr._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomInput.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy, director, Director, systemEvent, SystemEvent, EventMouse, KeyCode;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      Director = module.Director;
      systemEvent = module.systemEvent;
      SystemEvent = module.SystemEvent;
      EventMouse = module.EventMouse;
      KeyCode = module.KeyCode;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06d4dFwUDhKvpqVu9cegQYi", "CustomInput", undefined);

      var CustomInput = /*#__PURE__*/function () {
        function CustomInput() {
          this._initialized = false;
          this._mouseLeft = 0;
          this._mouseRight = 0;
          this._mouseX = 0;
          this._mouseY = 0;
          this._mouseSensitivity = 1;
          this._horizontal = 0;
          this._vertical = 0;
          this._buttons = {};
        }

        var _proto = CustomInput.prototype;

        _proto.getButton = function getButton(k) {
          return this._buttons[k] || 0;
        };

        _proto.initialize = function initialize(lockPointer) {
          if (lockPointer === void 0) {
            lockPointer = false;
          }

          if (this._initialized == false) {
            this._initialized = true;

            if (lockPointer) {
              this._requestPointerLock();
            } else {
              this._registEvents();
            }

            director.on(Director.EVENT_AFTER_UPDATE, this._onAfterUpdate, this);
          }
        };

        _proto._requestPointerLock = function _requestPointerLock() {
          var _director$root,
              _this = this; //https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API


          var device = (_director$root = director.root) == null ? void 0 : _director$root.device;
          var canvas = device.canvas || device.gl && device.gl.canvas;

          if (canvas) {
            canvas.requestPointerLock = canvas.requestPointerLock || canvas.mozRequestPointerLock || canvas.webkitRequestPointerLock;

            canvas.onclick = function () {
              canvas.requestPointerLock();
            };

            var onlockchange = function onlockchange() {
              //@ts-ignore
              if (document.pointerLockElement === canvas || document.mozPointerLockElement === canvas || document.webkitPointerLockElement) {
                _this._registEvents();
              } else {
                _this._unregistEvents();
              }
            }; //@ts-ignore


            document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;
            document.addEventListener("pointerlockchange", onlockchange, false);
            document.addEventListener("mozpointerlockchange", onlockchange, false);
            document.addEventListener("webkitpointerlockchange", onlockchange, false);
          }
        };

        _proto._registEvents = function _registEvents() {
          systemEvent.on(SystemEvent.EventType.MOUSE_DOWN, this._onMouseDown, this);
          systemEvent.on(SystemEvent.EventType.MOUSE_UP, this._onMouseUp, this);
          systemEvent.on(SystemEvent.EventType.MOUSE_MOVE, this._onMouseMove, this);
          systemEvent.on(SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);
          systemEvent.on(SystemEvent.EventType.KEY_UP, this._onKeyUp, this);
        };

        _proto._unregistEvents = function _unregistEvents() {
          systemEvent.off(SystemEvent.EventType.MOUSE_DOWN, this._onMouseDown, this);
          systemEvent.off(SystemEvent.EventType.MOUSE_UP, this._onMouseUp, this);
          systemEvent.off(SystemEvent.EventType.MOUSE_MOVE, this._onMouseMove, this);
          systemEvent.off(SystemEvent.EventType.KEY_DOWN, this._onKeyDown, this);
          systemEvent.off(SystemEvent.EventType.KEY_UP, this._onKeyUp, this);
        };

        _proto._onMouseDown = function _onMouseDown(e) {
          switch (e.getButton()) {
            case EventMouse.BUTTON_LEFT:
              this._mouseLeft = 1;
              break;

            case EventMouse.BUTTON_RIGHT:
              this._mouseRight = 1;
              break;
          }
        };

        _proto._onMouseUp = function _onMouseUp(e) {
          switch (e.getButton()) {
            case EventMouse.BUTTON_LEFT:
              this._mouseLeft = 0;
              break;

            case EventMouse.BUTTON_RIGHT:
              this._mouseRight = 0;
              break;
          }
        };

        _proto._onMouseMove = function _onMouseMove(e) {
          this._mouseX = e.getDeltaX() * this._mouseSensitivity;
          this._mouseY = e.getDeltaY() * this._mouseSensitivity;
        };

        _proto._onKeyDown = function _onKeyDown(e) {
          switch (e.keyCode) {
            case KeyCode.KEY_W:
              this._vertical = 1;
              break;

            case KeyCode.KEY_S:
              this._vertical = -1;
              break;

            case KeyCode.KEY_A:
              this._horizontal = 1;
              break;

            case KeyCode.KEY_D:
              this._horizontal = -1;
              break;

            default:
              this._buttons[e.keyCode] = 1;
          }
        };

        _proto._onKeyUp = function _onKeyUp(e) {
          switch (e.keyCode) {
            case KeyCode.KEY_W:
            case KeyCode.KEY_S:
              this._vertical = 0;
              break;

            case KeyCode.KEY_A:
            case KeyCode.KEY_D:
              this._horizontal = 0;
              break;

            default:
              this._buttons[e.keyCode] = 0;
          }
        };

        _proto._onAfterUpdate = function _onAfterUpdate() {
          this._mouseX = 0;
          this._mouseY = 0;
        };

        _createClass(CustomInput, [{
          key: "mouseLeft",
          get: function get() {
            return this._mouseLeft;
          }
        }, {
          key: "mouseRight",
          get: function get() {
            return this._mouseRight;
          }
        }, {
          key: "mouseX",
          get: function get() {
            return this._mouseX;
          }
        }, {
          key: "mouseY",
          get: function get() {
            return this._mouseY;
          }
        }, {
          key: "horizontal",
          get: function get() {
            return this._horizontal;
          }
        }, {
          key: "vertical",
          get: function get() {
            return this._vertical;
          }
        }]);

        return CustomInput;
      }();

      var customInput = exports('customInput', new CustomInput());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataClass.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec2, Vec3, Quat;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
      Quat = module.Quat;
    }],
    execute: function () {
      cclegacy._RF.push({}, "15a68dExfpBEIKGcN1SbSU5", "DataClass", undefined); //塔UI传输数据格式


      var TowerUIData = exports('TowerUIData', function TowerUIData(isShow, progress, towerId) {
        if (progress === void 0) {
          progress = 0;
        }

        if (towerId === void 0) {
          towerId = 0;
        }

        this.progress = 0;
        this.towerId = 0;
        this.isShow = false;
        this.isShow = isShow;
        this.progress = progress;
        this.towerId = towerId;
      }); //顶部状态栏UI，人物数量数据格式

      var TopState_PeopleCount = exports('TopState_PeopleCount', function TopState_PeopleCount(playerCount, enemyCount) {
        this.playerCount = 0;
        this.enemyCount = 0;
        this.playerCount = playerCount;
        this.enemyCount = enemyCount;
      }); //顶部状态栏UI，分数数据格式

      var TopState_Score = exports('TopState_Score', function TopState_Score(playerScore, enemyScore) {
        this.playerScore = 0;
        this.enemyScore = 0;
        this.playerScore = playerScore;
        this.enemyScore = enemyScore;
      }); //摄像机初始化数据格式

      var Cam_Default_Data = exports('Cam_Default_Data', function Cam_Default_Data(minYAxisHeight, maxYAXISHeight, royXY, camPos, camRot) {
        this.minYAxisHeight = 1;
        this.maxYAXISHeight = 5;
        this.rotXY = new Vec2();
        this.camPos = new Vec3();
        this.camRot = new Vec3();
        this.minYAxisHeight = minYAxisHeight;
        this.maxYAXISHeight = maxYAXISHeight;
        this.rotXY = royXY;
        this.camPos = camPos;
        this.camRot = camRot;
      }); //hero击杀数据格式

      var Hero_Kill_Data = exports('Hero_Kill_Data', function Hero_Kill_Data(camp, deadName, killerName, hurtHeroNames) {
        this.camp = void 0;
        this.deadName = void 0;
        this.killerName = void 0;
        this.hurtHeroNames = [];
        this.camp = camp;
        this.deadName = deadName;
        this.killerName = killerName;
        this.hurtHeroNames = hurtHeroNames;
      }); //坦克存档数据格式

      var TankStorgeData = exports('TankStorgeData', //id

      /**true是有了，false是没有 */
      //解锁状态

      /**0炮塔  1主炮  2装甲   3引擎  4履带   5操作系统*/
      //各部件等级
      //技术解锁状态
      //现在有的涂装
      //现在有的拖尾
      //涂装截止的时间
      //拖尾截止的时间
      function TankStorgeData(id, unlockState) {
        if (unlockState === void 0) {
          unlockState = false;
        }

        this.id = 0;
        this.unlockState = false;
        this.partLevel = [0, 0, 0, 0, 0, 0];
        this.techState = [false, false, false, false, false, false];
        this.nowPaintIndex = -1;
        this.nowTrailIndex = -1;
        this.paintDeadTime = [0, 0, 0, 0, 0, 0];
        this.trailDeadTime = [0, 0, 0, 0, 0, 0];
        this.id = id;
        this.unlockState = unlockState;
      }); //坦克实际数据格式

      var TankGameData = exports('TankGameData', /*#__PURE__*/function () {
        function TankGameData() {
          this.id = 0;
          this.hp = 0;
          this.armor = 0;
          this.attack = 0;
          this.attackInvertal = 0;
          this.maxSpeed = 0;
          this.acceleration = 0;
          this.tankModelRotSpeed = 0;
          this.tankCapRotSpeed = 0;
          this.techActiveIndex = [];
          this.skinId = -1;
        }

        var _proto = TankGameData.prototype; //炮塔旋转速度
        //战斗力

        _proto.power = function power() {
          // 向上取整((坦克生命值 / 2) + (单发攻击力 / 装填时间) + (免伤几率 * 50) + (最高速度 + 加速 + 车体转动速度 + 炮塔转动速度) / 3)
          return Math.ceil(this.hp * 0.5 + this.attack / this.attackInvertal + this.armor * 0.5 + (this.maxSpeed + this.acceleration + this.tankModelRotSpeed + this.tankCapRotSpeed) / 3);
        } //激活的技术序号
        ;

        return TankGameData;
      }()); //坦克解锁条件

      var TankUnlockData = exports('TankUnlockData', function TankUnlockData(type, count) {
        this.type = "money";
        this.count = 1000;
        this.type = type;
        this.count = count;
      }); //坦克出生点信息

      var TankBornData = exports('TankBornData', function TankBornData() {
        this.pos = new Vec3();
        this.rot = new Quat();
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Color, Component, cinestation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      cinestation = module.cinestation;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "dccdfXDXoRFfZ4jGJUQGmTm", "DebugController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugController = exports('DebugController', (_dec = ccclass('DebugController'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugController, _Component);

        function DebugController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._index = 0;

          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DebugController.prototype;

        _proto.onDebug = function onDebug() {
          var vcam = cinestation.vcam;

          if (vcam && this.label) {
            vcam.debug = !vcam.debug;

            this._setLabelColor(vcam.debug);
          }
        };

        _proto.onSwitch = function onSwitch() {
          var vcams = cinestation.vcams;
          var vcam = vcams[++this._index % vcams.length];
          vcam.active = true;

          this._setLabelColor(vcam.debug);
        };

        _proto._setLabelColor = function _setLabelColor(debug) {
          if (this.label) {
            this.label.color = debug ? Color.WHITE : Color.GRAY;
          }
        };

        return DebugController;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/defendTips.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Component, EventType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "df00dDiHEpLhqWvjXa6LQZJ", "defendTips", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var defendTips = exports('defendTips', (_dec = ccclass('defendTips'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(defendTips, _Component);

        function defendTips() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.anim = void 0;
          return _this;
        }

        var _proto = defendTips.prototype;

        _proto.onLoad = function onLoad() {
          this.anim = this.node.getComponent(Animation);
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_Player_Defend, this, this.playAnim);
        };

        _proto.playAnim = function playAnim() {// this.anim.play();
        };

        return defendTips;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DuilianAdMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JJMgr.ts', './JJWxTrap.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, JJMgr, JJWxTrap;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "27e8fERAPBE+IR0ROUK6P70", "DuilianAdMgr", undefined);

      var DuilianAdMgr = exports('default', /*#__PURE__*/function () {
        function DuilianAdMgr() {
          this.gridIdArr = [];
          this.gridAdArr = [];
          this.hadHide = false;
          this.totalCount = 2;
          this.createIndex = 0;
          this.showTimes = 0;
        }

        var _proto = DuilianAdMgr.prototype;

        _proto.initCustomAd = function initCustomAd() {
          if (!JJMgr.instance.dataConfig.front_duilian_gezi_switch || !JJWxTrap.Instance.NewWuchu2) {
            return;
          }

          this.gridIdArr = JJMgr.instance.dataConfig.front_duilian_gezi_list;

          if (!this.gridIdArr) {
            return;
          }

          this.totalCount = 2;
          this.createIndex = 0;
          this.createCustomAd();
        };

        _proto.getCustomAd = function getCustomAd(id, style, onLoadCB, errorCB) {
          var _this = this;

          if (onLoadCB === void 0) {
            onLoadCB = null;
          }

          if (errorCB === void 0) {
            errorCB = null;
          }

          var gridAd = window['wx'].createCustomAd({
            adUnitId: id,
            adIntervals: JJMgr.instance.dataConfig.front_more_gezi_time / 1000,
            style: style
          });
          gridAd.onError(function (res) {
            console.log('对联格子加载失败');
            errorCB && errorCB();
            gridAd.offError();
            gridAd.offLoad();
          });
          gridAd.onLoad(function () {
            if (!_this.hadHide) gridAd.show();
            console.log('对联格子加载成功');
            onLoadCB && onLoadCB();
            gridAd.offError();
            gridAd.offLoad();
          });
          return gridAd;
        };

        _proto.createCustomAd = function createCustomAd() {
          var _this2 = this;

          if (this.createIndex >= this.gridIdArr.length || this.gridAdArr.length >= this.totalCount) {
            return;
          }

          var style = {
            left: this.gridAdArr.length == 0 ? 0 : this.sysInfo.screenWidth - 65,
            top: 120
          }; // // let style = { left: 25, top: 20, width: this.sysInfo.screenWidth - 50, height: 10 }
          // // if (this.gridAd.length > 0) style = { left: 25, top: 20 + (this.sysInfo.screenWidth - 50) * 0.755, width: this.sysInfo.screenWidth - 50, height: 10 }

          var customAd = this.getCustomAd(this.gridIdArr[this.createIndex], style, function () {
            _this2.gridAdArr.push(customAd);

            _this2.createIndex++;

            _this2.createCustomAd();
          }, function () {
            _this2.createIndex++;

            _this2.createCustomAd();
          });
        };

        _proto.showGrid = function showGrid() {
          this.showTimes++;
        };

        _proto.hideGrid = function hideGrid() {
          this.hadHide = true;
        };

        _proto.getIsError = function getIsError() {
          return this.gridAdArr.length <= 0;
        };

        _createClass(DuilianAdMgr, [{
          key: "sysInfo",
          get: function get() {
            return window['wx'].getSystemInfoSync();
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new DuilianAdMgr();
            }

            return this._instance;
          }
        }]);

        return DuilianAdMgr;
      }());
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import JJMgr from "./JJMgr"
      // import JJWxTrap from "./JJWxTrap"
      //
      // export default class DuilianAdMgr {
      //     private static _instance: DuilianAdMgr
      //     public static get instance() {
      //         if (!this._instance) {
      //             this._instance = new DuilianAdMgr()
      //         }
      //         return this._instance
      //     }
      //
      //     gridIdArr: string[] = []
      //     gridAdArr: any[] = []
      //     hadHide: boolean = false
      //
      //     totalCount: number = 2
      //     createIndex: number = 0
      //
      //     get sysInfo(): any {
      //         return window['wx'].getSystemInfoSync();
      //     }
      //
      //     initCustomAd() {
      //         if (CC_PREVIEW || !JJMgr.instance.dataConfig.front_duilian_gezi_switch || !JJWxTrap.Instance.NewWuchu2) {
      //             return
      //         }
      //         this.gridIdArr = JJMgr.instance.dataConfig.front_duilian_gezi_list
      //         if (!this.gridIdArr) {
      //             return
      //         }
      //
      //         this.totalCount = 2
      //         this.createIndex = 0
      //         this.createCustomAd()
      //     }
      //
      //     getCustomAd(id: string, style: any, onLoadCB: Function = null, errorCB: Function = null) {
      //         let gridAd: any = window['wx'].createCustomAd({ adUnitId: id, adIntervals: JJMgr.instance.dataConfig.front_more_gezi_time / 1000, style: style })
      //         gridAd.onError((res) => {
      //             console.log('对联格子加载失败')
      //             errorCB && errorCB()
      //             gridAd.offError()
      //             gridAd.offLoad()
      //         })
      //         gridAd.onLoad(() => {
      //             if (!this.hadHide)
      //                 gridAd.show()
      //             console.log('对联格子加载成功')
      //             onLoadCB && onLoadCB()
      //             gridAd.offError()
      //             gridAd.offLoad()
      //         })
      //         return gridAd
      //     }
      //
      //     createCustomAd() {
      //         if (this.createIndex >= this.gridIdArr.length || this.gridAdArr.length >= this.totalCount) {
      //             return
      //         }
      //         let style = {
      //             left: this.gridAdArr.length == 0 ? 0 : this.sysInfo.screenWidth - 65,
      //             top: 120
      //         }
      //         // let style = { left: 25, top: 20, width: this.sysInfo.screenWidth - 50, height: 10 }
      //         // if (this.gridAd.length > 0) style = { left: 25, top: 20 + (this.sysInfo.screenWidth - 50) * 0.755, width: this.sysInfo.screenWidth - 50, height: 10 }
      //         let customAd: any = this.getCustomAd(this.gridIdArr[this.createIndex], style,
      //             () => {
      //                 this.gridAdArr.push(customAd)
      //                 this.createIndex++
      //                 this.createCustomAd()
      //             }, () => {
      //                 this.createIndex++
      //                 this.createCustomAd()
      //             })
      //     }
      //
      //     showTimes: number = 0
      //     showGrid() {
      //         if (CC_WECHATGAME && this.getIsError() && this.showTimes > 0) {
      //             this.initCustomAd()
      //             console.log('重新创建对联格子')
      //             return
      //         }
      //         if (CC_WECHATGAME && this.gridAdArr.length > 0) {
      //             for (let i = 0; i < this.gridAdArr.length; i++) {
      //                 this.gridAdArr[i].show()
      //             }
      //         }
      //         this.showTimes++
      //     }
      //
      //     hideGrid() {
      //         this.hadHide = true
      //         if (CC_WECHATGAME && this.gridAdArr.length > 0) {
      //             for (let i = 0; i < this.gridAdArr.length; i++) {
      //                 this.gridAdArr[i].hide()
      //             }
      //         }
      //     }
      //
      //     getIsError() {
      //         return this.gridAdArr.length <= 0
      //     }
      //
      // }

      DuilianAdMgr._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Effect.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5c1f5O+jLdMB4MzMWSzAOO8", "Effect", undefined);

      var Effect = exports('Effect', {
        name: "../cinestation/art/Shaders/View",
        techniques: [{
          "name": "transparent",
          "passes": [{
            "blendState": {
              "targets": [{
                "blend": true,
                "blendSrc": 2,
                "blendDst": 4,
                "blendSrcAlpha": 2,
                "blendDstAlpha": 4
              }]
            },
            "program": "../cinestation/art/Shaders/View|view-vs:vert|view-fs:frag",
            "properties": {
              "lookatPoint": {
                "value": [0.5, 0.5],
                "type": 14
              },
              "deadZoneWidth": {
                "value": [0.1],
                "type": 13,
                "handleInfo": ["viewParams", 0, 13]
              },
              "deadZoneHeight": {
                "value": [0.1],
                "type": 13,
                "handleInfo": ["viewParams", 1, 13]
              },
              "softZoneWidth": {
                "value": [0.8],
                "type": 13,
                "handleInfo": ["viewParams", 2, 13]
              },
              "softZoneHeight": {
                "value": [0.8],
                "type": 13,
                "handleInfo": ["viewParams", 3, 13]
              },
              "viewParams": {
                "type": 16,
                "editor": {
                  "visible": false,
                  "deprecated": true
                },
                "value": [0, 0, 0.8, 0.8]
              }
            }
          }]
        }],
        shaders: [{
          "hash": 3069556386,
          "glsl4": {
            "vert": "#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\n precision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nvec4 vert() {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  return vec4(position.xyz * 2., 1.0);\n}\nvoid main() { gl_Position = vert(); }",
            "frag": "\n precision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 1, binding = 0) uniform Constant {\n  vec4 viewParams;\n  vec2 lookatPoint;\n};\nfloat sdf_union(float a, float b) {\n  return min(a, b);\n}\nfloat sdf_intersect(float a, float b) {\n  return max(a, b);\n}\nvec4 frag () {\n  vec2  uv = gl_FragCoord.xy * cc_screenSize.zw;\n  float dx = abs(uv.x - 0.5) * 2.;\n  float dy = abs(uv.y - 0.5) * 2.;\n  float dpx = abs(uv.x - lookatPoint.x) * 2.;\n  float dpy = abs(uv.y - lookatPoint.y) * 2.;\n  float softZoneWidth = max(viewParams.x, viewParams.z);\n  float softZoneHeight = max(viewParams.y, viewParams.w);\n  float deadZone = sdf_intersect(step(viewParams.x, dx), step(viewParams.y, dy));\n  float softZone = sdf_intersect(step(softZoneWidth, dx), step(softZoneHeight, dy));\n  float deadZoneLine0 = sdf_intersect(1. - step(viewParams.x, dx), step(viewParams.x + 7. * cc_screenSize.z, dx));\n  float deadZoneLine1 = sdf_intersect(1. - step(viewParams.y, dy), step(viewParams.y + 7. * cc_screenSize.w, dy));\n  float softZoneLine0 = sdf_intersect(1. - step(softZoneWidth, dx), step(softZoneWidth + 7. * cc_screenSize.z, dx));\n  float softZoneLine1 = sdf_intersect(1. - step(softZoneHeight, dy), step(softZoneHeight + 7. * cc_screenSize.w, dy));\n  vec4  color = vec4(1,0,0,0.15);\n  color = mix(vec4(0,0.7,1,0.15), color, softZone);\n  color = mix(vec4(0), color, deadZone);\n  color = mix(vec4(0,0.7,1,0.3), color, sdf_union(deadZoneLine0, deadZoneLine1));\n  color = mix(vec4(1,0,0,0.3), color, sdf_union(softZoneLine0, softZoneLine1));\n  color = mix(vec4(1,1,0,1), color, sdf_intersect(step(14. * cc_screenSize.z, dpx), step(14. * cc_screenSize.z, dpy * cc_screenSize.y/cc_screenSize.x)));\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
          },
          "glsl3": {
            "vert": "\n precision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nvec4 vert() {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  return vec4(position.xyz * 2., 1.0);\n}\nvoid main() { gl_Position = vert(); }",
            "frag": "\n precision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform Constant {\n  vec4 viewParams;\n  vec2 lookatPoint;\n};\nfloat sdf_union(float a, float b) {\n  return min(a, b);\n}\nfloat sdf_intersect(float a, float b) {\n  return max(a, b);\n}\nvec4 frag () {\n  vec2  uv = gl_FragCoord.xy * cc_screenSize.zw;\n  float dx = abs(uv.x - 0.5) * 2.;\n  float dy = abs(uv.y - 0.5) * 2.;\n  float dpx = abs(uv.x - lookatPoint.x) * 2.;\n  float dpy = abs(uv.y - lookatPoint.y) * 2.;\n  float softZoneWidth = max(viewParams.x, viewParams.z);\n  float softZoneHeight = max(viewParams.y, viewParams.w);\n  float deadZone = sdf_intersect(step(viewParams.x, dx), step(viewParams.y, dy));\n  float softZone = sdf_intersect(step(softZoneWidth, dx), step(softZoneHeight, dy));\n  float deadZoneLine0 = sdf_intersect(1. - step(viewParams.x, dx), step(viewParams.x + 7. * cc_screenSize.z, dx));\n  float deadZoneLine1 = sdf_intersect(1. - step(viewParams.y, dy), step(viewParams.y + 7. * cc_screenSize.w, dy));\n  float softZoneLine0 = sdf_intersect(1. - step(softZoneWidth, dx), step(softZoneWidth + 7. * cc_screenSize.z, dx));\n  float softZoneLine1 = sdf_intersect(1. - step(softZoneHeight, dy), step(softZoneHeight + 7. * cc_screenSize.w, dy));\n  vec4  color = vec4(1,0,0,0.15);\n  color = mix(vec4(0,0.7,1,0.15), color, softZone);\n  color = mix(vec4(0), color, deadZone);\n  color = mix(vec4(0,0.7,1,0.3), color, sdf_union(deadZoneLine0, deadZoneLine1));\n  color = mix(vec4(1,0,0,0.3), color, sdf_union(softZoneLine0, softZoneLine1));\n  color = mix(vec4(1,1,0,1), color, sdf_intersect(step(14. * cc_screenSize.z, dpx), step(14. * cc_screenSize.z, dpy * cc_screenSize.y/cc_screenSize.x)));\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
          },
          "glsl1": {
            "vert": "\n precision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  #else\n  #endif\nvec4 vert() {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  return vec4(position.xyz * 2., 1.0);\n}\nvoid main() { gl_Position = vert(); }",
            "frag": "\n precision highp float;\nuniform mediump vec4 cc_screenSize;\nuniform vec4 viewParams;\n           uniform vec2 lookatPoint;\nfloat sdf_union(float a, float b) {\n  return min(a, b);\n}\nfloat sdf_intersect(float a, float b) {\n  return max(a, b);\n}\nvec4 frag () {\n  vec2  uv = gl_FragCoord.xy * cc_screenSize.zw;\n  float dx = abs(uv.x - 0.5) * 2.;\n  float dy = abs(uv.y - 0.5) * 2.;\n  float dpx = abs(uv.x - lookatPoint.x) * 2.;\n  float dpy = abs(uv.y - lookatPoint.y) * 2.;\n  float softZoneWidth = max(viewParams.x, viewParams.z);\n  float softZoneHeight = max(viewParams.y, viewParams.w);\n  float deadZone = sdf_intersect(step(viewParams.x, dx), step(viewParams.y, dy));\n  float softZone = sdf_intersect(step(softZoneWidth, dx), step(softZoneHeight, dy));\n  float deadZoneLine0 = sdf_intersect(1. - step(viewParams.x, dx), step(viewParams.x + 7. * cc_screenSize.z, dx));\n  float deadZoneLine1 = sdf_intersect(1. - step(viewParams.y, dy), step(viewParams.y + 7. * cc_screenSize.w, dy));\n  float softZoneLine0 = sdf_intersect(1. - step(softZoneWidth, dx), step(softZoneWidth + 7. * cc_screenSize.z, dx));\n  float softZoneLine1 = sdf_intersect(1. - step(softZoneHeight, dy), step(softZoneHeight + 7. * cc_screenSize.w, dy));\n  vec4  color = vec4(1,0,0,0.15);\n  color = mix(vec4(0,0.7,1,0.15), color, softZone);\n  color = mix(vec4(0), color, deadZone);\n  color = mix(vec4(0,0.7,1,0.3), color, sdf_union(deadZoneLine0, deadZoneLine1));\n  color = mix(vec4(1,0,0,0.3), color, sdf_union(softZoneLine0, softZoneLine1));\n  color = mix(vec4(1,1,0,1), color, sdf_intersect(step(14. * cc_screenSize.z, dpx), step(14. * cc_screenSize.z, dpy * cc_screenSize.y/cc_screenSize.x)));\n  return color;\n}\nvoid main() { gl_FragColor = frag(); }"
          },
          "builtins": {
            "globals": {
              "blocks": [{
                "name": "CCGlobal",
                "defines": []
              }, {
                "name": "CCCamera",
                "defines": []
              }],
              "samplerTextures": []
            },
            "locals": {
              "blocks": [{
                "name": "CCMorph",
                "defines": ["CC_USE_MORPH"]
              }, {
                "name": "CCSkinningTexture",
                "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
              }, {
                "name": "CCSkinningAnimation",
                "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
              }, {
                "name": "CCSkinning",
                "defines": ["CC_USE_SKINNING", "!CC_USE_BAKED_ANIMATION"]
              }, {
                "name": "CCLocalBatched",
                "defines": ["!USE_INSTANCING", "USE_BATCHING"]
              }, {
                "name": "CCLocal",
                "defines": ["!USE_INSTANCING", "!USE_BATCHING"]
              }],
              "samplerTextures": [{
                "name": "cc_PositionDisplacements",
                "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_POSITION"]
              }, {
                "name": "cc_NormalDisplacements",
                "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_NORMAL"]
              }, {
                "name": "cc_TangentDisplacements",
                "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_TANGENT"]
              }, {
                "name": "cc_jointTexture",
                "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
              }]
            },
            "statistics": {
              "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 157,
              "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 39
            }
          },
          "defines": [{
            "name": "CC_USE_MORPH",
            "type": "boolean",
            "defines": []
          }, {
            "name": "CC_MORPH_TARGET_COUNT",
            "type": "number",
            "defines": ["CC_USE_MORPH"],
            "range": [2, 8]
          }, {
            "name": "CC_MORPH_PRECOMPUTED",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"]
          }, {
            "name": "CC_MORPH_TARGET_HAS_POSITION",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"]
          }, {
            "name": "CC_MORPH_TARGET_HAS_NORMAL",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"]
          }, {
            "name": "CC_MORPH_TARGET_HAS_TANGENT",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"]
          }, {
            "name": "CC_USE_SKINNING",
            "type": "boolean",
            "defines": []
          }, {
            "name": "CC_USE_BAKED_ANIMATION",
            "type": "boolean",
            "defines": ["CC_USE_SKINNING"]
          }, {
            "name": "USE_INSTANCING",
            "type": "boolean",
            "defines": [],
            "editor": {
              "elevated": true
            }
          }, {
            "name": "USE_BATCHING",
            "type": "boolean",
            "defines": ["!USE_INSTANCING"],
            "editor": {
              "elevated": true
            }
          }, {
            "name": "USE_LIGHTMAP",
            "type": "boolean",
            "defines": ["USE_INSTANCING"]
          }],
          "blocks": [{
            "name": "Constant",
            "members": [{
              "name": "viewParams",
              "type": 16,
              "count": 1
            }, {
              "name": "lookatPoint",
              "type": 14,
              "count": 1
            }],
            "defines": [],
            "stageFlags": 16,
            "binding": 0
          }],
          "samplerTextures": [],
          "attributes": [{
            "name": "a_position",
            "type": 15,
            "count": 1,
            "defines": [],
            "stageFlags": 1,
            "format": 32,
            "location": 0
          }, {
            "name": "a_normal",
            "type": 15,
            "count": 1,
            "defines": [],
            "stageFlags": 1,
            "format": 32,
            "location": 1
          }, {
            "name": "a_texCoord",
            "type": 14,
            "count": 1,
            "defines": [],
            "stageFlags": 1,
            "format": 21,
            "location": 2
          }, {
            "name": "a_tangent",
            "type": 16,
            "count": 1,
            "defines": [],
            "stageFlags": 1,
            "format": 44,
            "location": 3
          }, {
            "name": "a_vertexId",
            "type": 13,
            "count": 1,
            "defines": ["CC_USE_MORPH"],
            "stageFlags": 1,
            "format": 11,
            "location": 6
          }, {
            "name": "a_joints",
            "type": "u32vec4",
            "count": 1,
            "defines": ["CC_USE_SKINNING"],
            "stageFlags": 1,
            "location": 4
          }, {
            "name": "a_weights",
            "type": 16,
            "count": 1,
            "defines": ["CC_USE_SKINNING"],
            "stageFlags": 1,
            "format": 44,
            "location": 5
          }, {
            "name": "a_jointAnimInfo",
            "type": 16,
            "count": 1,
            "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION", "USE_INSTANCING"],
            "stageFlags": 1,
            "format": 44,
            "isInstanced": true,
            "location": 7
          }, {
            "name": "a_matWorld0",
            "type": 16,
            "count": 1,
            "defines": ["USE_INSTANCING"],
            "stageFlags": 1,
            "format": 44,
            "isInstanced": true,
            "location": 8
          }, {
            "name": "a_matWorld1",
            "type": 16,
            "count": 1,
            "defines": ["USE_INSTANCING"],
            "stageFlags": 1,
            "format": 44,
            "isInstanced": true,
            "location": 9
          }, {
            "name": "a_matWorld2",
            "type": 16,
            "count": 1,
            "defines": ["USE_INSTANCING"],
            "stageFlags": 1,
            "format": 44,
            "isInstanced": true,
            "location": 10
          }, {
            "name": "a_lightingMapUVParam",
            "type": 16,
            "count": 1,
            "defines": ["USE_INSTANCING", "USE_LIGHTMAP"],
            "stageFlags": 1,
            "format": 44,
            "isInstanced": true,
            "location": 11
          }, {
            "name": "a_dyn_batch_id",
            "type": 13,
            "count": 1,
            "defines": ["!USE_INSTANCING", "USE_BATCHING"],
            "stageFlags": 1,
            "format": 11,
            "location": 12
          }],
          "varyings": [],
          "name": "../cinestation/art/Shaders/View|view-vs:vert|view-fs:frag"
        }]
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Effect3_4.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "15ff4tgg2VJBLCjpsM+Fdgp", "Effect3_4", undefined);

      var Effect3_4 = exports('Effect3_4', {
        name: "../cinestation/examples/art/Shaders/View",
        techniques: [{
          "name": "transparent",
          "passes": [{
            "blendState": {
              "targets": [{
                "blend": true,
                "blendSrc": 2,
                "blendDst": 4,
                "blendSrcAlpha": 2,
                "blendDstAlpha": 4
              }]
            },
            "program": "../cinestation/examples/art/Shaders/View|view-vs:vert|view-fs:frag",
            "properties": {
              "lookatPoint": {
                "value": [0.5, 0.5],
                "type": 14
              },
              "deadZoneWidth": {
                "value": [0.1],
                "type": 13,
                "handleInfo": ["viewParams", 0, 13]
              },
              "deadZoneHeight": {
                "value": [0.1],
                "type": 13,
                "handleInfo": ["viewParams", 1, 13]
              },
              "softZoneWidth": {
                "value": [0.8],
                "type": 13,
                "handleInfo": ["viewParams", 2, 13]
              },
              "softZoneHeight": {
                "value": [0.8],
                "type": 13,
                "handleInfo": ["viewParams", 3, 13]
              },
              "viewParams": {
                "type": 16,
                "editor": {
                  "visible": false,
                  "deprecated": true
                },
                "value": [0, 0, 0.8, 0.8]
              }
            }
          }]
        }],
        shaders: [{
          "blocks": [{
            "name": "Constant",
            "members": [{
              "name": "viewParams",
              "type": 16,
              "count": 1
            }, {
              "name": "lookatPoint",
              "type": 14,
              "count": 1
            }],
            "defines": [],
            "stageFlags": 16,
            "binding": 0
          }],
          "samplerTextures": [],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": [],
          "attributes": [{
            "name": "a_position",
            "defines": [],
            "format": 32,
            "location": 0
          }, {
            "name": "a_normal",
            "defines": [],
            "format": 32,
            "location": 1
          }, {
            "name": "a_texCoord",
            "defines": [],
            "format": 21,
            "location": 2
          }, {
            "name": "a_tangent",
            "defines": [],
            "format": 44,
            "location": 3
          }, {
            "name": "a_vertexId",
            "defines": ["CC_USE_MORPH"],
            "format": 11,
            "location": 6
          }, {
            "name": "a_joints",
            "defines": ["CC_USE_SKINNING"],
            "location": 4
          }, {
            "name": "a_weights",
            "defines": ["CC_USE_SKINNING"],
            "format": 44,
            "location": 5
          }, {
            "name": "a_jointAnimInfo",
            "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION", "USE_INSTANCING"],
            "format": 44,
            "isInstanced": true,
            "location": 7
          }, {
            "name": "a_matWorld0",
            "defines": ["USE_INSTANCING"],
            "format": 44,
            "isInstanced": true,
            "location": 8
          }, {
            "name": "a_matWorld1",
            "defines": ["USE_INSTANCING"],
            "format": 44,
            "isInstanced": true,
            "location": 9
          }, {
            "name": "a_matWorld2",
            "defines": ["USE_INSTANCING"],
            "format": 44,
            "isInstanced": true,
            "location": 10
          }, {
            "name": "a_lightingMapUVParam",
            "defines": ["USE_INSTANCING", "USE_LIGHTMAP"],
            "format": 44,
            "isInstanced": true,
            "location": 11
          }, {
            "name": "a_dyn_batch_id",
            "defines": ["!USE_INSTANCING", "USE_BATCHING"],
            "format": 11,
            "location": 12
          }],
          "varyings": [],
          "fragColors": [{
            "name": "cc_FragColor",
            "typename": "vec4",
            "type": 16,
            "count": 1,
            "defines": [],
            "stageFlags": 16,
            "location": 0
          }],
          "hash": 3775263886,
          "glsl4": {
            "vert": "#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nvec4 vert() {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  return vec4(position.xyz * 2., 1.0);\n}\nvoid main() { gl_Position = vert(); }",
            "frag": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constant {\n  vec4 viewParams;\n  vec2 lookatPoint;\n};\nfloat sdf_union(float a, float b) {\n  return min(a, b);\n}\nfloat sdf_intersect(float a, float b) {\n  return max(a, b);\n}\nvec4 frag () {\n  vec2  uv = gl_FragCoord.xy * cc_screenSize.zw;\n  float dx = abs(uv.x - 0.5) * 2.;\n  float dy = abs(uv.y - 0.5) * 2.;\n  float dpx = abs(uv.x - lookatPoint.x) * 2.;\n  float dpy = abs(uv.y - lookatPoint.y) * 2.;\n  float softZoneWidth = max(viewParams.x, viewParams.z);\n  float softZoneHeight = max(viewParams.y, viewParams.w);\n  float deadZone = sdf_intersect(step(viewParams.x, dx), step(viewParams.y, dy));\n  float softZone = sdf_intersect(step(softZoneWidth, dx), step(softZoneHeight, dy));\n  float deadZoneLine0 = sdf_intersect(1. - step(viewParams.x, dx), step(viewParams.x + 7. * cc_screenSize.z, dx));\n  float deadZoneLine1 = sdf_intersect(1. - step(viewParams.y, dy), step(viewParams.y + 7. * cc_screenSize.w, dy));\n  float softZoneLine0 = sdf_intersect(1. - step(softZoneWidth, dx), step(softZoneWidth + 7. * cc_screenSize.z, dx));\n  float softZoneLine1 = sdf_intersect(1. - step(softZoneHeight, dy), step(softZoneHeight + 7. * cc_screenSize.w, dy));\n  vec4  color = vec4(1,0,0,0.15);\n  color = mix(vec4(0,0.7,1,0.15), color, softZone);\n  color = mix(vec4(0), color, deadZone);\n  color = mix(vec4(0,0.7,1,0.3), color, sdf_union(deadZoneLine0, deadZoneLine1));\n  color = mix(vec4(1,0,0,0.3), color, sdf_union(softZoneLine0, softZoneLine1));\n  color = mix(vec4(1,1,0,1), color, sdf_intersect(step(10. * cc_screenSize.z, dpx), step(10. * cc_screenSize.z, dpy * cc_screenSize.y/cc_screenSize.x)));\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
          },
          "glsl3": {
            "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nvec4 vert() {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  return vec4(position.xyz * 2., 1.0);\n}\nvoid main() { gl_Position = vert(); }",
            "frag": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constant {\n  vec4 viewParams;\n  vec2 lookatPoint;\n};\nfloat sdf_union(float a, float b) {\n  return min(a, b);\n}\nfloat sdf_intersect(float a, float b) {\n  return max(a, b);\n}\nvec4 frag () {\n  vec2  uv = gl_FragCoord.xy * cc_screenSize.zw;\n  float dx = abs(uv.x - 0.5) * 2.;\n  float dy = abs(uv.y - 0.5) * 2.;\n  float dpx = abs(uv.x - lookatPoint.x) * 2.;\n  float dpy = abs(uv.y - lookatPoint.y) * 2.;\n  float softZoneWidth = max(viewParams.x, viewParams.z);\n  float softZoneHeight = max(viewParams.y, viewParams.w);\n  float deadZone = sdf_intersect(step(viewParams.x, dx), step(viewParams.y, dy));\n  float softZone = sdf_intersect(step(softZoneWidth, dx), step(softZoneHeight, dy));\n  float deadZoneLine0 = sdf_intersect(1. - step(viewParams.x, dx), step(viewParams.x + 7. * cc_screenSize.z, dx));\n  float deadZoneLine1 = sdf_intersect(1. - step(viewParams.y, dy), step(viewParams.y + 7. * cc_screenSize.w, dy));\n  float softZoneLine0 = sdf_intersect(1. - step(softZoneWidth, dx), step(softZoneWidth + 7. * cc_screenSize.z, dx));\n  float softZoneLine1 = sdf_intersect(1. - step(softZoneHeight, dy), step(softZoneHeight + 7. * cc_screenSize.w, dy));\n  vec4  color = vec4(1,0,0,0.15);\n  color = mix(vec4(0,0.7,1,0.15), color, softZone);\n  color = mix(vec4(0), color, deadZone);\n  color = mix(vec4(0,0.7,1,0.3), color, sdf_union(deadZoneLine0, deadZoneLine1));\n  color = mix(vec4(1,0,0,0.3), color, sdf_union(softZoneLine0, softZoneLine1));\n  color = mix(vec4(1,1,0,1), color, sdf_intersect(step(10. * cc_screenSize.z, dpx), step(10. * cc_screenSize.z, dpy * cc_screenSize.y/cc_screenSize.x)));\n  return color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
          },
          "glsl1": {
            "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  #else\n  #endif\nvec4 vert() {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  return vec4(position.xyz * 2., 1.0);\n}\nvoid main() { gl_Position = vert(); }",
            "frag": "\nprecision highp float;\nuniform mediump vec4 cc_screenSize;\nuniform vec4 viewParams;\n           uniform vec2 lookatPoint;\nfloat sdf_union(float a, float b) {\n  return min(a, b);\n}\nfloat sdf_intersect(float a, float b) {\n  return max(a, b);\n}\nvec4 frag () {\n  vec2  uv = gl_FragCoord.xy * cc_screenSize.zw;\n  float dx = abs(uv.x - 0.5) * 2.;\n  float dy = abs(uv.y - 0.5) * 2.;\n  float dpx = abs(uv.x - lookatPoint.x) * 2.;\n  float dpy = abs(uv.y - lookatPoint.y) * 2.;\n  float softZoneWidth = max(viewParams.x, viewParams.z);\n  float softZoneHeight = max(viewParams.y, viewParams.w);\n  float deadZone = sdf_intersect(step(viewParams.x, dx), step(viewParams.y, dy));\n  float softZone = sdf_intersect(step(softZoneWidth, dx), step(softZoneHeight, dy));\n  float deadZoneLine0 = sdf_intersect(1. - step(viewParams.x, dx), step(viewParams.x + 7. * cc_screenSize.z, dx));\n  float deadZoneLine1 = sdf_intersect(1. - step(viewParams.y, dy), step(viewParams.y + 7. * cc_screenSize.w, dy));\n  float softZoneLine0 = sdf_intersect(1. - step(softZoneWidth, dx), step(softZoneWidth + 7. * cc_screenSize.z, dx));\n  float softZoneLine1 = sdf_intersect(1. - step(softZoneHeight, dy), step(softZoneHeight + 7. * cc_screenSize.w, dy));\n  vec4  color = vec4(1,0,0,0.15);\n  color = mix(vec4(0,0.7,1,0.15), color, softZone);\n  color = mix(vec4(0), color, deadZone);\n  color = mix(vec4(0,0.7,1,0.3), color, sdf_union(deadZoneLine0, deadZoneLine1));\n  color = mix(vec4(1,0,0,0.3), color, sdf_union(softZoneLine0, softZoneLine1));\n  color = mix(vec4(1,1,0,1), color, sdf_intersect(step(10. * cc_screenSize.z, dpx), step(10. * cc_screenSize.z, dpy * cc_screenSize.y/cc_screenSize.x)));\n  return color;\n}\nvoid main() { gl_FragColor = frag(); }"
          },
          "builtins": {
            "globals": {
              "blocks": [{
                "name": "CCGlobal",
                "defines": []
              }, {
                "name": "CCCamera",
                "defines": []
              }],
              "samplerTextures": [],
              "buffers": [],
              "images": []
            },
            "locals": {
              "blocks": [{
                "name": "CCMorph",
                "defines": ["CC_USE_MORPH"]
              }, {
                "name": "CCSkinningTexture",
                "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
              }, {
                "name": "CCSkinningAnimation",
                "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
              }, {
                "name": "CCSkinning",
                "defines": ["CC_USE_SKINNING", "!CC_USE_BAKED_ANIMATION"]
              }, {
                "name": "CCLocalBatched",
                "defines": ["!USE_INSTANCING", "USE_BATCHING"]
              }, {
                "name": "CCLocal",
                "defines": ["!USE_INSTANCING", "!USE_BATCHING"]
              }],
              "samplerTextures": [{
                "name": "cc_PositionDisplacements",
                "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_POSITION"]
              }, {
                "name": "cc_NormalDisplacements",
                "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_NORMAL"]
              }, {
                "name": "cc_TangentDisplacements",
                "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_TANGENT"]
              }, {
                "name": "cc_jointTexture",
                "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
              }],
              "buffers": [],
              "images": []
            },
            "statistics": {
              "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 157,
              "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 41
            }
          },
          "defines": [{
            "name": "CC_USE_MORPH",
            "type": "boolean",
            "defines": [],
            "_offset": 0
          }, {
            "name": "CC_MORPH_TARGET_COUNT",
            "type": "number",
            "defines": ["CC_USE_MORPH"],
            "range": [2, 8],
            "_offset": 1
          }, {
            "name": "CC_MORPH_PRECOMPUTED",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"],
            "_offset": 4
          }, {
            "name": "CC_MORPH_TARGET_HAS_POSITION",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"],
            "_offset": 5
          }, {
            "name": "CC_MORPH_TARGET_HAS_NORMAL",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"],
            "_offset": 6
          }, {
            "name": "CC_MORPH_TARGET_HAS_TANGENT",
            "type": "boolean",
            "defines": ["CC_USE_MORPH"],
            "_offset": 7
          }, {
            "name": "CC_USE_SKINNING",
            "type": "boolean",
            "defines": [],
            "_offset": 8
          }, {
            "name": "CC_USE_BAKED_ANIMATION",
            "type": "boolean",
            "defines": ["CC_USE_SKINNING"],
            "_offset": 9
          }, {
            "name": "USE_INSTANCING",
            "type": "boolean",
            "defines": [],
            "editor": {
              "elevated": true
            },
            "_offset": 10
          }, {
            "name": "USE_BATCHING",
            "type": "boolean",
            "defines": ["!USE_INSTANCING"],
            "editor": {
              "elevated": true
            },
            "_offset": 11
          }, {
            "name": "USE_LIGHTMAP",
            "type": "boolean",
            "defines": ["USE_INSTANCING"],
            "_offset": 12
          }],
          "name": "../cinestation/examples/art/Shaders/View|view-vs:vert|view-fs:frag"
        }]
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EndBoxUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JJMgr.ts', './JJWxTrap.ts', './WxPlatform.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ProgressBar, Quat, Tween, tween, Component, JJMgr, JJWxTrap, WxPlatform, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      Quat = module.Quat;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatform = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "df4e76W/H9O8J2rmiwm9eC/", "EndBoxUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EndBoxUI = exports('default', (_dec = ccclass('EndBoxUI'), _dec2 = property(Node), _dec3 = property(ProgressBar), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EndBoxUI, _Component);

        function EndBoxUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "box", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pBar", _descriptor2, _assertThisInitialized(_this));

          _this.ccb = null;
          _this.showCallback = null;
          _this.hadShowBanner = false;
          _this.preTime = 0;
          _this.rateTime = 0;
          _this.minclicknum = void 0;
          _this.maxclicknum = void 0;
          _this.needClick = void 0;
          _this.isforce = false;
          _this.addProgerss = void 0;
          _this.repeatCount = 0;
          _this.clickCount = 0;
          _this.lianxu_num = void 0;
          _this.quat1 = new Quat();
          _this.quat2 = new Quat();
          _this.quat3 = new Quat();
          return _this;
        }

        var _proto = EndBoxUI.prototype;

        _proto.onDisable = function onDisable() {
          var _this2 = this;

          this.unscheduleAllCallbacks();
          WxPlatformBannerAd.Instance.hideBannerFun(true);

          if (this.repeatCount > 0) {
            JJWxTrap.Instance.com.scheduleOnce(function () {
              _this2.showUI(_this2.lianxu_num, _this2.ccb);

              _this2.repeatCount--;
            }, 0.1);
          } else {
            this.ccb && this.ccb();
          }
        };

        _proto.showUI = function showUI(lianxu_num, cb) {
          this.lianxu_num = lianxu_num;
          this.clickCount = 0;

          if (this.repeatCount <= 0) {
            this.repeatCount = lianxu_num;
          }

          this.minclicknum = Number(JJMgr.instance.dataConfig.front_box_clicks[0]);
          this.maxclicknum = Number(JJMgr.instance.dataConfig.front_box_clicks[1]);
          this.needClick = JJMgr.instance.GetRandom(this.minclicknum, this.maxclicknum - JJMgr.instance.dataConfig.front_progress_bar_reduce);
          this.isforce = JJMgr.instance.dataConfig.front_is_box_force;
          this.addProgerss = 1 / this.maxclicknum;
          console.log('this.needClick:', this.needClick);
          console.log('this.addProgerss:', this.addProgerss);
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.ccb = cb;
          this.node.active = true;
          this.hadShowBanner = false;
          this.pBar.progress = 0;
          this.rateTime = 0;
          this.preTime = 0;
          this.schedule(this.DecBar);
        };

        _proto.closeCB = function closeCB() {
          this.node.active = false;
        };

        _proto.clickCB = function clickCB() {
          var _this4 = this;

          this.clickCount++;
          this.pBar.progress += this.addProgerss;

          if (this.pBar.progress > 1) {
            this.pBar.progress = 1;
          }

          this.shakeBox();

          if (!this.hadShowBanner) {
            this.isforce = JJMgr.instance.dataConfig.front_is_box_force;
            var closeTime = JJMgr.instance.dataConfig.front_box_hide_time / 1000;

            var cb = function cb() {
              _this4.hadShowBanner = true;

              _this4.scheduleOnce(function () {
                WxPlatformBannerAd.Instance.hideBannerFun(true);
                {
                  _this4.closeCB();
                }
              }, closeTime);

              WxPlatform.instance.showBanner();
            };

            var diff = this.rateTime - this.preTime;
            var arr = JJMgr.instance.dataConfig.front_box_sulv_qujian; //['0,0.2', '0.2,0.3', '0.3,0.4']

            var randNum = this.getRandomItemInArr(arr);
            var strArr = randNum.split('|');
            var v1 = strArr[0];
            var v2 = strArr[1];

            if (this.pBar.progress * 100 >= JJMgr.instance.dataConfig.front_box_sulv_start && parseFloat(v1) <= diff && diff <= parseFloat(v2)) {
              console.log('宝箱触发频率：', diff);

              if (JJMgr.instance.dataConfig.front_sulv_wuchu_switch) {
                this.isforce = true;
                closeTime = JJMgr.instance.dataConfig.front_fbox_hide_time / 1000;
              }

              cb();
              return;
            }

            this.preTime = this.rateTime;

            if (this.pBar.progress >= this.needClick * this.addProgerss && !this.hadShowBanner) {
              console.log('宝箱触发进度');
              cb();
              return;
            } // // 点击次数


            if (this.clickCount >= JJMgr.instance.dataConfig.front_box_click_count) {
              console.log('点击次数', this.clickCount);
              this.clickCount = 0;
              cb();
            }
          }
        };

        _proto.shakeBox = function shakeBox() {
          Tween.stopAllByTarget(this.box);
          Quat.fromEuler(this.quat1, 0, 0, -10);
          Quat.fromEuler(this.quat2, 0, 0, 10);
          Quat.fromEuler(this.quat3, 0, 0, 0);
          tween(this.box).to(0.1, {
            rotation: this.quat1
          }).to(0.2, {
            rotation: this.quat2
          }).to(0.1, {
            rotation: this.quat3
          }).start();
        };

        _proto.DecBar = function DecBar() {
          this.pBar.progress -= JJMgr.instance.dataConfig.front_progress_bar_return;

          if (this.pBar.progress < 0) {
            this.pBar.progress = 0;
          }
        };

        _proto.update = function update(dt) {
          this.rateTime += dt;
        };

        _proto.GetRandom = function GetRandom(mix, max, isInt) {
          if (isInt === void 0) {
            isInt = true;
          }

          var w = max - mix;
          var r1 = Math.random() * w;
          r1 += mix;
          return isInt ? Math.floor(r1) : r1;
        };

        _proto.getRandomItemInArr = function getRandomItemInArr(arr) {
          return arr[Math.floor(Math.random() * arr.length)];
        };

        return EndBoxUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "box", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EndUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts', './StorageMgr.ts', './Platform.ts', './UMTrack.ts', './Tool.ts', './Bar.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, RichText, Sprite, tween, Vec3, director, Component, GameData, StorageMgr, Platform, UMTrack, Tool, Bar;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      RichText = module.RichText;
      Sprite = module.Sprite;
      tween = module.tween;
      Vec3 = module.Vec3;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      Bar = module.Bar;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bdf8dA/hYVO2LTax0dIjKZA", "EndUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EndUI = exports('EndUI', (_dec = ccclass('EndUI'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EndUI, _Component);

        function EndUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "rankIcons", _descriptor, _assertThisInitialized(_this));

          _this.win = void 0;
          _this.lose = void 0;
          _this.normalBtn = void 0;
          _this.vipBtn = void 0;
          _this.videoVipBtn = void 0;
          _this.gameStat = void 0;
          _this.rankNameLabel = void 0;
          _this.addValueText = void 0;
          _this.bar = void 0;
          _this.barLabel = void 0;
          _this.icon = void 0;
          _this.upgrade = void 0;
          _this.lastLevel = -1;
          _this.lastRankPoint = 0;
          _this.nextRankPoint = 0;
          _this.rankName = ["列兵", "士官", "少尉", "中尉", "上尉", "少校", "中校", "上校", "少将", "中将", "五星上将", "陆军元帅"];
          _this.isStartUpdate = false;
          _this.moneyAdd_normal = 0;
          _this.goldAdd_normal = 0;
          _this.rankAdd = 0;
          _this.moneyAdd_vip = 0;
          _this.goldAdd_vip = 0;
          _this.isVip = false;
          return _this;
        }

        var _proto = EndUI.prototype;

        _proto.onLoad = function onLoad() {
          this.win = this.node.getChildByPath("title/win");
          this.lose = this.node.getChildByPath("title/fail");
          this.normalBtn = this.node.getChildByName("normalBtn");
          this.vipBtn = this.node.getChildByName("vipBtn");
          this.videoVipBtn = this.node.getChildByName("videoVipBtn");
          this.gameStat = this.node.getChildByPath("stat/GameStat");
          this.lose.active = false;
          this.win.active = true;
          this.rankNameLabel = this.node.getChildByPath("stat/Rank/rankName").getComponent(Label);
          this.addValueText = this.node.getChildByPath("stat/Rank/addValue").getComponent(RichText);
          this.bar = this.node.getChildByPath("stat/Rank/Bar").getComponent(Bar);
          this.barLabel = this.bar.node.getChildByName("Label").getComponent(Label);
          this.icon = this.node.getChildByPath("stat/Rank/icon").getComponent(Sprite);
          this.upgrade = this.node.getChildByPath("stat/Rank/upgrade");
        };

        _proto.onEnable = function onEnable() {
          this.win.active = GameData.isWin;
          this.lose.active = !GameData.isWin;
        };

        _proto.update = function update(dt) {
          if (!this.isStartUpdate) return;
          this.lastRankPoint += dt * 100;

          if (this.lastRankPoint > this.nextRankPoint) {
            this.lastRankPoint = this.nextRankPoint;
          }

          var nowRankLevel = 0;
          var maxRankValue = 0;
          var lastValue = Math.floor(this.lastRankPoint);

          for (var i = 0; i < GameData.rankScore.length; i++) {
            if (lastValue < GameData.rankScore[i]) {
              nowRankLevel = i;
              maxRankValue = GameData.rankScore[i];
              break;
            } else {
              lastValue -= GameData.rankScore[i];
            }
          }

          if (this.lastLevel == -1) {
            this.lastLevel == nowRankLevel;
          } else if (this.lastLevel != nowRankLevel) {
            this.activeUpgrade();
          }

          var name = this.rankName[nowRankLevel];
          this.rankIcons[nowRankLevel];
          this.barLabel.string = lastValue.toString() + "/" + maxRankValue.toString();
          this.addValueText.string = "<color=#FFD600>+" + this.rankAdd.toString() + "</color><color=#ffffff>经验</color>";
          this.bar.value = lastValue / maxRankValue;
          this.rankNameLabel.string = name;
          this.icon.spriteFrame = this.rankIcons[nowRankLevel];
        };

        _proto.activeUpgrade = function activeUpgrade() {
          //激活升级
          this.upgrade.active = true;
          this.upgrade.setScale(0, 0, 0);
          tween(this.upgrade).to(0.25, {
            scale: new Vec3(1, 1, 1)
          }, {
            easing: "expoIn"
          }).start();
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.normalBtn, this, this.onNormalBtnClick);
          Tool.d2_AddClickEvent(this.vipBtn, this, this.onVipBtnClick);
          Tool.d2_AddClickEvent(this.videoVipBtn, this, this.onVideoVipClick);
        };

        _proto.btnOff = function btnOff() {
          this.normalBtn.targetOff(this);
          this.vipBtn.targetOff(this);
          this.videoVipBtn.targetOff(this);
        };

        _proto.dataUpdate = function dataUpdate(kill, support, die, damage) {
          var _this2 = this;

          director.preloadScene("Home");
          this.isVipCheck();
          this.scheduleOnce(function () {
            _this2.isStartUpdate = true;
          }, 2.5); //现金计算   击杀 一个 +50，助攻一个 +25，死亡一次 500 -5;

          var moneyAward = 0;

          if (GameData.isWin) {
            moneyAward = 500;
          } else {
            moneyAward = 100;
          }

          moneyAward += kill * 100 + 50 * support; //金钱奖励

          var goldAward = Math.floor((kill + support) / 2); //黄金奖励

          this.moneyAdd_normal = moneyAward;
          this.goldAdd_normal = goldAward; //胜利加100，失败加50

          var awardRank = 0;

          if (GameData.isWin) {
            awardRank = 30;
          } else {
            awardRank = 5;
          }

          awardRank += kill * 3 + support * 2; //段位奖励

          this.lastRankPoint = StorageMgr.instance.storageData.rankPoint;
          StorageMgr.instance.changeRank(awardRank);
          this.nextRankPoint = StorageMgr.instance.storageData.rankPoint;
          this.rankAdd = awardRank; //游戏数据更新

          this.gameStat.getChildByName("killValue").getComponent(Label).string = kill.toString();
          this.gameStat.getChildByName("supportValue").getComponent(Label).string = support.toString();
          this.gameStat.getChildByName("deadValue").getComponent(Label).string = die.toString();
          this.gameStat.getChildByName("damageValue").getComponent(Label).string = damage.toString(); //VIP奖励计算

          var vipMoneyAward = Math.floor(moneyAward * 1.15);
          var vipGoldAward = Math.floor(goldAward * 1.15);
          this.moneyAdd_vip = vipMoneyAward;
          this.goldAdd_vip = vipGoldAward; // vip和非vip的奖励数据显示

          var normalGet = this.node.getChildByPath("stat/normalGet");
          normalGet.getChildByName("moneyValue").getComponent(Label).string = "钞票+" + moneyAward.toString();
          normalGet.getChildByName("goldValue").getComponent(Label).string = "黄金+" + goldAward.toString();
          var vipGet = this.node.getChildByPath("stat/vipGet");
          vipGet.getChildByName("moneyValue").getComponent(Label).string = "钞票+" + vipMoneyAward.toString();
          vipGet.getChildByName("goldValue").getComponent(Label).string = "黄金+" + vipGoldAward.toString(); //按钮更新,判断是否为VIP

          this.updateBtn();
        };

        _proto.updateBtn = function updateBtn() {
          this.vipBtn.active = this.isVip;
          this.normalBtn.active = !this.isVip;
          this.videoVipBtn.active = !this.isVip;
        };

        _proto.onNormalBtnClick = function onNormalBtnClick() {
          this.btnOff();
          Platform.instance.showToast("已获取普通奖励");
          StorageMgr.instance.changeMoney(this.moneyAdd_normal);
          StorageMgr.instance.changeGold(this.goldAdd_normal);
          director.loadScene("Home");
        };

        _proto.onVipBtnClick = function onVipBtnClick() {
          this.btnOff();
          Platform.instance.showToast("已获取VIP奖励");
          StorageMgr.instance.changeMoney(this.moneyAdd_normal + this.moneyAdd_vip);
          StorageMgr.instance.changeGold(this.goldAdd_normal + this.goldAdd_vip);
          director.loadScene("Home");
        };

        _proto.onVideoVipClick = function onVideoVipClick() {
          //开通VIP
          var self = this;
          Platform.instance.showVideo(function () {
            var data = StorageMgr.instance.storageData;
            var time = new Date().getTime();
            var vipTime = data.vipTime;
            var isVip = vipTime > time;
            var addTime = 15 * 60 * 1000;

            if (isVip) {
              vipTime += addTime;
            } else {
              vipTime = time + addTime;
            }

            var m = addTime / 1000 / 60;
            var str = "VIP时长增加";
            {
              str = str + m + "分钟";
            }
            Platform.instance.showToast("VIP时长增加" + str);
            StorageMgr.instance.changeVipTime(vipTime);
            UMTrack.instance.trackEvent("Get_Vip");
            self.isVipCheck();
            self.updateBtn();
          }, function () {
            Platform.instance.showToast("视频解锁失败");
          });
        };

        _proto.isVipCheck = function isVipCheck() {
          var storageData = StorageMgr.instance.storageData;
          this.isVip = storageData.vipTime > new Date().getTime();
        };

        return EndUI;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "rankIcons", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnumTypes.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports({
        CampType: void 0,
        ClickType: void 0,
        EventType: void 0,
        HeroType: void 0,
        ItemType: void 0,
        SoundType: void 0,
        TeachStepType: void 0
      });

      cclegacy._RF.push({}, "dcad6JkXRtI4Z7J2U/tVlIS", "EnumTypes", undefined);

      var EventType;

      (function (EventType) {
        EventType["Platform_Wake_Do"] = "Platform_Wake_Do";
        EventType["Platform_Hide_Do"] = "Platform_Hide_Do";
        EventType["Game_Cam_Switch"] = "Game_Cam_Switch";
        EventType["Player_Ctr_CamRot"] = "Player_Ctr_CamRot";
        EventType["Player_Ctr_Move"] = "Player_Ctr_Move";
        EventType["Player_Ctr_FireOn"] = "Player_Ctr_FireOn";
        EventType["Player_Ctr_FireOff"] = "Player_Ctr_FireOff";
        EventType["Tower_UI_Update"] = "Tower_UI_Update";
        EventType["TopState_Alive_Update"] = "TopState_Alive_Update";
        EventType["TopState_Score_Update"] = "TopState_Score_Update";
        EventType["Game_FireBtn_CD"] = "Game_FireBtn_CD";
        EventType["Game_Over_Event"] = "Game_Over_Event";
        EventType["Game_Player_Select"] = "Game_Player_Select";
        EventType["Game_Player_Dead"] = "Game_Player_Dead";
        EventType["Game_TowerUI_Show"] = "Game_TowerUI_Show";
        EventType["Game_Aim_Shoot"] = "Game_Aim_Shoot";
        EventType["Game_Aim_Hit"] = "Game_Aim_Hit";
        EventType["Game_Aim_SkillHit_On"] = "Game_Aim_SkillHit_On";
        EventType["Game_Aim_SkillHit_Off"] = "Game_Aim_SkillHit_Off";
        EventType["Game_Aim_Lock"] = "Game_Aim_Lock";
        EventType["Game_Aim_UnLock"] = "Game_Aim_UnLock";
        EventType["Game_Player_Atk"] = "Game_Player_Atk";
        EventType["Game_HeroDie_Event"] = "Game_HeroDie_Event";
        EventType["Game_Player_Kill"] = "Game_Player_Kill";
        EventType["Game_Player_Support"] = "Game_Player_Support";
        EventType["Game_Player_Hurt"] = "Game_Player_Hurt";
        EventType["Game_Skill1_Bite"] = "Game_Skill1_Bite";
        EventType["Game_Skill4_Sweep"] = "Game_Skill4_Sweep";
        EventType["Game_Skill5_Hit"] = "Game_Skill5_Hit";
        EventType["Game_Skill2_Aim_Open"] = "Game_Skill2_Aim_Open";
        EventType["Game_Skill2_Aim_Close"] = "Game_Skill2_Aim_Close";
        EventType["Game_Skill2_Aim_Update"] = "Game_Skill2_Aim_Update";
        EventType["Game_Reload_Open"] = "Game_Reload_Open";
        EventType["Game_Reload_Close"] = "Game_Reload_Close";
        EventType["Game_Reload_Update"] = "Game_Reload_Update";
        EventType["Game_Teach_Add"] = "Game_Teach_Add";
        EventType["Game_Teach_Skill"] = "Game_Teach_Skill";
        EventType["Game_Teach_Item"] = "Game_Teach_Item";
        EventType["Game_Aim_Target_Update"] = "Game_Aim_Target_Update";
        EventType["Data_Oil_Update"] = "Data_Oil_Update";
        EventType["Data_Money_Update"] = "Data_Money_Update";
        EventType["Data_Gold_Update"] = "Data_Gold_Update";
        EventType["Data_VIP_Update"] = "Data_VIP_Update";
        EventType["Home_VIP_Open"] = "Home_VIP_Open";
        EventType["Home_Sign_Open"] = "Home_Sign_Open";
        EventType["Home_Shop_Open"] = "Home_Shop_Open";
        EventType["Home_Paint_Open"] = "Home_Paint_Open";
        EventType["Home_Upgrade_Open"] = "Home_Upgrade_Open";
        EventType["Home_TankShop_Open"] = "Home_TankShop_Open";
        EventType["Home_Main_Open"] = "Home_Main_Open";
        EventType["Home_GetItem_Effect"] = "Home_GetItem_Effect";
        EventType["Home_Tank_Choose"] = "Home_Tank_Choose";
        EventType["Home_Tank_ChooseLeft"] = "Home_Tank_ChooseLeft";
        EventType["Home_Tank_ChooseRight"] = "Home_Tank_ChooseRight";
        EventType["Home_Tank_PaintChange"] = "Home_Tank_PaintChange";
        EventType["Home_StartGame_Event"] = "Home_StartGame_Event";
        EventType["Game_UseItem_Event"] = "Game_UseItem_Event";
        EventType["Game_Player_Hit"] = "Game_Player_Hit";
        EventType["Game_Player_Miss"] = "Game_Player_Miss";
        EventType["Game_Player_Defend"] = "Game_Player_Defend";
        EventType["Home_TankColor_Change"] = "Home_TankColor_Change";
        EventType["Game_Aim_TankPose"] = "Game_Aim_TankPose";
        EventType["Game_Tank_Die"] = "Game_Tank_Die";
        EventType["Home_VipTips_Update"] = "Home_VipTips_Update";
        EventType["Home_SignTips_Update"] = "Home_SignTips_Update";
        EventType["Home_ShopTips_Update"] = "Home_ShopTips_Update";
        EventType["Home_PaintTips_Update"] = "Home_PaintTips_Update";
        EventType["Home_UpgradeTips_Update"] = "Home_UpgradeTips_Update";
        EventType["Home_TankTips_Update"] = "Home_TankTips_Update";
        EventType["Game_Single_StartTime"] = "Game_Single_StartTime";
      })(EventType || (EventType = exports('EventType', {})));

      var SoundType;
      /**3DUI按钮用 */

      (function (SoundType) {
        SoundType["BattlegroundBGM"] = "BattlegroundBGM";
        SoundType["FireLoaded"] = "FireLoaded";
        SoundType["GameFinish"] = "GameFinish";
        SoundType["KillFeedback"] = "KillFeedback";
        SoundType["MenuBGM"] = "MenuBGM";
        SoundType["PlayerGetHited"] = "PlayerGetHited";
        SoundType["SelectBtn"] = "SelectBtn";
        SoundType["Tank1Shot"] = "Tank1Shot";
        SoundType["Tank2Shot"] = "Tank2Shot";
        SoundType["Tank3Shot"] = "Tank3Shot";
        SoundType["Tank4Shot"] = "Tank4Shot";
        SoundType["Tank5Shot"] = "Tank5Shot";
        SoundType["TankDestory"] = "TankDestory";
        SoundType["TankIdle"] = "TankIdle";
        SoundType["TankMove"] = "TankMove";
        SoundType["V_Kill1"] = "V_Kill1";
        SoundType["V_Kill2"] = "V_Kill2";
        SoundType["V_PlayerDie1"] = "V_PlayerDie1";
        SoundType["V_PlayerDie2"] = "V_PlayerDie2";
        SoundType["V_Ricochet1"] = "V_Ricochet1";
        SoundType["V_Ricochet2"] = "V_Ricochet2";
        SoundType["V_Damage1"] = "V_Damage1";
        SoundType["V_Damage2"] = "V_Damage2";
        SoundType["V_Damage3"] = "V_Damage3";
        SoundType["Beep"] = "Beep";
      })(SoundType || (SoundType = exports('SoundType', {})));

      var ClickType;

      (function (ClickType) {})(ClickType || (ClickType = exports('ClickType', {})));

      var CampType;

      (function (CampType) {
        CampType[CampType["Player"] = 0] = "Player";
        CampType[CampType["Enemy"] = 1] = "Enemy";
      })(CampType || (CampType = exports('CampType', {})));

      var HeroType;

      (function (HeroType) {
        HeroType[HeroType["Tank_1"] = 0] = "Tank_1";
        HeroType[HeroType["Tank_2"] = 1] = "Tank_2";
        HeroType[HeroType["Tank_3"] = 2] = "Tank_3";
        HeroType[HeroType["Tank_4"] = 3] = "Tank_4";
        HeroType[HeroType["Tank_5"] = 4] = "Tank_5";
      })(HeroType || (HeroType = exports('HeroType', {})));

      var ItemType;

      (function (ItemType) {
        ItemType[ItemType["Sheild"] = 0] = "Sheild";
        ItemType[ItemType["SpeedUp"] = 1] = "SpeedUp";
        ItemType[ItemType["AtkUp"] = 2] = "AtkUp";
        ItemType[ItemType["Heal"] = 3] = "Heal";
      })(ItemType || (ItemType = exports('ItemType', {})));

      var TeachStepType;

      (function (TeachStepType) {
        TeachStepType[TeachStepType["start"] = 0] = "start";
        TeachStepType[TeachStepType["moveTeach"] = 1] = "moveTeach";
        TeachStepType[TeachStepType["moveTeachSuccess"] = 2] = "moveTeachSuccess";
        TeachStepType[TeachStepType["fireTeach"] = 3] = "fireTeach";
        TeachStepType[TeachStepType["fireTeachSuccess"] = 4] = "fireTeachSuccess";
        TeachStepType[TeachStepType["aimTeach1"] = 5] = "aimTeach1";
        TeachStepType[TeachStepType["aimTeach2"] = 6] = "aimTeach2";
        TeachStepType[TeachStepType["aimTeachSuccess"] = 7] = "aimTeachSuccess";
        TeachStepType[TeachStepType["end"] = 8] = "end";
      })(TeachStepType || (TeachStepType = exports('TeachStepType', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventMgr.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, EventTarget;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EventTarget = module.EventTarget;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "919d7XItUtH1rG9pGE64OF6", "EventMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var eventTarget = new EventTarget();
      var EventMgr = exports('EventMgr', (_dec = ccclass('EventMgr'), _dec(_class = /*#__PURE__*/function () {
        function EventMgr() {}

        EventMgr.event = function event(type, arg0, arg1, arg2, arg3, arg4) {
          eventTarget.emit(type, arg0, arg1, arg2, arg3, arg4);
        };

        EventMgr.on = function on(type, target, callback) {
          eventTarget.on(type, callback, target);
        };

        EventMgr.off = function off(type, target, callback) {
          eventTarget.off(type, callback, target);
        };

        EventMgr.clearTarget = function clearTarget(target) {
          eventTarget.removeAll(target);
        };

        return EventMgr;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Events.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "47855R5MFhELIl5drKNn+/P", "Events", undefined);

      var CinestationEvent = exports('CinestationEvent', {
        EDITOR_CHANGED: "cinestation-editor-changed",
        COMPOSER_CHANGED: "cinestation-composer-changed",
        LENS_CHANGED: "cinestation-lens-changed"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExportCrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, game, UITransform, view, v3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      UITransform = module.UITransform;
      view = module.view;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7de57dSE4tEJaZ954yYkzmB", "ExportCrl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ExportCrl = exports('default', (_dec = ccclass('ExportCrl'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ExportCrl, _Component);

        function ExportCrl() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = ExportCrl.prototype;

        _proto.onLoad = function onLoad() {
          game.addPersistRootNode(this.node);
          this.node.getComponent(UITransform).setContentSize(view.getVisibleSize());
          this.node.setPosition(v3(this.node.getComponent(UITransform).contentSize.width / 2, this.node.getComponent(UITransform).contentSize.height / 2, 0));
        };

        _proto.start = function start() {// this.schedule(this.loopTime, 1 / 10);
        };

        _proto.loopTime = function loopTime() {
          this.node.setSiblingIndex(999);
        };

        _proto.showJJUI = function showJJUI(dir, param, callback) {
          for (var i = 0; i < this.node.children.length; i++) {
            this.node.children[i].setSiblingIndex(0);
          }

          this.node.getChildByName(dir).getComponent(dir).showUI(callback, param);

          for (var _i = 0; _i < this.node.children.length; _i++) {
            if (this.node.children[_i].name == dir) {
              this.node.children[_i].setSiblingIndex(this.node.children.length);

              break;
            }
          }
        };

        _proto.closeJJUI = function closeJJUI(dir) {
          this.node.getChildByName(dir).active = false;
        };

        _proto.closeAllJJUI = function closeAllJJUI() {
          for (var i = 0; i < this.node.children.length; i++) {
            this.node.children[i].active = false;
            this.node.children[i].getComponent(this.node.children[i].name).unscheduleAllCallbacks();
          }
        } // // update (dt) {}
        ;

        return ExportCrl;
      }(Component)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import { SceneDir } from "./JJMgr";
      //
      // const { ccclass, property } = cc._decorator;
      //
      // @ccclass
      // export default class ExportCrl extends cc.Component {
      //
      //     onLoad() {
      //         this.node.zIndex = 999
      //         cc.game.addPersistRootNode(this.node)
      //         this.node.setContentSize(cc.view.getVisibleSize())
      //         this.node.setPosition(cc.v2(this.node.getContentSize().width / 2, this.node.getContentSize().height / 2))
      //     }
      //
      //     start() {
      //
      //     }
      //
      //     showJJUI(dir: SceneDir, param?: any, callback?: Function) {
      //         for (let i = 0; i < this.node.childrenCount; i++) {
      //             this.node.children[i].zIndex = 0
      //         }
      //         this.node.getChildByName(dir).getComponent(dir).showUI(callback, param)
      //         for (let i = 0; i < this.node.childrenCount; i++) {
      //             if (this.node.children[i].name == dir) {
      //                 this.node.children[i].zIndex = 100
      //                 break
      //             }
      //         }
      //     }
      //
      //     closeJJUI(dir: SceneDir) {
      //         this.node.getChildByName(dir).active = false
      //     }
      //
      //     closeAllJJUI() {
      //         for (let i = 0; i < this.node.childrenCount; i++) {
      //             this.node.children[i].active = false
      //             this.node.children[i].getComponent(this.node.children[i].name).unscheduleAllCallbacks()
      //         }
      //     }
      //
      //     // update (dt) {}
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Face.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolMgr.ts', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, PoolMgr, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      PoolMgr = module.PoolMgr;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "96331c1oqZOBKyYyBmpm2Te", "Face", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Face = exports('Face', (_dec = ccclass('Face'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(Face, _PoolComp);

        function Face() {
          return _PoolComp.apply(this, arguments) || this;
        }

        var _proto = Face.prototype;

        _proto.firstBorn = function firstBorn() {};

        _proto.clear = function clear() {};

        _proto.init = function init() {
          var _this = this;

          this.node.active = true;
          this.scheduleOnce(function () {
            PoolMgr.instance.recyleObj(_this);
          }, 4);
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        return Face;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FinishCustomAdMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AppConfig.ts', './JJMgr.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, AppConfig, JJMgr;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      AppConfig = module.default;
    }, function (module) {
      JJMgr = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7436bmanHxL7pIkGCGrdE3+", "FinishCustomAdMgr", undefined);

      var FinishCustomAdMgr = exports('default', /*#__PURE__*/function () {
        function FinishCustomAdMgr() {
          this.gridIdArr = [];
          this.gridAdArr = [];
          this.totalCount = 1;
          this.createIndex = 0;
        }

        var _proto = FinishCustomAdMgr.prototype;

        _proto.initCustomAd = function initCustomAd() {
          this.gridIdArr = AppConfig.wechat.finishCustomAd; // // if (!this.gridIdArr) {
          // //     return
          // // }

          this.createIndex = 0;
          this.createCustomAd();
        };

        _proto.getCustomAd = function getCustomAd(id, style, onLoadCB, errorCB) {
          if (onLoadCB === void 0) {
            onLoadCB = null;
          }

          if (errorCB === void 0) {
            errorCB = null;
          }

          var gridAd = window['wx'].createCustomAd({
            adUnitId: id,
            adIntervals: JJMgr.instance.dataConfig.front_more_gezi_time / 1000,
            style: style
          });
          gridAd.onError(function (res) {
            console.log('结算格子加载失败');
            errorCB && errorCB();
            gridAd.offError();
            gridAd.offLoad();
          });
          gridAd.onLoad(function () {
            console.log('结算格子加载成功');
            onLoadCB && onLoadCB();
            gridAd.offError();
            gridAd.offLoad();
          });
          return gridAd;
        };

        _proto.createCustomAd = function createCustomAd() {
          var _this = this;

          if (this.createIndex >= this.gridIdArr.length || this.gridAdArr.length >= this.totalCount) {
            return;
          }

          var style = {
            left: 0,
            top: this.sysInfo.screenHeight / 2 - 220,
            width: this.sysInfo.screenWidth
          }; // // let style = { left: 25, top: 20, width: this.sysInfo.screenWidth - 50, height: 10 }
          // // if (this.gridAd.length > 0) style = { left: 25, top: 20 + (this.sysInfo.screenWidth - 50) * 0.755, width: this.sysInfo.screenWidth - 50, height: 10 }

          var customAd = this.getCustomAd(this.gridIdArr[this.createIndex], style, function () {
            _this.gridAdArr.push(customAd);

            _this.createIndex++;

            _this.createCustomAd();
          }, function () {
            _this.createIndex++;

            _this.createCustomAd();
          });
        };

        _proto.showGrid = function showGrid() {};

        _proto.hideGrid = function hideGrid() {};

        _proto.getIsError = function getIsError() {
          return this.gridAdArr.length <= 0;
        };

        _createClass(FinishCustomAdMgr, [{
          key: "sysInfo",
          get: function get() {
            return window['wx'].getSystemInfoSync();
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FinishCustomAdMgr();
            }

            return this._instance;
          }
        }]);

        return FinishCustomAdMgr;
      }());
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import AppConfig from "./AppConfig"
      // import JJMgr from "./JJMgr"
      // import JJWxTrap from "./JJWxTrap"
      //
      // export default class FinishCustomAdMgr {
      //     private static _instance: FinishCustomAdMgr
      //     public static get instance() {
      //         if (!this._instance) {
      //             this._instance = new FinishCustomAdMgr()
      //         }
      //         return this._instance
      //     }
      //
      //     gridIdArr: string[] = []
      //     gridAdArr: any[] = []
      //
      //     totalCount: number = 1
      //     createIndex: number = 0
      //
      //     get sysInfo(): any {
      //         return window['wx'].getSystemInfoSync();
      //     }
      //
      //     initCustomAd() {
      //         if (CC_PREVIEW) {
      //             return
      //         }
      //         // this.gridIdArr = JJMgr.instance.dataConfig.front_jiesuanye_gezi_list
      //         this.gridIdArr = AppConfig.wechat.finishCustomAd;
      //         // if (!this.gridIdArr) {
      //         //     return
      //         // }
      //
      //         this.createIndex = 0
      //         this.createCustomAd()
      //     }
      //
      //     getCustomAd(id: string, style: any, onLoadCB: Function = null, errorCB: Function = null) {
      //         let gridAd: any = window['wx'].createCustomAd({ adUnitId: id, adIntervals: JJMgr.instance.dataConfig.front_more_gezi_time / 1000, style: style })
      //         gridAd.onError((res) => {
      //             console.log('结算格子加载失败')
      //             errorCB && errorCB()
      //             gridAd.offError()
      //             gridAd.offLoad()
      //         })
      //         gridAd.onLoad(() => {
      //             console.log('结算格子加载成功')
      //             onLoadCB && onLoadCB()
      //             gridAd.offError()
      //             gridAd.offLoad()
      //         })
      //         return gridAd
      //     }
      //
      //     createCustomAd() {
      //         if (this.createIndex >= this.gridIdArr.length || this.gridAdArr.length >= this.totalCount) {
      //             return
      //         }
      //         let style = { left: 0, top: this.sysInfo.screenHeight / 2 - 220, width: this.sysInfo.screenWidth }
      //         // let style = { left: 25, top: 20, width: this.sysInfo.screenWidth - 50, height: 10 }
      //         // if (this.gridAd.length > 0) style = { left: 25, top: 20 + (this.sysInfo.screenWidth - 50) * 0.755, width: this.sysInfo.screenWidth - 50, height: 10 }
      //         let customAd: any = this.getCustomAd(this.gridIdArr[this.createIndex], style,
      //             () => {
      //                 this.gridAdArr.push(customAd)
      //                 this.createIndex++
      //                 this.createCustomAd()
      //             }, () => {
      //                 this.createIndex++
      //                 this.createCustomAd()
      //             })
      //     }
      //
      //     showGrid() {
      //         if (CC_WECHATGAME && this.getIsError()) {
      //             this.initCustomAd()
      //             console.log('重新创建结算页格子')
      //             return
      //         }
      //         if (CC_WECHATGAME && this.gridAdArr.length > 0) {
      //             this.gridAdArr[0].show()
      //         }
      //     }
      //
      //     hideGrid() {
      //         if (CC_WECHATGAME && this.gridAdArr.length > 0) {
      //             this.gridAdArr[0].hide()
      //         }
      //     }
      //
      //     getIsError() {
      //         return this.gridAdArr.length <= 0
      //     }
      //
      // }

      FinishCustomAdMgr._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FinishGameUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JJMgr.ts', './JJWxTrap.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, Sprite, JJMgr, JJWxTrap;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
      Sprite = module.Sprite;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "80640I/xFpMor6MfSekWPx9", "FinishGameUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FinishGameUI = exports('default', (_dec = ccclass('FinishGameUI'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FinishGameUI, _Component);

        function FinishGameUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "rootNode", _descriptor, _assertThisInitialized(_this));

          _this.navId = 0;
          _this.myNavArr = [];
          return _this;
        }

        var _proto = FinishGameUI.prototype;

        _proto.showUI = function showUI() {
          this.node.active = true;
        };

        _proto.onEnable = function onEnable() {
          this._init();

          this.initNav();
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
        };

        _proto._init = function _init() {
          this.navId = 0;
        };

        _proto.closeCB = function closeCB() {
          this.node.active = false;
        };

        _proto.navCB = function navCB(event, id) {
          console.log('click id:', id);
          JJMgr.instance.NavigateApp(id, function () {
            if (JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_quxiao_switch) JJWxTrap.Instance.clickFinishMoreGame();
          }, function () {}); // //this.initNav()
        };

        _proto.initNav = function initNav() {
          var _this2 = this;

          this.myNavArr = JJMgr.instance.shuffleArr([].concat(JJMgr.instance.navDataArr));
          var hotArr = [0, 1, 2, 3, 4, 5];
          hotArr = this.getRandomItemInArrWithoutSelf(-1, hotArr, 4);
          if (this.myNavArr.length <= 0) return;
          var randNum = Math.floor(Math.random() * 6);
          var randNum1 = Math.floor(Math.random() * 6);

          var _loop = function _loop(i) {
            var item = _this2.rootNode.children[i];
            var icon = item.getChildByName('icon').getComponent(Sprite);
            var finger = item.getChildByName('finger');
            var hot = item.getChildByName('hot');
            hot.active = hotArr.indexOf(i) != -1;
            var index = JJMgr.instance.navDataArr.indexOf(_this2.myNavArr[i]);
            JJMgr.instance.loadImgByUrl(icon, _this2.myNavArr[i].icon);
            finger.active = randNum == i; // //let id = this.navId

            item.off(Node.EventType.TOUCH_END);
            item.on(Node.EventType.TOUCH_END, function (event) {
              _this2.navCB(event, index);
            }, _this2);

            if (randNum1 == i) {
              _this2.scheduleOnce(function () {
                _this2.rotateLoop(item, 0.05, 14);
              }, 0.5);
            }
          };

          for (var i = 0; i < 6; i++) {
            _loop(i);
          }
        };

        _proto.rotateLoop = function rotateLoop(node, duration, rate) {// node.stopAllActions()
          // node.angle = 0
          // let rate2 = rate / 1.5;
          // let rate3 = rate / 2;
          // let rate4 = rate / 3;
          // let a1 = rotateBy(duration * 2, -rate)
          // let a2 = rotateBy(duration * 4, rate * 2)
          // let a3 = rotateBy(duration * 2, -rate)
          // let a11 = rotateBy(duration, -rate2)
          // let a21 = rotateBy(duration * 2, rate2 * 2)
          // let a31 = rotateBy(duration, -rate2)
          // let a111 = rotateBy(duration, -rate3)
          // let a211 = rotateBy(duration * 2, rate3 * 2)
          // let a311 = rotateBy(duration, -rate3)
          // let a1111 = rotateBy(duration, -rate4)
          // let a2111 = rotateBy(duration, rate4 * 2)
          // let a3111 = rotateBy(duration, -rate4)
          // let cb = callFunc(() => {
          // this.scheduleOnce(this.initNav, 2)
          // })
          // let a4 = sequence(a1, a2, a3, a11, a21, a31, a111, a211, a311, a1111, a2111, a3111, cb)
          // node.runAction(a4)
        } // //打乱数组
        ;

        _proto.shuffleArr = function shuffleArr(arr) {
          var i = arr.length;

          while (i) {
            var j = Math.floor(Math.random() * i--);
            var _ref = [arr[i], arr[j]];
            arr[j] = _ref[0];
            arr[i] = _ref[1];
          }

          return arr;
        };

        _proto.getRandomItemInArrWithoutSelf = function getRandomItemInArrWithoutSelf(self, arr, count) {
          if (count === void 0) {
            count = 1;
          }

          var temp = [].concat(arr);
          temp.splice(temp.indexOf(self), 1);
          temp = this.shuffleArr(temp);
          return temp.slice(0, count);
        };

        return FinishGameUI;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "rootNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FireEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolMgr.ts', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, PoolMgr, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      PoolMgr = module.PoolMgr;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0ccfbTUZ0FJ/Lqw0A/cba0N", "FireEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FireEffect = exports('FireEffect', (_dec = ccclass('FireEffect'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(FireEffect, _PoolComp);

        function FireEffect() {
          return _PoolComp.apply(this, arguments) || this;
        }

        var _proto = FireEffect.prototype;

        _proto.firstBorn = function firstBorn() {};

        _proto.clear = function clear() {};

        _proto.init = function init() {
          var _this = this;

          this.node.active = true; // this.node.children[0].getComponent(Animation).play("MuzzleFire");

          this.scheduleOnce(function () {
            PoolMgr.instance.recyleObj(_this);
          }, 1);
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        return FireEffect;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FollowController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c6148hIAtlGKL1ARBsaihCi", "FollowController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FollowController = exports('FollowController', (_dec = ccclass('FollowController'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FollowController, _Component);

        function FollowController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._followOffset = new Vec3();

          _initializerDefineProperty(_this, "follow", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FollowController.prototype;

        _proto.onLoad = function onLoad() {
          if (this.follow) {
            Vec3.subtract(this._followOffset, this.node.worldPosition, this.follow.worldPosition);
          }
        };

        _proto.update = function update(dt) {
          if (this.follow) {
            this.node.worldPosition = Vec3.add(this.node.worldPosition, this.follow.worldPosition, this._followOffset);
          }
        };

        return FollowController;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "follow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Fontclip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCFloat, SpriteFrame, Node, Sprite, Rect, UITransform, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      Rect = module.Rect;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "15c1cOMq9hNFYnUkQHabVYz", "Fontclip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode,
          menu = _decorator.menu;
      var Fontclip = exports('Fontclip', (_dec = ccclass('Fontclip'), _dec2 = executeInEditMode(true), _dec3 = menu('UI/Comp/Fontclip'), _dec4 = property({
        visible: true,
        displayName: 'value'
      }), _dec5 = property({
        visible: false,
        serializable: true
      }), _dec6 = property({
        visible: true,
        displayName: 'sheet'
      }), _dec7 = property({
        visible: false,
        serializable: true
      }), _dec8 = property({
        type: CCFloat,
        visible: true,
        displayName: 'spaceX'
      }), _dec9 = property({
        type: CCFloat,
        visible: false,
        serializable: true
      }), _dec10 = property({
        visible: false,
        serializable: true
      }), _dec11 = property(SpriteFrame), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Fontclip, _Component);

        function Fontclip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_value", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_sheet", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_spaceX", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_isCenter", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteFrame", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Fontclip.prototype;

        _proto.onEnable = function onEnable() {
          this.change();
        };

        _proto.start = function start() {
          this.change();
        };

        _proto.change = function change() {
          for (var i = 0; i < this.node.children.length; i++) {
            this.node.children[i].destroy();
          }

          var value = Array.from(this.value);
          var sheet = Array.from(this.sheet);
          var width = this.spriteFrame.width;
          var height = this.spriteFrame.height;
          var widthDelta = width / sheet.length;
          var firstWidth = 0;

          if (this.isCenter) {
            firstWidth = -(value.length - 1) * widthDelta / 2;
          }

          for (var _i = 0; _i < value.length; _i++) {
            var spriteNode = new Node(value[_i]);
            spriteNode.layer = this.node.layer;
            var sprite = spriteNode.addComponent(Sprite);
            this.node.addChild(spriteNode);
            sprite.spriteFrame = this.spriteFrame.clone();
            var index = sheet.indexOf(value[_i]);
            sprite.spriteFrame.rect = new Rect(widthDelta * index, 0, widthDelta, height);
            spriteNode.getComponent(UITransform).setContentSize(widthDelta, height);
            spriteNode.setPosition(new Vec3(firstWidth + _i * widthDelta + this._spaceX * _i, 0, 0));
          }
        };

        _createClass(Fontclip, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            this._value = v;
            this.change();
          }
        }, {
          key: "sheet",
          get: function get() {
            return this._sheet;
          },
          set: function set(v) {
            this._sheet = v;
            this.change();
          }
        }, {
          key: "spaceX",
          get: function get() {
            return this._spaceX;
          },
          set: function set(v) {
            this._spaceX = v;
            this.change();
          }
        }, {
          key: "isCenter",
          get: function get() {
            return this._isCenter;
          },
          set: function set(v) {
            this._isCenter = v;
            this.change();
          }
        }]);

        return Fontclip;
      }(Component), (_applyDecoratedDescriptor(_class2.prototype, "value", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_value", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '0123456789.:';
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "sheet", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "sheet"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_sheet", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '0123456789.:';
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "spaceX", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "spaceX"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_spaceX", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "isCenter", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "isCenter"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_isCenter", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrame", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FPSController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Math.ts', './CustomInput.ts', './StateController.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Quat, KeyCode, Component, SmoothDamper, customInput, StateController;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      SmoothDamper = module.SmoothDamper;
    }, function (module) {
      customInput = module.customInput;
    }, function (module) {
      StateController = module.StateController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0f7c14ApUhDOa9W10fwkwuy", "FPSController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var __euler = new Vec3();

      var __speedTo = new Vec3();

      var __offset = new Vec3();

      var __rotation = new Quat();

      var FPSController = exports('FPSController', (_dec = ccclass('FPSController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FPSController, _Component);

        function FPSController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._euler = new Vec3();
          _this._speedSmoothDamper = new SmoothDamper();
          _this._eulerSmoothDamper = new SmoothDamper();
          _this._moveSpeed = new Vec3();
          _this._state = null;
          return _this;
        }

        var _proto = FPSController.prototype;

        _proto.onLoad = function onLoad() {
          customInput.initialize(true);
          this._state = this.getComponentInChildren(StateController);
          Quat.toEuler(this._euler, this.node.worldRotation);
        };

        _proto.update = function update(dt) {
          var state = this._state;

          if (state) {
            this._updateRotation(state, dt);

            this._updatePosition(state, dt);

            this._updateState(state, dt);
          }
        };

        _proto._updateRotation = function _updateRotation(state, deltaTime) {
          __euler.set(this._euler).subtract3f(customInput.mouseX, customInput.mouseY, 0);

          this._eulerSmoothDamper.Vec3_smoothDamp(this._euler, this._euler, __euler, customInput.mouseRight ? 1 : 0.2, deltaTime);

          Quat.fromEuler(__rotation, this._euler.y, this._euler.x, 0);
          this.node.worldRotation = __rotation;
        };

        _proto._updatePosition = function _updatePosition(state, deltaTime) {
          __speedTo.set(customInput.horizontal, 0, customInput.vertical);

          Vec3.transformQuat(__speedTo, __speedTo, this.node.worldRotation);
          __speedTo.y = 0;

          __speedTo.normalize();

          __speedTo.multiplyScalar(customInput.mouseRight ? 1.5 : 3);

          this._speedSmoothDamper.Vec3_smoothDamp(this._moveSpeed, this._moveSpeed, __speedTo, 0.1, deltaTime);

          Vec3.multiplyScalar(__offset, this._moveSpeed, deltaTime);
          this.node.worldPosition = this.node.worldPosition.add(__offset);
        };

        _proto._updateState = function _updateState(state, deltaTime) {
          if (customInput.getButton(KeyCode.KEY_R)) {
            state.setState(StateController.RELOAD_OUTOF_AMMO);
          } else {
            state.setValue("moveSpeed", this._moveSpeed.length());
            state.setValue("mouseRight", customInput.mouseRight);
            state.setValue("mouseLeft", customInput.mouseLeft);
          }
        };

        return FPSController;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FreeLookHandler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Math.ts', './Base.ts', './CameraHandler.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Vec3, Vec2, systemEvent, SystemEvent, sys, EventMouse, view, toRadian, clamp, EPSILON, Vec3_setFromSpherical, quarticDamp, Vec3_setFromMatrixColumn, Vec3_closeTo, Spherical, SmoothDamper, BaseFlag, CameraHandler;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Vec2 = module.Vec2;
      systemEvent = module.systemEvent;
      SystemEvent = module.SystemEvent;
      sys = module.sys;
      EventMouse = module.EventMouse;
      view = module.view;
      toRadian = module.toRadian;
      clamp = module.clamp;
    }, function (module) {
      EPSILON = module.EPSILON;
      Vec3_setFromSpherical = module.Vec3_setFromSpherical;
      quarticDamp = module.quarticDamp;
      Vec3_setFromMatrixColumn = module.Vec3_setFromMatrixColumn;
      Vec3_closeTo = module.Vec3_closeTo;
      Spherical = module.Spherical;
      SmoothDamper = module.SmoothDamper;
    }, function (module) {
      BaseFlag = module.BaseFlag;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1d097iHg4pBDLtSMsYjfxFc", "FreeLookHandler", undefined);

      var abs = Math.abs,
          tan = Math.tan;
      var Flag;

      (function (Flag) {
        Flag[Flag["None"] = 0] = "None";
        Flag[Flag["RotateZoom"] = BaseFlag.Custom << 0] = "RotateZoom";
        Flag[Flag["Pan"] = BaseFlag.Custom << 1] = "Pan";
      })(Flag || (Flag = {}));

      var __worldPos = new Vec3();

      var __posDelta = new Vec3();

      var __moveDelta = new Vec2();

      var __xAxis = new Vec3();

      var __yAxis = new Vec3();

      var __loc0 = new Vec2();

      var __loc1 = new Vec2();

      var __preLoc0 = new Vec2();

      var __preLoc1 = new Vec2();

      var FreeLookHandler = exports('FreeLookHandler', /*#__PURE__*/function (_CameraHandler) {
        _inheritsLoose(FreeLookHandler, _CameraHandler);

        function FreeLookHandler() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _CameraHandler.call.apply(_CameraHandler, [this].concat(args)) || this;
          _this._button = -1;
          _this._rotateDelta = new Vec2();
          _this._panDelta = new Vec2();
          _this._panDeltaPrevious = new Vec2();
          _this._panFrame = 0;
          _this._panEnable = 1;
          _this._distanceScale = 1;
          _this._spherical = new Spherical();
          _this._smoothDamper = new SmoothDamper();
          return _this;
        }

        var _proto = FreeLookHandler.prototype;

        _proto.onEnable = function onEnable() {
          systemEvent.on(SystemEvent.EventType.MOUSE_DOWN, this._onMouseDown, this);
          systemEvent.on(SystemEvent.EventType.MOUSE_UP, this._onMouseUp, this);
          systemEvent.on(SystemEvent.EventType.MOUSE_WHEEL, this._onMouseWheel, this);
          systemEvent.on(SystemEvent.EventType.MOUSE_MOVE, this._onMouseMove, this);
          systemEvent.on(SystemEvent.EventType.TOUCH_MOVE, this._onTouchMove, this);
          systemEvent.on(SystemEvent.EventType.TOUCH_END, this._onTouchEnd, this);
        };

        _proto.onDisable = function onDisable() {
          systemEvent.off(SystemEvent.EventType.MOUSE_DOWN, this._onMouseDown, this);
          systemEvent.off(SystemEvent.EventType.MOUSE_UP, this._onMouseUp, this);
          systemEvent.off(SystemEvent.EventType.MOUSE_WHEEL, this._onMouseWheel, this);
          systemEvent.off(SystemEvent.EventType.MOUSE_MOVE, this._onMouseMove, this);
          systemEvent.off(SystemEvent.EventType.TOUCH_MOVE, this._onTouchMove, this);
          systemEvent.off(SystemEvent.EventType.TOUCH_END, this._onTouchEnd, this);
        };

        _proto._getPreviousLocation = function _getPreviousLocation(e, out) {
          return e.getPreviousLocation(out);
        };

        _proto._getLocation = function _getLocation(e, out) {
          return e.getLocation(out);
        };

        _proto._onTouchMove = function _onTouchMove(t, e) {
          if (!sys.isMobile) return;
          var touchs = e.getAllTouches();

          if (touchs.length === 1) {
            this._rotateDelta.add(this._calculateRotateDelta(__moveDelta, this._getPreviousLocation(e, __loc0), this._getLocation(e, __loc1)));

            this._objFlag |= Flag.RotateZoom;
          } else if (touchs.length > 1) {
            this._getPreviousLocation(touchs[0], __preLoc0);

            this._getPreviousLocation(touchs[1], __preLoc1);

            this._getLocation(touchs[0], __loc0);

            this._getLocation(touchs[1], __loc1);

            this._distanceScale *= this._calculateDistanceScale(Vec2.distance(__preLoc0, __preLoc1) / Vec2.distance(__loc0, __loc1));
            this._objFlag |= Flag.RotateZoom;

            __preLoc0.add(__preLoc1).multiplyScalar(0.5);

            __loc0.add(__loc1).multiplyScalar(0.5);

            this._setPanDelta(this._calculatePanDelta(__moveDelta, __preLoc0, __loc0));
          }
        };

        _proto._onTouchEnd = function _onTouchEnd(t, e) {
          if (this._panFrame <= 5) {
            this._panEnable = 1;

            this._panDelta.set(this._panDeltaPrevious);

            this._objFlag |= Flag.Pan;
          }
        };

        _proto._onMouseDown = function _onMouseDown(e) {
          this._button = e.getButton();
        };

        _proto._onMouseUp = function _onMouseUp(e) {
          this._button = -1;
        };

        _proto._onMouseWheel = function _onMouseWheel(e) {
          if (e.getScrollY() > 0) {
            this._distanceScale *= this._calculateDistanceScale(0.95);
            this._objFlag |= Flag.RotateZoom;
          } else if (e.getScrollY() < 0) {
            this._distanceScale *= this._calculateDistanceScale(1 / 0.95);
            this._objFlag |= Flag.RotateZoom;
          }
        };

        _proto._onMouseMove = function _onMouseMove(e) {
          switch (this._button) {
            case EventMouse.BUTTON_LEFT:
              this._rotateDelta.add(this._calculateRotateDelta(__moveDelta, this._getPreviousLocation(e, __loc0), this._getLocation(e, __loc1)));

              this._objFlag |= Flag.RotateZoom;
              break;

            case EventMouse.BUTTON_MIDDLE:
              this._setPanDelta(this._calculatePanDelta(__moveDelta, this._getPreviousLocation(e, __loc0), this._getLocation(e, __loc1)));

              break;
          }
        };

        _proto._setPanDelta = function _setPanDelta(delta) {
          if (this._objFlag & Flag.Pan || abs(delta.x) + abs(delta.y) > EPSILON) {
            this._objFlag |= Flag.Pan;
            this._panFrame = 0;
            this._panEnable = 0;

            this._panDelta.add(delta);

            this._panDeltaPrevious.set(this._panDelta);
          }
        };

        _proto._calculateDistanceScale = function _calculateDistanceScale(scale) {
          return scale;
        };

        _proto._calculateRotateDelta = function _calculateRotateDelta(out, loc0, loc1) {
          var freelook = this._vcam.body.freelook;
          Vec2.subtract(out, loc1, loc0).multiplyScalar(freelook.rotateSpeed * 0.1 * Math.PI / view.getVisibleSizeInPixel().height);
          return out;
        };

        _proto._calculatePanDelta = function _calculatePanDelta(out, loc0, loc1) {
          var freelook = this._vcam.body.freelook;
          Vec2.subtract(out, loc1, loc0).multiplyScalar(freelook.panSpeed / view.getVisibleSizeInPixel().height);
          return out;
        };

        _proto.updateCamera = function updateCamera(deltaTime) {
          var vcam = this._vcam;
          var freelook = vcam.body.freelook;
          var followChanged = 0;
          var rotateZoomChanged = 0;

          if (freelook.forbidX) {
            this._rotateDelta.x = 0;
            rotateZoomChanged++;
          }

          if (freelook.forbidY) {
            this._rotateDelta.y = 0;
            rotateZoomChanged++;
          }

          if (freelook.forbidZ) {
            this._distanceScale = 1;
            rotateZoomChanged++;
          }

          if (rotateZoomChanged >= 3) {
            this._objFlag &= ~Flag.RotateZoom;
          }

          if (freelook.forbidPan) {
            this._panDelta.set(0, 0);

            this._objFlag &= ~Flag.Pan;
          }

          if (vcam.lookAt) {
            var composer = vcam.aim.composer;
            Vec3.add(__worldPos, vcam.lookAt.worldPosition, composer.trackedObjectOffset);

            if (this._objFlag & Flag.RotateZoom) {
              Vec3.subtract(__posDelta, vcam.node.worldPosition, __worldPos);
              var length = __posDelta.length() * 2 * tan(toRadian(vcam.lens.fov * 0.5));
              var x = this._rotateDelta.x * length;
              var y = this._rotateDelta.y * length;

              this._spherical.setFromVec3(__posDelta);

              this._spherical.theta = this._spherical.theta - x;
              this._spherical.phi = clamp(this._spherical.phi + y, EPSILON, Math.PI - EPSILON);
              this._spherical.radius = this._spherical.radius * this._distanceScale;
              Vec3_setFromSpherical(__posDelta, this._spherical);
              vcam.node.worldPosition = __posDelta.add(__worldPos);

              this._rotateDelta.multiplyScalar(quarticDamp(1, 0, freelook.rotateSmoothing, deltaTime));

              this._distanceScale = 1;

              if (abs(x) + abs(y) <= EPSILON) {
                this._objFlag &= ~Flag.RotateZoom;
              }

              followChanged++;
            }

            if (this._objFlag & Flag.Pan) {
              Vec3.subtract(__posDelta, vcam.node.worldPosition, __worldPos);
              Vec3_setFromMatrixColumn(__xAxis, vcam.node.worldMatrix, 0);
              Vec3_setFromMatrixColumn(__yAxis, vcam.node.worldMatrix, 1);

              var _length = __posDelta.length() * 2 * tan(toRadian(vcam.lens.fov * 0.5));

              var trackedObjectOffset = composer.trackedObjectOffset;
              trackedObjectOffset.subtract(__xAxis.multiplyScalar(this._panDelta.x * _length));
              trackedObjectOffset.subtract(__yAxis.multiplyScalar(this._panDelta.y * _length));
              Vec3.add(__worldPos, vcam.lookAt.worldPosition, trackedObjectOffset);
              vcam.node.worldPosition = __posDelta.add(__worldPos);

              this._panDelta.multiplyScalar(quarticDamp(1, 0, freelook.panSmoothing, deltaTime) * this._panEnable);

              if (abs(this._panDelta.x) + abs(this._panDelta.y) <= EPSILON) {
                this._objFlag &= ~Flag.Pan;
              }

              followChanged++;
            }

            if (this._panFrame < 10) {
              this._panFrame++;
            }
          }

          if (vcam.follow) {
            if (followChanged > 0) {
              Vec3.subtract(freelook.followOffset, vcam.node.worldPosition, vcam.follow.worldPosition);
            }

            Vec3.add(__posDelta, vcam.follow.worldPosition, freelook.followOffset);

            if (freelook.followDamping > 0) {
              this._smoothDamper.Vec3_smoothDamp(__worldPos, vcam.node.worldPosition, __posDelta, freelook.followDamping, deltaTime);
            } else {
              __worldPos.set(__posDelta);
            }

            if (!Vec3_closeTo(__worldPos, vcam.node.worldPosition)) {
              vcam.node.worldPosition = __worldPos;
            }
          }
        };

        return FreeLookHandler;
      }(CameraHandler));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameData.ts", ['cc', './DataClass.ts', './EnumTypes.ts'], function (exports) {
  'use strict';

  var cclegacy, Vec2, Vec3, Color, Cam_Default_Data, TankUnlockData, TankGameData, TeachStepType;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
      Color = module.Color;
    }, function (module) {
      Cam_Default_Data = module.Cam_Default_Data;
      TankUnlockData = module.TankUnlockData;
      TankGameData = module.TankGameData;
    }, function (module) {
      TeachStepType = module.TeachStepType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "edee8jn8lBL95uzt7YMQkUC", "GameData", undefined);

      var GameData = exports('default', /*#__PURE__*/function () {
        function GameData() {}
        /**是否是从开始界面去到的坦克商店 */

        /**开始游戏模式 */

        /**已经在播放30秒倒计时 */

        /**新手教程步骤 */

        /**3D游戏场景用cam */

        /**SDK加载完毕 */

        /**最后胜利结果 */
        //#region AI参数

        /**敌人各段位的伤害比例 */

        /**ai是否会移动 */

        /**ai是否会攻击 */

        /**ai是否会用技能 */

        /**ai是否会emoji */

        /**AI寻敌范围 */
        //#endregion
        // #region 胜利条件积分

        /**段位对应上限积分 */

        /**玩家阵营分数 */

        /**敌人阵营分数 */

        /**胜利分数 */

        /**团队击杀胜利条件 */

        /**个人赛时间 */
        //#endregion
        //#region 场景数据

        /**道具刷新时间 */

        /**塔每秒增长 */

        /**镜头初始化数据*/

        /**镜头初始化数据(教学) */

        /**占领时间 */

        /**占领值回复时间 */

        /**玩家颜色 */

        /**敌人颜色 */

        /**开火和击中特效显示范围(平方) */

        /**场景物体碰撞掩码 */

        /**玩家碰撞掩码 */

        /**敌人碰撞掩码 */

        /**Npc(同伙)碰撞掩码 */
        //#endregion
        //#region 场景单位

        /**地图AI检查点 */

        /**地图单人出生点 */

        /**场上的Player单位 */

        /**场上的hero单位 */

        /**场上的玩家阵营单位 */

        /**场上的敌人阵营单位 */

        /**场上的所有AI单位 */

        /**场上的塔 */
        //#endregion
        //#region 玩家操控参数

        /**玩家是否会自动开火 */

        /**自动瞄准距离(的平方)  */

        /**视角x下限制 */

        /**视角x上限制 */

        /**视角灵敏度_竖移 */

        /**视角灵敏度_横移 */
        // #endregion
        //#region 单位参数

        /**坦克1血量 */

        /**坦克2血量 */

        /**坦克3血量 */

        /**坦克4血量 */

        /**坦克5血量 */

        /**坦克1护甲（护甲 = 免伤几率*100） */

        /**坦克2护甲（护甲 = 免伤几率*100） */

        /**坦克3护甲（护甲 = 免伤几率*100） */

        /**坦克4护甲（护甲 = 免伤几率*100） */

        /**坦克5护甲（护甲 = 免伤几率*100） */

        /**坦克1加速度 */

        /**坦克2加速度 */

        /**坦克3加速度 */

        /**坦克4加速度 */

        /**坦克5加速度 */

        /**坦克1最高速度 */

        /**坦克2最高速度 */

        /**坦克3最高速度 */

        /**坦克4最高速度 */

        /**坦克5最高速度 */
        //这个值越大代表坦克越重

        /**坦克1阻力加速度（加速度不会受这个影响） */

        /**坦克2阻力加速度（加速度不会受这个影响） */

        /**坦克3阻力加速度（加速度不会受这个影响） */

        /**坦克4阻力加速度（加速度不会受这个影响） */

        /**坦克5阻力加速度（加速度不会受这个影响） */

        /**坦克1移动转向速度（°/s） */

        /**坦克2移动转向速度（°/s） */

        /**坦克3移动转向速度（°/s） */

        /**坦克4移动转向速度（°/s） */

        /**坦克5移动转向速度（°/s） */
        //现阶段炮管转向均使用这个速度/4

        /**坦克1炮塔转向速度(°/s) */

        /**坦克2炮塔转向速度(°/s) */

        /**坦克3炮塔转向速度(°/s) */

        /**坦克4炮塔转向速度(°/s) */

        /**坦克5炮塔转向速度(°/s) */

        /**坦克1炮管角度限制 */

        /**坦克2炮管角度限制 */

        /**坦克3炮管角度限制 */

        /**坦克4炮管角度限制 */

        /**坦克5炮管角度限制 */

        /**坦克1攻击力 */

        /**坦克2攻击力 */

        /**坦克3攻击力 */

        /**坦克4攻击力 */

        /**坦克5攻击力 */

        /**坦克1攻击间隔 */

        /**坦克2攻击间隔 */

        /**坦克3攻击间隔 */

        /**坦克4攻击间隔 */

        /**坦克5攻击间隔 */

        /**坦克1攻击距离 */

        /**坦克2攻击距离 */

        /**坦克3攻击距离 */

        /**坦克4攻击距离 */

        /**坦克5攻击距离 */

        /**技能嘶咬猛冲移动速度倍数 */

        /**技能嘶咬猛冲持续时间 */

        /**技能撕咬猛冲CD */

        /**技能嘶咬猛冲,咬的距离(平方) */

        /**技能嘶咬猛冲,咬的伤害 */
        //2000

        /**技能撕咬猛冲，咬的治疗量 */
        //1000

        /**技能狙击手模式技能CD */

        /**技能狙击手伤害倍数 */

        /**技能光学隐身技能CD */

        /**技能光学隐身持续时间 */

        /**技能光学隐身移动速度加成 */

        /**技能光学隐身攻击力加成 */

        /**技能装甲横扫CD */

        /**技能装甲横扫伤害 */

        /**技能装甲横扫攻击范围(的平方) */

        /**技能装甲横扫增加护甲Buff持续时间 */

        /**技能装甲横扫增加护甲Buff减伤值 */

        /**技能战争猛冲CD */

        /**技能战争猛冲伤害 */

        /**技能战争猛冲攻击范围(的平方) */

        /**技能战争猛冲持续速度 */

        /**技能战争猛冲(冲)持续时间 */

        /**攻击力Buff持续事件 */

        /**攻击力Buff每次触发增加的百分比 */

        /**攻击力Buff最大百分比 */
        //#endregion
        //#region Home的参数

        /**tank名字 */

        /**现在展示的坦克 */

        /**将坦克存档信息转成游戏内的数值信息 */


        GameData.getTankStatData = function getTankStatData(storageData) {
          var data = new TankGameData(); //坦克id传输

          data.id = storageData.id;

          switch (storageData.id) {
            case 0:
              data.hp = GameData.tank_1_hp; //血量

              data.armor = GameData.tank_1_armor; //护甲

              data.attack = GameData.tank_1_atk[0]; //攻击力

              data.attackInvertal = GameData.tank_1_atkInterval; //攻击间隔

              data.maxSpeed = GameData.tank_1_maxSpeed; //最高速度

              data.acceleration = GameData.tank_1_acceleration; //加速度

              data.tankModelRotSpeed = GameData.tank_1_moveTurnSpeed; //车体转动速度

              data.tankCapRotSpeed = GameData.tank_1_attackTurnSpeed; //炮塔旋转速度

              break;

            case 1:
              data.hp = GameData.tank_2_hp; //血量

              data.armor = GameData.tank_2_armor; //护甲

              data.attack = GameData.tank_2_atk[0]; //攻击力

              data.attackInvertal = GameData.tank_2_atkInterval; //攻击间隔

              data.maxSpeed = GameData.tank_2_maxSpeed; //最高速度

              data.acceleration = GameData.tank_2_acceleration; //加速度

              data.tankModelRotSpeed = GameData.tank_2_moveTurnSpeed; //车体转动速度

              data.tankCapRotSpeed = GameData.tank_2_attackTurnSpeed; //炮塔旋转速度

              break;

            case 2:
              data.hp = GameData.tank_3_hp; //血量

              data.armor = GameData.tank_3_armor; //护甲

              data.attack = GameData.tank_3_atk[0]; //攻击力

              data.attackInvertal = GameData.tank_3_atkInterval; //攻击间隔

              data.maxSpeed = GameData.tank_3_maxSpeed; //最高速度

              data.acceleration = GameData.tank_3_acceleration; //加速度

              data.tankModelRotSpeed = GameData.tank_3_moveTurnSpeed; //车体转动速度

              data.tankCapRotSpeed = GameData.tank_3_attackTurnSpeed; //炮塔旋转速度

              break;

            case 3:
              data.hp = GameData.tank_4_hp; //血量

              data.armor = GameData.tank_4_armor; //护甲

              data.attack = GameData.tank_4_atk[0]; //攻击力

              data.attackInvertal = GameData.tank_4_atkInterval; //攻击间隔

              data.maxSpeed = GameData.tank_4_maxSpeed; //最高速度

              data.acceleration = GameData.tank_4_acceleration; //加速度

              data.tankModelRotSpeed = GameData.tank_4_moveTurnSpeed; //车体转动速度

              data.tankCapRotSpeed = GameData.tank_4_attackTurnSpeed; //炮塔旋转速度

              break;

            case 4:
              data.hp = GameData.tank_5_hp; //血量

              data.armor = GameData.tank_5_armor; //护甲

              data.attack = GameData.tank_5_atk[0]; //攻击力

              data.attackInvertal = GameData.tank_5_atkInterval; //攻击间隔

              data.maxSpeed = GameData.tank_5_maxSpeed; //最高速度

              data.acceleration = GameData.tank_5_acceleration; //加速度

              data.tankModelRotSpeed = GameData.tank_5_moveTurnSpeed; //车体转动速度

              data.tankCapRotSpeed = GameData.tank_5_attackTurnSpeed; //炮塔旋转速度

              break;
          } //炮塔加成


          data.hp += storageData.partLevel[0] * 50;
          data.armor += storageData.partLevel[0];
          data.tankCapRotSpeed += storageData.partLevel[0] * 1; //主炮加成

          data.attack = data.attack * (1 + storageData.partLevel[1] * 0.1);
          data.attackInvertal -= 0.01 * storageData.partLevel[1]; //装甲加成

          data.hp += storageData.partLevel[2] * 100;
          data.armor += storageData.partLevel[2] * 2; //引擎加成

          data.maxSpeed += 1 * storageData.partLevel[3];
          data.acceleration += 0.5 * storageData.partLevel[3];
          data.tankModelRotSpeed += 1 * storageData.partLevel[3]; //履带

          data.hp += storageData.partLevel[4] * 25;
          data.acceleration += storageData.partLevel[4] * 0.2;
          data.tankModelRotSpeed += storageData.partLevel[4] * 1.5; //操作系统

          data.hp += storageData.partLevel[5] * 10;
          data.attackInvertal -= storageData.partLevel[5] * 0.01;
          data.acceleration += storageData.partLevel[5] * 0.2;
          data.tankModelRotSpeed += storageData.partLevel[5] * 0.5;
          data.tankCapRotSpeed += storageData.partLevel[5] * 0.5; //涂装加成

          data.skinId = storageData.nowPaintIndex;

          switch (storageData.nowPaintIndex) {
            case 0:
              data.attack *= 1.21;
              break;

            case 1:
              data.attackInvertal *= 1 / 1.21;
              break;

            case 2:
              data.attack *= 1.26;
              break;

            case 3:
              data.attackInvertal *= 1 / 1.26;
              break;

            case 4:
              data.attack *= 1.36;
              break;

            case 5:
              data.attackInvertal *= 1 / 1.36;
              break;
          } //技术激活


          data.techActiveIndex.length = 0;

          for (var i = 0; i < storageData.techState.length; i++) {
            if (storageData.techState[i]) {
              data.techActiveIndex.push(i);
            }
          }

          return data;
        }
        /**坦克解锁条件 */
        ;
        /**部件升级所需现金公式 
         * @param partId 部件id 0炮塔  1主炮  2装甲   3引擎  4履带   5操作系统
         * @param level 要升级到的等级  0为初始等级
         * @param tankid 坦克的id
        */


        GameData.partUpgradeCostFormula = function partUpgradeCostFormula(partId, level, tankId) {
          return Math.round(1000 * Math.pow(this.partCostAxis[partId], level - 1) * (1 + tankId / 2));
        }
        /**技术升级所需（类型） */
        //#endregion
        ;

        return GameData;
      }());
      GameData.isFromStartPanel = false;
      GameData.startGameMode = "single";
      GameData.isPlayingCountDown = false;
      GameData.teachStep = TeachStepType.start;
      GameData.cam = null;
      GameData.isSdkOk = false;
      GameData.isWin = false;
      GameData.enemyDamageAxis = [0.5, 0.6, 0.7, 0.8, 0.9, 1, 1, 1, 1, 1, 1, 1, 1];
      GameData.aiMove = true;
      GameData.aiAttack = true;
      GameData.aiSkill = true;
      GameData.aiEmoji = false;
      GameData.enemyFindRange = 100;
      GameData.rankScore = [90, 180, 330, 480, 630, 780, 930, 1080, 1230, 1380, 1530, 1680, 99999];
      GameData.playerScore = 0;
      GameData.enemyScore = 0;
      GameData.winScore = 3000;
      GameData.teamKillWinScore = 20;
      GameData.singleTime = 300;
      GameData.itemRefreshTime = 5;
      GameData.tower_addScore_perSecond = 5;
      GameData.cam_default_data_small = new Cam_Default_Data(0.2, 1.8, new Vec2(-5, 90), new Vec3(0, 0.35, -5), new Vec3(-5, 180, 0));
      GameData.cam_default_data_small_teach = new Cam_Default_Data(0.2, 1.8, new Vec2(-5, 0), new Vec3(0, 0.35, -5), new Vec3(-5, 180, 0));
      GameData.cam_default_data_small_teach_enemy = new Cam_Default_Data(0.2, 1.8, new Vec2(-5, -90), new Vec3(0, 0.35, -5), new Vec3(-5, 180, 0));
      GameData.tower_controlTime = 5;
      GameData.tower_controlBackTime = 5;
      GameData.playerColor = new Color(0, 188, 254, 255);
      GameData.enemyColor = new Color(255, 0, 0, 255);
      GameData.fireEffect_RangeSqr = 10000;
      GameData.sceneObj_Mask = 2;
      GameData.player_mask = 8;
      GameData.enemy_mask = 4;
      GameData.npc_mask = 16;
      GameData.checkPoint = void 0;
      GameData.singleBornPoint = void 0;
      GameData.player = void 0;
      GameData.heros = [];
      GameData.players = [];
      GameData.enemies = [];
      GameData.ais = [];
      GameData.towers = [];
      GameData.isAutoFire = false;
      GameData.autoAim_DistanceSqr = 10000;
      GameData.camRot_MinX = -40;
      GameData.camRot_MaxX = 60;
      GameData.camRot_Yaxis = 2;
      GameData.camRot_Xaxis = 2;
      GameData.tank_1_hp = 2800;
      GameData.tank_2_hp = 2200;
      GameData.tank_3_hp = 3300;
      GameData.tank_4_hp = 3500;
      GameData.tank_5_hp = 3900;
      GameData.tank_1_armor = 18;
      GameData.tank_2_armor = 5;
      GameData.tank_3_armor = 12;
      GameData.tank_4_armor = 20;
      GameData.tank_5_armor = 28;
      GameData.tank_1_acceleration = 1.39;
      GameData.tank_2_acceleration = 2.16;
      GameData.tank_3_acceleration = 1.68;
      GameData.tank_4_acceleration = 1.49;
      GameData.tank_5_acceleration = 1.1;
      GameData.tank_1_maxSpeed = 16.66;
      GameData.tank_2_maxSpeed = 18.61;
      GameData.tank_3_maxSpeed = 20;
      GameData.tank_4_maxSpeed = 20;
      GameData.tank_5_maxSpeed = 16.66;
      GameData.tank_1_dragAcceleration = 4;
      GameData.tank_2_dragAcceleration = 4;
      GameData.tank_3_dragAcceleration = 4;
      GameData.tank_4_dragAcceleration = 4;
      GameData.tank_5_dragAcceleration = 4;
      GameData.tank_1_moveTurnSpeed = 30.74;
      GameData.tank_2_moveTurnSpeed = 40.8;
      GameData.tank_3_moveTurnSpeed = 37.04;
      GameData.tank_4_moveTurnSpeed = 22.32;
      GameData.tank_5_moveTurnSpeed = 30.49;
      GameData.tank_1_attackTurnSpeed = 40;
      GameData.tank_2_attackTurnSpeed = 45.7;
      GameData.tank_3_attackTurnSpeed = 35;
      GameData.tank_4_attackTurnSpeed = 36;
      GameData.tank_5_attackTurnSpeed = 26;
      GameData.tank_1_gunAngleLimit = [-14, 5];
      GameData.tank_2_gunAngleLimit = [-60, 12];
      GameData.tank_3_gunAngleLimit = [-20, 10];
      GameData.tank_4_gunAngleLimit = [-20, 9];
      GameData.tank_5_gunAngleLimit = [-20, 10];
      GameData.tank_1_atk = [420, 420];
      GameData.tank_2_atk = [100, 100];
      GameData.tank_3_atk = [370, 370];
      GameData.tank_4_atk = [600, 600];
      GameData.tank_5_atk = [600, 600];
      GameData.tank_1_atkInterval = 5;
      GameData.tank_2_atkInterval = 0.5;
      GameData.tank_3_atkInterval = 4;
      GameData.tank_4_atkInterval = 6;
      GameData.tank_5_atkInterval = 5;
      GameData.tank_1_atkRange = 500;
      GameData.tank_2_atkRange = 500;
      GameData.tank_3_atkRange = 500;
      GameData.tank_4_atkRange = 500;
      GameData.tank_5_atkRange = 500;
      GameData.skill_1_speedAxis = 2;
      GameData.skill_1_time = 10;
      GameData.skill_1_cd = 20;
      GameData.skill_1_distanceSqr = 25;
      GameData.skill_1_damage = 4000;
      GameData.skill_1_heal = 4000;
      GameData.skill_2_cd = 1;
      GameData.skill_2_damageAxis = 2;
      GameData.skill_3_cd = 20;
      GameData.skill_3_time = 10;
      GameData.skill_3_speedAxis = 1.5;
      GameData.skill_3_damageAxis = 2;
      GameData.skill_4_cd = 20;
      GameData.skill_4_damage = 3500;
      GameData.skill_4_rangeSqr = 225;
      GameData.skill_4_time = 10;
      GameData.skill_4_defendAxis = 0.75;
      GameData.skill_5_cd = 20;
      GameData.skill_5_damage = 4000;
      GameData.skill_5_rangeSqr = 100;
      GameData.skill_5_speedAxis = 2;
      GameData.skill_5_time = 10;
      GameData.attackBuff_Time = 10;
      GameData.attackBuff_addAxis = 0.1;
      GameData.attackBuff_maxAxis = 0.5;
      GameData.tankNames = ["T-90", "布雷德利装甲车", "豹2A7", "XM1A3", "挑战者Ⅱ"];
      GameData.nowChooseTankIndex = 0;
      GameData.tankUnlockData = [new TankUnlockData("null", 0), new TankUnlockData("money", 50000), new TankUnlockData("sign", 0), new TankUnlockData("gold", 300), new TankUnlockData("gold", 500)];
      GameData.partCostAxis = [1.12, //炮塔
      1.16, //主炮
      1.13, //装甲
      1.14, //引擎
      1.11, //履带
      1.25 //操作系统
      ];
      GameData.techUpgradeCostType = ["money", "money", "money", "money", "money", "gold"];
      GameData.techUpgradeCostCount = [20000, 20000, 30000, 50000, 50000, 1000];
      GameData.paintBuyLastTime = [1800000, //30分钟
      21600000, //6小时
      86400000, //24小时
      86400000, //24小时
      172800000, //48小时
      172800000 //48小时
      ];
      GameData.paintGoldCost = [5, 25, 40, 40, 60, 60];
      GameData.playerGameTankData = [];
      GameData.aiGameTankData = [];

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLoadingUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts', './AssetMgr.ts', './StorageMgr.ts', './UMTrack.ts', './Bar.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, director, Component, GameData, AssetMgr, StorageMgr, UMTrack, Bar;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      AssetMgr = module.AssetMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Bar = module.Bar;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4c10eaedJhNG6jgnnJGLij7", "GameLoadingUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameLoadingUI = exports('GameLoadingUI', (_dec = ccclass('GameLoadingUI'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameLoadingUI, _Component);

        function GameLoadingUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.timeLabel = null;
          _this.icons1 = void 0;
          _this.icons2 = void 0;
          _this.bars = [];
          _this.winTargetLabel = void 0;
          _this.searchPlayer = void 0;
          _this.maybeTimeLabel = void 0;
          _this.timeCount = 0;
          _this.isStartLoadScene = false;
          _this.nowValue = 0;
          return _this;
        }

        var _proto = GameLoadingUI.prototype;

        _proto.onLoad = function onLoad() {
          this.maybeTimeLabel = this.node.getChildByPath("title_2/roundTime/label").getComponent(Label);
          this.timeLabel = this.node.getChildByPath("searchPlayer/label").getComponent(Label);
          this.icons1 = this.node.getChildByPath("title_2/icons_1");
          this.icons2 = this.node.getChildByPath("title_2/icons_2");
          this.bars = this.node.getChildByName("title_2").getComponentsInChildren(Bar);
          this.winTargetLabel = this.node.getChildByName("title_1").getComponentInChildren(Label);
          this.searchPlayer = this.node.getChildByName("searchPlayer");
        };

        _proto.onEnable = function onEnable() {
          console.log("打开GameLoading");
        };

        _proto.onDisabel = function onDisabel() {
          console.log("关闭GameLoading");
        };

        _proto.start = function start() {
          var _this2 = this;

          this.timeLabel.string = this.timeCount.toString() + " 秒";
          this.schedule(function () {
            _this2.timeCount++;
            _this2.timeLabel.string = _this2.timeCount.toString() + " 秒";
          }, 1);

          if (StorageMgr.instance.storageData.playCount == 0) {
            this.winTargetLabel.string = "完成新手教程";
            this.searchPlayer.active = false;
            this.node.getChildByPath("title_2/roundTime").active = false;
            var tips = this.node.getChildByName("Tips_2");
            var tips_label1 = tips.children[0].getComponent(Label);
            var tips_label2 = tips.children[1].getComponent(Label);
            tips_label1.string = "新兵训练营";
            tips_label2.string = "完成新手教程";
          } else {
            switch (GameData.startGameMode) {
              case "team":
                this.winTargetLabel.string = "率先击杀" + GameData.teamKillWinScore.toString() + "名敌人";
                this.maybeTimeLabel.string = "7 min";
                break;

              case "single":
                this.winTargetLabel.string = "在5分钟内尽可能的击杀敌人";
                this.maybeTimeLabel.string = "5 min";
                break;
            }
          }
        };

        _proto.update = function update() {
          if (this.isStartLoadScene) return;
          var progress = 0;

          if (AssetMgr.instance.isMap2_VilliageMap_Loaded) {
            progress += 0.25;
          }

          if (AssetMgr.instance.isSoundBundle) {
            progress += 0.25;
          }

          if (AssetMgr.instance.isStageBundle) {
            progress += 0.25;
          } // console.log(AssetMgr.instance.isMap2_VilliageMap_Loaded, AssetMgr.instance.isSoundBundle, AssetMgr.instance.isStageBundle);


          if (progress >= 0.75) {
            console.log("开始加载场景");
            this.isStartLoadScene = true;
            var self = this;
            director.preloadScene("Stage", function (complete, total) {
              self.updateProgress(progress + 0.25 * (complete / total));
            }, function () {
              director.loadScene("Stage");
            });
          }
        };

        _proto.startGameLoading = function startGameLoading() {
          UMTrack.instance.trackEvent("Match_in");
          console.log("开始游戏加载");
          AssetMgr.instance.map2_Load();
        };

        _proto.updateProgress = function updateProgress(value) {
          var add = 0.008; //1/120

          if (value > this.nowValue + add) {
            this.nowValue += add;
          } else {
            this.nowValue = value;
          } //恐龙ICON激活


          var index = Math.floor(this.nowValue / 0.15); //0.15*6 = 0.9

          for (var i = 0; i < this.icons1.children.length; i++) {
            this.icons1.children[i].active = i >= index && i < index + 6;
            this.icons2.children[i].active = i >= index && i < index + 6;
          } //进度条


          for (var _i = 0; _i < this.bars.length; _i++) {
            this.bars[_i].value = this.nowValue;
          }
        };

        return GameLoadingUI;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NavMeshData.ts', './NavMeshMgr.ts', './PlayerCtr.ts', './Hero.ts', './Tower.ts', './DataClass.ts', './EnumTypes.ts', './GameData.ts', './UMTrack.ts', './Tool.ts', './EndUI.ts', './HpBar.ts', './AssetMgr.ts', './EventMgr.ts', './SoundMgr.ts', './StorageMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, find, instantiate, Vec3, Animation, Label, game, Component, nav_map_config_small, NavMeshMgr, PlayerCtr, Hero, Tower, TopState_PeopleCount, TopState_Score, CampType, EventType, SoundType, TeachStepType, GameData, UMTrack, Tool, EndUI, HpBar, AssetMgr, EventMgr, SoundMgr, StorageMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      find = module.find;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Animation = module.Animation;
      Label = module.Label;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      nav_map_config_small = module.nav_map_config_small;
    }, function (module) {
      NavMeshMgr = module.NavMeshMgr;
    }, function (module) {
      PlayerCtr = module.PlayerCtr;
    }, function (module) {
      Hero = module.Hero;
    }, function (module) {
      Tower = module.Tower;
    }, function (module) {
      TopState_PeopleCount = module.TopState_PeopleCount;
      TopState_Score = module.TopState_Score;
    }, function (module) {
      CampType = module.CampType;
      EventType = module.EventType;
      SoundType = module.SoundType;
      TeachStepType = module.TeachStepType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      EndUI = module.EndUI;
    }, function (module) {
      HpBar = module.HpBar;
    }, function (module) {
      AssetMgr = module.AssetMgr;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }, function (module) {
      StorageMgr = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "52bf7hYAZxA4JvqhpmN5TL4", "GameMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameMgr = exports('GameMgr', (_dec = ccclass('GameMgr'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameMgr, _Component);

        function GameMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.mainScene = void 0;
          _this.navMeshMgr = void 0;
          _this.heroNode = void 0;
          _this.heros = void 0;
          _this.hpBars = void 0;
          _this.sceneNode = void 0;
          _this.towers = void 0;
          _this.playerCtr = void 0;
          _this.playerHero = void 0;
          _this.heroPrefabs = void 0;
          _this.tankDes = void 0;
          _this.gameUI = void 0;
          _this.endUI = void 0;
          _this.selectUI = void 0;
          _this.tower_Small_UIs = void 0;
          _this.backChooseBtn = void 0;
          _this.PlayFeedback = void 0;
          _this.canvas = void 0;
          _this.playerHeroDieCount = 0;
          _this.isEnd = false;
          _this.roundStartTime = 0;
          _this.checkIndex = 0;
          _this.nowAimTarget = null;
          _this.playerKillCount = 0;
          _this.enemyKillCount = 0;
          _this.playerHeroKillCount = 0;
          _this.playerHeroSupportCount = 0;
          _this.totalDmg = 0;
          _this.teach1 = void 0;
          _this.teachTipsAnim = void 0;
          _this.teachTipsLabel = void 0;
          _this.teachMovePoint = void 0;
          _this.teachAnim = void 0;
          _this.teachHand = void 0;
          return _this;
        }

        var _proto = GameMgr.prototype; // #endregion
        // #region 初始化和主要游戏流程点

        _proto.onLoad = function onLoad() {
          var canvas = find("Canvas");
          canvas.active = true;
          this.canvas = canvas;
          this.gameUI = canvas.getChildByName("GameUI");
          this.endUI = canvas.getChildByName("EndUI");
          this.selectUI = canvas.getChildByName("SelectUI");
          this.backChooseBtn = this.gameUI.getChildByName("BackChooseBtn");
          this.gameUI.active = true;
          this.endUI.active = false;
          this.selectUI.active = true;
          if (SoundMgr.instacne) SoundMgr.instacne.initMoveSound();
        };

        _proto.start = function start() {
          var _this2 = this;

          console.log("游戏开始", GameData.startGameMode); //是否是教学关

          var isTeach = StorageMgr.instance.storageData.playCount == 0;
          console.log("主场景获取");
          this.mainScene = this.node.parent;
          console.log("地图加载");
          var map = instantiate(AssetMgr.instance.mapPrefab);
          this.mainScene.addChild(map);
          console.log("导航网格初始化");
          this.navMeshMgr = NavMeshMgr.instance;
          this.navMeshMgr.init(AssetMgr.instance.mapData, nav_map_config_small);
          console.log("AICheckPoint获取");
          GameData.checkPoint = map.getChildByName("CheckPoint");
          console.log("数值初始化");
          GameData.playerScore = 0;
          GameData.enemyScore = 0;
          console.log("玩家单位获取");
          this.heroNode = this.mainScene.getChildByName("HeroNode");
          this.playerCtr = this.heroNode.getChildByName("Player").getComponent(PlayerCtr);
          this.playerHero = this.playerCtr.getComponent(Hero);
          GameData.player = this.playerHero;
          console.log("hero位置初始化");
          var npc = this.heroNode.getChildByName("Npc1");
          var enemy = this.heroNode.getChildByName("Enemy1");

          if (StorageMgr.instance.storageData.playCount > 0) {
            //玩家初始化先关闭摄像机(暂时打开)
            this.playerHero.node.active = true;
            map.getChildByName("teachPoint").active = false;

            switch (GameData.startGameMode) {
              case "team":
                //正常游戏位置
                var bornPoint = map.getChildByName("BornPoint");
                this.playerHero.node.setWorldPosition(bornPoint.getChildByName("player").getWorldPosition());
                npc.setWorldPosition(bornPoint.getChildByName("npc").getWorldPosition());
                enemy.setWorldPosition(bornPoint.getChildByName("enemy").getWorldPosition()); //AI生成

                for (var i = 0; i < 3; i++) {
                  var npc1 = instantiate(npc);
                  npc1.name = "Npc" + (i + 2).toString();
                  this.heroNode.addChild(npc1);
                  npc1.setWorldPosition(npc.getWorldPosition());
                }

                for (var _i = 0; _i < 4; _i++) {
                  var _npc = instantiate(enemy);

                  _npc.name = "Enemy" + (_i + 2).toString();
                  this.heroNode.addChild(_npc);

                  _npc.setWorldPosition(enemy.getWorldPosition());
                }

                this.heros = this.heroNode.getComponentsInChildren(Hero);
                break;

              case "single":
                //初始设定8个Hero
                this.heros = [];
                var checkPoint = map.getChildByName("SingleBornPoint"); //有15个点

                GameData.singleBornPoint = checkPoint;
                var indexArray = [];

                for (var _i2 = 0; _i2 < checkPoint.children.length; _i2++) {
                  indexArray.push(_i2);
                }

                var pos = checkPoint.children[Tool.takeRandomInArray(indexArray)].getWorldPosition(); // let pos = checkPoint.children[0].getWorldPosition();

                this.playerHero.node.setWorldPosition(pos);
                this.heros.push(this.playerHero);
                npc.destroy();
                pos = checkPoint.children[Tool.takeRandomInArray(indexArray)].getWorldPosition();
                enemy.setWorldPosition(pos);
                this.heros.push(enemy.getComponent(Hero));

                for (var _i3 = 0; _i3 < 6; _i3++) {
                  var _npc2 = instantiate(enemy);

                  _npc2.name = "Enemy" + (_i3 + 2).toString();
                  this.heroNode.addChild(_npc2);
                  pos = checkPoint.children[Tool.takeRandomInArray(indexArray)].getWorldPosition();

                  _npc2.setWorldPosition(pos);

                  this.heros.push(_npc2.getComponent(Hero));
                }

                break;
            }
          } else {
            //玩家初始化先关闭摄像机
            this.playerHero.node.active = false; //教学模式位置

            var _bornPoint = map.getChildByName("teachPoint");

            this.playerHero.node.setWorldPosition(_bornPoint.getChildByName("player").getWorldPosition());
            npc.setWorldPosition(_bornPoint.getChildByName("npc").getWorldPosition());
            enemy.setWorldPosition(_bornPoint.getChildByName("enemy1").getWorldPosition()); //AI生成

            var _npc3 = instantiate(enemy);

            _npc3.name = "Enemy2";
            this.heroNode.addChild(_npc3);

            _npc3.setWorldPosition(_bornPoint.getChildByName("enemy2").getWorldPosition());

            this.teachMovePoint = _bornPoint.getChildByName("movePoint");
            this.heros = this.heroNode.getComponentsInChildren(Hero);
          }

          GameData.heros = this.heros; //无需克隆（本来就是一个引用）

          console.log("获取阵营与AI分类");
          var enmeys = [];
          var players = [];
          var allAIs = [];

          for (var _i4 = 0; _i4 < this.heros.length; _i4++) {
            if (this.heros[_i4].camp == CampType.Player) {
              if (!this.heros[_i4].isPlayerCtrl) {
                allAIs.push(this.heros[_i4]);
              }

              players.push(this.heros[_i4]);
            } else if (this.heros[_i4].camp == CampType.Enemy) {
              enmeys.push(this.heros[_i4]);
              allAIs.push(this.heros[_i4]);
            }
          }

          GameData.players = players; //无需克隆（本来就是一个引用）

          GameData.enemies = enmeys; //无需克隆（本来就是一个引用）

          GameData.ais = allAIs; //无需克隆（本来就是一个引用）
          //UI初始化

          var canvas = find("Canvas");
          console.log("血条UI获取");
          this.hpBars = canvas.getChildByPath("GameUI/HpBars");
          var hpBar_prefab = this.hpBars.children[0]; //根据hero数量生成对应的血条UI

          for (var _i5 = 1; _i5 < this.heros.length; _i5++) {
            var bar = instantiate(hpBar_prefab);
            this.hpBars.addChild(bar);
            bar.setPosition(new Vec3(-200, 500, 0));
          }

          console.log("在各路径点生成道具"); //TODO 重构各路径点生成道具
          //选择事件绑定

          EventMgr.on(EventType.Game_Player_Select, this, this.startGame); //玩家死亡事件绑定

          EventMgr.on(EventType.Game_Player_Dead, this, this.playerDie); //击杀记录事件绑定

          EventMgr.on(EventType.Game_HeroDie_Event, this, this.updateKill); //伤害记录事件绑定

          EventMgr.on(EventType.Game_Player_Atk, this, this.damageCount); //按钮绑定

          Tool.d2_AddClickEvent(this.backChooseBtn, this, function () {
            GameData.player.die(null);

            _this2.addKillCount(CampType.Player);

            _this2.playerDie(false);
          });
          EventMgr.on(EventType.Game_Aim_Target_Update, this, this.aimTargetUpdate); //教程初始化绑定

          this.teachInit();
          SoundMgr.instacne.playMusic(SoundType.BattlegroundBGM); //坦克摧毁动画节点获取

          this.tankDes = this.mainScene.getChildByName("TankDes"); //坦克摧毁动画事件绑定

          EventMgr.on(EventType.Game_Tank_Die, this, this.tankDestroyBorn);
        };

        _proto.startGame = function startGame(e) {
          var _this3 = this;

          EventMgr.off(EventType.Game_Player_Select, this, this.startGame);
          this.playerHero.node.active = true;
          this.scheduleOnce(function () {
            _this3.selectUI.active = false;
          });
          this.playerHero.camInit(); //加载恐龙并生成

          var bornIndex = 0;
          var heroPrefabNode = this.mainScene.getChildByName("Tank");
          this.heroPrefabs = heroPrefabNode.children; //玩家龙

          var playerTankDataId = e;
          this.playerHero.modelInit(GameData.playerGameTankData[playerTankDataId], this.hpBars.children[bornIndex].getComponent(HpBar), heroPrefabNode.children);
          bornIndex++;
          console.log("恐龙" + (playerTankDataId + 1) + "生成：", bornIndex); //ai龙

          var array = GameData.aiGameTankData;

          for (var i = 0; i < GameData.ais.length; i++) {
            var enmeyTankData = Tool.getRandomInArray(array);
            GameData.ais[i].modelInit(enmeyTankData, this.hpBars.children[bornIndex].getComponent(HpBar), heroPrefabNode.children);
            bornIndex++;
          } //玩家控制开始


          this.playerCtr.controlOn(); // if (SoundMgr.instacne)
          //     SoundMgr.instacne.setMuiscVolume(0.5);

          if (StorageMgr.instance.storageData.playCount != 0) {
            UMTrack.instance.trackEvent("Game_Start");
            this.roundStartTime = new Date().getTime();
          }

          if (GameData.startGameMode == "single") {
            EventMgr.event(EventType.Game_Single_StartTime);
            this.scheduleOnce(function () {
              _this3.gameOver(true);
            }, GameData.singleTime);
          }
        };

        _proto.reBornPlayer = function reBornPlayer(e) {
          EventMgr.off(EventType.Game_Player_Select, this, this.reBornPlayer);
          var playerDinasorType = GameData.playerGameTankData[e];
          this.selectUI.active = false;
          this.playerHero.reBorn(playerDinasorType);
          this.playerCtr.controlOn(); // if (SoundMgr.instacne)
          //     SoundMgr.instacne.setMuiscVolume(0.5);
        };

        _proto.playerDie = function playerDie(isPlaySound) {
          this.playerHeroDieCount++;
          this.playerCtr.controlOff();
          if (!this.isEnd) this.selectUI.active = true;
          EventMgr.on(EventType.Game_Player_Select, this, this.reBornPlayer);
          SoundMgr.instacne.playSound(Tool.halfPercent() ? SoundType.V_PlayerDie1 : SoundType.V_PlayerDie2); // if (SoundMgr.instacne)
          //     SoundMgr.instacne.setMuiscVolume(1);
        } //游戏结束
        ;

        _proto.gameOver = function gameOver(isWin) {
          var _this4 = this;

          if (this.isEnd) return; //倒计时关闭

          GameData.isPlayingCountDown = false;

          if (StorageMgr.instance.storageData.playCount != 0) {
            UMTrack.instance.trackEvent("Game_Finish");
            var time = Math.floor((new Date().getTime() - this.roundStartTime) / 1000);
            UMTrack.instance.trackEvent("Game_Time", time.toString());
          } else {
            UMTrack.instance.trackEvent("Teach_Finish_All");
          }

          this.isEnd = true;
          this.gameUI.parent.getChildByName("TopState").active = false;
          this.scheduleOnce(function () {
            _this4.playerCtr.controlOff();
          }, 2);
          GameData.isWin = isWin; //结束UI处理

          this.endUI.active = true;
          this.endUI.getComponent(EndUI).dataUpdate(this.playerHeroKillCount, this.playerHeroSupportCount, this.playerHeroDieCount, this.totalDmg); //增加游玩次数

          StorageMgr.instance.addPlayCount(); //结束音效

          SoundMgr.instacne.playSound(SoundType.GameFinish);
          GameData.aiMove = false;
          GameData.aiAttack = false;
          GameData.aiSkill = false;
          GameData.aiEmoji = false;
        } //#endregion
        // #region update
        ;

        _proto.update = function update(dt) {
          this.AISightUpdate();
          this.checkAlive();
        };

        _proto.lateUpdate = function lateUpdate(dt) {
          if (GameData.teachStep < TeachStepType.aimTeach1) return;
          var aimUI = this.gameUI.getChildByName("Aim");

          if (GameData.player && GameData.player.gunHitPoint && GameData.cam) {
            var pos = new Vec3();
            var uiPos = GameData.cam.convertToUINode(GameData.player.gunHitPoint, this.gameUI, pos);
            aimUI.active = true;
            aimUI.setPosition(uiPos);
          } else {
            aimUI.active = false;
          }
        } // #endregion
        // #region 游戏逻辑类
        //AI的视野检测（一帧update一个AI）
        ;

        _proto.AISightUpdate = function AISightUpdate() {
          this.heros[this.checkIndex].checkUpdate();
          this.checkIndex++;

          if (this.checkIndex >= this.heros.length) {
            this.checkIndex = 0;
          }
        } //检测现在存活人数（每帧都检查一次)
        //TODO(其实可以优化成有变动才Update)
        ;

        _proto.checkAlive = function checkAlive() {
          var playerAlives = 0;
          var enmeyAlives = 0;

          for (var i = 0; i < GameData.players.length; i++) {
            if (!GameData.players[i].isDead) {
              playerAlives++;
            }
          }

          for (var _i6 = 0; _i6 < GameData.enemies.length; _i6++) {
            if (!GameData.enemies[_i6].isDead) {
              enmeyAlives++;
            }
          }

          EventMgr.event(EventType.TopState_Alive_Update, new TopState_PeopleCount(playerAlives, enmeyAlives));
        } //检测现在的塔的状态，进行加减分（现无塔，已弃用）
        ;

        _proto.towerScoreUpdate = function towerScoreUpdate() {
          if (this.isEnd) return;

          for (var i = 0; i < GameData.towers.length; i++) {
            var comp = GameData.towers[i].getComponent(Tower);

            switch (comp.nowState) {
              case -1:
                GameData.enemyScore += GameData.tower_addScore_perSecond;
                break;

              case 1:
                GameData.playerScore += GameData.tower_addScore_perSecond;
                break;
            }
          }

          if (GameData.playerScore >= GameData.winScore) {
            GameData.playerScore = GameData.winScore;
            this.gameOver(true);
          }

          if (GameData.enemyScore >= GameData.winScore) {
            GameData.enemyScore = GameData.winScore;
            this.gameOver(false);
          }

          EventMgr.event(EventType.TopState_Score_Update, new TopState_Score(GameData.playerScore, GameData.enemyScore));
        } //生成道具
        ;

        _proto.bornItem = function bornItem() {// let randomItem = [PoolObjType.AtkUp, PoolObjType.Heal, PoolObjType.Sheild, PoolObjType.SpeedUp];
          // for (let i = 0; i < GameData.checkPoint.children.length; i++) {
          //     let point = GameData.checkPoint.children[i];
          //     if (point.children.length == 0) {
          //         let item = PoolMgr.instance.getObj(Tool.getRandomInArray(randomItem));
          //         point.addChild(item.node);
          //         item.node.setPosition(Vec3.ZERO);
          //         break;
          //     }
          // }
        };

        _proto.aimTargetUpdate = function aimTargetUpdate(target) {
          if (this.nowAimTarget == null && target == null) {
            return;
          } else if (this.nowAimTarget == null && target != null) {
            this.nowAimTarget = target;
            this.nowAimTarget.anim.changeSelectMat(true);
          } else if (this.nowAimTarget != null && target == null) {
            this.nowAimTarget.anim.changeSelectMat(false);
            this.nowAimTarget = null;
          } else {
            if (this.nowAimTarget.node.name != target.node.name) {
              this.nowAimTarget.anim.changeSelectMat(false);
              this.nowAimTarget = target;
              this.nowAimTarget.anim.changeSelectMat(true);
            }
          }
        };

        _proto.tankDestroyBorn = function tankDestroyBorn(hero) {
          Tool.unactiveAllChildren(hero.model);
          var eular = new Vec3();
          hero.cap[0].getRotation().getEulerAngles(eular);
          var angle = eular.y;
          var des = instantiate(this.tankDes.children[hero.heroType]);
          this.mainScene.addChild(des);
          var pos = hero.model.getWorldPosition();
          pos.y -= 0.25;
          des.setWorldPosition(pos);
          Tool.d3_FindNodeByName(des, "CapAnim").setRotationFromEuler(0, 180 + angle, 0);
          this.scheduleOnce(function () {
            des.destroy();
          }, 3);
        } // #endregion
        //#region 更新杀人比分
        ;

        _proto.addKillCount = function addKillCount(camp) {
          if (camp == CampType.Enemy) {
            this.playerKillCount++;

            if (GameData.teachStep == TeachStepType.fireTeach || GameData.teachStep == TeachStepType.aimTeach2) {
              this.addTeachStep();
            }
          } else if (camp == CampType.Player) {
            this.enemyKillCount++;
          }

          this.updateKillCount();
        };

        _proto.updateKillCount = function updateKillCount() {
          if (this.isEnd) return; //倘若是新手教程，则目标为1

          var winScore = GameData.teamKillWinScore;

          if (this.playerKillCount >= winScore) {
            this.playerKillCount = winScore;
            if (GameData.startGameMode == "team") this.gameOver(true);
          } else if (this.enemyKillCount >= winScore) {
            this.enemyKillCount = winScore;
            if (GameData.startGameMode == "team") this.gameOver(false);
          }

          EventMgr.event(EventType.TopState_Score_Update, new TopState_Score(this.playerKillCount, this.enemyKillCount));
        }
        /**玩家单人击杀数 */
        ;

        _proto.updateKill = function updateKill(data) {
          if (GameData.startGameMode == "team" || data.killerName == "Player") {
            this.addKillCount(data.camp);
          }

          if (data.killerName == "Player") {
            this.playerHeroKillCount++;
            EventMgr.event(EventType.Game_Player_Kill);

            if (SoundMgr.instacne) {
              // SoundMgr.instacne.playSound(Tool.halfPercent() ? SoundType.V_Kill1 : SoundType.V_Kill2);
              SoundMgr.instacne.playSound(SoundType.KillFeedback);
            }
          } else if (data.hurtHeroNames.indexOf("Player") != -1) {
            this.playerHeroSupportCount++;
            EventMgr.event(EventType.Game_Player_Support);
          } // console.log(data.killerName, "杀死了", data.deadName, "助攻人员：", data.hurtHeroNames);

        };

        _proto.damageCount = function damageCount(name, value) {
          this.totalDmg += value;
        } // #endregion
        // #region 新手教程
        ;

        _proto.teachInit = function teachInit() {
          var _this5 = this;

          if (StorageMgr.instance.storageData.playCount == 0) {
            GameData.teachStep = TeachStepType.start;
            GameData.aiMove = false;
            GameData.aiAttack = false;
            GameData.aiSkill = false;
            GameData.aiEmoji = false;
            EventMgr.on(EventType.Game_Teach_Add, this, this.addTeachStep);
            this.schedule(this.teachUpdate);
            this.teachHand = this.gameUI.getChildByName("teachHand");
            this.canvas.getChildByName("TopState").active = false;
            this.teach1 = this.canvas.getChildByName("teachBg");
            var teachTips = this.canvas.getChildByName("teachTips");
            teachTips.active = true;
            this.teachTipsAnim = teachTips.getComponent(Animation);
            this.teachTipsLabel = teachTips.getChildByName("Label").getComponent(Label);
            this.teachTipsLabel.string = "欢迎来到坦克战火，请根据指引完成新手教程";
            this.teachTipsAnim.play("teachTips_Idle"); //游戏内UI关闭

            this.gameUI.getChildByName("BackChooseBtn").active = false;
            this.gameUI.getChildByName("MiniMap").active = false;
            this.gameUI.getChildByName("JoyStick").active = false;
            this.gameUI.getChildByName("Aim").active = false;
            this.gameUI.getChildByName("SkillBtn").active = false;
            this.gameUI.getChildByName("FireBtn").active = false;
            this.gameUI.getChildByName("PlayerHpBar").active = false;
            this.gameUI.getChildByName("ItemList").active = false;
            this.gameUI.getChildByName("PlayFeedback").active = false;
            this.canvas.getChildByName("TopState").active = false;
            this.teachAnim = this.node.parent.getChildByName("TeachAnim");
            this.teachAnim.active = true;
            this.playerHero.node.active = false;
            this.gameUI.active = false;
            this.scheduleOnce(function () {
              _this5.teach1.active = true;
              Tool.d2_AddClickEvent(_this5.teach1, _this5, _this5.addTeachStep, [], false, false);
              _this5.teachAnim.active = false;
              _this5.gameUI.active = true;
              _this5.playerHero.node.active = true;
              teachTips.active = false;
            }, 7.5); //自动开炮关闭

            GameData.isAutoFire = false;
            this.startGame(0);
            UMTrack.instance.trackEvent("Teach_In");
          } else {
            this.teachAnim = this.node.parent.getChildByName("TeachAnim");
            this.teachAnim.active = false;
            GameData.teachStep = TeachStepType.end;
            GameData.aiMove = true;
            GameData.aiAttack = true;
            GameData.aiSkill = true;
            GameData.aiEmoji = false;
            this.teach1 = this.canvas.getChildByName("teachBg");
            this.teach1.active = false;

            var _teachTips = this.canvas.getChildByName("teachTips");

            _teachTips.active = false; //默认自动开炮

            GameData.isAutoFire = true;
          }
        };

        _proto.teachUpdate = function teachUpdate() {
          var dt = game.deltaTime;

          switch (GameData.teachStep) {
            case TeachStepType.moveTeach:
              var dis = Vec3.distance(GameData.player.node.getWorldPosition(), this.teachMovePoint.getWorldPosition());

              if (dis < 5) {
                this.addTeachStep();
              }

              break;
          }
        };

        _proto.addTeachStep = function addTeachStep() {
          GameData.teachStep++;
          var pos;

          switch (GameData.teachStep) {
            case TeachStepType.moveTeach:
              var teachTips = this.canvas.getChildByName("teachTips");
              teachTips.active = true;
              this.teach1.active = false;
              this.teachTipsLabel.string = "请向目的地移动!";
              this.teachTipsAnim.play("teachTips_Idle");
              pos = this.gameUI.getChildByName("JoyStick").getWorldPosition();
              pos.y += 250;
              this.teachHand.setWorldPosition(pos);
              this.gameUI.getChildByName("JoyStick").active = true;
              break;

            case TeachStepType.moveTeachSuccess:
              this.teachTipsAnim.play("teachTips_right");
              this.teachTipsLabel.string = "很好！";
              this.teachMovePoint.active = false;
              this.gameUI.getChildByName("JoyStick").active = false;
              GameData.player.moveCtrl_forPlayer([0, 0]);
              this.scheduleOnce(this.addTeachStep, 1.5);
              this.teachHand.active = false;
              break;

            case TeachStepType.fireTeach:
              pos = GameData.enemies[0].node.getWorldPosition();
              pos.x = GameData.player.node.getWorldPosition().x;
              GameData.enemies[0].moveToTaregtPos_AI(pos);
              this.teachTipsAnim.play("teachTips_Idle");
              this.teachTipsLabel.string = "点击开火按钮，摧毁敌人坦克";
              this.gameUI.getChildByName("PlayFeedback").active = true;
              this.gameUI.getChildByName("Aim").active = true;
              this.gameUI.getChildByName("FireBtn").active = true;
              pos = this.gameUI.getChildByName("FireBtn").getWorldPosition();
              pos.y += 100;
              this.teachHand.setWorldPosition(pos);
              this.teachHand.active = true;
              break;

            case TeachStepType.fireTeachSuccess:
              this.teachTipsAnim.play("teachTips_right");
              this.teachTipsLabel.string = "干的不错！";
              this.scheduleOnce(this.addTeachStep, 1.5);
              this.teachHand.active = false;
              break;

            case TeachStepType.aimTeach1:
              pos = GameData.enemies[1].node.getWorldPosition();
              pos.x = GameData.player.node.getWorldPosition().x;
              GameData.enemies[1].moveToTaregtPos_AI(pos);
              this.teachTipsAnim.play("teachTips_Idle");
              this.teachTipsLabel.string = "点击瞄准按钮，瞄准远处敌人坦克";
              this.gameUI.getChildByName("SkillBtn").active = true;
              this.gameUI.getChildByName("FireBtn").active = false;
              pos = this.gameUI.getChildByName("SkillBtn").getWorldPosition();
              pos.y += 100;
              this.teachHand.setWorldPosition(pos);
              EventMgr.on(EventType.Game_Skill2_Aim_Open, this, this.addTeachStep);
              this.teachHand.active = true;
              break;

            case TeachStepType.aimTeach2:
              EventMgr.off(EventType.Game_Skill2_Aim_Open, this, this.addTeachStep);
              this.teachTipsLabel.string = "点击开火按钮，摧毁敌人坦克";
              this.gameUI.getChildByName("SkillBtn").active = false;
              this.gameUI.getChildByName("FireBtn").active = true;
              pos = this.gameUI.getChildByName("FireBtn").getWorldPosition();
              pos.y += 100;
              this.teachHand.setWorldPosition(pos);
              this.teachHand.active = true;
              break;

            case TeachStepType.aimTeachSuccess:
              this.teachTipsAnim.play("teachTips_right");
              this.teachTipsLabel.string = "完美！";
              this.scheduleOnce(this.addTeachStep, 1.5);
              this.teachHand.active = false;
              break;

            case TeachStepType.end:
              this.teachTipsLabel.node.parent.active = false;
              EventMgr.off(EventType.Game_Teach_Add, this, this.addTeachStep);
              this.gameOver(true);
              break;

            default:
              console.warn("未知步骤", GameData.teachStep);
              break;
          }

          if (GameData.teachStep != TeachStepType.end) {
            //教学步骤事件传输
            UMTrack.instance.trackEvent("Teach_Finish_" + GameData.teachStep.toString());
          }
        } // #endregion
        ;

        return GameMgr;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GoldComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, EventType, EventMgr, StorageMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2b527+fZ0VKM76ei3B999gR", "GoldComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GoldComp = exports('GoldComp', (_dec = ccclass('GoldComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GoldComp, _Component);

        function GoldComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = void 0;
          return _this;
        }

        var _proto = GoldComp.prototype;

        _proto.onLoad = function onLoad() {
          this.label = this.node.getChildByName("Label").getComponent(Label);
        };

        _proto.onEnable = function onEnable() {
          this.updateGold();
          EventMgr.on(EventType.Data_Gold_Update, this, this.updateGold);
        };

        _proto.onDisable = function onDisable() {
          EventMgr.off(EventType.Data_Gold_Update, this, this.updateGold);
        };

        _proto.updateGold = function updateGold() {
          this.label.string = StorageMgr.instance.storageData.gold.toString();
        };

        return GoldComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GridUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomAdMgr.ts', './JJMgr.ts', './JJWxTrap.ts', './WxPlatform.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, CustomAdMgr, JJMgr, JJWxTrap, WxPlatform, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CustomAdMgr = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatform = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0dfda1dSlxH5KlORPyKdl2Q", "GridUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GridUI = exports('default', (_dec = ccclass('GridUI'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GridUI, _Component);

        function GridUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ccb = null;
          _this.hadClick = false;
          _this.isShowHide = false;
          return _this;
        }

        var _proto = GridUI.prototype;

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.ccb && this.ccb();
        };

        _proto.showUI = function showUI(ccb, isInterAd, isMoreGame) {
          if (isInterAd === void 0) {
            isInterAd = false;
          }

          if (isMoreGame === void 0) {
            isMoreGame = false;
          }

          this.ccb = ccb; // // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
          // //     this.ccb && this.ccb()
          // //     return
          // // }

          if (!isMoreGame) {
            if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_all_gezi_switch) {
              this.ccb && this.ccb();
              return;
            }
          }

          CustomAdMgr.instance.showGrid();

          if (isInterAd && JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_wx_chaping_switch) {
            WxPlatform.instance.showInterAd();
          }

          this.node.active = true;
          this.hadClick = false;
          this.isShowHide = false;
          this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_youxi;
          if (JJMgr.instance.dataConfig.is_allow_area && JJWxTrap.Instance.allowScene() && this.isShowHide) WxPlatformBannerAd.Instance.showHideBanner();
        };

        _proto.continueBtnCB = function continueBtnCB() {
          if (JJWxTrap.Instance.NewWuchu && this.isShowHide && !this.hadClick) {
            this.hadClick = true;
            return;
          }

          WxPlatformBannerAd.Instance.clearShowHideBanner();
          CustomAdMgr.instance.hideGrid();
          this.node.active = false;
        } // // update (dt) {}
        ;

        return GridUI;
      }(Component)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import CustomAdMgr from "../CustomAdMgr";
      // import JJMgr from "../JJMgr";
      // import JJWxTrap from "../JJWxTrap";
      // import WxPlatform from "../WxPlatform";
      // import WxPlatformBannerAd from "../WxPlatformBannerAd";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class GridUI extends cc.Component {
      // 
      //     ccb: Function = null
      //     hadClick: boolean = false
      //     isShowHide: boolean = false
      // 
      //     protected onDisable(): void {
      //         this.unscheduleAllCallbacks()
      //         this.ccb && this.ccb()
      //     }
      // 
      //     showUI(ccb: Function, isInterAd: boolean = false, isMoreGame: boolean = false) {
      //         this.ccb = ccb
      //         // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
      //         //     this.ccb && this.ccb()
      //         //     return
      //         // }
      //         if (!isMoreGame) {
      //             if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_all_gezi_switch) {
      //                 this.ccb && this.ccb()
      //                 return
      //             }
      //         }
      //         CustomAdMgr.instance.showGrid()
      //         if (isInterAd && JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_wx_chaping_switch) {
      //             WxPlatform.instance.showInterAd()
      //         }
      // 
      //         this.node.active = true
      // 
      //         this.hadClick = false
      //         this.isShowHide = false
      //         this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_youxi
      //         if (JJMgr.instance.dataConfig.is_allow_area && JJWxTrap.Instance.allowScene() && this.isShowHide)
      //             WxPlatformBannerAd.Instance.showHideBanner()
      //     }
      // 
      //     continueBtnCB() {
      //         if (JJWxTrap.Instance.NewWuchu && this.isShowHide && !this.hadClick) {
      //             this.hadClick = true
      //             return
      //         }
      //         WxPlatformBannerAd.Instance.clearShowHideBanner()
      //         CustomAdMgr.instance.hideGrid()
      //         this.node.active = false
      //     }
      // 
      //     // update (dt) {}
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GridUI2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomAdMgr.ts', './JJMgr.ts', './JJWxTrap.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, CustomAdMgr, JJMgr, JJWxTrap, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CustomAdMgr = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cdc62eeIYZLe5xXGUsb477K", "GridUI2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GridUI2 = exports('default', (_dec = ccclass('GridUI2'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GridUI2, _Component);

        function GridUI2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ccb = null;
          _this.hadClick = false;
          _this.isShowHide = false;
          return _this;
        }

        var _proto = GridUI2.prototype;

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.ccb && this.ccb();
        };

        _proto.showUI = function showUI(ccb, isFinishUI) {
          this.ccb = ccb; // // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
          // //     this.ccb && this.ccb()
          // //     return
          // // }

          if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_gezi_two_switch) {
            this.ccb && this.ccb();
            return;
          }

          CustomAdMgr.instance.showGrid();
          this.node.active = true;
          this.hadClick = false;
          this.isShowHide = false;
          this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_tuijian;
          if (JJMgr.instance.dataConfig.is_allow_area && JJWxTrap.Instance.allowScene() && this.isShowHide) WxPlatformBannerAd.Instance.showHideBanner();
        };

        _proto.continueBtnCB = function continueBtnCB() {
          if (JJWxTrap.Instance.NewWuchu && this.isShowHide && !this.hadClick) {
            this.hadClick = true;
            return;
          }

          WxPlatformBannerAd.Instance.clearShowHideBanner();
          CustomAdMgr.instance.hideGrid();
          this.node.active = false;
        };

        _proto.adBtnCB = function adBtnCB() {
          this.continueBtnCB();
        } // // update (dt) {}
        ;

        return GridUI2;
      }(Component)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import CustomAdMgr from "../CustomAdMgr";
      // import JJMgr from "../JJMgr";
      // import JJWxTrap from "../JJWxTrap";
      // import WxPlatformBannerAd from "../WxPlatformBannerAd";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class GridUI2 extends cc.Component {
      // 
      //     ccb: Function = null
      //     hadClick: boolean = false
      //     isShowHide: boolean = false
      // 
      //     protected onDisable(): void {
      //         this.unscheduleAllCallbacks()
      //         this.ccb && this.ccb()
      //     }
      // 
      //     showUI(ccb: Function, isFinishUI: boolean = false) {
      //         this.ccb = ccb
      //         // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
      //         //     this.ccb && this.ccb()
      //         //     return
      //         // }
      //         if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_gezi_two_switch) {
      //             this.ccb && this.ccb()
      //             return
      //         }
      // 
      //         CustomAdMgr.instance.showGrid()
      // 
      //         this.node.active = true
      // 
      //         this.hadClick = false
      //         this.isShowHide = false
      //         this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_tuijian
      //         if (JJMgr.instance.dataConfig.is_allow_area && JJWxTrap.Instance.allowScene() && this.isShowHide)
      //             WxPlatformBannerAd.Instance.showHideBanner()
      //     }
      // 
      //     continueBtnCB() {
      //         if (JJWxTrap.Instance.NewWuchu && this.isShowHide && !this.hadClick) {
      //             this.hadClick = true
      //             return
      //         }
      //         WxPlatformBannerAd.Instance.clearShowHideBanner()
      //         CustomAdMgr.instance.hideGrid()
      //         this.node.active = false
      //     }
      //     adBtnCB() {
      //         this.continueBtnCB()
      //     }
      // 
      //     // update (dt) {}
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GridUI3.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomAdMgr.ts', './JJMgr.ts', './JJWxTrap.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, CustomAdMgr, JJMgr, JJWxTrap, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CustomAdMgr = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f4d32yLQ4hFGJDz6cNmp51R", "GridUI3", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GridUI3 = exports('default', (_dec = ccclass('GridUI3'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GridUI3, _Component);

        function GridUI3() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ccb = null;
          _this.hadClick = false;
          _this.isShowHide = false;
          return _this;
        }

        var _proto = GridUI3.prototype;

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.ccb && this.ccb();
        };

        _proto.showUI = function showUI(ccb) {
          this.ccb = ccb; // // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
          // //     this.ccb && this.ccb()
          // //     return
          // // }

          if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_play_gezi_switch) {
            this.ccb && this.ccb();
            return;
          }

          CustomAdMgr.instance.showGrid();
          this.node.active = true;
          this.hadClick = false;
          this.isShowHide = false;
          this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_xiaochengxu;
          if (JJMgr.instance.dataConfig.is_allow_area && JJWxTrap.Instance.allowScene() && this.isShowHide) WxPlatformBannerAd.Instance.showHideBanner();
        };

        _proto.continueBtnCB = function continueBtnCB() {
          if (JJWxTrap.Instance.NewWuchu && this.isShowHide && !this.hadClick) {
            this.hadClick = true;
            return;
          }

          WxPlatformBannerAd.Instance.clearShowHideBanner();
          CustomAdMgr.instance.hideGrid();
          this.node.active = false;
        };

        _proto.adBtnCB = function adBtnCB() {
          this.continueBtnCB();
        } // // update (dt) {}
        ;

        return GridUI3;
      }(Component)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import CustomAdMgr from "../CustomAdMgr";
      // import JJMgr from "../JJMgr";
      // import JJWxTrap from "../JJWxTrap";
      // import WxPlatformBannerAd from "../WxPlatformBannerAd";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class GridUI3 extends cc.Component {
      // 
      //     ccb: Function = null
      //     hadClick: boolean = false
      //     isShowHide: boolean = false
      // 
      //     protected onDisable(): void {
      //         this.unscheduleAllCallbacks()
      //         this.ccb && this.ccb()
      //     }
      // 
      //     showUI(ccb: Function) {
      //         this.ccb = ccb
      //         // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
      //         //     this.ccb && this.ccb()
      //         //     return
      //         // }
      //         if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_play_gezi_switch) {
      //             this.ccb && this.ccb()
      //             return
      //         }
      //         CustomAdMgr.instance.showGrid()
      // 
      //         this.node.active = true
      // 
      //         this.hadClick = false
      //         this.isShowHide = false
      //         this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_xiaochengxu
      //         if (JJMgr.instance.dataConfig.is_allow_area && JJWxTrap.Instance.allowScene() && this.isShowHide)
      //             WxPlatformBannerAd.Instance.showHideBanner()
      //     }
      // 
      //     continueBtnCB() {
      //         if (JJWxTrap.Instance.NewWuchu && this.isShowHide && !this.hadClick) {
      //             this.hadClick = true
      //             return
      //         }
      //         WxPlatformBannerAd.Instance.clearShowHideBanner()
      //         CustomAdMgr.instance.hideGrid()
      //         this.node.active = false
      //     }
      // 
      //     adBtnCB() {
      //         this.continueBtnCB()
      //     }
      // 
      //     // update (dt) {}
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GridUI4.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomAdMgr.ts', './JJMgr.ts', './JJWxTrap.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, CustomAdMgr, JJMgr, JJWxTrap, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CustomAdMgr = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aa08aVYJXpArovnELS81Mhd", "GridUI4", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GridUI4 = exports('default', (_dec = ccclass('GridUI4'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GridUI4, _Component);

        function GridUI4() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ccb = null;
          _this.hadClick = false;
          _this.isShowHide = false;
          _this.hadShow = void 0;
          return _this;
        }

        var _proto = GridUI4.prototype;

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.ccb && this.ccb();
        };

        _proto.showUI = function showUI(ccb, isFinishUI) {
          this.ccb = ccb; // // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
          // //     this.ccb && this.ccb()
          // //     return
          // // }

          if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_gezi_two_switch) {
            this.ccb && this.ccb();
            return;
          }

          this.node.active = true;
          this.schedule(this.testGrid, 1);
          this.hadClick = false; // // this.isShowHide = false
          // // this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_tuijian
          // // if (JJWxTrap.Instance.NewWuchu2 /* && this.isShowHide */)
          // //     WxPlatformBannerAd.Instance.showHideBanner()

          WxPlatformBannerAd.Instance.showHideBanner();
        };

        _proto.testGrid = function testGrid() {
          if (CustomAdMgr.instance.gridAdArr.length > 0 && !this.hadShow) {
            this.hadShow = true;
            CustomAdMgr.instance.showGrid();
          }
        };

        _proto.continueBtnCB = function continueBtnCB() {
          if (JJWxTrap.Instance.NewWuchu
          /*  && this.isShowHide */
          && !this.hadClick) {
            this.hadClick = true;
            return;
          } // // WxPlatformBannerAd.Instance.clearShowHideBanner()


          WxPlatformBannerAd.Instance.clearShowHideBanner();
          CustomAdMgr.instance.hideGrid();
          this.unschedule(this.testGrid);
          this.node.active = false;
        };

        _proto.adBtnCB = function adBtnCB() {
          this.continueBtnCB();
        } // // update (dt) {}
        ;

        return GridUI4;
      }(Component)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import CustomAdMgr from "../CustomAdMgr";
      // import JJMgr from "../JJMgr";
      // import JJWxTrap from "../JJWxTrap";
      // import WxPlatform from "../WxPlatform";
      // import WxPlatformBannerAd from "../WxPlatformBannerAd";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class GridUI4 extends cc.Component {
      // 
      //     ccb: Function = null
      //     hadClick: boolean = false
      //     isShowHide: boolean = false
      //     hadShow: boolean;
      // 
      //     protected onDisable(): void {
      //         this.unscheduleAllCallbacks()
      //         this.ccb && this.ccb()
      //     }
      // 
      //     showUI(ccb: Function, isFinishUI: boolean = false) {
      //         this.ccb = ccb
      //         // if (CC_WECHATGAME && CustomAdMgr.instance.getIsError()) {
      //         //     this.ccb && this.ccb()
      //         //     return
      //         // }
      //         if (!JJWxTrap.Instance.NewWuchu2 || !JJMgr.instance.dataConfig.front_gezi_two_switch) {
      //             this.ccb && this.ccb()
      //             return
      //         }
      // 
      //         this.node.active = true;
      // 
      //         this.schedule(this.testGrid, 1);
      // 
      //         this.hadClick = false
      //         // this.isShowHide = false
      //         // this.isShowHide = Math.random() * 100 < JJMgr.instance.dataConfig.front_hot_tuijian
      //         // if (JJWxTrap.Instance.NewWuchu2 /* && this.isShowHide */)
      //         //     WxPlatformBannerAd.Instance.showHideBanner()
      // 
      //         WxPlatformBannerAd.Instance.showHideBanner()
      //     }
      // 
      //     testGrid(){
      //         if(CustomAdMgr.instance.gridAdArr.length > 0 && !this.hadShow){
      //             this.hadShow = true;
      //             CustomAdMgr.instance.showGrid()
      //         }
      //     }
      // 
      //     continueBtnCB() {
      //         if (JJWxTrap.Instance.NewWuchu/*  && this.isShowHide */ && !this.hadClick) {
      //             this.hadClick = true
      //             return
      //         }
      //         // WxPlatformBannerAd.Instance.clearShowHideBanner()
      //         WxPlatformBannerAd.Instance.clearShowHideBanner()
      //         CustomAdMgr.instance.hideGrid()
      //         this.unschedule(this.testGrid);
      // 
      //         this.node.active = false;
      //     }
      //     adBtnCB() {
      //         this.continueBtnCB()
      //     }
      // 
      //     // update (dt) {}
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HardLookAtHandler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Math.ts', './CameraHandler.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Vec3, Quat, Vec4_closeTo, CameraHandler;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Quat = module.Quat;
    }, function (module) {
      Vec4_closeTo = module.Vec4_closeTo;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6b941On3J1Ihqyi0Yu8PlLi", "HardLookAtHandler", undefined);

      var __worldPos = new Vec3();

      var __worldDir = new Vec3();

      var __rotation = new Quat();

      var HardLookAtHandler = exports('HardLookAtHandler', /*#__PURE__*/function (_CameraHandler) {
        _inheritsLoose(HardLookAtHandler, _CameraHandler);

        function HardLookAtHandler() {
          return _CameraHandler.apply(this, arguments) || this;
        }

        var _proto = HardLookAtHandler.prototype;

        _proto.updateCamera = function updateCamera(deltaTime) {
          var vcam = this._vcam;

          if (vcam.lookAt) {
            var hardLookat = vcam.aim.hardLookat;
            Vec3.add(__worldPos, vcam.lookAt.position, hardLookat.trackedObjectOffset);

            if (vcam.lookAt.parent) {
              __worldPos.add(vcam.lookAt.parent.worldPosition);
            }

            vcam.lookaheadPosition.set(__worldPos);
            Vec3.subtract(__worldDir, vcam.node.worldPosition, __worldPos).normalize();
            Quat.fromViewUp(__rotation, __worldDir);

            if (!Vec4_closeTo(__rotation, vcam.node.worldRotation)) {
              vcam.node.worldRotation = __rotation;
            }
          }
        };

        return HardLookAtHandler;
      }(CameraHandler));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HealEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "33d10QHUbdLxLDWMnqDRviF", "HealEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HealEffect = exports('HealEffect', (_dec = ccclass('HealEffect'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(HealEffect, _PoolComp);

        function HealEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;
          _this.anim = void 0;
          return _this;
        }

        var _proto = HealEffect.prototype;

        _proto.firstBorn = function firstBorn() {
          this.anim = this.node.getComponent(Animation);
        };

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.node.active = true;
          this.anim.play();
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        return HealEffect;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Hero_Enemy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './Hero.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, CampType, GameData, Hero;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      CampType = module.CampType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      Hero = module.Hero;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "628d9WYUBBOd6iZ3xCtmgYa", "Hero_Enemy", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Hero_Enemy = exports('default', (_dec = ccclass('Hero_Enemy'), _dec(_class = /*#__PURE__*/function (_Hero) {
        _inheritsLoose(Hero_Enemy, _Hero);

        function Hero_Enemy() {
          return _Hero.apply(this, arguments) || this;
        }

        var _proto = Hero_Enemy.prototype;

        _proto.onLoadInit = function onLoadInit() {
          var _this = this; //设定阵营


          this.camp = CampType.Enemy;
          this.isPlayerCtrl = false;
          this.scheduleOnce(function () {
            switch (GameData.startGameMode) {
              case "team":
                _this.checkInit(GameData.players, GameData.sceneObj_Mask);

                break;

              case "single":
                _this.checkInit(GameData.heros, GameData.sceneObj_Mask);

                break;
            }
          });
        };

        return Hero_Enemy;
      }(Hero)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Hero_Npc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './Hero.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, CampType, GameData, Hero;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      CampType = module.CampType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      Hero = module.Hero;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ca753IWEo5Pzrp2EeLvK6TT", "Hero_Npc", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Hero_Npc = exports('default', (_dec = ccclass('Hero_Npc'), _dec(_class = /*#__PURE__*/function (_Hero) {
        _inheritsLoose(Hero_Npc, _Hero);

        function Hero_Npc() {
          return _Hero.apply(this, arguments) || this;
        }

        var _proto = Hero_Npc.prototype;

        _proto.onLoadInit = function onLoadInit() {
          var _this = this; //设定阵营


          this.camp = CampType.Player;
          this.isPlayerCtrl = false;
          this.scheduleOnce(function () {
            _this.checkInit(GameData.enemies, GameData.sceneObj_Mask);
          });
        };

        return Hero_Npc;
      }(Hero)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Hero_Player.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './Hero.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, CampType, GameData, Hero;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      CampType = module.CampType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      Hero = module.Hero;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0e7841/VRhKPa6JilO+REtH", "Hero_Player", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Hero_Player = exports('default', (_dec = ccclass('Hero_Player'), _dec(_class = /*#__PURE__*/function (_Hero) {
        _inheritsLoose(Hero_Player, _Hero);

        function Hero_Player() {
          return _Hero.apply(this, arguments) || this;
        }

        var _proto = Hero_Player.prototype;

        _proto.onLoadInit = function onLoadInit() {
          var _this = this; //设定阵营


          this.camp = CampType.Player;
          this.isPlayerCtrl = true;
          this.scheduleOnce(function () {
            _this.checkInit(GameData.ais, GameData.sceneObj_Mask);
          });
        };

        return Hero_Player;
      }(Hero)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Hero.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NavMeshAgent.ts', './DataClass.ts', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './PoolMgr.ts', './SoundMgr.ts', './StorageMgr.ts', './Platform.ts', './Tool.ts', './Bar.ts', './MainCamera.ts', './PlayerCtr.ts', './Anim_Tank.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, Collider, Camera, Quat, instantiate, Vec3, Vec2, PhysicsSystem, lerp, game, RigidBody, find, Label, MeshRenderer, Component, NavMeshAgent, Hero_Kill_Data, EventType, HeroType, SoundType, CampType, GameData, EventMgr, PoolObjType, PoolMgr, SoundMgr, StorageMgr, Platform, Tool, Bar, MainCamera, PlayerCtr, Anim_Tank;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      Collider = module.Collider;
      Camera = module.Camera;
      Quat = module.Quat;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Vec2 = module.Vec2;
      PhysicsSystem = module.PhysicsSystem;
      lerp = module.lerp;
      game = module.game;
      RigidBody = module.RigidBody;
      find = module.find;
      Label = module.Label;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }, function (module) {
      NavMeshAgent = module.NavMeshAgent;
    }, function (module) {
      Hero_Kill_Data = module.Hero_Kill_Data;
    }, function (module) {
      EventType = module.EventType;
      HeroType = module.HeroType;
      SoundType = module.SoundType;
      CampType = module.CampType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      PoolObjType = module.PoolObjType;
      PoolMgr = module.PoolMgr;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      Bar = module.Bar;
    }, function (module) {
      MainCamera = module.MainCamera;
    }, function (module) {
      PlayerCtr = module.PlayerCtr;
    }, function (module) {
      Anim_Tank = module.Anim_Tank;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cb4309+5NFPKKHyuoHnPhmO", "Hero", undefined);

      var ccclass = _decorator.ccclass;
      var Ray = geometry.Ray;
      var Hero = exports('Hero', (_dec = ccclass('Hero'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Hero, _Component);

        function Hero() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.camYAxis = void 0;
          _this.camXAxis = void 0;
          _this.cam = void 0;
          _this.camRayNode = void 0;
          _this.colliders = void 0;
          _this.buffShow = void 0;
          _this.faceShow = void 0;
          _this.camp = CampType.Player;
          _this.aimMask = GameData.enemy_mask;
          _this.bornPos = null;
          _this.moveFx = void 0;
          _this.idleFx = void 0;
          _this.model = void 0;
          _this.modelPrefab = [];
          _this.heroType = HeroType.Tank_1;
          _this.bulletType = PoolObjType.Bullet_4;
          _this.baseSpeed = 0;
          _this.moveAcceleration = 0;
          _this.dragAcceleration = 4;
          _this.moveTurnSpeed = 0;
          _this.attackTurnSpeed = 0;
          _this.defendArmor = 0;
          _this.isFlame = false;
          _this.isEfficient = false;
          _this.isRepair = false;
          _this.isBrave = false;
          _this.isAccurate = false;
          _this.isBuffing = false;
          _this.flameBaseDamage = 0.02;
          _this.flameBaseTime = 3;
          _this.efficientAxis = 0.5;
          _this.repairAxis = 0.5;
          _this.braveAxis = 0.02;
          _this.accurateAxis = 0.5;
          _this.buffingAxis = 0.25;
          _this.skinId = -1;
          _this.agent = void 0;
          _this.nowSpeed = 0;
          _this.maxSpeed = 20;
          _this.xAxis = 0;
          _this.yAxis = 0;
          _this.isPlayerCtrl = false;
          _this.nowRot = new Vec2();
          _this.targetRot = new Vec2();
          _this.nowRotX = 0;
          _this.nowRotY = 0;
          _this.disWay = 0;
          _this.minYAxisHeight = 1;
          _this.maxYAXISHeight = 0;
          _this.camCheckRay = new Ray();
          _this.anim = void 0;
          _this.moveAnimWay = new Vec2();
          _this.isDeadAnim = false;
          _this.isSkillAnim = false;
          _this.pushAnimWay = new Vec3();
          _this.cap = [];
          _this.gun = [];
          _this.gunPos = [];
          _this.fireEffect = [];
          _this.camRay = new Ray();
          _this.gunRay = new Ray();
          _this.gunHitPoint = new Vec3();
          _this.hitTarget = void 0;
          _this.hitFollowTarget = void 0;
          _this.gunAngleLimit = [-10, 10];
          _this.aimTarget = null;
          _this.isFire = false;
          _this.fireCD = 0.1;
          _this.fireRange = 50;
          _this.fireDamage = [1, 1];
          _this.fireRandomAxis = 0;
          _this.fireRay = new Ray();
          _this.fireAxis = 0;
          _this.fireMin = 0;
          _this.fireReduceAxis = 0.6;
          _this.noAimFireMin = 0.3;
          _this.aimFireMin = 0.1;
          _this.moveFireMin = 0.5;
          _this.nowGunIndex = 0;
          _this.nowFireTime = 0;
          _this.isReloading = false;
          _this.autoFireTime = 0;
          _this.autoFireCD = 0.2;
          _this.nowHp = 0;
          _this.maxHp = 1;
          _this.isDead = true;
          _this.hpBar = void 0;
          _this.playerHpBar = void 0;
          _this.hurtHeroNames = [];
          _this.checkTargets = [];
          _this.inSightTargets = [];
          _this.closestTarget = null;
          _this.checkMask = GameData.sceneObj_Mask;
          _this.isSkill1On = false;
          _this.isSkill1Hit = false;
          _this.skill1CD = 0;
          _this.isSkill2On = false;
          _this.skill2CD = 0;
          _this.isSkill4On = false;
          _this.skill4CD = 0;
          _this.skill4HitTargets = [];
          _this.isSkill5On = false;
          _this.skill5CD = 0;
          _this.skill5HitTargets = [];
          _this.isStealthOn = false;
          _this.isAttackBuffOn = false;
          _this.attackBuff_addAxis = 0;
          _this.flameTimes = 0;
          _this.flameFromTarget = null;
          _this.isAttackBuff_Item_On = false;
          _this.attackBuff_Item_Time = 10;
          _this.attackBuff_Item_addAxis = 0.5;
          _this.isAtttakInvertalUpBuff_Item_On = false;
          _this.attackInvertalUpBuff_Item_Time = 10;
          _this.attackInvertalUpBuff_Item_addAxis = 0.2;
          _this.isSpeedBuff_Item_On = false;
          _this.speedBuff_Item_Time = 10;
          _this.speedBuff_Item_addAxis = 0.2;
          _this.isDefendBuff_Item_On = false;
          _this.defendBuff_Item_Time = 5;
          _this.defendBuff_Item_reduceAxis = 1;
          _this.speedBuff = null;
          _this.attackBuff = null;
          _this.defendBuff = null;
          _this.isEmojiOn = false;
          _this.healBuffTime = 2;
          _this.healBuff = null;
          return _this;
        }

        var _proto = Hero.prototype;

        _proto.onLoad = function onLoad() {
          this.camYAxis = Tool.d3_FindNodeByName(this.node, "CamY");
          this.camXAxis = Tool.d3_FindNodeByName(this.camYAxis, "CamX");
          this.cam = Tool.d3_FindNodeByName(this.camXAxis, "Camera");
          this.camRayNode = Tool.d3_FindNodeByName(this.camXAxis, "rayNode");
          this.model = this.node.getChildByName("Model");
          this.colliders = this.node.getComponents(Collider);
          this.buffShow = this.node.getChildByName("BuffShow");
          this.faceShow = this.node.getChildByName("FaceShow"); // if (this.isPlayerCtrl)

          this.moveFx = this.node.getChildByName("MovingP");
          this.onLoadInit();
        };

        _proto.onLoadInit = function onLoadInit() {};

        _proto.start = function start() {
          this.nowGunIndex = 0;
          var comp = this.node.getComponentInChildren(Camera);
          if (comp) comp.onLoad();

          if (this.isPlayerCtrl) {
            EventMgr.on(EventType.Game_UseItem_Event, this, this.useItem);
          }
        };
        /**模型初始化 */


        _proto.modelInit = function modelInit(data, hpBar, prefabs) {
          if (prefabs === void 0) {
            prefabs = null;
          }

          if (this.bornPos == null) {
            this.bornPos = this.node.getWorldPosition();
          }

          this.hpBar = hpBar; //数据初始化

          this.heroDataInit(data);
          var self = this;
          var targetRot = new Quat();
          Quat.fromEuler(targetRot, 0, 0, 0);
          this.model.setRotation(targetRot);
          var rotY = new Quat();
          Quat.fromEuler(rotY, 0, 180, 0);
          var rotX = new Quat();
          Quat.fromEuler(rotX, 0, 0, 0);
          this.camYAxis.setRotation(rotY);
          this.camXAxis.setRotation(rotX);

          if (prefabs) {
            this.modelPrefab = prefabs;
          }

          var obj = instantiate(this.modelPrefab[data.id]);
          this.model.destroyAllChildren();
          this.model.addChild(obj);
          obj.setPosition(Vec3.ZERO);
          obj.setRotationFromEuler(new Vec3(0, 90, 0));

          var cb = function cb() {
            // console.log("模型初始化完成", self.node.name);
            self.campInit();
            self.camInit();
            self.moveInit();
            self.animInit();
            self.gunInit(); //阵营描边
            // let color = ["#00FFFF", "#FF5353"]
            // if (this.isPlayerCtrl) {
            //     let renders = this.model.getComponentsInChildren(MeshRenderer);
            //     for (let i = 0; i < renders.length; i++) {
            //         let mats = renders[i].materials;
            //         for (let j = 0; j < mats.length; j++) {
            //             let mat = mats[j];
            //             let handle = mat.passes[0].getHandle("lineWidth");
            //             mat.passes[0].setUniform(handle, 0);
            //             handle = mat.passes[0].getHandle("baseColor");
            //             mat.passes[0].setUniform(handle, new Color(0, 0, 0, 255));
            //         }
            //     }
            // } else {
            //     let renders = this.model.getComponentsInChildren(MeshRenderer);
            //     for (let i = 0; i < renders.length; i++) {
            //         let mats = renders[i].materials;
            //         for (let j = 0; j < mats.length; j++) {
            //             let mat = mats[j];
            //             let handle = mat.passes[0].getHandle("lineWidth");
            //             mat.passes[0].setUniform(handle, 3000);
            //             handle = mat.passes[0].getHandle("baseColor");
            //             mat.passes[0].setUniform(handle, Tool.d3_getRgbByHex(color[this.camp]));
            //         }
            //     }
            // }
          };

          self.scheduleOnce(cb);
        };
        /**Hero数据初始化 */


        _proto.heroDataInit = function heroDataInit(data) {
          this.hpInit(data.hp);
          this.fireDamage = [data.attack, data.attack];
          this.fireCD = data.attackInvertal;
          this.fireRange = GameData.tank_1_atkRange; //暂时全部默认一个

          this.moveAcceleration = data.acceleration;
          this.dragAcceleration = GameData.tank_1_dragAcceleration; //暂时全部默认一个

          this.baseSpeed = data.maxSpeed;
          this.moveTurnSpeed = data.tankModelRotSpeed / 180 * Math.PI;
          this.attackTurnSpeed = data.tankCapRotSpeed;
          this.gunAngleLimit = [0, 0]; //锁死炮管上下移动

          this.defendArmor = data.armor;
          this.isFlame = data.techActiveIndex.indexOf(0) != -1;
          this.isEfficient = data.techActiveIndex.indexOf(1) != -1;
          this.isRepair = data.techActiveIndex.indexOf(2) != -1;
          this.isBrave = data.techActiveIndex.indexOf(3) != -1;
          this.isAccurate = data.techActiveIndex.indexOf(4) != -1;
          this.isBuffing = data.techActiveIndex.indexOf(5) != -1; //TODO 最大速度倍数

          this.baseSpeed = this.baseSpeed * 0.5; //TODO 火力倍数

          for (var i = 0; i < this.fireDamage.length; i++) {
            this.fireDamage[i] = this.fireDamage[i] * 1.5;
          } //玩家开启瞄准按钮UI


          if (this.isPlayerCtrl) {
            this.getComponent(PlayerCtr).changeSkillIcon(2);
          } //获取对应子弹的prefab


          var bulletType;

          switch (data.id) {
            case HeroType.Tank_1:
              bulletType = PoolObjType.Bullet_4;
              break;

            default:
              bulletType = PoolObjType.Bullet_4;
              break;
          }

          this.bulletType = bulletType; //碰撞体数据
          // let collider = this.getComponent(SphereCollider);
          // collider.center = new Vec3(0, 1.5, 0.2);
          // collider.radius = 4.35;
          // collider.isTrigger = true;

          this.heroType = data.id; //技能CD清零

          this.skill1CD = 0;
          this.skill2CD = 0;
          this.skill4CD = 0; //表情

          this.faceShow.setPosition(new Vec3(0, 5, 0)); //涂装

          this.skinId = data.skinId;
        } // #endregion
        // #region Update
        ;

        _proto.update = function update(dt) {
          //摄像机前推
          this.camCheckUpdate(dt); //技能1Update

          this.Skill_1_Update(dt); //技能2Update(计时CD用)

          this.Skill_2_Update(dt); //技能4Update

          this.Skill_4_Update(dt); //技能5Update

          this.Skill_5_Update(dt);
        };

        _proto.lateUpdate = function lateUpdate(dt) {
          this.moveUpdate(dt);
          this.camRotUpdate(dt);
          this.animUpdate(dt);
          this.gunUpdate(dt);
          this.fireUpdate(dt);
          this.hpUpdate(dt);
        } // #endregion
        //#region 移动操控
        ;

        _proto.moveInit = function moveInit() {
          this.agent = this.getComponent(NavMeshAgent);
          this.agent.isPlayerMove = this.isPlayerCtrl;
          this.agent.init(); //最大速度赋值

          this.maxSpeed = this.baseSpeed;
          this.nowSpeed = 0;
          this.agent.setAgentMaxSpeed(this.maxSpeed);
        } //这个update是在joystick的事件派发下来的，即这个执行完了，才会执行lateUpdate
        ;

        _proto.moveCtrl_forPlayer = function moveCtrl_forPlayer(e) {
          this.xAxis = e[0];
          this.yAxis = e[1];
        };

        _proto.moveUpdate = function moveUpdate(dt) {
          if (dt > 0.032) {
            dt = 0.032;
          }

          if (!this.agent) return;
          if (this.isDead) return;

          if (this.isPlayerCtrl) {
            //玩家操控方法
            var x = this.xAxis;
            var y = this.yAxis;
            var forward = this.cam.forward.clone();
            forward.y = 0;
            forward.multiplyScalar(y * 1000);
            var right = this.cam.right.clone();
            right.y = 0;
            right.multiplyScalar(x * 1000);
            var axis = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)); //=======改，根据想要前进的方向自动转向和移动=======

            var wantWay = forward.add(right);
            var way = new Vec3();
            way = this.model.forward.clone();
            var wayAngle = Tool.getAngle2DWay(new Vec2(wantWay.x, wantWay.z), new Vec2(way.x, way.z)) * Math.PI / 180; // // console.log(, Math.sin(wayAngle));

            if (wayAngle) {
              y = -Math.cos(wayAngle) * axis;
              x = Math.sin(wayAngle) * axis;
            } else {
              x = 0;
              y = 0;
            } // console.log(x, y);


            this.maxSpeed = this.baseSpeed;

            if (this.isSpeedBuff_Item_On) {
              this.maxSpeed *= 1 + this.speedBuff_Item_addAxis;
            } //===============转向控制===============


            var rotSpeed = 0;
            var nowRot = this.model.getRotation();
            var targetRot = new Quat();
            rotSpeed = -x * this.moveTurnSpeed * dt;
            Quat.rotateAroundLocal(targetRot, nowRot, Vec3.UP, rotSpeed);
            this.model.setRotation(targetRot); // if (!this.isCtrl)
            //     this.targetRot.y += rotSpeed * 180 / Math.PI;
            //==============前进和后退==============
            //获取加油或刹车的加速度

            var addSpeed = (this.moveAcceleration + this.dragAcceleration) * dt * y; //抵消阻力的加速度系数

            if (this.isSpeedBuff_Item_On) {
              addSpeed *= 1 + this.speedBuff_Item_addAxis;
            }

            var speedAbs = Math.abs(this.nowSpeed);
            var limitSpeed = 1;

            if (speedAbs < limitSpeed) {
              addSpeed *= 1 + (limitSpeed - speedAbs) * 5;
            } //阻力


            var drawSpeed = this.dragAcceleration * dt;

            if (this.nowSpeed > drawSpeed) {
              drawSpeed *= -1;
            } else if (this.nowSpeed < drawSpeed && this.nowSpeed > 0) {
              drawSpeed = -this.nowSpeed;
            } else if (this.nowSpeed == 0) {
              drawSpeed = 0;
            } else if (this.nowSpeed > -drawSpeed) {
              drawSpeed = -this.nowSpeed;
            } else {
              drawSpeed *= 1;
            } //最终速度


            var nowSpeed = this.nowSpeed + addSpeed + drawSpeed; //速度限制

            if (nowSpeed > this.maxSpeed) {
              nowSpeed = this.maxSpeed;
            } else if (nowSpeed < -this.maxSpeed) {
              nowSpeed = -this.maxSpeed;
            }

            var finalAddSpeed = this.nowSpeed - nowSpeed;
            this.nowSpeed = nowSpeed;
            var speedWay = way.multiplyScalar(-this.nowSpeed);
            this.agent.goWay = speedWay; //动画机赋值

            this.moveAnimWay.x = finalAddSpeed / dt;
            this.moveAnimWay.y = rotSpeed / dt;
            this.moveFx.setRotation(this.model.getRotation());
          } else {
            this.maxSpeed = this.baseSpeed; //根据当前速度更改 模型朝向 动画状态

            var v = this.agent.getAgentVelocity();
            var isCanMove = true;
            var _rotSpeed = 0;

            if (v) {
              var _forward = this.model.forward.clone();

              var angle = Tool.getAngle2DWay(new Vec2(-_forward.x, -_forward.z), new Vec2(v.x, v.z));

              if (angle) {
                var _nowRot = this.model.getRotation();

                var _targetRot = new Quat();

                var _x = -angle / (this.moveTurnSpeed * dt / Math.PI * 180);

                if (_x > 1) {
                  _x = 1;
                  isCanMove = false;
                } else if (_x < -1) {
                  _x = -1;
                  isCanMove = false;
                }

                _rotSpeed = _x * this.moveTurnSpeed * dt;
                Quat.rotateAroundLocal(_targetRot, _nowRot, Vec3.UP, _rotSpeed);
                this.model.setRotation(_targetRot);
                this.nowSpeed = v.length();
              }
            }

            var _finalAddSpeed = 0;

            if (this.agent.agentIndex != -1) {
              this.agent.setAgentMaxSpeed(this.maxSpeed);

              if (!isCanMove) {
                var _addSpeed = this.dragAcceleration + this.moveAcceleration; // this.agent.setAgentMaxSpeed(0)


                if (this.nowSpeed > _addSpeed) {
                  this.agent.setAgentMaxAcceleration(_addSpeed);
                  _finalAddSpeed = -_addSpeed;
                } else {
                  this.agent.setAgentMaxAcceleration(0);
                  _finalAddSpeed = 0;
                }
              } else {
                this.nowSpeed *= 1;
                var _addSpeed2 = this.moveAcceleration; //抵消阻力的加速度系数

                var _speedAbs = Math.abs(this.nowSpeed);

                var _limitSpeed = 1;

                if (_speedAbs < _limitSpeed) {
                  _addSpeed2 *= 1 + (_limitSpeed - _speedAbs) * 5;
                }

                this.agent.setAgentMaxAcceleration(_addSpeed2);
                _finalAddSpeed = _addSpeed2;
              }
            }

            this.moveAnimWay.x = _finalAddSpeed;
            this.moveAnimWay.y = _rotSpeed / dt; // console.log(this.moveAnimAxis);

            this.moveFx.setRotation(this.model.getRotation());
          }
        };

        _proto.moveToTaregtPos_AI = function moveToTaregtPos_AI(pos) {
          this.agent.setTarget(pos);
        } // #endregion
        //#region 摄像机
        ;

        _proto.camInit = function camInit() {
          var camData = GameData.cam_default_data_small;

          if (StorageMgr.instance.storageData.playCount == 0) {
            if (this.isPlayerCtrl) {
              camData = GameData.cam_default_data_small_teach;
            } else {
              camData = GameData.cam_default_data_small_teach_enemy;
            }
          }

          this.model.setRotationFromEuler(new Vec3(0, camData.rotXY.y, 0));
          this.targetRot.y = camData.rotXY.y;
          this.targetRot.x = camData.rotXY.x;
          this.nowRotX = this.targetRot.x;
          this.nowRotY = this.targetRot.y;
          this.nowRot.y = this.targetRot.y;
          this.nowRot.x = this.targetRot.x;
          this.maxYAXISHeight = camData.maxYAXISHeight;
          this.minYAxisHeight = camData.minYAxisHeight;
          if (!this.isPlayerCtrl) return;
          this.camYAxis.setPosition(new Vec3(0, this.maxYAXISHeight, 0));
          var rot = new Quat();
          Quat.fromEuler(rot, 0, this.targetRot.y, 0);
          this.camYAxis.setRotation(rot);
          Quat.fromEuler(rot, this.targetRot.x, 0, 0);
          this.camXAxis.setRotation(rot);
          this.camRayNode.setPosition(camData.camPos);
          this.cam.setPosition(camData.camPos);
          Quat.fromEuler(rot, camData.camRot.x, camData.camRot.y, camData.camRot.z);
          this.camRayNode.setRotation(rot);
          this.cam.setRotation(rot); // this.targetRot.y = this.camYAxis.eulerAngles.y;
          // this.targetRot.x = this.camXAxis.eulerAngles.x;
          // this.nowRot.y = this.camYAxis.eulerAngles.y;
          // this.nowRot.x = this.camXAxis.eulerAngles.x;
          // //获取摄像机与玩家的初始距离

          var camPoint = this.camRayNode.getWorldPosition();
          var camCenter = this.camYAxis.getWorldPosition();
          var way = new Vec3();
          Vec3.subtract(way, camCenter, camPoint);
          this.disWay = way.length(); // //获取原始Offset
          // this.maxYAXISHeight = this.camYAxis.getPosition().y;
        };

        _proto.camRot_ForPlayer = function camRot_ForPlayer(rotAxis, isTrackFirst) {
          if (isTrackFirst === void 0) {
            isTrackFirst = false;
          } //手动移动取消自动锁定
          // console.log(isTrackFirst);


          if (!isTrackFirst) {
            this.hitFollowTarget = null;
          } else {
            this.camRay.d = this.cam.forward.clone();
            this.camRay.o = this.cam.getWorldPosition();
            var pos = new Vec3();
            this.camRay.computeHit(pos, 3);
            this.camRay.o = pos; //获取击中点
            //射线判定

            if (PhysicsSystem.instance.raycastClosest(this.camRay, this.aimMask, this.fireRange, true)) {
              var hitTarget = PhysicsSystem.instance.raycastClosestResult.collider.node;
              var comp = hitTarget.getComponent(Hero);

              if (comp) {
                //如果不是隐身或不是死亡状态，则自动瞄准
                if (!comp.isStealthOn && !comp.isDead) {
                  this.hitFollowTarget = hitTarget;
                }
              }
            } else {
              this.hitFollowTarget = null;
            }
          } //旋转值增加


          var value = rotAxis.y * 360 * GameData.camRot_Yaxis;
          if (this.isSkill2On) value /= 6;
          this.targetRot.y -= value; // this.targetRot.x -= rotAxis.x * 90 * GameData.camRot_Xaxis;//锁x轴移动
          // console.log(rotAxis.y * 360 * GameData.camRot_Yaxis)
          // console.log(rotAxis.x * 90 * GameData.camRot_Xaxis);
          // this.camRotDo();
        };

        _proto.camRotUpdate = function camRotUpdate(dt) {
          //旋转上下限制
          if (this.targetRot.x > GameData.camRot_MaxX) {
            this.targetRot.x = GameData.camRot_MaxX; // console.log("触发CamRotMAX")
          } else if (this.targetRot.x < GameData.camRot_MinX) {
            this.targetRot.x = GameData.camRot_MinX; // console.log("触发CamRotMIN")
          } //旋转赋值


          var lerpAxis = 40 * dt;
          if (lerpAxis > 1) lerpAxis = 1;
          var rotY = new Quat();
          Quat.fromEuler(rotY, 0, this.targetRot.y, 0);
          var rotX = new Quat();
          Quat.fromEuler(rotX, this.targetRot.x, 0, 0);
          this.camYAxis.setRotation(this.camYAxis.getRotation().lerp(rotY, lerpAxis));
          this.camXAxis.setRotation(this.camXAxis.getRotation().lerp(rotX, lerpAxis));
        };

        _proto.camCheckUpdate = function camCheckUpdate(dt) {
          if (!this.isPlayerCtrl) return;
          if (!GameData.cam) return;
          if (this.isDead) return;
          var cam = GameData.cam;
          var lerpAxis = 5 * dt; //狙击手模式  ,截停镜头缩放，截停自动瞄准

          var skill2Fov = 10;
          var normalFov = 60;
          var skill2CamFar = 600;
          var normalCamFar = 300;

          if (this.isSkill2On) {
            cam.fov = lerp(cam.fov, skill2Fov, lerpAxis);
            cam.far = lerp(cam.far, skill2CamFar, lerpAxis);
            this.cam.setPosition(this.cam.getPosition().lerp(new Vec3(), lerpAxis));
            this.camYAxis.setPosition(this.camYAxis.getPosition().lerp(new Vec3(0, (this.maxYAXISHeight + this.minYAxisHeight) / 2, 0), lerpAxis)); // this.targetRot.x = 0;

            return;
          } else {
            cam.fov = lerp(cam.fov, normalFov, lerpAxis);
            cam.far = lerp(cam.far, normalCamFar, lerpAxis);
            var camData = GameData.cam_default_data_small;

            if (StorageMgr.instance.storageData.playCount == 0) {
              camData = GameData.cam_default_data_small_teach;
            }

            this.targetRot.x = camData.rotXY.x;
          } //只检测射线机阻挡的mask值


          var mask = GameData.sceneObj_Mask; //1、获取从摄像机到摄像机锚点的射线

          var camPoint = this.camRayNode.getWorldPosition();
          var camCenter = this.camYAxis.getWorldPosition();
          var way = new Vec3();
          Vec3.subtract(way, camPoint, camCenter);
          way.normalize();
          var ray = new Ray(camCenter.x, camCenter.y, camCenter.z, way.x, way.y, way.z); //2、检测射线是否碰到CamBlock

          PhysicsSystem.instance.raycast(ray, mask, this.disWay, true);
          var result = PhysicsSystem.instance.raycastResults; //3、获取射线碰到的碰撞点

          var minDis = this.disWay;

          for (var i = 0; i < result.length; i++) {
            //4、计算碰撞点到玩家的距离
            var disHit = result[i].distance;

            if (disHit < minDis) {
              minDis = disHit;
            }
          } //5、取离玩家最近的距离
          //加个offset


          minDis -= 0.25;
          if (minDis < 0) minDis = 0;
          var axis = minDis / this.disWay; //6、缩到最近的距离
          // let wayAdd = new Vec3();
          // Vec3.multiplyScalar(wayAdd, way, axis * this.disWay);
          // let pos = camCenter.add(wayAdd);

          var pos = new Vec3(); // this.camYAxis.setPosition(this.camYAxis.getPosition().lerp(new Vec3(0, this.minYAxisHeight + axis * (this.maxYAXISHeight - this.minYAxisHeight), 0), lerpAxis));

          this.camYAxis.setPosition(this.camYAxis.getPosition().lerp(new Vec3(0, this.maxYAXISHeight, 0), lerpAxis));
          ray.computeHit(pos, axis * this.disWay);
          this.cam.setWorldPosition(this.cam.getWorldPosition().lerp(pos, lerpAxis)); //自动瞄准(暂时关闭)
          // if (this.hitFollowTarget) {
          //     EventMgr.event(EventType.Game_Aim_Lock);
          //     let comp = this.hitFollowTarget.getComponent(Hero)
          //     //如果不是隐身或不是死亡状态，则自动瞄准
          //     if (comp && !comp.isDead && this.inSightTargets.indexOf(comp) != -1 && !comp.isStealthOn) {
          //         // console.log("现在角度：", this.targetRot.y, this.targetRot.x);
          //         let way = new Vec3();
          //         let targetPos = this.hitFollowTarget.getWorldPosition();
          //         targetPos.y += comp.minYAxisHeight;
          //         Vec3.subtract(way, targetPos, this.cam.getWorldPosition());
          //         //如果距离超过50，退出自动瞄准
          //         if (way.lengthSqr() > GameData.autoAim_DistanceSqr) {
          //             this.hitFollowTarget = null;
          //         } else {
          //             let yAngle = 0;
          //             let addAngle = Tool.getAngle2DWay(new Vec2(-this.camYAxis.forward.x, -this.camYAxis.forward.z), new Vec2(way.x, way.z));
          //             if (addAngle) {
          //                 yAngle = this.targetRot.y - addAngle;
          //             } else {
          //                 yAngle = this.targetRot.y;
          //             }
          //             this.targetRot.y = yAngle;
          //             let projection = Tool.d3_getProjection(way, this.cam.right.clone());
          //             addAngle = Tool.d3_getAngle(projection, this.cam.forward.clone());
          //             let cross = new Vec3();
          //             Vec3.cross(cross, projection, this.cam.forward.clone())
          //             if (Vec3.dot(cross, this.cam.right.clone()) < 0) {
          //                 addAngle *= -1;
          //             }
          //             // console.log(addAngle);
          //             if (addAngle + this.targetRot.x > GameData.camRot_MaxX) {
          //                 addAngle = GameData.camRot_MaxX - this.targetRot.x;
          //             } else if (addAngle + this.targetRot.x < GameData.camRot_MinX) {
          //                 addAngle = GameData.camRot_MinX + this.targetRot.x;
          //             }
          //             this.targetRot.x += addAngle;
          //             // this.camRotDo();
          //         }
          //     } else {
          //         this.hitFollowTarget = null;
          //     }
          // } else {

          EventMgr.event(EventType.Game_Aim_UnLock); // }
        } //#endregion
        //#region 动画机控制
        ;

        _proto.animInit = function animInit() {
          this.anim = this.model.getComponentInChildren(Anim_Tank);
          this.isDeadAnim = false;
          this.moveAnimWay = new Vec2();
          this.anim.changeSkinMat(this.skinId, this.heroType); // this.anim.changeMat(this.camp);
          // if (this.isPlayerCtrl) {

          this.moveFx = this.node.getChildByName("MovingP"); // }
        } //动画的移动系数
        ;

        _proto.animUpdate = function animUpdate(dt) {
          if (!this.anim) return;
          if (this.isDeadAnim) return;
          if (!GameData.cam || !GameData.cam.node) return; //外壳晃动处理

          var forwardAxis = this.moveAnimWay.x;
          var horizontalAxis = this.moveAnimWay.y;
          forwardAxis -= this.pushAnimWay.z * 10;
          horizontalAxis += this.pushAnimWay.x * 10;
          this.pushAnimWay.lerp(Vec3.ZERO, dt * 10);
          if (forwardAxis && horizontalAxis) this.anim.setRot(forwardAxis, horizontalAxis); //轮子和履带效果

          var forward = this.model.forward.clone();
          var checkWay = new Vec3();
          Vec3.subtract(checkWay, GameData.cam.node.getWorldPosition(), this.node.getWorldPosition());
          var checkAngle = Tool.getAngle2DWay(new Vec2(forward.x, forward.z), new Vec2(checkWay.x, checkWay.z));
          this.anim.setSpeed(this.nowSpeed * dt, this.moveAnimWay.y * dt, checkAngle >= 0); // this.moveFx.active = this.moveAnimWay.y > 0.5;
          // this.idleFx.active = this.moveAnimWay.y <= 0.5;
          //是否在播放技能

          this.isSkillAnim; //是否死亡

          this.isDead;
          this.isDeadAnim; //动画播放

          if (this.isPlayerCtrl) {
            var axis = this.nowSpeed / 2;

            if (axis < 0) {
              axis = 0;
            } else if (axis > 1) {
              axis = 1;
            }

            SoundMgr.instacne.playMoveSound(axis);
          }
        };

        _proto.animPushWay = function animPushWay(way) {
          var forward = this.model.forward.clone();
          forward.multiplyScalar(-1);
          var right = this.model.right.clone();
          right.multiplyScalar(-1);
          var pushForwardAngle = Tool.d3_getAngle(way, forward);
          var pushRightAngle = Tool.d3_getAngle(way, right);
          this.pushAnimWay.x += Math.cos(pushRightAngle / 180 * Math.PI);
          this.pushAnimWay.z += Math.cos(pushForwardAngle / 180 * Math.PI);
        } // #endregion
        //#region 开火和瞄准
        ;

        _proto.gunInit = function gunInit() {
          this.cap = Tool.d3_FindAllNodeByName(this.model, "Cap");
          this.gun = Tool.d3_FindAllNodeByName(this.model, "Gun");
          this.gunPos = Tool.d3_FindAllNodeByName(this.model, "GunPos");

          for (var i = 0; i < this.fireEffect.length; i++) {
            PoolMgr.instance.recyleObj(this.fireEffect[i]);
          }

          this.fireEffect.length = 0;

          for (var _i = 0; _i < this.gunPos.length; _i++) {
            this.fireEffect.push(PoolMgr.instance.getObj(PoolObjType.FireEffect));

            this.gunPos[_i].addChild(this.fireEffect[_i].node);

            this.fireEffect[_i].node.setPosition(Vec3.ZERO);

            this.fireEffect[_i].node.setRotation(new Quat());
          }

          this.autoFireTime = this.autoFireCD;
        };

        _proto.gunUpdate = function gunUpdate(dt) {
          if (!this.cap) return;
          if (this.isDead) return;
          var hitPoint = new Vec3();

          if (this.isPlayerCtrl) {
            this.camRay.d = this.cam.forward.clone();
            this.camRay.o = this.cam.getWorldPosition();
            var pos = new Vec3();
            this.camRay.computeHit(pos, 3);
            this.camRay.o = pos; //获取击中点
            //射线判定

            if (PhysicsSystem.instance.raycastClosest(this.camRay, this.aimMask, this.fireRange, true)) {
              hitPoint = PhysicsSystem.instance.raycastClosestResult.hitPoint.clone(); // this.hitTarget = PhysicsSystem.instance.raycastClosestResult.collider.node;
              // let comp = this.hitTarget.getComponent(Hero)
              // if (comp) {
              //     //如果不是隐身或不是死亡状态，则自动瞄准
              //     if (!comp.isStealthOn && !comp.isDead) {
              //         this.hitFollowTarget = this.hitTarget;
              //     }
              // }
            } else {
              this.camRay.computeHit(hitPoint, this.fireRange); // this.hitTarget = null;
            }
          } else {
            //如果有瞄准目标
            if (this.hitFollowTarget && !this.isDead) {
              var comp = this.hitFollowTarget.getComponent(Hero);

              if (!comp.isDead) {
                //ai计算的瞄准目标
                hitPoint = this.hitFollowTarget.getWorldPosition();
                hitPoint.y += 1; // let way = new Vec3();
                // for (let i = 0; i < this.gunPos.length; i++) {
                //     Vec3.subtract(way, hitPoint, this.gunPos[i].getWorldPosition());
                //     if (way.lengthSqr() > this.fireRange * this.fireRange) {
                //         hitPoint = this.gunPos[i].getWorldPosition().add(this.model.forward.clone().multiplyScalar(-this.fireRange));
                //         this.fireOff();
                //     } else {
                //         this.gunRay.o = this.gunPos[i].getWorldPosition();
                //         this.gunRay.d = way.normalize();
                //         if (PhysicsSystem.instance.raycastClosest(this.gunRay, this.aimMask, this.fireRange, true)) {
                //             hitPoint = PhysicsSystem.instance.raycastClosestResult.hitPoint.clone();
                //             // this.hitTarget = PhysicsSystem.instance.raycastClosestResult.collider.node;
                //         } else {
                //             // this.hitTarget = this.hitFollowTarget;
                //         }
                // this.fireOn();
                //     }
                // }
              } else {
                //瞄准目标已死
                this.hitFollowTarget = null;

                for (var i = 0; i < this.gunPos.length; i++) {
                  hitPoint = this.gunPos[i].getWorldPosition().add(this.model.forward.clone().multiplyScalar(-this.fireRange));
                } // this.hitTarget = null;
                // this.fireOff();

              }
            } else {
              //没有瞄准目标
              for (var _i2 = 0; _i2 < this.gunPos.length; _i2++) {
                hitPoint = this.gunPos[_i2].getWorldPosition().add(this.model.forward.clone().multiplyScalar(-this.fireRange));
              } // this.hitTarget = null;


              this.fireOff();
            }
          } //枪管控制


          this.gunAim(hitPoint);
        };

        _proto.gunAim = function gunAim(aimTargetPos) {
          var way = new Vec3();

          for (var i = 0; i < this.cap.length; i++) {
            if (!this.cap[i] || !this.cap[i].isValid) return; //枪管瞄准方向

            Vec3.subtract(way, aimTargetPos, this.cap[i].getWorldPosition()); //炮台需要偏移的角度

            var forward = this.cap[i].parent.right.clone();
            var yAngle = Tool.getAngle2DWay(new Vec2(way.x, way.z), new Vec2(forward.x, forward.z));
            yAngle += 180; //yAngle 0~360;

            var nowAngle = new Vec3();
            this.cap[i].getRotation().getEulerAngles(nowAngle);

            if (nowAngle.y < 0) {
              nowAngle.y += 360;
            } else if (nowAngle.y > 360) {
              nowAngle.y -= 360;
            }

            var toWay = new Vec2(Math.cos(yAngle / 180 * Math.PI), Math.sin(yAngle / 180 * Math.PI));
            var nowWay = new Vec2(Math.cos(nowAngle.y / 180 * Math.PI), Math.sin(nowAngle.y / 180 * Math.PI));
            var detla = Tool.getAngle2DWay(nowWay, toWay);
            var speed = this.attackTurnSpeed * game.deltaTime;

            if (detla > speed) {
              yAngle = nowAngle.y + speed;
            } else if (detla < -speed) {
              yAngle = nowAngle.y - speed;
            }

            this.cap[i].setRotationFromEuler(new Vec3(0, yAngle, 0));

            if (this.isPlayerCtrl) {
              EventMgr.event(EventType.Game_Aim_TankPose, yAngle);
            } //枪管需要偏移的角度


            Vec3.subtract(way, aimTargetPos, this.gun[i].getWorldPosition());
            var projection = Tool.d3_getProjection(way, this.cap[i].forward);
            var xAngle = Tool.d3_getAngle(projection, this.cap[i].right) - 180;

            if (projection.y < 0) {
              xAngle *= -1;
            }

            this.gun[i].getRotation().getEulerAngles(nowAngle);
            detla = xAngle - nowAngle.z;
            speed /= 4;

            if (detla > speed) {
              xAngle = nowAngle.z + speed;
            } else if (detla < -speed) {
              xAngle = nowAngle.z - speed;
            } //AI开火简单判定


            if (!this.isPlayerCtrl) {
              if (detla <= speed * 10 && this.hitFollowTarget) {
                this.fireOn();
              } else {
                this.fireOff();
              }
            }

            if (xAngle > this.gunAngleLimit[1]) {
              xAngle = this.gunAngleLimit[1];
            } else if (xAngle < this.gunAngleLimit[0]) {
              xAngle = this.gunAngleLimit[0];
            }

            this.gun[i].setRotationFromEuler(new Vec3(-90, 0, xAngle));
          }

          var aimTarget = null; //实时计算炮实际攻击到的位置

          if (this.gunPos.length > 0) {
            var hitPoint = new Vec3();
            this.gunRay.o = this.gunPos[0].getWorldPosition();
            this.gunRay.d = this.gunPos[0].forward.clone();

            if (PhysicsSystem.instance.raycastClosest(this.gunRay, this.aimMask, this.fireRange, true)) {
              hitPoint = PhysicsSystem.instance.raycastClosestResult.hitPoint.clone(); //瞄准开描边

              if (this.isPlayerCtrl) {
                var targetHero = PhysicsSystem.instance.raycastClosestResult.collider.node.parent.parent.getComponent(Hero);

                if (targetHero && targetHero.anim) {
                  aimTarget = targetHero;
                  this.aimTarget = aimTarget;
                } else {
                  this.aimTarget = null;
                } //     targetHero.anim.changeMat(targetHero.camp, true);

              }
            } else {
              this.gunRay.computeHit(hitPoint, this.fireRange);
            }

            this.gunHitPoint = hitPoint;
          }

          if (this.isPlayerCtrl) {
            EventMgr.event(EventType.Game_Aim_Target_Update, aimTarget);
          }
        };

        _proto.fireOn = function fireOn() {
          if (this.isDead) return;
          this.isFire = true;

          if (this.isPlayerCtrl) {
            if (SoundMgr.instacne) ;
          }
        };

        _proto.fireUpdate = function fireUpdate(dt) {
          //开火扩散
          this.fireAxis -= dt * this.fireReduceAxis;
          this.fireMin = 0;
          var speedEffectAxis = this.nowSpeed / 4;

          if (speedEffectAxis > 1) {
            speedEffectAxis = 1;
          }

          this.fireMin += speedEffectAxis * this.moveFireMin;
          this.fireMin += this.isSkill2On ? this.aimFireMin : this.noAimFireMin;
          this.fireMin = 0; //暂时不开启扩散

          if (this.fireAxis < this.fireMin) {
            this.fireAxis = this.fireMin;
          }

          EventMgr.event(EventType.Game_Aim_Shoot, this.fireAxis);
          if (this.isDead) return;

          if (this.aimTarget && GameData.isAutoFire) {
            this.autoFireTime -= dt;
          } else {
            this.autoFireTime = this.autoFireCD;
          }

          if (this.nowFireTime <= 0) {
            //已经可以开火了
            if (this.isReloading) {
              this.isReloading = false;

              if (this.isPlayerCtrl) {
                SoundMgr.instacne.playSound(SoundType.FireLoaded);
              }
            }

            if (this.isFire || this.autoFireTime <= 0) {
              // if (this.isSkill2On && this.isPlayerCtrl) {
              //     //瞄准
              //     if (this.hitTarget) {
              //         let comp = this.hitTarget.getComponent(Hero);
              //         if (comp && !comp.isDead) {
              //             this.fire();
              //         }
              //     }
              // } else {
              //普通
              this.fire(); // }
            }
          } else {
            var reduceSpeed = 1;

            if (this.isAtttakInvertalUpBuff_Item_On) {
              reduceSpeed += this.attackInvertalUpBuff_Item_addAxis;
            }

            this.nowFireTime -= dt * reduceSpeed;

            if (this.nowFireTime < 0) {
              this.nowFireTime = 0;
            }
          }

          if (this.isPlayerCtrl) {
            EventMgr.event(EventType.Game_FireBtn_CD, this.nowFireTime / this.fireCD);
            EventMgr.event(EventType.Game_Reload_Update, 1 - this.nowFireTime / this.fireCD);
          } // if (this.isPlayerCtrl) {
          //     if (this.nowFireTime <= 0) {
          //         //瞄准
          //         if (this.hitTarget) {
          //             let comp = this.hitTarget.getComponent(Hero);
          //             if (comp && !comp.isDead) {
          //                 this.fire();
          //             }
          //         }
          //     } else {
          //         this.nowFireTime -= dt;
          //         if (this.nowFireTime < 0) {
          //             this.nowFireTime = 0;
          //         }
          //     }
          // } else {
          //     if (this.nowFireTime <= 0) {
          //         //已经可以开火了
          //         if (this.isFire) {
          //             if (this.isSkill2On && this.isPlayerCtrl) {
          //                 //瞄准
          //                 if (this.hitTarget) {
          //                     let comp = this.hitTarget.getComponent(Hero);
          //                     if (comp && !comp.isDead) {
          //                         this.fire();
          //                     }
          //                 }
          //             } else {
          //                 //普通
          //                 this.fire();
          //             }
          //         }
          //     } else {
          //         this.nowFireTime -= dt;
          //         if (this.nowFireTime < 0) {
          //             this.nowFireTime = 0;
          //         }
          //     }
          // }

        };

        _proto.fireOff = function fireOff() {
          this.isFire = false;

          if (this.isPlayerCtrl) {
            if (SoundMgr.instacne) ;
          }
        };

        _proto.fire = function fire() {
          if (!GameData.cam) return;
          this.nowFireTime = this.fireCD;
          this.isReloading = true;
          var startIndex = this.nowGunIndex;
          var endIndex = this.nowGunIndex;

          for (var i = startIndex; i <= endIndex; i++) {
            if (i >= this.gunPos.length) break;
            var pos = this.gunPos[i].getWorldPosition();
            var damageAxis = 1;
            var dis = 0; //子弹攻击计算

            var isBullet = true;
            dis = Vec3.distance(pos, this.gunHitPoint);
            var damage = void 0;
            damage = this.fireDamage[1] - (this.fireDamage[1] - this.fireDamage[0]) * damageAxis; //道具的攻击Buff攻击倍数计算

            if (this.isAttackBuff_Item_On) {
              damage *= this.attackBuff_Item_addAxis + 1;
            } //攻击翻倍(后面要删掉)
            // if (this.isPlayerCtrl) {
            // damage *= 2;
            // }
            //技能的伤害倍数计算，蓄力弹后面计算
            // if (this.isSkill2On) {
            //     damage *= GameData.skill_2_damageAxis;
            // }
            //不同类型的子弹处理


            if (isBullet) {
              //子弹表现
              var bullet = PoolMgr.instance.getObj(this.bulletType);
              bullet.node.setWorldPosition(pos);
              var hitPos = new Vec3();
              this.fireRay.o = this.gunPos[i].getWorldPosition();
              var way = this.gunPos[i].forward.clone(); //开火后坐力（对外壳）

              this.animPushWay(way); //子弹偏差
              // let fovAngle = GameData.cam.fov / 2 * Math.PI / 180;
              // let aimRaidus = 300 * this.fireAxis;//长度*缩放
              // let camHeight = 750;//因为是高度对齐（高度不变摄像机的1为这个）
              // let length = Tool.randomNumber(0, Math.tan(fovAngle) * aimRaidus / camHeight);
              // let angle = Tool.randomNumber(-Math.PI, Math.PI);
              // way.add(this.gunPos[i].right.clone().multiplyScalar(Math.cos(angle) * length));
              // way.add(this.gunPos[i].up.clone().multiplyScalar(Math.sin(angle) * length))
              // way.normalize();

              this.fireRay.d = way;

              if (PhysicsSystem.instance.raycastClosest(this.fireRay, this.aimMask, this.fireRange, true)) {
                hitPos = PhysicsSystem.instance.raycastClosestResult.hitPoint.clone();
                this.hitTarget = PhysicsSystem.instance.raycastClosestResult.collider.node.parent.parent;
              } else {
                this.fireRay.computeHit(hitPos, this.fireRange);
                this.hitTarget = null;
              }

              bullet.node.lookAt(hitPos);
              bullet.way = bullet.node.forward.clone();
              bullet.borner = this; //开火特效

              bullet.playShootEffect(pos, hitPos); // if (Vec3.squaredDistance(GameData.player.node.getWorldPosition(), pos) <= GameData.fireEffect_RangeSqr) {
              //     this.fireEffect[i].getComponentInChildren(ParticleSystem).play();
              // }
              // console.log(this.fireEffect[i])

              bullet.hitInit(this.hitTarget, dis, damage, 400);
            } //伤害十字


            if (this.hitTarget && this.isPlayerCtrl) {
              var comp = this.hitTarget.getComponent(Hero);

              if (comp) {
                EventMgr.event(EventType.Game_Aim_Hit);
              }
            }
          }

          this.nowGunIndex++;

          if (this.nowGunIndex >= this.gunPos.length) {
            this.nowGunIndex = 0;
          }

          if (this.isPlayerCtrl) {
            //设备震动
            Platform.instance.vibrateShort(); //镜头晃动

            this.fireAxis += 0;
            var shootPush = 0.5;

            if (this.heroType != 1) {
              shootPush = 3;
            } // switch (this.heroType) {
            //     case HeroType.Tank_1:
            //         break;
            //     default:
            //         console.warn("后坐力参数没有对应恐龙类型", this.heroType)
            //         break;
            // }


            if (this.fireAxis > 1) {
              this.fireAxis = 1;
            }

            GameData.cam.getComponent(MainCamera).camUpPush(shootPush);
            EventMgr.event(EventType.Game_Aim_Shoot, this.fireAxis); //播放开火音效
            // SoundMgr.instacne.playSoundNoLimted(SoundType.SniperGun);

            switch (this.heroType) {
              case HeroType.Tank_1:
                SoundMgr.instacne.playSound(SoundType.Tank1Shot);
                break;

              case HeroType.Tank_2:
                SoundMgr.instacne.playSound(SoundType.Tank2Shot);
                break;

              case HeroType.Tank_3:
                SoundMgr.instacne.playSound(SoundType.Tank3Shot);
                break;

              case HeroType.Tank_4:
                SoundMgr.instacne.playSound(SoundType.Tank4Shot);
                break;

              case HeroType.Tank_5:
                SoundMgr.instacne.playSound(SoundType.Tank5Shot);
                break;
            }
          }
        } // #endregion
        //#region 阵营初始化
        ;

        _proto.campInit = function campInit() {
          var body = this.getComponentInChildren(RigidBody);

          switch (GameData.startGameMode) {
            case "team":
              switch (this.camp) {
                case CampType.Player:
                  this.aimMask = GameData.enemy_mask;

                  if (this.isPlayerCtrl) {
                    body.setGroup(GameData.player_mask);
                  } else {
                    body.setGroup(GameData.npc_mask);
                  }

                  break;

                case CampType.Enemy:
                  this.aimMask = GameData.player_mask + GameData.npc_mask;
                  body.setGroup(GameData.enemy_mask);
                  break;
              }

              break;

            case "single":
              this.aimMask = GameData.enemy_mask;
              body.setGroup(GameData.enemy_mask);
              break;
          }

          this.aimMask += GameData.sceneObj_Mask;
        } // #endregion
        // #region 血量

        /** 血量初始化 */
        ;

        _proto.hpInit = function hpInit(maxHp) {
          if (maxHp === void 0) {
            maxHp = 100;
          }

          if (this.getComponent(PlayerCtr)) {
            if (this.hpBar) {
              this.hpBar.node.active = false;
              this.hpBar = null;
              if (!this.playerHpBar) this.playerHpBar = find("Canvas").getChildByPath("GameUI/PlayerHpBar").getComponent(Bar);
            }
          }

          if (this.hpBar) {
            this.hpBar.changeColor(this.camp); // this.hpBar.node.active = true;
          }

          this.maxHp = maxHp;
          this.nowHp = this.maxHp;
          this.isDead = false;
          this.hurtHeroNames.length = 0;

          for (var i = 0; i < this.colliders.length; i++) {
            this.colliders[i].enabled = true;
          }
        }
        /**血条Update */
        ;

        _proto.hpUpdate = function hpUpdate(dt) {
          var cam = GameData.cam;
          if (!cam) return;

          if (this.hpBar) {
            if (this.isDead) {
              this.hpBar.node.active = false;
            } else {
              //这里可以选择增加一个是否在视野内的显示的功能
              // let isSightBlock = GameData.player && GameData.player.inSightTargets.indexOf(this) == -1;
              var way = new Vec3();
              way = Vec3.subtract(way, this.node.getWorldPosition(), cam.node.getWorldPosition());
              var dis = way.length();
              var range = 250;
              var axis = (range - dis) / range;
              if (axis < 0) axis = 0;

              if (GameData.player.inSightTargets.indexOf(this) == -1) {
                this.hpBar.node.active = false;
              } else if (axis > 0.25) {
                // if (axis < 0.5) {
                //     let alpha = (axis - 0.25) / 0.25;
                //     // if (!isSightBlock && alpha < 0.5) {
                //     //     alpha = 0.5;
                //     // }
                //     this.hpBar.changeAlpha(alpha);
                //     axis = 0.1;
                // }
                var angle = Tool.getAngle2DWay(new Vec2(way.x, way.z), new Vec2(cam.node.forward.x, cam.node.forward.z));
                if (!angle) ;else if (Math.abs(angle) > 100) {
                  this.hpBar.node.active = false;
                } else {
                  this.hpBar.node.setScale(new Vec3(axis, axis, axis));
                  this.hpBar.node.active = true;
                  this.hpBar.follow(cam, this.node, new Vec3(0, (this.minYAxisHeight + this.maxYAXISHeight) / 2 + 1.5, 0));
                  this.hpBar.value = this.nowHp / this.maxHp;
                }
              } else {
                this.hpBar.node.active = false;
              }
            }
          } else if (this.playerHpBar) {
            this.playerHpBar.value = this.nowHp / this.maxHp;
            this.playerHpBar.node.getComponentInChildren(Label).string = Math.floor(this.nowHp).toString();
          }
        }
        /**治疗 */
        ;

        _proto.heal = function heal(value) {
          if (this.isDead) return;

          if (this.isRepair) {
            var axis = this.repairAxis;

            if (this.isBuffing) {
              axis *= 1 + this.buffingAxis;
            }

            value *= 1 + axis;
          }

          this.nowHp += value;

          if (this.nowHp > this.maxHp) {
            this.nowHp = this.maxHp;
          }
        }
        /**受伤 */
        ;

        _proto.hurt = function hurt(value, fromTarget, hurtPos) {
          if (this.isDead) return;

          if (StorageMgr.instance.storageData.playCount != 0) {
            //技能4带有的减伤Buff
            if (this.isSkill4On) {
              value *= 1 - GameData.skill_4_defendAxis;
            } //道具减伤Buff


            if (this.isDefendBuff_Item_On) {
              value *= 1 - this.defendBuff_Item_reduceAxis;
            } //不同段位对玩家的减伤


            if (this.isPlayerCtrl) {
              var nowRankLevel = 0;

              for (var i = 0; i < GameData.rankScore.length; i++) {
                if (StorageMgr.instance.storageData.rankPoint < GameData.rankScore[i]) {
                  nowRankLevel = i;
                  break;
                }
              }

              var damageAxis = GameData.enemyDamageAxis[nowRankLevel];
              value *= damageAxis;
            }

            if (Tool.percent(this.defendArmor / 100)) {
              //触发免伤
              if (this.isBrave) {
                var axis = this.braveAxis;

                if (this.isBuffing) {
                  axis *= 1 + this.buffingAxis;
                }

                this.heal(this.maxHp * axis);
              }

              if (fromTarget) {
                if (fromTarget.node.name == "Player") {
                  EventMgr.event(EventType.Game_Player_Miss);
                }
              }

              if (this.isPlayerCtrl) {
                EventMgr.event(EventType.Game_Player_Defend);
              } // return false;


              value *= 0.5;
            }
          } else {
            value = this.maxHp;
          }

          var way;

          if (hurtPos) {
            //受伤害来源方向
            way = new Vec3();
            Vec3.subtract(way, hurtPos, this.node.getWorldPosition()); //方向指向受到攻击的位置

            this.animPushWay(way); //传入与推动力方向相反的方向

            var hitAngle = Tool.d3_getAngle(way, this.model.forward);

            if (hitAngle < 35) {
              //打到后面了，双倍伤害
              value *= 2;

              if (fromTarget) {
                if (fromTarget.isAccurate) {
                  value *= 1 + fromTarget.accurateAxis;
                }
              }
            }
          }

          value = Math.floor(value);
          this.nowHp -= value;

          if (this.nowHp <= 0) {
            this.nowHp = 0;
            this.die(fromTarget);
          }

          if (fromTarget) {
            if (fromTarget.node.name == "Player") {
              // console.log("玩家对", this.node.name, "造成伤害", value);
              EventMgr.event(EventType.Game_Player_Atk, this.node.name, value);
              EventMgr.event(EventType.Game_Player_Hit);
            }

            var index = this.hurtHeroNames.indexOf(fromTarget.node.name);

            if (index != -1) {
              this.hurtHeroNames.splice(index, 1);
            }

            this.hurtHeroNames.unshift(fromTarget.node.name);
          }

          if (this.isPlayerCtrl) {
            EventMgr.event(EventType.Game_Player_Hurt);
          }

          return true;
        }
        /**死亡 */
        ;

        _proto.die = function die(fromTarget) {
          var _this2 = this;

          if (this.isDead) return;
          this.isDead = true;

          for (var i = 0; i < this.colliders.length; i++) {
            this.colliders[i].enabled = false;
          } // this.anim.changeDeadMat(this.heroType);


          this.hitFollowTarget = null;
          this.inSightTargets.length = 0;
          this.Skill_1_End();
          this.Skill_2_End();
          this.Skill_4_End();
          this.stealth_Off();
          this.isSkillAnim = false;
          this.agent.die();
          this.attackBuff_Item_Off();
          this.speedUpBuff_Item_Off();
          this.defendBuff_Item_Off();
          this.speedBuff_Off();
          this.attackBuff_Off();
          this.defendBuff_Off();
          this.healBuff_Off();
          this.flameBuffOff();
          this.atttakInvertalUpBuff_Item_Off();
          this.aimTarget = null;
          EventMgr.event(EventType.Game_Aim_Target_Update, this.aimTarget);

          if (fromTarget) {
            var index = this.hurtHeroNames.indexOf(fromTarget.node.name);

            if (index != -1) {
              this.hurtHeroNames.splice(index, 1);
            }

            var deadName = this.node.name;
            var killerName = fromTarget.node.name;

            if (!this.isPlayerCtrl) {
              deadName = GameData.tankNames[this.heroType];
            }

            if (!fromTarget.isPlayerCtrl) {
              killerName = GameData.tankNames[fromTarget.heroType];
            }

            var data = new Hero_Kill_Data(this.camp, deadName, killerName, this.hurtHeroNames);
            EventMgr.event(EventType.Game_HeroDie_Event, data);
          }

          var dieFx = PoolMgr.instance.getObj(PoolObjType.BoomP);
          dieFx.node.setWorldPosition(this.node.getWorldPosition());
          EventMgr.event(EventType.Game_Tank_Die, this);
          var disSqr = Vec3.squaredDistance(this.node.getWorldPosition(), GameData.player.node.getWorldPosition());
          var soundAxis = (5000 - disSqr) / 5000;
          var clipName = null; // 死亡声音

          clipName = SoundType.TankDestory; // switch (this.heroType) {
          //     case HeroType.Dinasor1:
          //         clipName = SoundType.D1Die;
          //         break;
          //     case HeroType.Dinasor2:
          //         clipName = SoundType.D2Die;
          //         break;
          //     case HeroType.Dinasor3:
          //         clipName = SoundType.D3Die;
          //         break;
          //     case HeroType.Dinasor4:
          //         clipName = SoundType.D4Die;
          //         break;
          //     case HeroType.Dinasor5:
          //         break;
          //     case HeroType.Dinasor6:
          //         clipName = SoundType.D6Die;
          //         break;
          //     default:
          //         break;
          // }

          if (fromTarget && soundAxis > 0 && clipName != null) {
            if (SoundMgr.instacne) SoundMgr.instacne.playSound(clipName, soundAxis);
          }

          if (fromTarget) {
            //死亡过3秒原地复活(ai用)
            if (StorageMgr.instance.storageData.playCount != 0) {
              this.scheduleOnce(function () {
                if (!_this2.isPlayerCtrl) {
                  var array = GameData.aiGameTankData;

                  _this2.reBorn(Tool.getRandomInArray(array));
                } else {
                  EventMgr.event(EventType.Game_Player_Dead);
                }
              }, 3);
            } else {
              this.scheduleOnce(function () {
                _this2.model.active = false;
              }, 3);
            }
          }
        };

        _proto.reBorn = function reBorn(data) {
          if (GameData.startGameMode == "single") {
            this.bornPos = GameData.singleBornPoint.children[Tool.randomInt(0, GameData.singleBornPoint.children.length - 1)].getWorldPosition();
          }

          var pos = this.bornPos;
          pos.x += Tool.randomNumber(-1, 1);
          pos.z += Tool.randomNumber(-1, 1);
          this.node.setWorldPosition(pos);
          this.start(); // this.heroDataInit(data);

          this.modelInit(data, this.hpBar); //防止狙击手死亡BUG出现

          this.Skill_2_End();
        } // #endregion
        // #region 寻敌模块
        ;

        _proto.checkInit = function checkInit(targets, checkMask) {
          this.checkTargets = targets;
          this.checkMask = checkMask; // console.log(this.checkTargets, this.checkMask, this.node.name);
        };

        _proto.checkUpdate = function checkUpdate() {
          this.inSightTargets.length = 0;
          if (this.isDead) return;
          var checkMask = this.checkMask;
          var selfPos = this.node.getWorldPosition();
          selfPos.y += 1.5;
          var way = new Vec3();
          var names = [];
          var minDis = this.isPlayerCtrl ? 500 : this.isSkill2On ? GameData.enemyFindRange * 2 : GameData.enemyFindRange;
          this.closestTarget = null;
          var allTargets = [];

          for (var i = 0; i < this.checkTargets.length; i++) {
            //如果是自己不检测
            if (this.checkTargets[i].node.getSiblingIndex() == this.node.getSiblingIndex()) continue; //死了就不用检测了

            if (this.checkTargets[i].isDead) continue; //如果处于隐身状态，也不用检测了

            var targetPos = this.checkTargets[i].node.getWorldPosition();
            targetPos.y += 1.5;
            way = Vec3.subtract(way, targetPos, selfPos);
            var dis = way.length();
            way.normalize();
            var ray = new Ray(selfPos.x, selfPos.y, selfPos.z, way.x, way.y, way.z);
            if (this.isPlayerCtrl) ;else {
              //如果是AI的话，检测不到隐身
              if (this.checkTargets[i].isStealthOn) continue;
            }

            if (PhysicsSystem.instance.raycast(ray, checkMask, dis, true)) {
              // if()
              // let target = PhysicsSystem.instance.raycastClosestResult.collider.node;
              if (this.isPlayerCtrl) ;
            } else {
              if (!this.isPlayerCtrl) {
                //拿最近的目标(AI才要)
                if (dis < minDis) {
                  // console.log("最小距离", dis, minDis);
                  minDis = dis;
                  this.closestTarget = this.checkTargets[i];
                }

                allTargets.push(this.checkTargets[i]);
              } else {
                this.inSightTargets.push(this.checkTargets[i]);
                names.push(this.checkTargets[i].node.name);
              }
            }
          }

          if (this.isPlayerCtrl) ;
        } // #endregion
        // #region 撕咬猛冲技能
        ;

        _proto.Skill_1_On = function Skill_1_On() {
          if (this.skill1CD > 0) return;
          if (this.isDead) return;
          if (this.isSkill1On) return;
          this.isSkill1On = true;
          this.isSkill1Hit = true; // this.moveSpeed *= GameData.skill_1_speedAxis;
          // this.agent.setAgentMaxSpeed(this.moveSpeed);

          this.skill1CD = GameData.skill_1_cd;
          this.scheduleOnce(this.Skill_1_End, GameData.skill_1_time); // let range = this.node.getChildByName("Range");
          // range.active = true;
          // let axis = Math.sqrt(GameData.skill_1_distanceSqr);
          // range.scale = new Vec3(axis, axis, axis);

          this.speedBuff_On();
          this.attackBuff_On(); // if (this.isPlayerCtrl && SoundMgr.instacne)
          // SoundMgr.instacne.playSound(SoundType.SpeedUp);
        };

        _proto.Skill_1_Update = function Skill_1_Update(dt) {
          //CD计时
          this.skill1CD -= dt;
          if (this.skill1CD < 0) this.skill1CD = 0;

          if (this.isSkill1On) {
            //如果自身已死亡
            if (this.isDead) {
              this.Skill_1_End();
              return;
            } //咬加血的检测


            if (this.isSkill1Hit) {
              var others = this.camp == CampType.Player ? GameData.enemies : GameData.players;

              for (var i = 0; i < others.length; i++) {
                //检测方已死亡则跳过
                if (others[i].isDead) continue;

                if (Vec3.squaredDistance(this.node.getWorldPosition(), others[i].node.getWorldPosition()) < GameData.skill_1_distanceSqr) {
                  this.isSkill1Hit = false;
                  this.heal(GameData.skill_1_heal);
                  var damage = GameData.skill_1_damage; //道具的攻击Buff攻击倍数计算

                  if (this.isAttackBuff_Item_On) {
                    damage *= this.attackBuff_Item_addAxis + 1;
                  }

                  others[i].hurt(damage, this, null); // let range = this.node.getChildByName("Range");
                  // range.active = false;

                  this.healBuff_On(); //咬到就退出技能

                  this.unschedule(this.Skill_1_End);
                  this.Skill_1_End();
                  this.Skill_1_AnimDo();
                  break;
                }
              }
            }
          }
        };

        _proto.Skill_1_AnimDo = function Skill_1_AnimDo() {
          this.isSkillAnim = true;

          if (this.isPlayerCtrl) {
            // EventMgr.event(EventType.Game_Aim_SkillHit_On);
            EventMgr.event(EventType.Game_Skill1_Bite);
          }

          this.scheduleOnce(this.Skill_1_AnimEnd, 0.6);
        };

        _proto.Skill_1_AnimEnd = function Skill_1_AnimEnd() {
          if (this.isPlayerCtrl) ; // EventMgr.event(EventType.Game_Aim_SkillHit_Off);

          this.isSkillAnim = false;
        };

        _proto.Skill_1_End = function Skill_1_End() {
          this.unschedule(this.Skill_1_End);
          this.isSkill1On = false;
          this.isSkill1Hit = false;
          this.attackBuff_Off(); // this.moveSpeed /= GameData.skill_1_speedAxis;
          // if (!this.isDead)
          //     this.agent.setAgentMaxSpeed(this.moveSpeed);
          // let range = this.node.getChildByName("Range");
          // range.active = false;
          // if (this.isPlayerCtrl && SoundMgr.instacne)
          //     SoundMgr.instacne.playSound(SoundType.SpeedDown);
        } // #endregion
        // #region 狙击模式技能开启
        ;

        _proto.Skill_2_On = function Skill_2_On() {
          if (this.skill2CD > 0) {
            return;
          }

          if (this.isDead) return;
          this.skill2CD = GameData.skill_2_cd;
          this.isSkillAnim = true;
          this.isSkill2On = true;
          this.scheduleOnce(this.Skill_2_Do, 0.25); // this.attackBuff_On();

          if (this.isPlayerCtrl) {
            // EventMgr.event(EventType.Game_Aim_SkillHit_On);
            EventMgr.event(EventType.Game_Skill2_Aim_Open);
            EventMgr.event(EventType.Game_Reload_Close);
          }
        };

        _proto.Skill_2_Update = function Skill_2_Update(dt) {
          this.skill2CD -= dt;
          if (this.skill2CD < 0) this.skill2CD = 0;

          if (this.isPlayerCtrl && !this.isDead && this.isSkill2On) {
            EventMgr.event(EventType.Game_Skill2_Aim_Update, 1 - this.nowFireTime / this.fireCD);
          }
        };

        _proto.Skill_2_Do = function Skill_2_Do() {
          if (this.isPlayerCtrl) {
            var renders = this.model.getComponentsInChildren(MeshRenderer);

            for (var i = 0; i < renders.length; i++) {
              renders[i].enabled = false;
            } // this.model.active = false;

          }
        } //负责镜头之间的转移的Update隐藏在了摄像机Check里,一些伤害逻辑什么的都嵌入了摄像机和开火模块里
        ;

        _proto.Skill_2_End = function Skill_2_End() {
          if (this.skill2CD > 0) {
            return;
          } // console.log("技能2取消");


          this.skill2CD = GameData.skill_2_cd;
          this.unschedule(this.Skill_2_Do); // this.attackBuff_Off();

          this.isSkill2On = false; // this.model.active = true;

          var renders = this.model.getComponentsInChildren(MeshRenderer);

          for (var i = 0; i < renders.length; i++) {
            renders[i].enabled = true;
          }

          this.isSkillAnim = false;

          if (this.isPlayerCtrl) {
            // EventMgr.event(EventType.Game_Aim_SkillHit_Off);
            EventMgr.event(EventType.Game_Skill2_Aim_Close);
            EventMgr.event(EventType.Game_Reload_Open);
          }
        } // #endregion
        // #region 装甲横扫技能开启
        ;

        _proto.Skill_4_On = function Skill_4_On() {
          if (this.skill4CD > 0) return;
          this.isSkill4On = true;
          this.skill4CD = GameData.skill_4_cd;
          this.isSkillAnim = true;
          this.scheduleOnce(this.Skill_4_AnimEnd, 0.7);
          this.scheduleOnce(this.Skill_4_End, GameData.skill_4_time);
          this.skill4HitTargets.length = 0;
          this.defendBuff_On();
          if (this.isPlayerCtrl && SoundMgr.instacne) ;
        };

        _proto.Skill_4_Update = function Skill_4_Update(dt) {
          this.skill4CD -= dt;
          if (this.skill4CD < 0) this.skill4CD = 0;

          if (this.isSkillAnim && this.isSkill4On) {
            var targets = this.camp == CampType.Player ? GameData.enemies : GameData.players;
            var disSqr;

            for (var i = 0; i < targets.length; i++) {
              if (targets[i].isDead) continue;
              if (this.skill4HitTargets.indexOf(targets[i]) != -1) continue;
              disSqr = Vec3.squaredDistance(this.node.getWorldPosition(), targets[i].node.getWorldPosition());

              if (disSqr < GameData.skill_4_rangeSqr) {
                var damage = GameData.skill_4_damage; //道具的攻击Buff攻击倍数计算

                if (this.isAttackBuff_Item_On) {
                  damage *= this.attackBuff_Item_addAxis + 1;
                }

                targets[i].hurt(damage, this, null);
                this.skill4HitTargets.push(targets[i]);
                if (this.isPlayerCtrl) EventMgr.event(EventType.Game_Skill4_Sweep);
              }
            }
          }
        };

        _proto.Skill_4_AnimEnd = function Skill_4_AnimEnd() {
          this.isSkillAnim = false;
          if (this.isPlayerCtrl) ;
        };

        _proto.Skill_4_End = function Skill_4_End() {
          this.isSkill4On = false;
          this.unschedule(this.Skill_4_End);
          this.unschedule(this.Skill_4_AnimEnd);
          this.Skill_4_AnimEnd();
        } // #endregion
        // #region 战争冲撞技能开启
        ;

        _proto.Skill_5_On = function Skill_5_On() {
          if (this.skill5CD > 0) return;
          this.isSkill5On = true;
          this.skill5CD = GameData.skill_5_cd;
          this.skill5HitTargets.length = 0; // this.moveSpeed *= GameData.skill_5_speedAxis;

          this.scheduleOnce(this.Skill_5_End, GameData.skill_5_time);
          this.speedBuff_On();

          if (this.isPlayerCtrl) {
            EventMgr.event(EventType.Game_Aim_SkillHit_On); // if (SoundMgr.instacne)
            // SoundMgr.instacne.playSound(SoundType.SpeedUp);
          }
        };

        _proto.Skill_5_Update = function Skill_5_Update(dt) {
          this.skill5CD -= dt;
          if (this.skill5CD < 0) this.skill5CD = 0;

          if (this.isSkill5On && !this.isDead) {
            var targets = this.camp == CampType.Player ? GameData.enemies : GameData.players;
            var disSqr;

            for (var i = 0; i < targets.length; i++) {
              if (this.skill5HitTargets.indexOf(targets[i]) != -1) continue;
              if (targets[i].isDead) continue;
              disSqr = Vec3.squaredDistance(this.node.getWorldPosition(), targets[i].node.getWorldPosition());

              if (disSqr < GameData.skill_5_rangeSqr) {
                var damage = GameData.skill_5_damage; //（技能5）攻击Buff伤害倍数计算

                if (this.isAttackBuffOn) {
                  damage *= this.attackBuff_addAxis + 1;
                } //道具的攻击Buff攻击倍数计算


                if (this.isAttackBuff_Item_On) {
                  damage *= this.attackBuff_Item_addAxis + 1;
                }

                targets[i].hurt(damage, this, null);
                this.Skill_5_Anim_Do();
                this.AttackBuffOn();
                this.skill5HitTargets.push(targets[i]);
              }
            }
          }
        };

        _proto.Skill_5_Anim_Do = function Skill_5_Anim_Do() {
          this.isSkillAnim = true;
          this.unschedule(this.Skill_5_Anim_End);
          this.scheduleOnce(this.Skill_5_Anim_End, 0.8);

          if (this.isPlayerCtrl) {
            // if (SoundMgr.instacne)
            //     SoundMgr.instacne.playSound(SoundType.DashHit);
            EventMgr.event(EventType.Game_Skill5_Hit);
          }
        };

        _proto.Skill_5_Anim_End = function Skill_5_Anim_End() {
          this.isSkillAnim = false;
        };

        _proto.Skill_5_End = function Skill_5_End() {
          // this.moveSpeed /= GameData.skill_5_speedAxis;
          this.isSkill5On = false;

          if (this.isPlayerCtrl) {
            EventMgr.event(EventType.Game_Aim_SkillHit_Off); // if (SoundMgr.instacne)
            //     SoundMgr.instacne.playSound(SoundType.SpeedDown);
          }
        } // #endregion
        // #region 单独的隐身效果（暂时只有光学隐身用到，后面可能加入进入草丛也有隐身的设定）
        // albleoHandle: number = 1073745924;//这里debug出来过，都是一样的handle；
        ;

        _proto.stealth_On = function stealth_On() {
          if (this.isStealthOn) return;
          if (this.isDead) return;
          this.isStealthOn = true;
          var allRender = this.model.getComponentsInChildren(MeshRenderer); // for (let i = 0; i < allRender.length; i++) {
          //     let mats = allRender[i].materials;
          //     for (let j = 0; j < mats.length; j++) {
          //         if (this.defendBuff != null) {
          //             mats[j].passes[0].setUniform(this.albleoHandle, new Color(255, 255, 255, 201))
          //         } else {
          //             mats[j].passes[0].setUniform(this.albleoHandle, new Color(255, 255, 255, 100))
          //         }
          //     }
          // }
        };

        _proto.stealth_Off = function stealth_Off() {
          if (!this.isStealthOn) return;
          this.isStealthOn = false;
          var allRender = this.model.getComponentsInChildren(MeshRenderer); // for (let i = 0; i < allRender.length; i++) {
          //     let mats = allRender[i].materials;
          //     for (let j = 0; j < mats.length; j++) {
          //         mats[j].passes[0].setUniform(this.albleoHandle, new Color(255, 255, 255, 255))
          //     }
          // }
        } // #endregion
        // #region 攻击Buff(目前是蓄力炮专用)
        ;

        _proto.AttackBuffOn = function AttackBuffOn() {
          this.isAttackBuffOn = true;
          this.attackBuff_addAxis += GameData.attackBuff_addAxis;

          if (this.attackBuff_addAxis > GameData.attackBuff_maxAxis) {
            this.attackBuff_addAxis = GameData.attackBuff_maxAxis;
          }

          this.attackBuff_On();
          this.scheduleOnce(this.AttackBuffOff, GameData.attackBuff_Time);
        };

        _proto.AttackBuffOff = function AttackBuffOff() {
          this.isAttackBuffOn = false;
          this.attackBuff_addAxis = 0;
        } // #endregion
        // #region 道具效果
        ;

        _proto.useItem = function useItem(index) {
          console.log("道具效果", index);

          switch (index) {
            case 0:
              this.speedBuff_On();
              break;

            case 1:
              this.atttakInvertalUpBuff_Item_On();
              break;

            case 2:
              this.defendBuff_Item_On();
              break;

            case 3:
              this.heal(this.maxHp * 0.5);
              this.healBuff_On();
              break;

            case 4:
              this.attackBuff_Item_On();
              break;
          }
        } //引燃效果
        ;

        _proto.flameBuffOn = function flameBuffOn(flameFromTarget) {
          this.flameBuffOff();
          this.flameFromTarget = flameFromTarget;
          this.flameDo();
          this.scheduleOnce(this.flameDo, 1);
          var time = this.flameBaseTime;

          if (flameFromTarget.isEfficient) {
            time *= 1 + this.efficientAxis;
          }

          this.flameTimes = Math.floor(time - 1);
        };

        _proto.flameDo = function flameDo() {
          this.flameTimes--;
          var value = this.flameBaseDamage;

          if (this.isBuffing) {
            value *= 1 + this.buffingAxis;
          }

          this.hurt(Math.floor(this.maxHp * value), this.flameFromTarget, null);

          if (this.flameTimes <= 0) {
            this.flameTimes = 0;
            this.flameBuffOff();
          } else {
            this.scheduleOnce(this.flameDo, 1);
          }
        };

        _proto.flameBuffOff = function flameBuffOff() {
          this.unschedule(this.flameDo);
          this.flameTimes = 0;
          this.flameFromTarget = null;
        } //攻击加成buff
        ;

        _proto.attackBuff_Item_On = function attackBuff_Item_On() {
          this.attackBuff_Item_Off();
          this.isAttackBuff_Item_On = true;
          this.attackBuff_On();
          this.scheduleOnce(this.attackBuff_Item_Off, this.attackBuff_Item_Time);
        };

        _proto.attackBuff_Item_Off = function attackBuff_Item_Off() {
          this.attackBuff_Off();
          this.unschedule(this.attackBuff_Item_Off);
          this.isAttackBuff_Item_On = false;
        } //攻速加成BUff
        ;

        _proto.atttakInvertalUpBuff_Item_On = function atttakInvertalUpBuff_Item_On() {
          this.atttakInvertalUpBuff_Item_Off();
          this.isAtttakInvertalUpBuff_Item_On = true; // if (this.isPlayerCtrl && SoundMgr.instacne)
          //     SoundMgr.instacne.playSound(SoundType.SpeedUp);

          this.scheduleOnce(this.atttakInvertalUpBuff_Item_Off, this.attackInvertalUpBuff_Item_Time);
        };

        _proto.atttakInvertalUpBuff_Item_Off = function atttakInvertalUpBuff_Item_Off() {
          this.unschedule(this.atttakInvertalUpBuff_Item_Off);
          this.isAtttakInvertalUpBuff_Item_On = false;
        } //增速Buff
        ;

        _proto.speedUpBuff_Item_On = function speedUpBuff_Item_On() {
          this.speedUpBuff_Item_Off();
          this.isSpeedBuff_Item_On = true;
          this.speedBuff_On(); // if (this.isPlayerCtrl && SoundMgr.instacne)
          //     SoundMgr.instacne.playSound(SoundType.SpeedUp);

          this.scheduleOnce(this.speedUpBuff_Item_Off, this.speedBuff_Item_Time);
        };

        _proto.speedUpBuff_Item_Off = function speedUpBuff_Item_Off() {
          this.unschedule(this.speedUpBuff_Item_Off);
          this.isSpeedBuff_Item_On = false;
        } //护盾减伤Buff
        ;

        _proto.defendBuff_Item_On = function defendBuff_Item_On() {
          this.defendBuff_Item_Off();
          this.isDefendBuff_Item_On = true;
          this.defendBuff_On(); // if (this.isStealthOn) {
          //     let allRender = this.model.getComponentsInChildren(MeshRenderer);
          //     for (let i = 0; i < allRender.length; i++) {
          //         let mats = allRender[i].materials;
          //         for (let j = 0; j < mats.length; j++) {
          //             mats[j].passes[0].setUniform(this.albleoHandle, new Color(255, 255, 255, 201))
          //         }
          //     }
          // }

          this.scheduleOnce(this.defendBuff_Item_Off, this.defendBuff_Item_Time);
        };

        _proto.defendBuff_Item_Off = function defendBuff_Item_Off() {
          // if (this.isStealthOn) {
          //     let allRender = this.model.getComponentsInChildren(MeshRenderer);
          //     for (let i = 0; i < allRender.length; i++) {
          //         let mats = allRender[i].materials;
          //         for (let j = 0; j < mats.length; j++) {
          //             mats[j].passes[0].setUniform(this.albleoHandle, new Color(255, 255, 255, 100))
          //         }
          //     }
          // }
          this.unschedule(this.defendBuff_Item_Off);
          this.isDefendBuff_Item_On = false;
        } // #endregion
        // #region 外部效果开关
        ;

        _proto.speedBuff_On = function speedBuff_On(time) {// this.speedBuff_Off();
        };

        _proto.speedBuff_Off = function speedBuff_Off() {// this.unschedule(this.speedBuff_Off);
          // if (this.speedBuff != null) {
          //     PoolMgr.instance.recyleObj(this.speedBuff);
          //     this.speedBuff = null;
          // }
        };

        _proto.attackBuff_On = function attackBuff_On(time) {
          if (time === void 0) {
            time = 10;
          }

          this.attackBuff_Off();
          this.attackBuff = PoolMgr.instance.getObj(PoolObjType.Power_S);
          this.buffShow.addChild(this.attackBuff.node);
          this.attackBuff.node.setPosition(Vec3.ZERO);
          this.scheduleOnce(this.attackBuff_Off, time);
        };

        _proto.attackBuff_Off = function attackBuff_Off() {
          if (this.attackBuff != null) {
            PoolMgr.instance.recyleObj(this.attackBuff);
            this.attackBuff = null;
          }

          this.unschedule(this.attackBuff_Off);
        };

        _proto.defendBuff_On = function defendBuff_On(time) {
          if (time === void 0) {
            time = 10;
          }

          this.defendBuff_Off();
          this.defendBuff = PoolMgr.instance.getObj(PoolObjType.Shield_S);
          this.buffShow.addChild(this.defendBuff.node);
          this.defendBuff.node.setPosition(Vec3.ZERO);
          this.scheduleOnce(this.defendBuff_Off, time);
        };

        _proto.defendBuff_Off = function defendBuff_Off() {
          if (this.defendBuff != null) {
            PoolMgr.instance.recyleObj(this.defendBuff);
            this.defendBuff = null;
          }

          this.unschedule(this.defendBuff_Off);
        } // #endregion
        // #region 表情系统
        ;

        _proto.emoji_On = function emoji_On(emojiType) {
          if (!this.isEmojiOn) {
            this.isEmojiOn = true;
            var emoji = PoolMgr.instance.getObj(emojiType);
            this.faceShow.addChild(emoji.node);
            emoji.node.setPosition(Vec3.ZERO);
            this.scheduleOnce(this.emoji_Off, 3);
          }
        };

        _proto.emoji_Off = function emoji_Off() {
          this.unschedule(this.emoji_Off);
          this.isEmojiOn = false;
        } //治疗Buff播放
        ;

        _proto.healBuff_On = function healBuff_On() {
          this.healBuff_Off();
          this.healBuff = PoolMgr.instance.getObj(PoolObjType.Heal_S);
          this.buffShow.addChild(this.healBuff.node);
          this.healBuff.node.setPosition(Vec3.ZERO);
          this.scheduleOnce(this.healBuff_Off, this.healBuffTime);
        };

        _proto.healBuff_Off = function healBuff_Off() {
          if (this.healBuff != null) {
            PoolMgr.instance.recyleObj(this.healBuff);
            this.healBuff = null;
          }

          this.unschedule(this.healBuff_Off);
        } // #endregion
        ;

        return Hero;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HitEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolMgr.ts', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, PoolMgr, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      PoolMgr = module.PoolMgr;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b4610M+g8hJiJQ7qB9WB3kx", "HitEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HitEffect = exports('HitEffect', (_dec = ccclass('HitEffect'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(HitEffect, _PoolComp);

        function HitEffect() {
          return _PoolComp.apply(this, arguments) || this;
        }

        var _proto = HitEffect.prototype;

        _proto.firstBorn = function firstBorn() {};

        _proto.clear = function clear() {};

        _proto.init = function init() {
          var _this = this;

          this.node.active = true;
          this.scheduleOnce(function () {
            PoolMgr.instance.recyleObj(_this);
          }, 0.35);
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        return HitEffect;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/hitTips.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Component, EventType, SoundType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
      SoundType = module.SoundType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "93f38rQGFhOEYH7QYUyPcD6", "hitTips", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var hitTips = exports('hitTips', (_dec = ccclass('hitTips'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(hitTips, _Component);

        function hitTips() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.anim = void 0;
          _this.isVoiceTalking = false;
          return _this;
        }

        var _proto = hitTips.prototype;

        _proto.onLoad = function onLoad() {
          this.anim = this.node.getComponent(Animation);
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_Player_Hit, this, this.playAnim);
        };

        _proto.playAnim = function playAnim() {
          var _this2 = this;

          if (this.isVoiceTalking) return; // this.anim.play();

          this.isVoiceTalking = true;
          this.scheduleOnce(function () {
            _this2.isVoiceTalking = false;
          }, 3);
          var soundArray = [SoundType.V_Damage1, SoundType.V_Damage2, SoundType.V_Damage3]; // SoundMgr.instacne.playSound(Tool.getRandomInArray(soundArray));
        };

        return hitTips;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Home.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataClass.ts', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './SoundMgr.ts', './StorageMgr.ts', './TouchMgr.ts', './Tool.ts', './ItemPool.ts', './GameLoadingUI.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, KeyCode, Vec3, tween, Component, TankStorgeData, SoundType, EventType, GameData, EventMgr, SoundMgr, StorageMgr, TouchEventType, Tool, ItemPool, GameLoadingUI;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      KeyCode = module.KeyCode;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      TankStorgeData = module.TankStorgeData;
    }, function (module) {
      SoundType = module.SoundType;
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      TouchEventType = module.TouchEventType;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      ItemPool = module.ItemPool;
    }, function (module) {
      GameLoadingUI = module.GameLoadingUI;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "25292nGtKVIsKhGaAekn9sV", "Home", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Home = exports('Home', (_dec = ccclass('Home'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Home, _Component);

        function Home() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.itemPool = void 0;
          _this.startBtn = void 0;
          _this.main = void 0;
          _this.gameLoading = void 0;
          _this.vipPanel = void 0;
          _this.signPanel = void 0;
          _this.shopPanel = void 0;
          _this.paintPanel = void 0;
          _this.upgradePanel = void 0;
          _this.tankShopPanel = void 0;
          _this.topState = void 0;
          _this.startPanel = void 0;
          _this.teachHand = void 0;
          return _this;
        }

        var _proto = Home.prototype; // isLoadGameScene: boolean = false;

        _proto.onLoad = function onLoad() {
          this.main = this.node.getChildByName("Main");
          this.startBtn = this.main.getChildByName("startBtn");
          this.gameLoading = this.node.getChildByName("GameLoading");
          this.vipPanel = this.node.getChildByName("VipPanel");
          this.signPanel = this.node.getChildByName("SignPanel");
          this.shopPanel = this.node.getChildByName("ShopPanel");
          this.paintPanel = this.node.getChildByName("PaintShop");
          this.upgradePanel = this.node.getChildByName("Upgrade");
          this.tankShopPanel = this.node.getChildByName("TankShop");
          this.itemPool = this.node.getChildByName("ItemPool").getComponent(ItemPool);
          this.topState = this.node.getChildByName("TopState");
          this.startPanel = this.node.getChildByName("StartPanel"); //初始开关

          this.gameLoading.active = false;
          this.main.active = true;
          this.vipPanel.active = false;
          this.signPanel.active = false;
          this.shopPanel.active = false;
          this.paintPanel.active = false;
          this.upgradePanel.active = false;
          this.tankShopPanel.active = false;
          this.startPanel.active = false; //时间的计算

          var nowTime = new Date().getTime();
          var today = Math.floor(nowTime / 86400000);
          var todayTime = nowTime % 86400000 - new Date().getTimezoneOffset() / 60 * 3600000;
          var h = Math.floor(todayTime / 3600000);
          var m = Math.floor(todayTime % 3600000 / 60000);
          var s = Math.floor(todayTime % 60000 / 1000);
          console.log("day:" + today + "  " + h + ":" + m + ":" + s); //如果属于新手教程，则永远记录为第一天

          if (StorageMgr.instance.storageData.playCount <= 1) {
            StorageMgr.instance.refreshOilTime();
            StorageMgr.instance.changeFirstDay(today);
            StorageMgr.instance.changeLastDay(today);
            StorageMgr.instance.changeVipTime(nowTime);
            this.dayUpdate(0);
            this.weekUpdate(); //TODO 测试(默认视为跳过新手教程)
            // StorageMgr.instance.addPlayCount();
            // StorageMgr.instance.addPlayCount();

            if (StorageMgr.instance.storageData.playCount == 0) {
              //console.log("新手教程，直接进入游戏");
              this.main.active = false;
              this.gameLoading.active = true;
              this.scheduleOnce(this.startGame, 1);
            } else if (StorageMgr.instance.storageData.playCount == 1) {
              Tool.activeIndexInChildren(this.main, 0);
              var pos = this.startBtn.getPosition();
              pos.y += 75;
              pos.x += 100;
              this.node.getChildByName("teachHand").setPosition(pos);
            }
          } else {
            //出了新手教程的判定
            //检测是否要  每日刷新  每周刷新
            var lastDay = StorageMgr.instance.storageData.lastDay;

            if (today != lastDay) {
              //如果不是同一天
              this.dayUpdate(today - lastDay); //除了lastday，到今天为止有没有经过每周的第一天

              var firstDay = StorageMgr.instance.storageData.firstDay;
              var lastIndex = lastDay - firstDay + 1;
              var nowIndex = today - firstDay;

              for (var i = lastIndex; i <= nowIndex; i++) {
                if (i % 7 == 0) {
                  this.weekUpdate();
                  break;
                }
              } //存档更新


              StorageMgr.instance.changeLastDay(today);
            }
          }
        };

        _proto.dayUpdate = function dayUpdate(delta) {
          console.log("每日更新");
          var stroageMgr = StorageMgr.instance; //签到日子推进

          stroageMgr.changeWeekSignProgress(StorageMgr.instance.storageData.weekSignProgress + delta); //vip每日奖励刷新

          stroageMgr.changeVipDailyAwardGet(false);
          stroageMgr.changeVipDailyUnlock(0); //商店每日刷新

          stroageMgr.changeShopDailyGet([false, false, false]);
        };

        _proto.weekUpdate = function weekUpdate() {
          console.log("每周更新");
          var stroageMgr = StorageMgr.instance; //签到进度清空

          stroageMgr.changeRealSignProgress(0);
          stroageMgr.changeWeekSignProgress(1);
        }
        /**检测最新数据，看是否解锁相应恐龙 */
        ;

        _proto.checkNewData = function checkNewData() {};

        _proto.start = function start() {
          this.checkNewData();
          this.gameLoading.active = false; //按钮事件激活

          this.eventOn();

          if (SoundMgr.instacne) {
            SoundMgr.instacne.playMusic(SoundType.MenuBGM);
            SoundMgr.instacne.stopMoveSound();
          }
        };

        _proto.eventOn = function eventOn() {
          EventMgr.on(EventType.Home_VIP_Open, this, this.vipPanelOpen);
          EventMgr.on(EventType.Home_Sign_Open, this, this.signPanelOpen);
          EventMgr.on(EventType.Home_Shop_Open, this, this.shopPanelOpen);
          EventMgr.on(EventType.Home_Paint_Open, this, this.paintPanelOpen);
          EventMgr.on(EventType.Home_Upgrade_Open, this, this.upgradePanelOpen);
          EventMgr.on(EventType.Home_TankShop_Open, this, this.tankShopPanelOpen);
          EventMgr.on(EventType.Home_Main_Open, this, this.mainPanelOpen);
          EventMgr.on(EventType.Home_GetItem_Effect, this, this.getItemEffect);
          Tool.d2_AddClickEvent(this.startBtn, this, this.startPanelOpen);
          EventMgr.on(EventType.Home_StartGame_Event, this, this.startGame);
          EventMgr.on(TouchEventType.keyDown, this, function (keyCode) {
            if (keyCode == KeyCode.F1) {
              StorageMgr.instance.changeMoney(10000);
            }

            if (keyCode == KeyCode.F2) {
              StorageMgr.instance.changeGold(100);
            }
          });
        };

        _proto.startGame = function startGame() {
          this.gameLoading.active = true; //获取玩家编队内的坦克信息

          GameData.playerGameTankData.length = 0;
          var datas = StorageMgr.instance.storageData.tankData;
          var nowGetTank = StorageMgr.instance.storageData.nowChooseTankIndex;

          for (var i = 0; i < nowGetTank.length; i++) {
            var data = datas[nowGetTank[i]];
            GameData.playerGameTankData.push(GameData.getTankStatData(data));
          }

          console.log("玩家坦克信息", GameData.playerGameTankData); //根据玩家的强度进行AI的坦克信息随机

          GameData.aiGameTankData.length = 0;

          if (StorageMgr.instance.storageData.playCount != 0) {
            var topId = 0;
            var rankPoint = StorageMgr.instance.storageData.rankPoint;
            var rankIndex = 0;
            var rankCount = 0;

            for (var _i = 0; _i < GameData.rankScore.length; _i++) {
              rankCount += GameData.rankScore[_i];
              rankIndex = _i;

              if (rankPoint < rankCount || _i == GameData.rankScore.length - 1) {
                rankCount = rankPoint - rankCount + GameData.rankScore[_i];
                break;
              }
            }

            if (rankIndex >= 4) {
              topId = 4;
            } else if (rankIndex == 3) {
              topId = 3;
            } else if (rankIndex == 2) {
              topId = 2;
            } else if (rankIndex == 1) {
              topId = 1;
            } else if (rankIndex == 0) {
              topId = 0;
            }

            for (var _i2 = 0; _i2 < 10; _i2++) {
              var _data = GameData.getTankStatData(new TankStorgeData(Tool.randomInt(0, topId), true));

              _data.skinId = Tool.halfPercent() ? -1 : Tool.randomInt(0, 5);
              GameData.aiGameTankData.push(_data);
            }
          } else {
            var _data2 = GameData.getTankStatData(new TankStorgeData(0, true));

            _data2.skinId = -1;
            GameData.aiGameTankData.push(_data2);
          }

          console.log("敌人坦克信息库", GameData.aiGameTankData);
          this.gameLoading.getComponent(GameLoadingUI).startGameLoading();
        };

        _proto.vipPanelOpen = function vipPanelOpen() {
          this.vipPanel.active = true;
        };

        _proto.signPanelOpen = function signPanelOpen() {
          this.signPanel.active = true;
        };

        _proto.shopPanelOpen = function shopPanelOpen() {
          this.shopPanel.active = true;
        };

        _proto.paintPanelOpen = function paintPanelOpen() {
          this.main.active = false;
          this.paintPanel.active = true;
        };

        _proto.upgradePanelOpen = function upgradePanelOpen() {
          this.main.active = false;
          this.upgradePanel.active = true;
        };

        _proto.tankShopPanelOpen = function tankShopPanelOpen(isStart) {
          if (isStart === void 0) {
            isStart = false;
          }

          this.main.active = false;
          this.tankShopPanel.active = true;
          GameData.isFromStartPanel = isStart;
        };

        _proto.mainPanelOpen = function mainPanelOpen() {
          this.main.active = true; //回归选到的坦克

          var datas = StorageMgr.instance.storageData.tankData;

          if (!datas[GameData.nowChooseTankIndex].unlockState) {
            EventMgr.event(EventType.Home_Tank_Choose, 0);
          }

          if (GameData.isFromStartPanel) {
            this.startPanelOpen();
          }
        };

        _proto.startPanelOpen = function startPanelOpen() {
          if (StorageMgr.instance.storageData.playCount <= 1) {
            this.startGame();
          } else {
            this.startPanel.active = true;
          }
        };

        _proto.getItemEffect = function getItemEffect(type, count, fromPos) {
          var _this2 = this;

          var endPos = this.topState.children[type].getWorldPosition();
          var self = this;

          var _loop = function _loop(i) {
            var item = _this2.itemPool.getItem(type);

            _this2.node.addChild(item);

            item.setWorldPosition(fromPos);
            item.setScale(new Vec3(0.8, 0.8, 1));
            var time = 0.3 + Math.random() * 0.1 - 0.05;
            var toPos1 = new Vec3(fromPos.x + Tool.randomNumber(-125, 125), fromPos.y + Tool.randomNumber(-125, 125), 0);
            tween(item).to(time, {
              worldPosition: toPos1
            }).delay(0.05).to(0.4, {
              worldPosition: endPos
            }, {
              onComplete: function onComplete() {
                self.itemPool.recoverItem(item, type);
              }
            }).start();
          };

          for (var i = 0; i < count; i++) {
            _loop();
          }
        };

        return Home;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeCamCtrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, view, lerp, Component, EventType, GameData, EventMgr;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      view = module.view;
      lerp = module.lerp;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f4b6dqVnXZPoJuL/+lhA7YA", "HomeCamCtrl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HomeCamCtrl = exports('HomeCamCtrl', (_dec = ccclass('HomeCamCtrl'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomeCamCtrl, _Component);

        function HomeCamCtrl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "rotCheckNode", _descriptor, _assertThisInitialized(_this));

          _this.viewSize = void 0;
          _this.firstTouchId = null;
          _this.orignalHorizontalAlways = 0;
          _this.orignalAxisAlways = 0;
          _this.firstRot = new Vec3(-10, -90, 0);
          _this.nowRot = new Vec3();
          _this.targetRot = new Vec3();
          _this.targetPos = new Vec3();
          _this.targetIndex = 0;
          _this.maxIndex = 4;
          return _this;
        }

        var _proto = HomeCamCtrl.prototype;

        _proto.start = function start() {
          this.camInit();
          this.posInit();
          this.viewSize = view.getVisibleSize();
          this.rotCheckNode.on(Node.EventType.TOUCH_START, this.camTouchOn, this);
          this.rotCheckNode.on(Node.EventType.TOUCH_MOVE, this.camCtrl, this);
          this.rotCheckNode.on(Node.EventType.TOUCH_END, this.camTouchOff, this);
          this.rotCheckNode.on(Node.EventType.TOUCH_CANCEL, this.camTouchOff, this);
          EventMgr.on(EventType.Home_Tank_Choose, this, this.posTo);
          EventMgr.on(EventType.Home_Tank_ChooseLeft, this, this.posLeft);
          EventMgr.on(EventType.Home_Tank_ChooseRight, this, this.posRight);
        };

        _proto.onDestroy = function onDestroy() {// this.rotCheckNode.off(Node.EventType.TOUCH_START, this.camTouchOn, this);
          // this.rotCheckNode.off(Node.EventType.TOUCH_MOVE, this.camCtrl, this);
          // this.rotCheckNode.off(Node.EventType.TOUCH_END, this.camTouchOff, this);
          // this.rotCheckNode.off(Node.EventType.TOUCH_CANCEL, this.camTouchOff, this);
          // EventMgr.off(EventType.Home_Tank_Choose, this, this.posTo);
          // EventMgr.off(EventType.Home_Tank_ChooseLeft, this, this.posLeft);
          // EventMgr.off(EventType.Home_Tank_ChooseRight, this, this.posRight);
        };

        _proto.update = function update(deltaTime) {
          this.camUpdate(deltaTime);
          this.posUpdate(deltaTime);
        } //#region 摄像机控制
        ;

        _proto.camInit = function camInit() {
          this.nowRot = this.firstRot.clone();
          this.targetRot = this.nowRot.clone();
        };

        _proto.camTouchOn = function camTouchOn(e) {
          if (!this.firstTouchId) {
            this.firstTouchId = e.getID();
            this.orignalHorizontalAlways = e.getUILocation().x / this.viewSize.width;
            this.orignalAxisAlways = e.getUILocation().y / this.viewSize.height;
          }
        };

        _proto.camCtrl = function camCtrl(e) {
          if (this.firstTouchId != null && e.getID() == this.firstTouchId) {
            var y = e.getUILocation().x / this.viewSize.width - this.orignalHorizontalAlways;
            var x = e.getUILocation().y / this.viewSize.height - this.orignalAxisAlways;
            this.orignalHorizontalAlways = e.getUILocation().x / this.viewSize.width;
            this.orignalAxisAlways = e.getUILocation().y / this.viewSize.height;
            this.targetRot.y -= y * 360;
            this.targetRot.x += x * 90;
          }
        };

        _proto.camTouchOff = function camTouchOff(e) {
          if (this.firstTouchId == e.getID()) {
            this.firstTouchId = null;
            this.orignalHorizontalAlways = e.getUILocation().x / this.viewSize.width;
            this.orignalAxisAlways = e.getUILocation().y / this.viewSize.height;
          }
        };

        _proto.camUpdate = function camUpdate(dt) {
          if (this.targetRot.x < -30) {
            this.targetRot.x = -30; // console.log("触发CamRotMAX")
          } else if (this.targetRot.x > 0) {
            this.targetRot.x = 0; // console.log("触发CamRotMIN")
          }

          var lerpAxis = 5 * dt;
          if (lerpAxis > 1) lerpAxis = 1;
          this.nowRot.x = lerp(this.nowRot.x, this.targetRot.x, lerpAxis);
          this.nowRot.y = lerp(this.nowRot.y, this.targetRot.y, lerpAxis);
          this.node.children[0].setRotationFromEuler(this.nowRot.x, 0, 0);
          this.node.setRotationFromEuler(0, this.nowRot.y, 0);
        } //#endregion
        //#region 摄像机聚焦位置
        ;

        _proto.posInit = function posInit(index) {
          if (index === void 0) {
            index = 0;
          }

          this.posTo(index);
        };

        _proto.posTo = function posTo(index) {
          this.targetIndex = index;
          this.targetPos = new Vec3(-0.5 + index * 7, 0.5, 0);
          this.targetRot = this.firstRot.clone();
          GameData.nowChooseTankIndex = index;
        };

        _proto.posUpdate = function posUpdate(dt) {
          var lerpAxis = 5 * dt;
          if (lerpAxis > 1) lerpAxis = 1;
          this.node.setPosition(this.node.getPosition().lerp(this.targetPos, lerpAxis));
        };

        _proto.posLeft = function posLeft() {
          this.targetIndex--;

          if (this.targetIndex < 0) {
            this.targetIndex = this.maxIndex; //最末端的index标记
          }

          this.posTo(this.targetIndex);
        };

        _proto.posRight = function posRight() {
          this.targetIndex++;

          if (this.targetIndex > this.maxIndex) {
            //最末端的index标记
            this.targetIndex = 0;
          }

          this.posTo(this.targetIndex);
        } // #endregion
        ;

        return HomeCamCtrl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "rotCheckNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeTankShowComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Texture2D, Vec4, MeshRenderer, Color, Component, EventType, GameData, EventMgr, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Texture2D = module.Texture2D;
      Vec4 = module.Vec4;
      MeshRenderer = module.MeshRenderer;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "a4b54DM9e5DS7ALFqWjniXb", "HomeTankShowComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HomeTankShowComp = exports('HomeTankShowComp', (_dec = ccclass('HomeTankShowComp'), _dec2 = property([Texture2D]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomeTankShowComp, _Component);

        function HomeTankShowComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tankTexture", _descriptor, _assertThisInitialized(_this));

          _this.tanks = [];
          _this.nowPaintIndexs = [-1, -1, -1, -1, -1, -1];
          _this.paintTililingOffset = [new Vec4(2, 2, 0, 0), new Vec4(2, 2, 0, 0), new Vec4(2, 2, 0, 0), new Vec4(2, 2, 0, 0), new Vec4(2, 2, 0, 0), new Vec4(2, 2, 0, 0)];
          return _this;
        }

        var _proto = HomeTankShowComp.prototype;

        _proto.onLoad = function onLoad() {
          this.tanks = [];

          for (var i = 1; i <= 5; i++) {
            this.tanks.push(this.node.getChildByName("Tank_" + i.toString()));
          }
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Home_Tank_PaintChange, this, this.updateTank);
          EventMgr.on(EventType.Home_TankColor_Change, this, this.updateTankColor);
          this.updateTank();
          this.updateTankColor();
        };

        _proto.updateTank = function updateTank(tankData) {
          if (tankData === void 0) {
            tankData = null;
          }

          var data;

          if (!tankData) {
            var storageData = StorageMgr.instance.storageData;
            tankData = Tool.cloneArray_Obj(storageData.tankData);
          }

          for (var i = 0; i < tankData.length; i++) {
            data = tankData[i];

            if (data.nowPaintIndex != this.nowPaintIndexs[i]) {
              this.nowPaintIndexs[i] = data.nowPaintIndex; //跟默认不同，开改

              var body = this.tanks[i].getChildByName("Body");
              var renders = body.getComponentsInChildren(MeshRenderer);

              for (var j = 0; j < renders.length; j++) {
                var mat = renders[j].getMaterialInstance(0);

                if (data.nowPaintIndex == -1) {
                  mat.setProperty("addTexture", null);
                } else {
                  mat.setProperty("addTexture", this.tankTexture[data.nowPaintIndex]);
                  mat.setProperty("addTilingOffset", this.paintTililingOffset[data.nowPaintIndex]);
                }
              }
            }
          }
        }
        /**@param partId 炮塔 0， 炮管 1，炮塔+车身 2，车身3 ,   履带+轮子 4，全部5 */
        ;

        _proto.updateTankColor = function updateTankColor(partId) {
          if (partId === void 0) {
            partId = -1;
          }

          for (var i = 0; i < this.tanks.length; i++) {
            var render = this.tanks[i].getComponentsInChildren(MeshRenderer);

            for (var j = 0; j < render.length - 1; j++) {
              if (render[j].node.name.indexOf("Wheel") == -1 && render[j].node.name.indexOf("shadow") == -1) {
                render[j].material.setProperty("lineWidth", 10);
                render[j].material.setProperty("outLineColor", new Color(0, 0, 0, 255));
              }
            }
          }

          if (partId != -1) {
            var tank = this.tanks[GameData.nowChooseTankIndex];
            var bodys = Tool.d3_FindAllNodeByName(tank, "bodySkin");
            var capSkin = Tool.d3_FindAllNodeByName(tank, "capSkin");
            var gunSkin = Tool.d3_FindAllNodeByName(tank, "gunSkin");
            var wheels = tank.getChildByName("Track").getComponentsInChildren(MeshRenderer);
            var track = tank.getChildByName("Track").getComponent(MeshRenderer);

            if (partId == 2 || partId == 5 || partId == 3) {
              for (var _i = 0; _i < bodys.length; _i++) {
                // bodys[i].getComponent(MeshRenderer).material.setProperty("mainColor", new Color(255, 255, 0, 255));
                bodys[_i].getComponent(MeshRenderer).material.setProperty("lineWidth", 4000);

                bodys[_i].getComponent(MeshRenderer).material.setProperty("outLineColor", new Color(255, 255, 0, 255)); // bodys[i].getComponent(MeshRenderer).material.setProperty("addColor", new Color(255, 255, 0, 255));

              }
            }

            if (partId == 2 || partId == 5 || partId == 0) {
              for (var _i2 = 0; _i2 < capSkin.length; _i2++) {
                // capSkin[i].getComponent(MeshRenderer).material.setProperty("mainColor", new Color(255, 255, 0, 255));
                // capSkin[i].getComponent(MeshRenderer).material.setProperty("addColor", new Color(255, 255, 0, 255));
                capSkin[_i2].getComponent(MeshRenderer).material.setProperty("lineWidth", 4000);

                capSkin[_i2].getComponent(MeshRenderer).material.setProperty("outLineColor", new Color(255, 255, 0, 255));
              }
            }

            if (partId == 1 || partId == 5) {
              for (var _i3 = 0; _i3 < gunSkin.length; _i3++) {
                // gunSkin[i].getComponent(MeshRenderer).material.setProperty("mainColor", new Color(255, 255, 0, 255));
                // gunSkin[i].getComponent(MeshRenderer).material.setProperty("addColor", new Color(255, 255, 0, 255));
                gunSkin[_i3].getComponent(MeshRenderer).material.setProperty("lineWidth", 4000);

                gunSkin[_i3].getComponent(MeshRenderer).material.setProperty("outLineColor", new Color(255, 255, 0, 255));
              }
            }

            if (partId == 4 || partId == 5) {
              // for (let i = 0; i < wheels.length; i++) {
              //     wheels[i].material.setProperty("mainColor", new Color(255, 255, 0, 255));
              // }
              track.material.setProperty("lineWidth", 4000);
              track.material.setProperty("outLineColor", new Color(255, 255, 0, 255));
            }
          }
        };

        return HomeTankShowComp;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tankTexture", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HpBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './Bar.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Color, Sprite, CampType, GameData, Bar;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      Sprite = module.Sprite;
    }, function (module) {
      CampType = module.CampType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      Bar = module.Bar;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3fa9dDR4N1IRLoHzq5luTWb", "HpBar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HpBar = exports('HpBar', (_dec = ccclass('HpBar'), _dec(_class = /*#__PURE__*/function (_Bar) {
        _inheritsLoose(HpBar, _Bar);

        function HpBar() {
          return _Bar.apply(this, arguments) || this;
        }

        var _proto = HpBar.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        _proto.changeColor = function changeColor(camp) {
          var color = new Color(255, 0, 0, 255);

          switch (camp) {
            case CampType.Player:
              color = GameData.playerColor;
              break;

            case CampType.Enemy:
              color = GameData.enemyColor;
              break;
          }

          for (var i = 0; i < this.node.children.length; i++) {
            this.node.children[i].getComponent(Sprite).color = color;
          }
        };

        _proto.changeAlpha = function changeAlpha(alpha) {
          var comp = this.node.getComponentsInChildren(Sprite);

          for (var i = 0; i < comp.length; i++) {
            var color = comp[i].color.clone();
            color.a = 255 * alpha;
            comp[i].color = color;
          }
        };

        _proto.follow = function follow(cam, node3D, offsetVec3) {
          if (cam) {
            var node3DWorldPos = node3D.getWorldPosition();
            var node3DUIPos = cam.convertToUINode(node3DWorldPos.add(offsetVec3), this.node.parent);
            this.node.setPosition(node3DUIPos);
          } else {
            console.warn("HpBar:跟随摄像机丢失");
          }
        };

        return HpBar;
      }(Bar)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HurtEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './SoundMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Component, EventType, SoundType, EventMgr, SoundMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
      SoundType = module.SoundType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "056cf8rI+xOa7gEPpAMBmH+", "HurtEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HurtEffect = exports('HurtEffect', (_dec = ccclass('HurtEffect'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HurtEffect, _Component);

        function HurtEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.anim = void 0;
          return _this;
        }

        var _proto = HurtEffect.prototype;

        _proto.onLoad = function onLoad() {
          this.anim = this.getComponent(Animation);
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_Player_Hurt, this, this.playHurt);
        };

        _proto.onDestroy = function onDestroy() {
          EventMgr.clearTarget(this);
        };

        _proto.update = function update(deltaTime) {};

        _proto.playHurt = function playHurt() {
          this.anim.play();
          SoundMgr.instacne.playSound(SoundType.PlayerGetHited);
        };

        return HurtEffect;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ImpulseStage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationData.ts', './NoiseGenerator.ts', './BaseStage.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, cinestation, NoiseGenerator, BaseStage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      cinestation = module.cinestation;
    }, function (module) {
      NoiseGenerator = module.NoiseGenerator;
    }, function (module) {
      BaseStage = module.BaseStage;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f21dbKN87dMO5qpMLHdGsc/", "ImpulseStage", undefined);

      var ImpulseStage = exports('ImpulseStage', /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(ImpulseStage, _BaseStage);

        function ImpulseStage() {
          return _BaseStage.apply(this, arguments) || this;
        }

        var _proto = ImpulseStage.prototype;

        _proto.updateStage = function updateStage(deltaTime) {
          var vcam = this._vcam;
          var impulse = vcam.impulse;

          for (var _iterator = _createForOfIteratorHelperLoose(cinestation.impulseSources), _step; !(_step = _iterator()).done;) {
            var source = _step.value;

            if (source.node.layer & impulse.source) {
              var values = source.generateImpulse(deltaTime);

              if (values) {
                NoiseGenerator.ApplyNoise(values, vcam);
              }
            }
          }
        };

        return ImpulseStage;
      }(BaseStage));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InterstitialAdUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomAdMgr.ts', './JJMgr.ts', './JJWxTrap.ts', './WxPlatform.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ProgressBar, Quat, Tween, tween, Component, CustomAdMgr, JJMgr, JJWxTrap, WxPlatform, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      Quat = module.Quat;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      CustomAdMgr = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatform = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f8a21SuRo5ISan4Crrw3Ks3", "InterstitialAdUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InterstitialAdUI = exports('default', (_dec = ccclass('InterstitialAdUI'), _dec2 = property(Node), _dec3 = property(ProgressBar), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InterstitialAdUI, _Component);

        function InterstitialAdUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "box", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pBar", _descriptor2, _assertThisInitialized(_this));

          _this.ccb = null;
          _this.showCallback = null;
          _this.hadShowBanner = false;
          _this.preTime = 0;
          _this.rateTime = 0;
          _this.minclicknum = void 0;
          _this.maxclicknum = void 0;
          _this.needClick = void 0;
          _this.isforce = false;
          _this.addProgerss = void 0;
          _this.repeatCount = 0;
          _this.isRepeat = void 0;
          _this.lianxu_num = void 0;
          _this.quat1 = new Quat();
          _this.quat2 = new Quat();
          _this.quat3 = new Quat();
          return _this;
        }

        var _proto = InterstitialAdUI.prototype;

        _proto.onDisable = function onDisable() {
          var _this2 = this;

          this.unscheduleAllCallbacks(); // // CustomAdMgr.instance.hideGrid()

          WxPlatformBannerAd.Instance.hideBannerFun(true);

          if (this.repeatCount > 0) {
            JJWxTrap.Instance.com.scheduleOnce(function () {
              _this2.showUI(_this2.isRepeat, _this2.lianxu_num, _this2.ccb);

              _this2.repeatCount--;
            }, 0.1);
          } else {
            this.ccb && this.ccb();
          }
        };

        _proto.showUI = function showUI(isRepeat, lianxu_num, cb) {
          this.lianxu_num = lianxu_num;
          this.isRepeat = isRepeat;

          if (isRepeat && this.repeatCount <= 0) {
            this.repeatCount = lianxu_num;
          }

          this.minclicknum = Number(JJMgr.instance.dataConfig.front_box_clicks[0]);
          this.maxclicknum = Number(JJMgr.instance.dataConfig.front_box_clicks[1]);
          this.needClick = JJMgr.instance.GetRandom(this.minclicknum, this.maxclicknum - JJMgr.instance.dataConfig.front_progress_bar_reduce);
          this.isforce = JJMgr.instance.dataConfig.front_is_box_force;
          this.addProgerss = 1 / this.maxclicknum;
          console.log('this.needClick:', this.needClick);
          console.log('this.addProgerss:', this.addProgerss);
          this.ccb = cb;
          this.node.active = true;
          this.hadShowBanner = false;
          this.pBar.progress = 0;
          this.rateTime = 0;
          this.preTime = 0;
          this.schedule(this.DecBar);
          WxPlatform.instance.showBanner();
        };

        _proto.closeCB = function closeCB() {
          this.node.active = false;
        };

        _proto.onCloseInter = function onCloseInter() {};

        _proto.clickCB = function clickCB() {
          var _this4 = this;

          this.pBar.progress += this.addProgerss;

          if (this.pBar.progress > 1) {
            this.pBar.progress = 1;
          }

          this.shakeBox();

          if (!this.hadShowBanner) {
            this.isforce = JJMgr.instance.dataConfig.front_is_box_force;
            var closeTime = JJMgr.instance.dataConfig.front_box_hide_time / 1000;

            var cb = function cb() {
              _this4.hadShowBanner = true;

              _this4.scheduleOnce(function () {
                if (!CustomAdMgr.instance.getIsShow()) {
                  _this4.repeatCount = 0;
                } // // CustomAdMgr.instance.hideGrid()


                {
                  _this4.closeCB();
                }
              }, closeTime);

              WxPlatform.instance.showInterAd(); // // CustomAdMgr.instance.showGrid()
            };

            var diff = this.rateTime - this.preTime;
            var arr = JJMgr.instance.dataConfig.front_box_sulv_qujian; //['0,0.2', '0.2,0.3', '0.3,0.4']

            var randNum = this.getRandomItemInArr(arr);
            var strArr = randNum.split('|');
            var v1 = strArr[0];
            var v2 = strArr[1];

            if (this.pBar.progress * 100 >= JJMgr.instance.dataConfig.front_box_sulv_start && parseFloat(v1) <= diff && diff <= parseFloat(v2)) {
              console.log('宝箱触发频率：', diff);

              if (JJMgr.instance.dataConfig.front_sulv_wuchu_switch) {
                this.isforce = true;
                closeTime = JJMgr.instance.dataConfig.front_fbox_hide_time / 1000;
              }

              cb();
              return;
            }

            this.preTime = this.rateTime;

            if (this.pBar.progress >= this.needClick * this.addProgerss && !this.hadShowBanner) {
              console.log('宝箱触发进度');
              cb();
            }
          }
        };

        _proto.shakeBox = function shakeBox() {
          Tween.stopAllByTarget(this.box);
          Quat.fromEuler(this.quat1, 0, 0, -10);
          Quat.fromEuler(this.quat2, 0, 0, 10);
          Quat.fromEuler(this.quat3, 0, 0, 0);
          tween(this.box).to(0.1, {
            rotation: this.quat1
          }).to(0.2, {
            rotation: this.quat2
          }).to(0.1, {
            rotation: this.quat3
          }).start();
        };

        _proto.DecBar = function DecBar() {
          this.pBar.progress -= JJMgr.instance.dataConfig.front_progress_bar_return;

          if (this.pBar.progress < 0) {
            this.pBar.progress = 0;
          }
        };

        _proto.update = function update(dt) {
          this.rateTime += dt;
        };

        _proto.GetRandom = function GetRandom(mix, max, isInt) {
          if (isInt === void 0) {
            isInt = true;
          }

          var w = max - mix;
          var r1 = Math.random() * w;
          r1 += mix;
          return isInt ? Math.floor(r1) : r1;
        };

        _proto.getRandomItemInArr = function getRandomItemInArr(arr) {
          return arr[Math.floor(Math.random() * arr.length)];
        };

        return InterstitialAdUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "box", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './PoolMgr.ts', './PoolComp.ts', './Hero.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, Collider, ItemType, EventType, EventMgr, PoolMgr, PoolComp, Hero;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Collider = module.Collider;
    }, function (module) {
      ItemType = module.ItemType;
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      PoolMgr = module.PoolMgr;
    }, function (module) {
      PoolComp = module.PoolComp;
    }, function (module) {
      Hero = module.Hero;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d1483sHHz5PPaZA+A+1Nl42", "Item", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Item = exports('Item', (_dec = ccclass('Item'), _dec2 = property({
        type: Enum(ItemType)
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(Item, _PoolComp);

        function Item() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "type", _descriptor, _assertThisInitialized(_this));

          _this.addWay = 1;
          return _this;
        }

        var _proto = Item.prototype;

        _proto.firstBorn = function firstBorn() {
          var collider = this.node.getComponent(Collider);
          collider.on("onTriggerEnter", this.onTriggerEnter, this);
        };

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.node.active = true;
          this.addWay = 1;
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        _proto.update = function update(dt) {// let rot = this.node.getRotation();
          // Quat.rotateY(rot, rot.clone(), Math.PI * dt);
          // this.node.setRotation(rot);
          // let pos = this.node.getPosition();
          // if (pos.y > 1) {
          //     this.addWay = -1;
          // } else if (pos.y < -1) {
          //     this.addWay = 1;
          // }
          // pos.y += dt * 0.5 * this.addWay;
          // this.node.setPosition(pos);
        };

        _proto.onTriggerEnter = function onTriggerEnter(e) {
          // console.log(e.otherCollider.node.name + "吃到了" + this.node.name);
          PoolMgr.instance.recyleObj(this);
          var comp = e.otherCollider.node.getComponent(Hero);

          if (comp && !comp.isDead) {
            switch (this.type) {
              case ItemType.SpeedUp:
                comp.speedUpBuff_Item_On();
                break;

              case ItemType.Heal:
                comp.heal(5000);
                comp.healBuff_On();
                break;

              case ItemType.Sheild:
                comp.defendBuff_Item_On();
                break;

              case ItemType.AtkUp:
                comp.attackBuff_Item_On();
                break;
            }

            EventMgr.event(EventType.Game_Teach_Item);
          }
        };

        return Item;
      }(PoolComp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ItemType.Heal;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Vec3, Component, EventType, EventMgr, StorageMgr, Platform, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0bcd1cCQk1PyIxm/dFnNJPI", "ItemList", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemList = exports('ItemList', (_dec = ccclass('ItemList'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemList, _Component);

        function ItemList() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.switchBtn = void 0;
          _this.list = void 0;
          _this.targetPos = new Vec3(260, 0, 0);
          return _this;
        }

        var _proto = ItemList.prototype;

        _proto.onLoad = function onLoad() {
          this.switchBtn = this.node.getChildByName("btn");
          this.list = this.node.getChildByPath("Mask/bg");
        };

        _proto.start = function start() {
          console.log("绑定按钮");
          Tool.d2_AddClickEvent(this.switchBtn, this, this.swithcOnOff, [], true, false);

          for (var i = 0; i < this.list.children.length; i++) {
            var btn = this.list.children[i];
            Tool.d2_AddClickEvent(btn, this, this.clickItem, [i]);
          }

          this.updateUI();
        };

        _proto.updateUI = function updateUI() {
          var data = StorageMgr.instance.storageData.itemData;

          for (var i = 0; i < this.list.children.length; i++) {
            var btn = this.list.children[i];
            btn.getChildByName("Label").getComponent(Label).string = data[i].toString();
          }
        };

        _proto.update = function update(deltaTime) {
          var pos = this.list.getPosition();
          var speed = deltaTime * 1000;

          if (Math.abs(pos.x - this.targetPos.x) < speed) {
            pos.x = this.targetPos.x;
          } else {
            if (pos.x > this.targetPos.x) {
              pos.x -= speed;
            } else {
              pos.x += speed;
            }
          }

          this.list.setPosition(pos);
        };

        _proto.swithcOnOff = function swithcOnOff() {
          if (this.targetPos.x == 0) {
            this.targetPos.x = 260;
          } else {
            this.targetPos.x = 0;
          }
        };

        _proto.clickItem = function clickItem(indexArray) {
          var index = indexArray[0];
          console.log("点击道具", index);
          var data = Tool.cloneArray_normal(StorageMgr.instance.storageData.itemData);

          if (data[index] > 0) {
            data[index]--;
            EventMgr.event(EventType.Game_UseItem_Event, index);
            StorageMgr.instance.changeItemData(data);
            this.updateUI();
          } else {
            Platform.instance.showToast("道具已经用完了");
          }
        };

        return ItemList;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemPool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, instantiate, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      exports('ItemPoolType', void 0);

      var _dec, _class;

      cclegacy._RF.push({}, "28393T2kldOnrUyLoUF8Ts+", "ItemPool", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemPool = exports('ItemPool', (_dec = ccclass('ItemPool'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemPool, _Component);

        function ItemPool() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = ItemPool.prototype;

        _proto.onLoad = function onLoad() {
          for (var i = 0; i < 3; i++) {
            for (var j = 0; j < 30; j++) {
              var item = this.node.children[i].children[0];
              var itemClone = instantiate(item);
              this.node.children[i].addChild(itemClone);
              itemClone.active = false;
            }
          }
        };

        _proto.getItem = function getItem(type) {
          var item;
          var typeNode = this.node.children[type];

          if (typeNode.children.length > 1) {
            item = typeNode.children[1];
            item.active = true;
            typeNode.removeChild(item);
          } else {
            item = instantiate(typeNode.children[0]);
            item.active = true;
          }

          return item;
        };

        _proto.recoverItem = function recoverItem(item, type) {
          var typeNode = this.node.children[type];
          typeNode.addChild(item);
          item.active = false;
        };

        return ItemPool;
      }(Component)) || _class));
      var ItemPoolType;

      (function (ItemPoolType) {
        ItemPoolType[ItemPoolType["oil"] = 0] = "oil";
        ItemPoolType[ItemPoolType["gold"] = 1] = "gold";
        ItemPoolType[ItemPoolType["money"] = 2] = "money";
      })(ItemPoolType || (ItemPoolType = exports('ItemPoolType', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IVCam.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "15037D3BZVK3LlfNfJfNhch", "IVCam", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JJMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './jiujiu_sdk_conf.mjs_cjs=&original=.js', './jiujiu_sdk.min.mjs_cjs=&original=.js', './jiujiu_pull_sdk.min.mjs_cjs=&original=.js', './JJWxTrap.ts', './WxPlatform.ts', './UMTrack.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, _decorator, loader, SpriteFrame;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      loader = module.loader;
      SpriteFrame = module.SpriteFrame;
    }, null, null, null, null, null, null],
    execute: function () {
      exports('SceneDir', void 0);

      var _dec, _class, _class2;

      cclegacy._RF.push({}, "38cb7OqDnxCvLb5ThetVf7F", "JJMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SceneDir;

      (function (SceneDir) {
        SceneDir["SCENE_FRIENDGAME"] = "FriendGameUI";
        SceneDir["SCENE_SCROLLUI"] = "ScrollUI";
        SceneDir["SCENE_RECOMMENDUI"] = "RecommendUI";
        SceneDir["SCENE_FULLGAMEUI"] = "FullGameUI";
        SceneDir["SCENE_FINISHGAMEUI"] = "FinishGameUI";
        SceneDir["SCENE_DRAWUI"] = "DrawUI";
        SceneDir["SCENE_PROGRAMUI"] = "ProgramUI";
        SceneDir["SCENE_WECHATUI"] = "WeChatUI";
        SceneDir["SCENE_STARTNAVUI"] = "StartNavUI";
        SceneDir["SCENE_GAMENAVUI"] = "GameNavUI";
        SceneDir["SCENE_MADUI1"] = "MadUI1";
        SceneDir["SCENE_MADUI2"] = "MadUI2";
        SceneDir["SCENE_HALLUI"] = "HallUI";
      })(SceneDir || (SceneDir = exports('SceneDir', {})));

      var JJNavData = function JJNavData() {
        this.appid = void 0;
        this.icon = void 0;
        this.path = void 0;
        this.title = void 0;
        this.subtitle = void 0;
        this.id = void 0;
      };

      var JJMgr = exports('default', (_dec = ccclass('JJMgr'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function JJMgr() {
          this.dataConfig = {};
          this.navDataArr = [];
          this.isFinished = false;
          this.shareConfig = void 0;
        }

        var _proto = JJMgr.prototype;

        _proto.initJJ = function initJJ(completeCB) {
          {
            completeCB && completeCB();
          }
        };

        _proto.updateDataConfig = function updateDataConfig(config) {
          var configs = config.data;
          this.dataConfig.is_allow_area = config.is_allow_area;
          this.dataConfig.is_allow_export = config.is_allow_export;
          this.dataConfig.front_wuchu_scene = config.front_wuchu_scene;

          for (var key in configs) {
            this.dataConfig[key] = configs[key].config_val;
          }

          console.log(this.dataConfig);
        };

        _proto.updateNavData = function updateNavData(data) {
          this.navDataArr = [];

          for (var i = 0; i < data.length; i++) {
            var dataItem = data[i];
            var navData = new JJNavData();
            navData.appid = dataItem.channel_game_appid;
            navData.title = dataItem.channel_game_name;
            navData.path = dataItem.path;
            navData.subtitle = dataItem.originality.copywriting;
            navData.icon = dataItem.originality.material;
            navData.id = dataItem.originality.id;
            this.navDataArr.push(navData);
          }
        };

        _proto.JJSendEvent = function JJSendEvent(name, param) {} // //跳转
        ;

        _proto.NavigateApp = function NavigateApp(index, cancelCB, successCB, isAllowError) {};

        _proto.getSubtitle = function getSubtitle(index) {
          if (this.navDataArr[index].subtitle && this.navDataArr[index].subtitle != '') {
            return this.navDataArr[index].subtitle;
          } else {
            return this.navDataArr[index].title;
          }
        } // //加载网络图片
        ;

        _proto.loadImgByUrl = function loadImgByUrl(sprite, remoteUrl, imageType, cb) {
          if (imageType === void 0) {
            imageType = 'png';
          }

          loader.load({
            url: remoteUrl,
            type: imageType
          }, function (err, texture) {
            if (err || !sprite || !texture || !sprite.spriteFrame) {
              return;
            }

            sprite.spriteFrame = new SpriteFrame();
            sprite.spriteFrame.texture = texture;
            cb && cb();
          });
        };

        _proto.loadSpriteFrame = function loadSpriteFrame(spName, sprite, cb) {
          loader.loadRes(spName, SpriteFrame, function (err, spriteFrame) {
            sprite.spriteFrame = spriteFrame;
            cb && cb();
          });
        } // //打乱数组
        ;

        _proto.shuffleArr = function shuffleArr(arr) {
          var i = arr.length;

          while (i) {
            var j = Math.floor(Math.random() * i--);
            var _ref = [arr[i], arr[j]];
            arr[j] = _ref[0];
            arr[i] = _ref[1];
          }

          return arr;
        };

        _proto.GetRandom = function GetRandom(mix, max, isInt) {
          if (isInt === void 0) {
            isInt = true;
          }

          var w = max - mix + 1;
          var r1 = Math.random() * w;
          r1 += mix;
          return isInt ? Math.floor(r1) : r1;
        };

        _createClass(JJMgr, [{
          key: "shareContext",
          get: // /**分享文案 */
          function get() {
            return this.shareConfig;
          },
          set: function set(value) {
            this.shareConfig = value;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new JJMgr();
            }

            return this._instance;
          } // /**后台配置参数 */

        }]);

        return JJMgr;
      }(), _class2._instance = void 0, _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import "./JJSDK/jiujiu_sdk_conf.js"
      // import "./JJSDK/jiujiu_sdk.min.js"
      // import "./JJSDK/jiujiu_pull_sdk.min.js"
      //
      // import CustomAdMgr from "./CustomAdMgr";
      // import DuilianAdMgr from "./DuilianAdMgr";
      // import FinishCustomAdMgr from "./FinishCustomAdMgr";
      // import JJWxTrap from "./JJWxTrap";
      // import WxPlatform from "./WxPlatform";
      // import WxPlatformBannerAd from "./WxPlatformBannerAd";
      //
      // export enum SceneDir {
      //     SCENE_FRIENDGAME = 'FriendGameUI',   //好友都在玩的爆款游戏弹窗
      //     SCENE_SCROLLUI = 'ScrollUI',         //游戏内滚动导出栏
      //     SCENE_RECOMMENDUI = 'RecommendUI',   //热门推荐全屏幕导出页
      //     SCENE_FULLGAMEUI = 'FullGameUI',     //全屏幕导出页
      //     SCENE_FINISHGAMEUI = 'FinishGameUI', //结算页 6 个 icon
      //     SCENE_DRAWUI = 'DrawUI',             //抽屉
      //     SCENE_PROGRAMUI = 'ProgramUI',       //游戏列表
      //     SCENE_WECHATUI = 'WeChatUI',
      //     SCENE_STARTNAVUI = 'StartNavUI',
      //     SCENE_GAMENAVUI = 'GameNavUI',
      //     SCENE_MADUI1 = 'MadUI1',
      //     SCENE_MADUI2 = 'MadUI2',
      //     SCENE_HALLUI = 'HallUI'
      // }
      // class JJNavData {
      //     appid: string;
      //     icon: string;
      //     path: string;
      //     title: string;
      //     subtitle: string;
      //     id: number;
      // }
      //
      // const { ccclass, property } = cc._decorator;
      //
      // @ccclass
      // export default class JJMgr {
      //
      //     private static _instance: JJMgr
      //     public static get instance(): JJMgr {
      //         if (!this._instance) {
      //             this._instance = new JJMgr()
      //         }
      //         return this._instance
      //     }
      //     /**后台配置参数 */
      //     dataConfig: any = {}
      //     navDataArr: any[] = []
      //
      //     isFinished: boolean = false
      //
      //     shareConfig: any;
      //
      //     set shareContext(value) {
      //         this.shareConfig = value;
      //     }
      //
      //     /**分享文案 */
      //     get shareContext() {
      //         return this.shareConfig;
      //     }
      //
      //     initJJ(completeCB?: Function) {
      //         let sceneId: number = window['wx'].getEnterOptionsSync().scene;
      //         console.log(window['wx'].getEnterOptionsSync())
      //         console.log("本次场景值：", sceneId)
      //
      //         window['JJGetGameConfigAdShare']().then((res) => {
      //             console.log(res)
      //             this.updateDataConfig(res.data.config)
      //             this.isFinished = this.dataConfig.front_all_export_switch
      //             this.updateNavData(res.data.ad)
      //             var shareConfig = res.data.share[0]
      //             JJMgr.instance.dataConfig.front_share_config = { title: shareConfig.share_content, image: shareConfig.share_img, id: shareConfig.id }
      //             this.shareContext = shareConfig
      //
      //             if (cc.sys.platform === cc.sys.WECHAT_GAME) {
      //                 //开启右上角的分享
      //                 window["wx"].showShareMenu({
      //                     withShareTicket: true,
      //                     menus: ['shareAppMessage', 'shareTimeline']
      //                 });
      //
      //                 let dir = JJMgr.instance.dataConfig.front_share_config.image
      //                 let content = JJMgr.instance.dataConfig.front_share_config.title
      //                 window["wx"].JJOnShareAppMessage(() => {
      //                     return {
      //                         title: content,
      //                         imageUrl: dir, // 图片 URL
      //                     }
      //                 });
      //             }
      //
      //             // if (!JJMgr.instance.dataConfig.front_baocun_gdata_switch) {
      //             //     JJWxTrap.Instance.resetLevel()
      //             // }
      //             WxPlatform.instance.init()
      //
      //             DuilianAdMgr.instance.initCustomAd()
      //             CustomAdMgr.instance.initCustomAd()
      //             // BoxCustomAdMgr.instance.initCustomAd()
      //             WxPlatform.instance.createGameCustomAd()
      //             WxPlatform.instance.createInterAd()
      //             WxPlatform.instance.loadVideoAd()
      //             FinishCustomAdMgr.instance.initCustomAd()
      //             //初始化banner广告
      //             let bannerIds = JJMgr.instance.dataConfig.front_banner_ids;
      //             WxPlatformBannerAd.Instance.initAd(bannerIds);
      //             if (CC_WECHATGAME && JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_leave_return_switch) {
      //                 window['wx'].onShow(() => {
      //                     WxPlatform.instance.showInterAd()
      //                 })
      //             }
      //
      //             completeCB && completeCB()
      //         }, () => {
      //             this.dataConfig.front_all_export_switch = false
      //             this.dataConfig.is_allow_area = false;
      //             this.dataConfig.front_share_config = { title: '', image: '', id: -1 }
      //             completeCB && completeCB()
      //         })
      //     }
      //     updateDataConfig(config) {
      //         var configs = config.data;
      //         this.dataConfig.is_allow_area = config.is_allow_area;
      //         this.dataConfig.is_allow_export = config.is_allow_export;
      //         this.dataConfig.front_wuchu_scene = config.front_wuchu_scene;
      //
      //         for (let key in configs) {
      //             this.dataConfig[key] = configs[key].config_val;
      //         }
      //
      //         console.log(this.dataConfig);
      //     }
      //
      //     updateNavData(data) {
      //         this.navDataArr = [];
      //         for (var i = 0; i < data.length; i++) {
      //             var dataItem = data[i];
      //             var navData = new JJNavData;
      //             navData.appid = dataItem.channel_game_appid;
      //             navData.title = dataItem.channel_game_name;
      //             navData.path = dataItem.path;
      //             navData.subtitle = dataItem.originality.copywriting;
      //             navData.icon = dataItem.originality.material;
      //             navData.id = dataItem.originality.id;
      //
      //             this.navDataArr.push(navData);
      //         }
      //     }
      //
      //     JJSendEvent(name: string, param?: any) {
      //         if (cc.sys.platform === cc.sys.WECHAT_GAME) {
      //             window['wx'].JJSendEvent(() => {
      //                 return {
      //                     name: name,
      //                     param: param
      //                 }
      //             })
      //         }
      //     }
      //
      //     //跳转
      //     NavigateApp(index: number, cancelCB?: Function, successCB?: Function, isAllowError: boolean = false) {
      //         if (cc.sys.platform === cc.sys.WECHAT_GAME && this.navDataArr.length > 0) {
      //             var promiseObj = window['wx'].JJNavigateToMiniProgram(() => {
      //                 return {
      //                     appId: this.navDataArr[index].appid, // 广告主appid
      //                     path: this.navDataArr[index].path, // 打开路径
      //                     id: this.navDataArr[index].id, // 创意id, id获取方式同上
      //                 }
      //             });
      //             promiseObj.then(
      //                 (res) => {
      //                     // 打开成功逻辑写在这里
      //                     console.log('success');
      //                     successCB && successCB()
      //                 },
      //                 (err) => {
      //                     // 失败的逻辑写在这里
      //                     console.log('fail');
      //                     if (err.errMsg.indexOf("cancel") != - 1 || isAllowError) {
      //                         cancelCB && cancelCB()
      //                     }
      //                 }
      //             );
      //         }
      //     }
      //
      //     getSubtitle(index: number) {
      //         if (this.navDataArr[index].subtitle && this.navDataArr[index].subtitle != '') {
      //             return this.navDataArr[index].subtitle
      //         } else {
      //             return this.navDataArr[index].title
      //         }
      //     }
      //
      //     //加载网络图片
      //     public loadImgByUrl(sprite, remoteUrl, imageType: string = 'png', cb?: Function) {
      //         cc.loader.load({
      //             url: remoteUrl,
      //             type: imageType
      //         }, (err, texture) => {
      //             if (err || !sprite || !texture || !sprite.spriteFrame) {
      //                 return;
      //             }
      //             sprite.spriteFrame = new cc.SpriteFrame(texture)
      //             cb && cb()
      //         });
      //     }
      //
      //     public loadSpriteFrame(spName: string, sprite: cc.Sprite, cb?: Function) {
      //         cc.loader.loadRes(spName, cc.SpriteFrame, function (err, spriteFrame) {
      //             sprite.spriteFrame = spriteFrame
      //             cb && cb()
      //         })
      //     }
      //
      //     //打乱数组
      //     public shuffleArr(arr: any[]) {
      //         let i = arr.length;
      //         while (i) {
      //             let j = Math.floor(Math.random() * i--);
      //             [arr[j], arr[i]] = [arr[i], arr[j]];
      //         }
      //         return arr;
      //     }
      //     GetRandom(mix, max, isInt = true) {
      //         let w = max - mix + 1
      //         let r1 = Math.random() * w
      //         r1 += mix
      //         return isInt ? Math.floor(r1) : r1
      //     }
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JJWxTrap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DuilianAdMgr.ts', './ExportCrl.ts', './FinishCustomAdMgr.ts', './JJMgr.ts', './EndBoxUI.ts', './FinishGameUI.ts', './GridUI.ts', './GridUI2.ts', './GridUI3.ts', './GridUI4.ts', './RunUI.ts', './StartBoxUI.ts', './WxPlatform.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, find, DuilianAdMgr, ExportCrl, FinishCustomAdMgr, JJMgr, EndBoxUI, FinishGameUI, GridUI, GridUI2, GridUI3, GridUI4, RunUI, StartBoxUI, WxPlatform, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      find = module.find;
    }, function (module) {
      DuilianAdMgr = module.default;
    }, function (module) {
      ExportCrl = module.default;
    }, function (module) {
      FinishCustomAdMgr = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      EndBoxUI = module.default;
    }, function (module) {
      FinishGameUI = module.default;
    }, function (module) {
      GridUI = module.default;
    }, function (module) {
      GridUI2 = module.default;
    }, function (module) {
      GridUI3 = module.default;
    }, function (module) {
      GridUI4 = module.default;
    }, function (module) {
      RunUI = module.default;
    }, function (module) {
      StartBoxUI = module.default;
    }, function (module) {
      WxPlatform = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0b7f71mekdODZV20fn3yQ+y", "JJWxTrap", undefined);

      var JJWxTrap = exports('default', /*#__PURE__*/function () {
        function JJWxTrap() {
          this.isSplash = false;
          this.gridInt = void 0;
          this.dataConfig = JJMgr.instance.dataConfig;
          this._levelObj = void 0;
          this._Level = 0;
          this.moreGameBtn = void 0;
          this.drawBtn = void 0;
        }

        var _proto = JJWxTrap.prototype; // /**场景值屏蔽 */

        _proto.allowScene = function allowScene() {
          if (!this.dataConfig.front_wuchu_scene) return true;
          var sceneId = window['wx'].getEnterOptionsSync().scene;
          var query = window['wx'].getEnterOptionsSync().query; // // front_first_scv_swtich 判断是否启用本地首次场景值

          var localScene = Number(localStorage.getItem("localScene"));

          if (!localScene) {
            //首次才会存储
            localScene = sceneId;
            localStorage.setItem("localScene", localScene.toString()); // // 用户首次进入时保存该值，后续通过该值判断是否支持误触

            if (query.wxgamecid) {
              localStorage.setItem("wxgamecid", query.wxgamecid.toString());
            }
          }

          if (this.dataConfig.front_first_scv_swtich) {
            sceneId = localScene;
          }

          var wxgamecid = localStorage.getItem("wxgamecid");

          if (!this.dataConfig.front_is_source) {
            wxgamecid = "true";
          }

          var s = this.dataConfig.front_wuchu_scene.toString();

          if (s.search('|') == -1) {
            var sInt = parseInt(s);
            return sInt != sceneId;
          }

          var sArr = s.split('|');

          for (var i = 0; i < sArr.length; i++) {
            var _sInt = parseInt(sArr[i]);

            if (_sInt == sceneId && wxgamecid) {
              return true;
            }
          }

          return false;
        };

        _proto.inHomePage = function inHomePage(moreGameBtn, drawBtn) {
          var _this = this;

          console.log("本地保存场景值：", localStorage.getItem("localScene"));
          console.log("本地保存路径值：", localStorage.getItem("wxgamecid"));
          console.log("allowScene:", this.allowScene());
          this.moreGameBtn = moreGameBtn;
          this.drawBtn = drawBtn;
          if (moreGameBtn) this.com.schedule(JJWxTrap.Instance.updateMoreGameBtn, 0.1);
          if (drawBtn) this.com.schedule(JJWxTrap.Instance.updateDrawBtn, 0.1);
          DuilianAdMgr.instance.hideGrid();
          new Promise(function (resolve, reject) {
            // // 热门推荐格子
            if (!_this.isSplash && JJWxTrap.Instance.NewWuchu2 && JJMgr.instance.dataConfig.front_home_hot_tuijian) {
              _this.showGridUI4(function () {
                resolve(0);
              }, true);
            } else {
              resolve(0);
            }
          }).then(function (result) {
            // // 视频
            return new Promise(function (resolve, reject) {
              if (!_this.isSplash && JJWxTrap.Instance.NewWuchu2 && Math.random() * 100 < JJMgr.instance.dataConfig.front_home_vi_chance) {
                WxPlatform.instance.showVideoAd(null, function () {});
                resolve(1);
              } else {
                resolve(1);
              }
            });
          }).then(function (result) {
            // // 格子页误触
            return new Promise(function (resolve, reject) {
              if (!_this.isSplash && JJWxTrap.Instance.NewWuchu2 && Math.random() * 100 < JJMgr.instance.dataConfig.front_home_box_chance) {
                _this.showHomeBox(function () {
                  resolve(2);
                });
              } else {
                resolve(2);
              }
            });
          }).then(function (result) {
            // // 首页对联格子
            return new Promise(function (resolve, reject) {
              _this.gridInt = setInterval(function () {
                _this.testGrid();
              }, 1000);
              resolve(3);
            });
          }).then(function (result) {
            WxPlatformBannerAd.Instance.showBannerFun2();
            _this.isSplash = true;
            return;
          });
        };

        _proto.testGrid = function testGrid() {
          if (DuilianAdMgr.instance.gridAdArr.length > 0) {
            DuilianAdMgr.instance.showGrid();
            clearInterval(this.gridInt);
          }
        };

        _proto.updateMoreGameBtn = function updateMoreGameBtn() {
          JJWxTrap.Instance.moreGameBtn.active = JJWxTrap.Instance.NewWuchu2 && JJMgr.instance.dataConfig.front_haowan_switch;
        };

        _proto.updateDrawBtn = function updateDrawBtn() {
          JJWxTrap.Instance.drawBtn.active = JJWxTrap.Instance.NewWuchu2 && JJMgr.instance.dataConfig.front_chouti_switch;
        } // //类似商店页面
        ;

        _proto.clickShop = function clickShop() {
          DuilianAdMgr.instance.hideGrid();
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.com.unschedule(JJWxTrap.Instance.updateMoreGameBtn);
          this.com.unschedule(JJWxTrap.Instance.updateDrawBtn);
        } // //点击开始游戏
        ;

        _proto.clickStartGame = function clickStartGame(cb) {
          var _this2 = this;

          DuilianAdMgr.instance.hideGrid();
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.com.unschedule(JJWxTrap.Instance.updateMoreGameBtn);
          this.com.unschedule(JJWxTrap.Instance.updateDrawBtn);

          if (!JJWxTrap.Instance.NewWuchu2) {
            cb && cb();
            return;
          }

          new Promise(function (resolve, reject) {
            // // 全屏格子页
            _this2.showGridUI3(function () {
              resolve(0);
            });
          }).then(function (result) {
            // // 视频
            return new Promise(function (resolve, reject) {
              if (Math.random() * 100 < JJMgr.instance.dataConfig.front_start_vi_chance) {
                WxPlatform.instance.showVideoAd(null, function (isEnded) {});
                resolve(1);
              } else {
                resolve(1);
              }
            });
          }).then(function (result) {
            // // 宝箱
            return new Promise(function (resolve, reject) {
              _this2.showStartBox(function () {
                resolve(2);
              });
            });
          }).then(function (result) {
            WxPlatform.instance.showGameGridAd();
            cb && cb();
            return;
          });
        } // //首页更多游戏
        ;

        _proto.clickHomeMoreGame = function clickHomeMoreGame() {
          DuilianAdMgr.instance.hideGrid();
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.showGridUI(function () {
            DuilianAdMgr.instance.showGrid();
            WxPlatform.instance.showBanner();
          }, false, true);
        } // //首页抽屉
        ;

        _proto.clickDraw = function clickDraw() {
          DuilianAdMgr.instance.hideGrid();
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.showGridUI(function () {
            DuilianAdMgr.instance.showGrid();
            WxPlatform.instance.showBanner();
          }, false, true);
        } // //结算页抽屉
        ;

        _proto.clickFinishMoreGame = function clickFinishMoreGame() {
          var _this3 = this;

          find('CanvasJJ/ExportNode/FinishGameUI').active = false;
          find('CanvasJJ/ExportNode/ScrollUI').active = false;
          FinishCustomAdMgr.instance.hideGrid();
          WxPlatform.instance.hideGameGridAd();
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.showGridUI(function () {
            WxPlatform.instance.showGameGridAd();
            var b = WxPlatform.instance.showBanner();

            if (!b && _this3.NewWuchu && JJMgr.instance.dataConfig.front_daochulan_switch) {
              _this3.showFinishScroll();
            }

            if (_this3.dataConfig.front_jiesuanye_switch && _this3.NewWuchu) {
              if (Math.random() * 100 < _this3.dataConfig.front_daochu_gezi_chance) {
                _this3.showFinishExport();
              } else {
                FinishCustomAdMgr.instance.showGrid();
              }
            }
          }, false, true);
        } // //游戏中banner
        ;

        _proto.showGameBanner = function showGameBanner() {
          if (this.NewWuchu && JJMgr.instance.dataConfig.front_game_banner_switch) {
            // // WxPlatform.instance.showBanner()
            WxPlatformBannerAd.Instance.showBannerFun2();
          }
        } // //游戏结束
        ;

        _proto.showGameOver = function showGameOver(cb) {
          var _this4 = this;

          WxPlatform.instance.hideGameGridAd();
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.showGridUI(function () {
            _this4.showEndBox(cb);
          }, true);
        } // //结算页
        ;

        _proto.showFinishUI = function showFinishUI(drawBtn) {
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          WxPlatform.instance.showGameGridAd();

          if (drawBtn) {
            drawBtn.active = JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_chouti_switch;
          }

          WxPlatformBannerAd.Instance.showBannerFun2();

          if (this.NewWuchu && JJMgr.instance.dataConfig.front_daochulan_switch) {
            this.showFinishScroll();
          }

          if (this.dataConfig.front_jiesuanye_switch && this.NewWuchu) {
            if (Math.random() * 100 < this.dataConfig.front_daochu_gezi_chance) {
              this.showFinishExport();
            } else {
              FinishCustomAdMgr.instance.showGrid();
            }
          }

          if (JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_jiesaunye_chaping_switch) {
            WxPlatform.instance.showInterAd();
          }
        } // //关闭结算页
        ;

        _proto.closeFinishUI = function closeFinishUI(cb) {
          var _this5 = this;

          FinishCustomAdMgr.instance.hideGrid();
          WxPlatform.instance.hideGameGridAd();
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          find('CanvasJJ/ExportNode/FinishGameUI').active = false;
          find('CanvasJJ/ExportNode/ScrollUI').active = false;
          new Promise(function (resolve, reject) {
            // // 视频
            if (_this5.NewWuchu2 && Math.random() * 100 < JJMgr.instance.dataConfig.front_jiesuanye_vi_chance) {
              WxPlatform.instance.showVideoAd(null, function (isEnded) {
                resolve(1);
              });
            } else {
              resolve(1);
            }
          }).then(function (result) {
            // // 格子
            return new Promise(function (resolve, reject) {
              _this5.showGridUI2(function () {
                setTimeout(function () {
                  resolve(2);
                }, 100);

                if (_this5.dataConfig.front_wx_ad_switch && _this5.NewWuchu) {
                  WxPlatform.instance.showInterAd();
                }
              }, true);
            });
          }).then(function (result) {
            cb && cb();
            return;
          });
        } // //展示热门格子页
        ;

        _proto.showGridUI = function showGridUI(ccb, isInterAd, isMoreGame) {
          if (isInterAd === void 0) {
            isInterAd = false;
          }

          if (isMoreGame === void 0) {
            isMoreGame = false;
          }

          find('CanvasJJ/ExportNode/GridUI').getComponent(GridUI).showUI(ccb, isInterAd, isMoreGame);
        } // //展示格子页2
        ;

        _proto.showGridUI2 = function showGridUI2(ccb, isFinishUI) {
          if (isFinishUI === void 0) {
            isFinishUI = false;
          }

          find('CanvasJJ/ExportNode/GridUI2').getComponent(GridUI2).showUI(ccb, isFinishUI);
        } // //展示格子页3
        ;

        _proto.showGridUI3 = function showGridUI3(ccb) {
          find('CanvasJJ/ExportNode/GridUI3').getComponent(GridUI3).showUI(ccb);
        } // //展示格子页2
        ;

        _proto.showGridUI4 = function showGridUI4(ccb, isFinishUI) {
          if (isFinishUI === void 0) {
            isFinishUI = false;
          }

          find('CanvasJJ/ExportNode/GridUI4').getComponent(GridUI4).showUI(ccb, isFinishUI);
        } // //展示凌波微步
        ;

        _proto.showRunUI = function showRunUI(ccb) {
          find('CanvasJJ/ExportNode/RunUI').getComponent(RunUI).showUI(ccb);
        } // //展示结算页导出栏
        ;

        _proto.showFinishExport = function showFinishExport() {
          find('CanvasJJ/ExportNode/FinishGameUI').getComponent(FinishGameUI).showUI();
        } // //展示底部导出栏
        ;

        _proto.showFinishScroll = function showFinishScroll() {
          find('CanvasJJ/ExportNode/ScrollUI').active = true;
        } // // 主页
        ;

        _proto.showHomeBox = function showHomeBox(cb) {
          find('CanvasJJ/ExportNode/StartBoxUI').getComponent(StartBoxUI).showUI(false, JJMgr.instance.dataConfig.front_fbox_lianxu_num, cb);
        } // // 开始按钮
        ;

        _proto.showStartBox = function showStartBox(cb) {
          console.log("开始按钮", JJMgr.instance.dataConfig.front_fbox_wuchu_change, JJMgr.instance.dataConfig.front_level_fbox_num, this.Level, JJWxTrap.Instance.NewWuchu2);

          if (this.getRandom0To100 < JJMgr.instance.dataConfig.front_fbox_wuchu_change && JJMgr.instance.dataConfig.front_level_fbox_num <= this.Level && JJWxTrap.Instance.NewWuchu2) {
            // // 1代表banner类型，2代表格子类型
            if (JJMgr.instance.dataConfig.front_fbox_status == 1) {
              find('CanvasJJ/ExportNode/EndBoxUI').getComponent(EndBoxUI).showUI(JJMgr.instance.dataConfig.front_fbox_lianxu_num, cb);
            } else if (JJMgr.instance.dataConfig.front_fbox_status == 2) {
              find('CanvasJJ/ExportNode/StartBoxUI').getComponent(StartBoxUI).showUI(true, JJMgr.instance.dataConfig.front_fbox_lianxu_num, cb);
            } else {
              cb && cb();
            }
          } else {
            cb && cb();
          }
        } // // 结算页
        ;

        _proto.showEndBox = function showEndBox(cb) {
          if (this.getRandom0To100 < JJMgr.instance.dataConfig.front_tbox_wuchu_change && JJMgr.instance.dataConfig.front_level_tbox_num <= this.Level && JJWxTrap.Instance.NewWuchu2) {
            // // 1代表banner类型，2代表格子类型
            if (JJMgr.instance.dataConfig.front_tbox_status == 1) {
              find('CanvasJJ/ExportNode/EndBoxUI').getComponent(EndBoxUI).showUI(JJMgr.instance.dataConfig.front_tbox_lianxu_num, cb);
            } else if (JJMgr.instance.dataConfig.front_tbox_status == 2) {
              find('CanvasJJ/ExportNode/StartBoxUI').getComponent(StartBoxUI).showUI(true, JJMgr.instance.dataConfig.front_tbox_lianxu_num, cb);
            } else {
              cb && cb();
            }
          } else {
            cb && cb();
          }
        } // /**获取跳转随机索引 */
        ;

        _proto.getRandomIndex = function getRandomIndex() {
          return Math.floor(Math.random() * JJMgr.instance.navDataArr.length);
        } // /**获取随机数0-100 */
        ;

        _proto.inGame = function inGame(btnDraw, btnMore) {
          if (btnDraw) {
            btnDraw.active = JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_chouti_switch;
          }

          if (btnMore) {
            btnMore.active = JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_jingxi_gezi_switch;
          }
        };

        _createClass(JJWxTrap, [{
          key: "Level",
          get: function get() {
            return this._Level;
          },
          set: function set(value) {
            this._Level = value;
          } // // get Level() {
          // //     return this._levelObj ? this._levelObj[this._levelStr] : 1
          // // }

        }, {
          key: "NewWuchu",
          get: function get() {
            return true; //JJMgr.instance.dataConfig.is_allow_area && this.allowScene()
          }
        }, {
          key: "NewWuchu2",
          get: function get() {
            return JJMgr.instance.dataConfig.is_allow_area && this.allowScene();
          }
        }, {
          key: "com",
          get: function get() {
            return find('CanvasJJ/ExportNode').getComponent(ExportCrl);
          } // //进入首页

        }, {
          key: "getRandom0To100",
          get: function get() {
            return Math.random() * 100;
          }
        }], [{
          key: "Instance",
          get: function get() {
            if (!JJWxTrap._instance) {
              JJWxTrap._instance = new JJWxTrap();
            }

            return JJWxTrap._instance;
          } // /**后台配置参数 */

        }]);

        return JJWxTrap;
      }());
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import DuilianAdMgr from "./DuilianAdMgr";
      // import ExportCrl from "./ExportCrl";
      // import FinishCustomAdMgr from "./FinishCustomAdMgr";
      // import JJMgr, { SceneDir } from "./JJMgr";
      // import EndBoxUI from "./View/EndBoxUI";
      // import FinishGameUI from "./View/FinishGameUI";
      // import GridUI from "./View/GridUI";
      // import GridUI2 from "./View/GridUI2";
      // import GridUI3 from "./View/GridUI3";
      // import GridUI4 from "./View/GridUI4";
      // import InterstitialAdUI from "./View/InterstitialAdUI";
      // import RunUI from "./View/RunUI";
      // import StartBoxUI from "./View/StartBoxUI";
      // import WxPlatform from "./WxPlatform";
      // import WxPlatformBannerAd from "./WxPlatformBannerAd";
      //
      // /**微信平台-九九运营策略 */
      // export default class JJWxTrap {
      //     static _instance: JJWxTrap;
      //     isSplash: boolean = false;
      //     gridInt: number;
      //     static get Instance(): JJWxTrap {
      //         if (!JJWxTrap._instance) {
      //             JJWxTrap._instance = new JJWxTrap;
      //         }
      //         return JJWxTrap._instance;
      //     }
      //
      //     /**后台配置参数 */
      //     dataConfig = JJMgr.instance.dataConfig;
      //
      //     /**设置关卡属性 */
      //     _levelObj: any;
      //     // _levelStr: string;
      //     // setLevel(value: any, str: string) {
      //     //     this._levelObj = value;
      //     //     this._levelStr = str
      //     // }
      //     // resetLevel() {
      //     //     if (this._levelObj) {
      //     //         this._levelObj[this._levelStr] = 1
      //     //     }
      //     // }
      //     private _Level: number = 0;
      //     public get Level(): number {
      //         return this._Level;
      //     }
      //     public set Level(value: number) {
      //         this._Level = value;
      //     }
      //     // get Level() {
      //     //     return this._levelObj ? this._levelObj[this._levelStr] : 1
      //     // }
      //
      //
      //     get NewWuchu() {
      //         return true//JJMgr.instance.dataConfig.is_allow_area && this.allowScene()
      //     }
      //     get NewWuchu2() {
      //         return JJMgr.instance.dataConfig.is_allow_area && this.allowScene()
      //     }
      //
      //     /**场景值屏蔽 */
      //     allowScene() {
      //         if (!this.dataConfig.front_wuchu_scene) return true
      //         let sceneId: number = window['wx'].getEnterOptionsSync().scene;
      //         let query = window['wx'].getEnterOptionsSync().query;
      //
      //         // front_first_scv_swtich 判断是否启用本地首次场景值
      //         let localScene = Number(localStorage.getItem("localScene"));
      //         if (!localScene) {//首次才会存储
      //             localScene = sceneId;
      //             localStorage.setItem("localScene", localScene.toString())
      //             // 用户首次进入时保存该值，后续通过该值判断是否支持误触
      //             if (query.wxgamecid) {
      //                 localStorage.setItem("wxgamecid", query.wxgamecid.toString())
      //             }
      //         }
      //
      //         if (this.dataConfig.front_first_scv_swtich) {
      //             sceneId = localScene;
      //         }
      //
      //         let wxgamecid = localStorage.getItem("wxgamecid");
      //         if (!this.dataConfig.front_is_source) {
      //             wxgamecid = "true";
      //         }
      //
      //         let s: string = this.dataConfig.front_wuchu_scene.toString();
      //         if (s.search('|') == -1) {
      //             let sInt: number = parseInt(s)
      //             return sInt != sceneId
      //         }
      //         let sArr: string[] = s.split('|')
      //         for (let i = 0; i < sArr.length; i++) {
      //             let sInt: number = parseInt(sArr[i])
      //             if (sInt == sceneId && wxgamecid) {
      //                 return true
      //             }
      //         }
      //
      //         return false
      //     }
      //
      //     get com() {
      //         return cc.find('ExportNode').getComponent(ExportCrl)
      //     }
      //
      //     //进入首页
      //     moreGameBtn: any
      //     drawBtn: any
      //     inHomePage(moreGameBtn?: any, drawBtn?: any) {
      //         console.log("本地保存场景值：", localStorage.getItem("localScene"))
      //         console.log("本地保存路径值：", localStorage.getItem("wxgamecid"))
      //         console.log("allowScene:", this.allowScene())
      //
      //         this.moreGameBtn = moreGameBtn
      //         this.drawBtn = drawBtn
      //         if (moreGameBtn) this.com.schedule(JJWxTrap.Instance.updateMoreGameBtn, 0.1)
      //         if (drawBtn) this.com.schedule(JJWxTrap.Instance.updateDrawBtn, 0.1)
      //
      //         DuilianAdMgr.instance.hideGrid()
      //
      //         new Promise((resolve, reject) => {
      //             // 热门推荐格子
      //             if (!this.isSplash && JJWxTrap.Instance.NewWuchu2 && JJMgr.instance.dataConfig.front_home_hot_tuijian) {
      //                 this.showGridUI4(() => {
      //                     resolve(0);
      //                 }, true)
      //             } else {
      //                 resolve(0);
      //             }
      //         }).then((result) => {
      //             // 视频
      //             return new Promise((resolve, reject) => {
      //                 if (!this.isSplash && JJWxTrap.Instance.NewWuchu2 && Math.random() * 100 < JJMgr.instance.dataConfig.front_home_vi_chance) {
      //                     WxPlatform.instance.showVideoAd(null, () => {
      //
      //                     })
      //                     resolve(1);
      //                 } else {
      //                     resolve(1);
      //                 }
      //             });
      //         }).then((result) => {
      //             // 格子页误触
      //             return new Promise((resolve, reject) => {
      //                 if (!this.isSplash && JJWxTrap.Instance.NewWuchu2 && Math.random() * 100 < JJMgr.instance.dataConfig.front_home_box_chance) {
      //                     this.showHomeBox(() => {
      //                         resolve(2);
      //                     })
      //                 } else {
      //                     resolve(2);
      //                 }
      //             });
      //         }).then((result) => {
      //             // 首页对联格子
      //             return new Promise((resolve, reject) => {
      //                 this.gridInt = setInterval(() => {
      //                     this.testGrid();
      //                 }, 1000);
      //
      //                 resolve(3);
      //             });
      //         }).then((result) => {
      //             WxPlatformBannerAd.Instance.showBannerFun2()
      //
      //             this.isSplash = true;
      //
      //             return;
      //         });
      //
      //     }
      //
      //     testGrid() {
      //         if (DuilianAdMgr.instance.gridAdArr.length > 0) {
      //             DuilianAdMgr.instance.showGrid()
      //             clearInterval(this.gridInt)
      //         }
      //     }
      //
      //     updateMoreGameBtn() {
      //         JJWxTrap.Instance.moreGameBtn.active = JJWxTrap.Instance.NewWuchu2 && JJMgr.instance.dataConfig.front_haowan_switch
      //     }
      //     updateDrawBtn() {
      //         JJWxTrap.Instance.drawBtn.active = JJWxTrap.Instance.NewWuchu2 && JJMgr.instance.dataConfig.front_chouti_switch
      //     }
      //     //类似商店页面
      //     clickShop() {
      //         DuilianAdMgr.instance.hideGrid()
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //         this.com.unschedule(JJWxTrap.Instance.updateMoreGameBtn)
      //         this.com.unschedule(JJWxTrap.Instance.updateDrawBtn)
      //     }
      //     //点击开始游戏
      //     clickStartGame(cb: Function) {
      //         DuilianAdMgr.instance.hideGrid()
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //         this.com.unschedule(JJWxTrap.Instance.updateMoreGameBtn)
      //         this.com.unschedule(JJWxTrap.Instance.updateDrawBtn)
      //
      //         if(!JJWxTrap.Instance.NewWuchu2){
      //             cb && cb();
      //             return;
      //         }
      //
      //         new Promise((resolve, reject) => {
      //             // 全屏格子页
      //             this.showGridUI3(() => {
      //                 resolve(0);
      //             })
      //         }).then((result) => {
      //             // 视频
      //             return new Promise((resolve, reject) => {
      //                 if (Math.random() * 100 < JJMgr.instance.dataConfig.front_start_vi_chance) {
      //                     WxPlatform.instance.showVideoAd(null, (isEnded) => {
      //
      //                     });
      //                     resolve(1);
      //                 } else {
      //                     resolve(1);
      //                 }
      //             });
      //         }).then((result) => {
      //             // 宝箱
      //             return new Promise((resolve, reject) => {
      //                 this.showStartBox(() => {
      //                     resolve(2);
      //                 })
      //             });
      //         }).then((result) => {
      //             WxPlatform.instance.showGameGridAd()
      //             cb && cb();
      //
      //             return;
      //         });
      //
      //     }
      //     //首页更多游戏
      //     clickHomeMoreGame() {
      //         DuilianAdMgr.instance.hideGrid()
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //         this.showGridUI(() => { DuilianAdMgr.instance.showGrid(); WxPlatform.instance.showBanner() }, false, true)
      //     }
      //     //首页抽屉
      //     clickDraw() {
      //         DuilianAdMgr.instance.hideGrid()
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //         this.showGridUI(() => { DuilianAdMgr.instance.showGrid(); WxPlatform.instance.showBanner() }, false, true)
      //     }
      //     //结算页抽屉
      //     clickFinishMoreGame() {
      //         cc.find('ExportNode/FinishGameUI').active = false
      //         cc.find('ExportNode/ScrollUI').active = false
      //         FinishCustomAdMgr.instance.hideGrid()
      //         WxPlatform.instance.hideGameGridAd()
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //
      //         this.showGridUI(() => {
      //             WxPlatform.instance.showGameGridAd();
      //             let b = WxPlatform.instance.showBanner()
      //             if (!b && this.NewWuchu && JJMgr.instance.dataConfig.front_daochulan_switch) {
      //                 this.showFinishScroll()
      //             }
      //             if (this.dataConfig.front_jiesuanye_switch && this.NewWuchu) {
      //                 if (Math.random() * 100 < this.dataConfig.front_daochu_gezi_chance) {
      //                     this.showFinishExport()
      //                 } else {
      //                     FinishCustomAdMgr.instance.showGrid()
      //                 }
      //             }
      //         }, false, true)
      //     }
      //
      //     //游戏中banner
      //     showGameBanner() {
      //         if (this.NewWuchu && JJMgr.instance.dataConfig.front_game_banner_switch) {
      //             // WxPlatform.instance.showBanner()
      //             WxPlatformBannerAd.Instance.showBannerFun2()
      //         }
      //     }
      //
      //     //游戏结束
      //     showGameOver(cb: Function) {
      //         WxPlatform.instance.hideGameGridAd()
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //         this.showGridUI(() => {
      //             this.showEndBox(cb)
      //         }, true)
      //     }
      //
      //     //结算页
      //     showFinishUI(drawBtn?: any) {
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //         WxPlatform.instance.showGameGridAd()
      //         drawBtn.active = JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_chouti_switch
      //         WxPlatformBannerAd.Instance.showBannerFun2();
      //
      //         if (this.NewWuchu && JJMgr.instance.dataConfig.front_daochulan_switch) {
      //             this.showFinishScroll()
      //         }
      //         if (this.dataConfig.front_jiesuanye_switch && this.NewWuchu) {
      //             if (Math.random() * 100 < this.dataConfig.front_daochu_gezi_chance) {
      //                 this.showFinishExport()
      //             } else {
      //                 FinishCustomAdMgr.instance.showGrid()
      //             }
      //         }
      //         if (JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_jiesaunye_chaping_switch) {
      //             WxPlatform.instance.showInterAd()
      //         }
      //     }
      //
      //     //关闭结算页
      //     closeFinishUI(cb: Function) {
      //         FinishCustomAdMgr.instance.hideGrid()
      //         WxPlatform.instance.hideGameGridAd()
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      //         cc.find('ExportNode/FinishGameUI').active = false
      //         cc.find('ExportNode/ScrollUI').active = false
      //
      //         new Promise((resolve, reject) => {
      //             // 视频
      //             if(this.NewWuchu2 && Math.random() * 100 <  JJMgr.instance.dataConfig.front_jiesuanye_vi_chance){
      //                 WxPlatform.instance.showVideoAd(null, (isEnded) => {
      //                     resolve(1)
      //                 });
      //             }else{
      //                 resolve(1)
      //             }
      //         }).then((result) => {
      //             // 格子
      //             return new Promise((resolve, reject) => {
      //                 this.showGridUI2(() => {
      //                     setTimeout(() => {
      //                         resolve(2)
      //                     }, 100);
      //                     if (this.dataConfig.front_wx_ad_switch && this.NewWuchu){
      //                         WxPlatform.instance.showInterAd()
      //                     }
      //                 }, true)
      //             });
      //         }).then((result) => {
      //             cb && cb()
      //
      //             return;
      //         });
      //
      //     }
      //
      //     //展示热门格子页
      //     private showGridUI(ccb?: Function, isInterAd: boolean = false, isMoreGame: boolean = false) {
      //         cc.find('ExportNode/GridUI').getComponent(GridUI).showUI(ccb, isInterAd, isMoreGame)
      //     }
      //     //展示格子页2
      //     private showGridUI2(ccb?: Function, isFinishUI: boolean = false) {
      //         cc.find('ExportNode/GridUI2').getComponent(GridUI2).showUI(ccb, isFinishUI)
      //     }
      //     //展示格子页3
      //     private showGridUI3(ccb?: Function) {
      //         cc.find('ExportNode/GridUI3').getComponent(GridUI3).showUI(ccb)
      //     }
      //     //展示格子页2
      //     private showGridUI4(ccb?: Function, isFinishUI: boolean = false) {
      //         cc.find('ExportNode/GridUI4').getComponent(GridUI4).showUI(ccb, isFinishUI)
      //     }
      //     //展示凌波微步
      //     private showRunUI(ccb?: Function) {
      //         cc.find('ExportNode/RunUI').getComponent(RunUI).showUI(ccb)
      //     }
      //     //展示结算页导出栏
      //     private showFinishExport() {
      //         cc.find('ExportNode/FinishGameUI').getComponent(FinishGameUI).showUI()
      //     }
      //     //展示底部导出栏
      //     private showFinishScroll() {
      //         cc.find('ExportNode/ScrollUI').active = true
      //     }
      //     // 主页
      //     private showHomeBox(cb?: Function) {
      //         cc.find('ExportNode/StartBoxUI').getComponent(StartBoxUI).showUI(false, JJMgr.instance.dataConfig.front_fbox_lianxu_num, cb)
      //     }
      //     // 开始按钮
      //     private showStartBox(cb?: Function) {
      //         console.log("开始按钮", JJMgr.instance.dataConfig.front_fbox_wuchu_change, JJMgr.instance.dataConfig.front_level_fbox_num, this.Level, JJWxTrap.Instance.NewWuchu2)
      //
      //         if (this.getRandom0To100 < JJMgr.instance.dataConfig.front_fbox_wuchu_change && JJMgr.instance.dataConfig.front_level_fbox_num <= this.Level && JJWxTrap.Instance.NewWuchu2) {
      //             // 1代表banner类型，2代表格子类型
      //             if (JJMgr.instance.dataConfig.front_fbox_status == 1) {
      //                 cc.find('ExportNode/EndBoxUI').getComponent(EndBoxUI).showUI(JJMgr.instance.dataConfig.front_fbox_lianxu_num, cb)
      //             }
      //             if (JJMgr.instance.dataConfig.front_fbox_status == 2) {
      //                 cc.find('ExportNode/StartBoxUI').getComponent(StartBoxUI).showUI(true, JJMgr.instance.dataConfig.front_fbox_lianxu_num, cb)
      //             }
      //         } else {
      //             cb && cb()
      //         }
      //     }
      //     // 结算页
      //     private showEndBox(cb?: Function) {
      //         if (this.getRandom0To100 < JJMgr.instance.dataConfig.front_tbox_wuchu_change && JJMgr.instance.dataConfig.front_level_tbox_num <= this.Level && JJWxTrap.Instance.NewWuchu2) {
      //             // 1代表banner类型，2代表格子类型
      //             if (JJMgr.instance.dataConfig.front_tbox_status == 1) {
      //                 cc.find('ExportNode/EndBoxUI').getComponent(EndBoxUI).showUI(JJMgr.instance.dataConfig.front_tbox_lianxu_num, cb)
      //             }
      //             if (JJMgr.instance.dataConfig.front_tbox_status == 2) {
      //                 cc.find('ExportNode/StartBoxUI').getComponent(StartBoxUI).showUI(true, JJMgr.instance.dataConfig.front_tbox_lianxu_num, cb)
      //             }
      //         } else {
      //             cb && cb()
      //         }
      //     }
      //
      //     /**获取跳转随机索引 */
      //     getRandomIndex() {
      //         return Math.floor(Math.random() * JJMgr.instance.navDataArr.length);
      //     }
      //
      //     /**获取随机数0-100 */
      //     get getRandom0To100() {
      //         return Math.random() * 100;
      //     }
      //
      //     inGame(btnDraw: cc.Node, btnMore: cc.Node) {
      //         if (btnDraw) {
      //             btnDraw.active = JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_chouti_switch
      //         }
      //         if (btnMore) {
      //             btnMore.active = JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_jingxi_gezi_switch
      //         }
      //     }
      //
      // }

      JJWxTrap._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JoystickComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EventMgr.ts', './TouchMgr.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, view, Node, Vec3, UITransform, Vec2, lerp, KeyCode, input, Input, Component, EventMgr, TouchEventType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      Node = module.Node;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      lerp = module.lerp;
      KeyCode = module.KeyCode;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      TouchEventType = module.TouchEventType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "9c9c5EcvclD6olyMcroCqfD", "JoystickComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var viewSize = view.getVisibleSize();
      var JoystickComponent = exports('JoystickComponent', (_dec = ccclass('JoystickComponent'), _dec2 = menu('UI/Comp/JoystickComponent'), _dec3 = property(Node), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JoystickComponent, _Component);

        function JoystickComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.startPoint = new Vec3();
          _this.joyBg = void 0;
          _this.joystick = void 0;
          _this.firstTouchPoint = void 0;
          _this.isPressed = void 0;
          _this.canMove = true;
          _this.angle = void 0;
          _this.joyBgSize = void 0;

          _initializerDefineProperty(_this, "touchArea", _descriptor, _assertThisInitialized(_this));

          _this.xAxis = 0;
          _this.yAxis = 0;
          _this.stopSpeed = 0.1;
          _this.keyXAxis = 0;
          _this.keyYAxis = 0;
          _this.firstTouchId = void 0;
          return _this;
        }

        var _proto = JoystickComponent.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          viewSize = view.getVisibleSize();
          this.joyBg = this.node;
          this.scheduleOnce(function () {
            _this2.startPoint = _this2.node.getPosition();

            _this2.joyBg.setPosition(_this2.startPoint);
          });
          this.joyBgSize = this.joyBg.getComponent(UITransform).contentSize;
          this.joystick = this.joyBg.children[0]; // let pos_joyBg = this.joyBg.getPosition();
          // pos_joyBg.x = 0;
          // pos_joyBg.y = -viewSize.height / 2 + 375;
          // pos_joyBg.x = 10000;
          // pos_joyBg.y = 10000;
          // this.joyBg.setPosition(pos_joyBg);

          var pos_joystick = this.joystick.getPosition();
          pos_joystick.x = 0;
          pos_joystick.y = 0;
          this.joystick.setPosition(pos_joystick);
          this.controlOn();
          JoystickComponent.instance = this;
        };

        _proto.update = function update(deltaTime) {
          if (this.keyXAxis != 0 || this.keyYAxis != 0) {
            var way = new Vec2(this.keyXAxis, this.keyYAxis);
            way.normalize();
            this.xAxis = way.x;
            this.yAxis = way.y;
          }

          if (!this.isPressed) {
            if (Math.abs(this.xAxis) < this.stopSpeed) {
              this.xAxis = 0;
            } else {
              this.xAxis = lerp(this.xAxis, 0, 0.1);
            }

            if (Math.abs(this.yAxis) < this.stopSpeed) {
              this.yAxis = 0;
            } else {
              this.yAxis = lerp(this.yAxis, 0, 0.1);
            }
          }

          EventMgr.event(TouchEventType.joyAxis, [this.xAxis, this.yAxis]);
        };

        _proto.onDestroy = function onDestroy() {
          EventMgr.clearTarget(this);
          this.controlOff();
        };

        _proto.keyCtrl = function keyCtrl(e) {
          if (e.keyCode == KeyCode.KEY_W) {
            this.keyYAxis += 1;
          }

          if (e.keyCode == KeyCode.KEY_S) {
            this.keyYAxis -= 1;
          }

          if (e.keyCode == KeyCode.KEY_A) {
            this.keyXAxis -= 1;
          }

          if (e.keyCode == KeyCode.KEY_D) {
            this.keyXAxis += 1;
          }
        };

        _proto.keyUp = function keyUp(e) {
          if (e.keyCode == KeyCode.KEY_W) {
            this.keyYAxis = 0;
          }

          if (e.keyCode == KeyCode.KEY_S) {
            this.keyYAxis = 0;
          }

          if (e.keyCode == KeyCode.KEY_A) {
            this.keyXAxis = 0;
          }

          if (e.keyCode == KeyCode.KEY_D) {
            this.keyXAxis = 0;
          }
        };

        _proto.controlOn = function controlOn() {
          input.on(Input.EventType.KEY_DOWN, this.keyCtrl, this);
          input.on(Input.EventType.KEY_UP, this.keyUp, this);
          this.touchArea.on(Node.EventType.TOUCH_START, this.onMouseDownEvent, this);
          this.touchArea.on(Node.EventType.TOUCH_MOVE, this.onMouseMoveEvent, this);
          this.touchArea.on(Node.EventType.TOUCH_END, this.onMouseUpEvent, this);
          this.touchArea.on(Node.EventType.TOUCH_CANCEL, this.onMouseUpEvent, this);
        };

        _proto.controlOff = function controlOff() {
          input.off(Input.EventType.KEY_DOWN, this.keyCtrl, this); // input.off(Input.EventType.KEY_PRESSING, this.keyCtrl, this);

          input.off(Input.EventType.KEY_UP, this.keyUp, this);
          this.touchArea.off(Node.EventType.TOUCH_START, this.onMouseDownEvent, this);
          this.touchArea.off(Node.EventType.TOUCH_MOVE, this.onMouseMoveEvent, this);
          this.touchArea.off(Node.EventType.TOUCH_END, this.onMouseUpEvent, this);
          this.touchArea.off(Node.EventType.TOUCH_CANCEL, this.onMouseUpEvent, this);
        };

        _proto.onMouseDownEvent = function onMouseDownEvent(e) {
          if (!this.firstTouchId) {
            this.firstTouchId = e.getID();
            this.firstTouchPoint = new Vec2(e.getUILocation().x, e.getUILocation().y);
            var pos_joyBg = this.joyBg.getPosition();
            pos_joyBg.x = this.firstTouchPoint.x - viewSize.width / 2;
            pos_joyBg.y = this.firstTouchPoint.y - viewSize.height / 2;
            this.joyBg.setPosition(pos_joyBg);
            var pos_joystick = this.joystick.getPosition();
            pos_joystick.x = 0;
            pos_joystick.y = 0;
            this.joystick.setPosition(pos_joystick);
            this.isPressed = true; // if (this.teachUI)
            //     this.teachUI.active = false;
          }
        };

        _proto.onMouseUpEvent = function onMouseUpEvent(e) {
          if (this.firstTouchId == e.getID()) {
            this.firstTouchId = null;
            this.isPressed = false; //joy初始化
            // let pos_joyBg = this.joyBg.getPosition();
            // pos_joyBg.x = 0;
            // pos_joyBg.y = -viewSize.height / 2 + 200;
            // pos_joyBg
            // pos_joyBg.x = 0;
            // pos_joyBg.y = 10000;

            this.joyBg.setPosition(this.startPoint);
            this.joystick.setPosition(new Vec3(0, 0, 0)); // if (this.teachUI)
            //     this.teachUI.active = true;
          }
        };

        _proto.onMouseMoveEvent = function onMouseMoveEvent(e) {
          if (this.firstTouchId == e.getID()) {
            this.moveCtrl(e);
          }
        };

        _proto.moveCtrl = function moveCtrl(e) {
          if (this.isPressed) {
            var vec1 = new Vec2(0, -1);
            var vec2 = new Vec2(e.getUILocation().x - this.firstTouchPoint.x, e.getUILocation().y - this.firstTouchPoint.y);
            var touchMoveDis = Vec2.len(vec2);
            var raidus = this.joyBgSize.width / 2;

            if (touchMoveDis == 0) {
              this.canMove = false;
            } else {
              //显示摇杆
              this.joyBg.setPosition(new Vec3(this.firstTouchPoint.x - viewSize.width / 2, this.firstTouchPoint.y - viewSize.height / 2, 0));
              this.canMove = touchMoveDis > 5;
              var cosAngle = Vec2.dot(vec1, vec2) / (Vec2.len(vec1) * Vec2.len(vec2));
              var hudu = Math.acos(cosAngle);
              this.angle = 180 * hudu / Math.PI;

              if (e.getUILocation().x < this.firstTouchPoint.x) {
                this.angle = -this.angle;
              }

              var xAxis = e.getUILocation().x - this.firstTouchPoint.x;
              var yAxis = e.getUILocation().y - this.firstTouchPoint.y;
              var way = new Vec2(xAxis, yAxis);

              if (way.lengthSqr() > raidus * raidus) {
                way.normalize();
              } else {
                way.multiplyScalar(1 / raidus);
              }

              this.xAxis = way.x;
              this.yAxis = way.y;
            }

            if (this.canMove) {
              var pos_joystick = this.joystick.getPosition();

              if (e.getUILocation().x < this.firstTouchPoint.x) {
                pos_joystick.x = Math.max(-raidus, e.getUILocation().x - this.firstTouchPoint.x);
              } else if (e.getUILocation().x > this.firstTouchPoint.x) {
                pos_joystick.x = Math.min(raidus, e.getUILocation().x - this.firstTouchPoint.x);
              }

              if (e.getUILocation().y < this.firstTouchPoint.y) {
                pos_joystick.y = Math.max(-raidus, e.getUILocation().y - this.firstTouchPoint.y);
              } else if (e.getUILocation().y > this.firstTouchPoint.y) {
                pos_joystick.y = Math.min(raidus, e.getUILocation().y - this.firstTouchPoint.y);
              }

              this.joystick.setPosition(pos_joystick); //限制滑块距离

              if (touchMoveDis > raidus) {
                var v = new Vec2(e.getUILocation().x - this.firstTouchPoint.x, e.getUILocation().y - this.firstTouchPoint.y);
                Vec2.normalize(v, v);
                Vec2.multiplyScalar(v, v.clone(), raidus);
                this.joystick.setPosition(new Vec3(raidus + v.x - this.joyBgSize.width / 2, raidus + v.y - this.joyBgSize.height / 2, 0));
              }
            }
          }
        };

        return JoystickComponent;
      }(Component), _class3.instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "touchArea", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JsonToScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, JsonAsset, CCFloat, instantiate, Vec3, Quat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      JsonAsset = module.JsonAsset;
      CCFloat = module.CCFloat;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "1c3dfjwmchLR6MHTvf3xOM4", "JsonToScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var JsonToScene = exports('JsonToScene', (_dec = ccclass('JsonToScene'), _dec2 = menu("Tool/JsonToScene"), _dec3 = property({
        type: Node,
        visible: true,
        displayName: '生成节点'
      }), _dec4 = property({
        type: JsonAsset,
        visible: true,
        displayName: '场景数据'
      }), _dec5 = property({
        type: Node,
        visible: true,
        displayName: 'Prefab节点'
      }), _dec6 = property({
        type: CCFloat,
        visible: true,
        displayName: '随便修改一下值生成'
      }), _dec7 = property({
        type: CCFloat,
        visible: true,
        displayName: '随便修改一下值删除场景'
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JsonToScene, _Component);

        function JsonToScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "stage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sceneJson", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefab", _descriptor3, _assertThisInitialized(_this));

          _this._value = 0;
          _this._value2 = 0;
          return _this;
        }

        var _proto = JsonToScene.prototype;

        _proto.onLoad = function onLoad() {// this.bornScene();
          // this.prefab.destroy();
        } //读Json生成场景
        ;

        _proto.bornScene = function bornScene() {
          var sceneJson = this.sceneJson.json;
          this.stage.destroyAllChildren();

          if (sceneJson) {
            for (var i = 0; i < sceneJson.length; i++) {
              var name = sceneJson[i].typeName;
              console.log(name);
              var pos = this.JsonToV3(sceneJson[i].pos);
              var rot = this.JsonToQuat(sceneJson[i].rot);
              var sca = this.JsonToV3(sceneJson[i].sca);
              var typeNode = new Node(name);
              this.stage.addChild(typeNode);
              typeNode.setPosition(pos);
              typeNode.setRotation(rot);
              typeNode.setScale(sca);
              var objData = sceneJson[i].objData;

              for (var j = 0; j < objData.length; j++) {
                var data = objData[j];
                var _name = data.name;

                var _pos = this.JsonToV3(data.pos);

                var _rot = this.JsonToQuat(data.rot);

                var _sca = this.JsonToV3(data.sca);

                console.log(_name);
                var obj = instantiate(this.prefab.getChildByName(_name));
                typeNode.addChild(obj);
                obj.setPosition(_pos);
                obj.setRotation(_rot);
                obj.setScale(_sca);
              }
            }
          } else {
            console.warn("缺失场景数据");
          }
        };

        _proto.bornHomeScene = function bornHomeScene() {
          var sceneJson = this.sceneJson.json;
          this.stage.destroyAllChildren();

          if (sceneJson) {
            for (var i = 0; i < sceneJson.length; i++) {
              var data = sceneJson[i];
              var name = data.name;
              var pos = this.JsonToV3(data.pos);
              var rot = this.JsonToQuat(data.rot);
              var sca = this.JsonToV3(data.sca);
              var prefab = this.prefab.getChildByName(name);
              if (!prefab) continue;
              var obj = instantiate(prefab);
              this.stage.addChild(obj);
              obj.setPosition(pos);
              obj.setRotation(rot);
              obj.setScale(sca);
            }
          } else {
            console.warn("缺失场景数据");
          }
        };

        _proto.JsonToV3 = function JsonToV3(data) {
          return new Vec3(parseFloat(data.x), parseFloat(data.y), parseFloat(data.z));
        };

        _proto.JsonToQuat = function JsonToQuat(data) {
          return new Quat(parseFloat(data.x), parseFloat(data.y), parseFloat(data.z), parseFloat(data.w));
        };

        _createClass(JsonToScene, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            // this._value = v;
            // this.bornScene();
            this.bornHomeScene(); // this.destroy();
          }
        }, {
          key: "value2",
          get: function get() {
            return this._value2;
          },
          set: function set(v) {
            // this._value = v;
            this.stage.destroyAllChildren(); // this.destroy();
          }
        }]);

        return JsonToScene;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "stage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sceneJson", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "value", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "value2", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "value2"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KillList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Sprite, Color, instantiate, Vec3, Animation, Label, Component, EventType, CampType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Animation = module.Animation;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
      CampType = module.CampType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "502d0/9pP5KjK8qqLGuzXBN", "KillList", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KillList = exports('KillList', (_dec = ccclass('KillList'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(KillList, _Component);

        function KillList() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = KillList.prototype;

        _proto.onLoad = function onLoad() {
          this.node.children[0].getComponent(Sprite).color = new Color(255, 255, 255, 0);
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_HeroDie_Event, this, this.bornNewInfo);
        };

        _proto.bornNewInfo = function bornNewInfo(data) {
          var info;

          for (var i = 0; i < this.node.children.length; i++) {
            if (this.node.children[i].getComponent(Sprite).color.a == 0) {
              info = this.node.children[i];
              break;
            }
          }

          if (!info) {
            info = instantiate(this.node.children[0]);
            this.node.addChild(info);
            info.setPosition(new Vec3(0, -50 * (this.node.children.length - 1), 0));
          }

          info.getComponent(Animation).play("killerList_Info");
          var killerLabel = info.getChildByName("killerName").getComponent(Label);
          var deadLabel = info.getChildByName("deadName").getComponent(Label);
          var bg = info.getChildByName("bg");
          killerLabel.string = data.killerName;
          deadLabel.string = data.deadName;
          killerLabel.color = data.camp != CampType.Player ? new Color(50, 180, 255, 255) : new Color(255, 50, 50, 255);
          deadLabel.color = data.camp == CampType.Player ? new Color(50, 180, 255, 255) : new Color(255, 50, 50, 255);
          bg.children[0].active = data.camp != CampType.Player;
          bg.children[1].active = data.camp == CampType.Player; // let info = instantiate(this.infoPrefab);
          // this.node.addChild(info)
          // info.setPosition(new Vec3(0, 0, 0));
        };

        _proto.update = function update(dt) {// for (let i = 0; i < this.node.children.length; i++) {
          //     let color = this.node.children[i].getComponent(Sprite).color.clone();
          //     color.a -= 1;
          //     if (color.a < 0)
          //         color.a = 0;
          //     this.node.children[i].getComponent(Sprite).color = color;
          // }
        };

        return KillList;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/KillTips.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Component, EventType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cfa88MMfapAtYM+UliWlO4q", "KillTips", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KillTips = exports('KillTips', (_dec = ccclass('KillTips'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(KillTips, _Component);

        function KillTips() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.kill_word = void 0;
          _this.support_word = void 0;
          return _this;
        }

        var _proto = KillTips.prototype;

        _proto.onLoad = function onLoad() {
          this.kill_word = this.node.getChildByName("kill_word");
          this.support_word = this.node.getChildByName("support_word");
        };

        _proto.start = function start() {
          // this.kill_word.getComponent(Sprite).color = new Color(255, 255, 255, 0);
          // this.support_word.getComponent(Sprite).color = new Color(255, 255, 255, 0);
          EventMgr.on(EventType.Game_Player_Kill, this, this.showKill);
          EventMgr.on(EventType.Game_Player_Support, this, this.showSupport);
        };

        _proto.onDestroy = function onDestroy() {
          EventMgr.clearTarget(this);
        };

        _proto.showKill = function showKill() {
          var killAnim = this.kill_word.getComponent(Animation);
          var supportAnim = this.support_word.getComponent(Animation);
          killAnim.play();
          supportAnim.stop(); // this.support_word.getComponent(Sprite).color = new Color(255, 255, 255, 0);
        };

        _proto.showSupport = function showSupport() {
          var killAnim = this.kill_word.getComponent(Animation);
          var supportAnim = this.support_word.getComponent(Animation);
          killAnim.stop();
          supportAnim.play(); // this.kill_word.getComponent(Sprite).color = new Color(255, 255, 255, 0);
        };

        return KillTips;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Load.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AssetMgr.ts', './Platform.ts', './PlatForm_wx.ts', './UMTrack.ts', './Bar.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EventTarget, Node, game, assetManager, Component, director, AssetMgr, Platform, Platform_wx, UMTrack, Bar;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EventTarget = module.EventTarget;
      Node = module.Node;
      game = module.game;
      assetManager = module.assetManager;
      Component = module.Component;
      director = module.director;
    }, function (module) {
      AssetMgr = module.AssetMgr;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      Platform_wx = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Bar = module.Bar;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "9ba23UKv6VKBaRDHIrm1VNu", "Load", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var eventTarget = new EventTarget();
      var Load = exports('Load', (_dec = ccclass('Load'), _dec2 = menu('UI/Load'), _dec3 = property({
        type: Bar,
        displayName: '进度条'
      }), _dec4 = property(Node), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Load, _Component);

        function Load() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "unDestroyNode", _descriptor2, _assertThisInitialized(_this));

          _this.startScene = "Home";
          _this.firstLoadUrl = ["02_Home"];
          _this.isSdkOk = false;
          return _this;
        }

        var _proto = Load.prototype;

        _proto.onLoad = function onLoad() {
          game.addPersistRootNode(this.unDestroyNode);

          if (window["wx"]) {
            this.unDestroyNode.addComponent(Platform_wx);
          } else {
            this.unDestroyNode.addComponent(Platform);
          } // GameData.isSdkOk = true;
          // console.log("sdk加载完成")
          // });

        };

        _proto.start = function start() {
          this.startLoad();
          this.scheduleOnce(function () {
            UMTrack.instance.trackEvent("Load_in");
          }, 1);
        } //开始加载流程
        ;

        _proto.startLoad = function startLoad() {
          var _this2 = this;

          var startScene = this.startScene;
          var loadUrl = this.firstLoadUrl;

          var startCB = function startCB() {
            AssetMgr.instance.startLoadStage();
            eventTarget.on("loadRes", function (value) {
              if (_this2.bar) _this2.bar.value = value;
            }, _this2);
            director.preloadScene(startScene, function (completNumber, totalNumber) {
              eventTarget.emit("loadRes", completNumber / totalNumber);
            }, function () {
              eventTarget.off("loadRes");
              director.loadScene(startScene);
            });
          };

          if (window["wx"]) {
            console.log("进入微信分包");
            this.loadSubpackagesSync(loadUrl, startCB);
          } else {
            console.log("进入本地加载Bundle");
            var loadCount = loadUrl.length;

            if (loadCount == 0) {
              startCB();
            } else {
              for (var i = 0; i < loadCount; i++) {
                assetManager.loadBundle(loadUrl[i], function () {
                  if (--loadCount == 0) {
                    startCB();
                  }
                });
              }
            }
          }
        }
        /**加载分包 */
        ;

        _proto.loadSubPackage = function loadSubPackage(loadName, callback) {
          Platform.instance.loadSubPackage(loadName, callback);
        }
        /**同步加载多个分包 */
        ;

        _proto.loadSubpackagesSync = function loadSubpackagesSync(loadNames, callback) {
          var _this3 = this;

          var loadCount = loadNames.length;

          if (loadCount == 0) {
            console.log("全部分包加载完成");
            callback && callback();
            return;
          }

          var _loop = function _loop(i) {
            _this3.loadSubPackage(loadNames[i], function (isSuccess) {
              assetManager.loadBundle(loadNames[i], function () {
                if (isSuccess && --loadCount == 0) {
                  console.log("全部分包加载完成");
                  callback && callback();
                }
              });
            });
          };

          for (var i = 0; i < loadCount; i++) {
            _loop(i);
          }
        };

        return Load;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "unDestroyNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./AppConfig.ts', './AutoScroll.ts', './BasePlatform.ts', './CustomAdMgr.ts', './DuilianAdMgr.ts', './ExportCrl.ts', './FinishCustomAdMgr.ts', './JJMgr.ts', './jiujiu_pull_sdk.min.mjs_cjs=&original=.js', './jiujiu_sdk.min.mjs_cjs=&original=.js', './jiujiu_sdk_conf.mjs_cjs=&original=.js', './JJWxTrap.ts', './RotateLoop.ts', './ScaleLoop.ts', './EndBoxUI.ts', './FinishGameUI.ts', './GridUI.ts', './GridUI2.ts', './GridUI3.ts', './GridUI4.ts', './InterstitialAdUI.ts', './RunUI.ts', './ScrollUI.ts', './StartBoxUI.ts', './WxPlatform.ts', './WxPlatformBannerAd.ts', './MainCamera.ts', './PoolComp.ts', './Bullet.ts', './Bullet_Ball.ts', './Bullet_Line.ts', './Bullet_ShotGun.ts', './FireEffect.ts', './HitEffect.ts', './HomeCamCtrl.ts', './NpcAI.ts', './PlayerCtr.ts', './Anim_Tank.ts', './Hero.ts', './Hero_Enemy.ts', './Hero_Npc.ts', './Hero_Player.ts', './AtkUpBuff.ts', './Face.ts', './HealEffect.ts', './Item.ts', './ShieldBuff.ts', './SpeedBuff.ts', './Tower.ts', './DataClass.ts', './EnumTypes.ts', './GameData.ts', './StorageData.ts', './AssetMgr.ts', './EventMgr.ts', './GameMgr.ts', './PoolMgr.ts', './SoundMgr.ts', './StorageMgr.ts', './TouchMgr.ts', './PlatForm_wx.ts', './Platform.ts', './UMTrack.ts', './JsonToScene.ts', './NodeTool.ts', './SceneToJson.ts', './SwitchMat.ts', './Tool.ts', './colliderCheck.ts', './2DShow3D.ts', './Bar.ts', './CircleBar.ts', './Fontclip.ts', './JoystickComponent.ts', './ScaleTween.ts', './SkillBtn.ts', './videoToggle.ts', './EndUI.ts', './Aim.ts', './AimTankShow.ts', './AutoFireSwitchBtn.ts', './HpBar.ts', './HurtEffect.ts', './ItemList.ts', './KillList.ts', './KillTips.ts', './Map.ts', './MinMap.ts', './PlayFeedBack.ts', './SelectUI.ts', './Test.ts', './TopState.ts', './TowerUI.ts', './TowerUI_Small.ts', './defendTips.ts', './hitTips.ts', './missTips.ts', './Home.ts', './GoldComp.ts', './HomeTankShowComp.ts', './ItemPool.ts', './MoneyComp.ts', './OilShow.ts', './OilUIComp.ts', './PaintBtn.ts', './RankComp.ts', './ShopBtn.ts', './SignComp.ts', './StatsComp.ts', './TankShopBtn.ts', './UpgradeBtn.ts', './VipComp.ts', './GameLoadingUI.ts', './PaintShopPanel.ts', './ShopPanel.ts', './SignPanel.ts', './StartPanel.ts', './TankShop.ts', './UpgradePanel.ts', './VipPanel.ts', './Load.ts', './NavMesh.ts', './NavMeshAgent.ts', './NavMeshData.ts', './NavMeshExport.ts', './NavMeshMgr.ts', './CharactorController.ts', './DebugController.ts', './CasingController.ts', './FPSController.ts', './StateController.ts', './WeaponController.ts', './FollowController.ts', './SphereController.ts', './CustomInput.ts', './CinestaionImpulseSource.ts', './CinestationBrain.ts', './CinestationData.ts', './CinestationShareAssets.ts', './CinestationSmoothPath.ts', './Effect.ts', './Effect3_4.ts', './Events.ts', './Math.ts', './Types.ts', './Visualization.ts', './Base.ts', './IVCam.ts', './VCamAim.ts', './VCamAutoDolly.ts', './VCamBody.ts', './VCamComposer.ts', './VCamFreeLook.ts', './VCamHardLook.ts', './VCamImpulse.ts', './VCamLens.ts', './VCamNoise.ts', './VCamTracked.ts', './CameraHandler.ts', './ComposerHandler.ts', './FreeLookHandler.ts', './HardLookAtHandler.ts', './NoiseHandler.ts', './TrackedHandler.ts', './NoiseGenerator.ts', './Predictor.ts', './AimStage.ts', './BaseStage.ts', './BodyStage.ts', './ImpulseStage.ts', './NoiseStage.ts', './VirtualCamera.ts'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/MainCamera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Camera, Quat, Vec3, Component, GameData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Quat = module.Quat;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "24faco54ARDMbGaB8BqsSxG", "MainCamera", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MainCamera = exports('MainCamera', (_dec = ccclass('MainCamera'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MainCamera, _Component);

        function MainCamera() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.rotEular = new Vec3();
          _this.targetRot = new Quat();
          _this.nowRotXoffset = 0;
          _this.shakeTime = void 0;
          _this.shakeAmount = void 0;
          _this.decreaseFactor = void 0;
          _this.originalPos = void 0;
          _this.target = void 0;
          return _this;
        }

        var _proto = MainCamera.prototype;

        _proto.onLoad = function onLoad() {
          GameData.cam = this.node.getComponent(Camera);
          console.log("摄像机已同步到全局变量");
        };

        _proto.start = function start() {} //后坐力用
        ;

        _proto.camUpPush = function camUpPush(value) {
          this.node.getRotation().getEulerAngles(this.rotEular);
          this.nowRotXoffset += value;
          Quat.fromEuler(this.targetRot, this.rotEular.x + this.nowRotXoffset, this.rotEular.y, this.rotEular.z);
          this.node.setRotation(this.targetRot);
          this.schedule(this.camUpPushUpdate);
        };

        _proto.camUpPushUpdate = function camUpPushUpdate(dt) {
          this.nowRotXoffset -= dt * 5;

          if (this.nowRotXoffset < 0) {
            this.nowRotXoffset = 0;
            this.unschedule(this.camUpPushUpdate);
          }

          Quat.fromEuler(this.targetRot, this.rotEular.x + this.nowRotXoffset, this.rotEular.y, this.rotEular.z);
          this.node.setRotation(this.targetRot);
        }
        /** 摄像机抖动 */
        ;

        _proto.shakeCam_Short = function shakeCam_Short() {
          this.d3_objectShake(this.node, 0.1, 0.25);
        };

        _proto.d3_objectShake = function d3_objectShake(target, shakeTime, shakeAmount) {
          if (shakeTime === void 0) {
            shakeTime = 1;
          }

          if (shakeAmount === void 0) {
            shakeAmount = 0.7;
          }

          this.shakeTime = shakeTime;
          this.shakeAmount = shakeAmount;
          this.decreaseFactor = 1;
          this.originalPos = target.getPosition();
          this.target = target;
          this.schedule(this.updateShake);
        };

        _proto.updateShake = function updateShake() {
          if (this.shakeTime > 0) {
            var pos = new Vec3();
            Vec3.multiplyScalar(pos, this.randomPos(), this.shakeAmount);
            Vec3.add(pos, this.originalPos, pos);
            this.target.setPosition(pos);
            this.shakeTime -= 0.02 * this.decreaseFactor;
          } else {
            this.shakeTime = 0;
            this.target.setPosition(this.originalPos);
            this.unschedule(this.updateShake);
          }
        };

        _proto.randomPos = function randomPos() {
          var x = Math.random() > 0.5 ? Math.random() : -Math.random();
          var y = Math.random() > 0.5 ? Math.random() : -Math.random();
          return new Vec3(x, y, 0);
        };

        return MainCamera;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Map.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, instantiate, Vec3, Component, GameData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "43b4cQy4dZMbaerxbY1a/Sx", "Map", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Map = exports('Map', (_dec = ccclass('Map'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Map, _Component);

        function Map() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.playerPoint = void 0;
          _this.npcPoints = [];
          _this.enmeyPoints = [];
          return _this;
        }

        var _proto = Map.prototype;

        _proto.onLoad = function onLoad() {
          this.playerPoint = this.node.getChildByName("playerPoint");
        };

        _proto.start = function start() {
          this.npcPoints.push(this.node.getChildByName("npcPoint"));
          this.enmeyPoints.push(this.node.getChildByName("enemyPoint"));

          for (var i = 0; i < GameData.players.length - 2; i++) {
            var ui = instantiate(this.npcPoints[0]);
            this.node.addChild(ui);
            this.npcPoints.push(ui);
          }

          for (var _i = 0; _i < GameData.enemies.length - 1; _i++) {
            var _ui = instantiate(this.enmeyPoints[0]);

            this.node.addChild(_ui);
            this.enmeyPoints.push(_ui);
          }
        };

        _proto.update = function update() {
          this.setPoint(GameData.player, this.playerPoint);
          var npcIndex = 0;

          for (var i = 0; i < GameData.players.length; i++) {
            if (!GameData.players[i].isPlayerCtrl) {
              this.setPoint(GameData.players[i], this.npcPoints[npcIndex]);
              npcIndex++;
            }
          }

          for (var _i2 = 0; _i2 < GameData.enemies.length; _i2++) {
            this.setPoint(GameData.enemies[_i2], this.enmeyPoints[_i2]);
          }
        };

        _proto.setPoint = function setPoint(hero, point) {
          if (hero.isDead) {
            point.setScale(Vec3.ZERO);
          } else {
            point.setScale(Vec3.ONE);
          }

          var pos = hero.node.getWorldPosition();
          var rot = new Vec3();
          hero.model.getRotation().getEulerAngles(rot);
          var x = (pos.x - 10) * 0.7 - 40;
          var y = (pos.z - 60) * -0.65 - 120;
          point.setPosition(new Vec3(x, y, 0));
          var angle = rot.y - 180;
          point.setRotationFromEuler(new Vec3(0, 0, angle));
        };

        return Map;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Math.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Quat, clamp01, Vec3, clamp, Vec4;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Quat = module.Quat;
      clamp01 = module.clamp01;
      Vec3 = module.Vec3;
      clamp = module.clamp;
      Vec4 = module.Vec4;
    }],
    execute: function () {
      exports({
        Quat_exponentialDamp: Quat_exponentialDamp,
        Quat_quarticDamp: Quat_quarticDamp,
        Vec3_closeTo: Vec3_closeTo,
        Vec3_closestPointOnSegment: Vec3_closestPointOnSegment,
        Vec3_setFromMatrixColumn: Vec3_setFromMatrixColumn,
        Vec3_setFromSpherical: Vec3_setFromSpherical,
        Vec4_closeTo: Vec4_closeTo,
        closeTo: closeTo,
        exponentialDamp: exponentialDamp,
        quarticDamp: quarticDamp
      });

      cclegacy._RF.push({}, "85d4azs+0dHJIZE5Rr15Ay/", "Math", undefined);

      var sqrt = Math.sqrt,
          atan2 = Math.atan2,
          acos = Math.acos,
          sin = Math.sin,
          cos = Math.cos,
          floor = Math.floor,
          min = Math.min,
          abs = Math.abs;

      Quat.lerp = function (out, a, b, t) {
        if (Quat.dot(a, b) < 0) {
          Quat.set(b, -b.x, -b.y, -b.z, -b.w);
        }

        t = clamp01(t);
        out.x = a.x + t * (b.x - a.x);
        out.y = a.y + t * (b.y - a.y);
        out.z = a.z + t * (b.z - a.z);
        out.w = a.w + t * (b.w - a.w);
        Quat.normalize(out, out);
        return out;
      };

      Quat.prototype.lerp = function (b, t) {
        return Quat.lerp(this, this, b, t);
      };

      var EPSILON = exports('EPSILON', 0.0001);
      var v3_1 = new Vec3();
      var v3_2 = new Vec3();

      function closeTo(a, b) {
        return abs(a - b) <= EPSILON;
      }

      function Vec4_closeTo(a, b) {
        return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w) <= EPSILON;
      }

      function Vec3_closeTo(a, b) {
        return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) <= EPSILON;
      }

      function Vec3_closestPointOnSegment(p, s0, s1) {
        var s = Vec3.subtract(v3_1, s1, s0);
        var dd = Vec3.lengthSqr(s);

        if (dd < EPSILON) {
          return 0;
        }

        return clamp01(Vec3.dot(Vec3.subtract(v3_2, p, s0), s) / dd); //use sqrt(dd)?
      }

      function Vec3_setFromSpherical(out, s) {
        var radius = s.radius,
            phi = s.phi,
            theta = s.theta;
        var sinPhiRadius = sin(phi) * radius;
        out.x = sinPhiRadius * sin(theta);
        out.y = cos(phi) * radius;
        out.z = sinPhiRadius * cos(theta);
        return out;
      }

      function Vec3_setFromMatrixColumn(out, m, col) {
        switch (col) {
          case 0:
            out.x = m.m00;
            out.y = m.m01;
            out.z = m.m02;
            break;

          case 1:
            out.x = m.m04;
            out.y = m.m05;
            out.z = m.m06;
            break;

          case 2:
            out.x = m.m08;
            out.y = m.m09;
            out.z = m.m10;
            break;
        }

        return out;
      }

      var kNegligibleResidual = 0.01;
      var kLogNegligibleResidual = Math.log(kNegligibleResidual); // -4.605170186;

      function exponentialDamp(current, target, dampTime, deltaTime) {
        var k = -kLogNegligibleResidual / dampTime;
        return current + (target - current) * (1 - Math.exp(-k * deltaTime));
      }

      function quarticDamp(current, target, dampTime, deltaTime) {
        // cuve like exponentialDecay but cost less
        var t = 1 - min(deltaTime, dampTime) / dampTime;
        var tt = t * t;
        return current + (target - current) * (1 - tt * tt);
      }

      function Quat_exponentialDamp(out, current, target, dampTime, deltaTime) {
        return Quat.lerp(out, current, target, exponentialDamp(0, 1, dampTime, deltaTime));
      }

      function Quat_quarticDamp(out, current, target, dampTime, deltaTime) {
        return Quat.lerp(out, current, target, quarticDamp(0, 1, dampTime, deltaTime));
      }

      var SmoothDamper = exports('SmoothDamper', /*#__PURE__*/function () {
        function SmoothDamper() {
          this._velocity = 0;
        }

        var _proto = SmoothDamper.prototype;

        _proto.smoothDamp = function smoothDamp(current, target, smoothTime, maxSpeed, deltaTime) {
          smoothTime = Math.max(0.0001, smoothTime);
          var num = 2 / smoothTime;
          var num2 = num * deltaTime;
          var num3 = 1 / (1 + num2 + 0.48 * num2 * num2 + 0.235 * num2 * num2 * num2);
          var num4 = current - target;
          var num5 = target;
          var num6 = maxSpeed * smoothTime;
          num4 = clamp(num4, -num6, num6);
          target = current - num4;
          var num7 = (this._velocity + num * num4) * deltaTime;
          this._velocity = (this._velocity - num * num7) * num3;
          var num8 = target + (num4 + num7) * num3;

          if (num5 - current > 0 == num8 > num5) {
            num8 = num5;
            this._velocity = (num8 - num5) / deltaTime;
          }

          return num8;
        };

        _proto.Quat_smoothDamp = function Quat_smoothDamp(out, current, target, dampTime, deltaTime) {
          return Quat.lerp(out, current, target, this.smoothDamp(0, 1, dampTime, Infinity, deltaTime));
        };

        _proto.Vec3_smoothDamp = function Vec3_smoothDamp(out, current, target, dampTime, deltaTime) {
          return Vec3.lerp(out, current, target, this.smoothDamp(0, 1, dampTime, Infinity, deltaTime));
        };

        return SmoothDamper;
      }());
      var Spherical = exports('Spherical', /*#__PURE__*/function () {
        //垂直旋转角度
        //水平旋转角度
        function Spherical(radius, phi, theta) {
          if (radius === void 0) {
            radius = 1;
          }

          if (phi === void 0) {
            phi = 0;
          }

          if (theta === void 0) {
            theta = 0;
          }

          this.radius = void 0;
          this.phi = void 0;
          this.theta = void 0;
          this.radius = radius;
          this.phi = phi;
          this.theta = theta;
        }

        var _proto2 = Spherical.prototype;

        _proto2.setFromVec3 = function setFromVec3(v) {
          return this.setFromCartesianCoords(v.x, v.y, v.z);
        };

        _proto2.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {
          this.radius = sqrt(x * x + y * y + z * z);

          if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
          } else {
            this.theta = atan2(x, z);
            this.phi = acos(clamp(y / this.radius, -1, 1));
          }

          return this;
        };

        return Spherical;
      }()); // Copyright (C) 2016 Keijiro Takahashi
      // https://mrl.cs.nyu.edu/~perlin/noise/

      var Perlin = exports('Perlin', /*#__PURE__*/function () {
        function Perlin() {}

        Perlin.Noise = function Noise(x, y, z) {
          var fade = Perlin._Fade;
          var grad = Perlin._Grad;
          var lerp = Perlin._Lerp;
          var p = Perlin._Permutation;

          if (y !== undefined && z !== undefined) {
            var xi = floor(x);
            var yi = floor(y);
            var zi = floor(z);
            var X = xi & 0xff; // FIND UNIT CUBE THAT

            var Y = yi & 0xff; // CONTAINS POINT.

            var Z = zi & 0xff;
            x -= xi; // FIND RELATIVE X,Y,Z

            y -= yi; // OF POINT IN CUBE.

            z -= zi;
            var u = fade(x); // COMPUTE FADE CURVES

            var v = fade(y); // FOR EACH OF X,Y,Z.

            var w = fade(z);
            var A = p[X] + Y,
                AA = p[A] + Z,
                AB = p[A + 1] + Z; // HASH COORDINATES OF

            var B = p[X + 1] + Y,
                BA = p[B] + Z,
                BB = p[B + 1] + Z; // THE 8 CUBE CORNERS,

            return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z), // AND ADD
            grad(p[BA], x - 1, y, z)), // BLENDED
            lerp(u, grad(p[AB], x, y - 1, z), // RESULTS
            grad(p[BB], x - 1, y - 1, z))), // FROM  8
            lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1), // CORNERS
            grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE
            lerp(u, grad(p[AB + 1], x, y - 1, z - 1), grad(p[BB + 1], x - 1, y - 1, z - 1))));
          } else if (y !== undefined) {
            var _xi = floor(x);

            var _yi = floor(y);

            var _X = _xi & 0xff;

            var _Y = _yi & 0xff;

            x -= _xi;
            y -= _yi;

            var _u = fade(x);

            var _v = fade(y);

            var _A = p[_X] + _Y & 0xff;

            var _B = p[_X + 1] + _Y & 0xff;

            return lerp(_v, lerp(_u, grad(p[_A], x, y), grad(p[_B], x - 1, y)), lerp(_u, grad(p[_A + 1], x, y - 1), grad(p[_B + 1], x - 1, y - 1)));
          } else {
            var _xi2 = floor(x);

            var _X2 = _xi2 & 0xff;

            x -= _xi2;

            var _u2 = fade(x);

            return lerp(_u2, grad(p[_X2], x), grad(p[_X2 + 1], x - 1));
          }
        };

        Perlin.Fbm = function Fbm(octave, x, y, z) {
          var f = 0;
          var w = 0.5;
          var noise = Perlin.Noise;

          if (y !== undefined && z !== undefined) {
            for (var i = 0; i < octave; i++) {
              f += w * noise(x, y, z);
              x *= 2.0;
              y *= 2.0;
              z *= 2.0;
              w *= 0.5;
            }
          } else if (y !== undefined) {
            for (var _i = 0; _i < octave; _i++) {
              f += w * noise(x, y);
              x *= 2.0;
              y *= 2.0;
              w *= 0.5;
            }
          } else {
            for (var _i2 = 0; _i2 < octave; _i2++) {
              f += w * noise(x);
              x *= 2.0;
              w *= 0.5;
            }
          }

          return f;
        };

        Perlin._Fade = function _Fade(t) {
          return t * t * t * (t * (t * 6 - 15) + 10);
        };

        Perlin._Lerp = function _Lerp(t, a, b) {
          return a + t * (b - a);
        };

        Perlin._Grad = function _Grad(hash, x, y, z) {
          if (y !== undefined && z !== undefined) {
            var h = hash & 15; // CONVERT LO 4 BITS OF HASH CODE

            var u = h < 8 ? x : y,
                // INTO 12 GRADIENT DIRECTIONS.
            v = h < 4 ? y : h == 12 || h == 14 ? x : z;
            return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
          } else if (y !== undefined) {
            return ((hash & 1) == 0 ? x : -x) + ((hash & 2) == 0 ? y : -y);
          } else {
            return (hash & 1) == 0 ? x : -x;
          }
        };

        return Perlin;
      }());
      Perlin._Permutation = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151];
      var Spline = exports('Spline', /*#__PURE__*/function () {
        function Spline() {}
        /**
         * Compute the tangent of a 4-point 1-dimensional bezier spline
         * @param out 
         * @param t  How far along the spline (0...1)
         * @param p0 First point
         * @param p1 First tangent
         * @param p2 Second point
         * @param p3 Second tangent
         * @returns 
         */


        Spline.Bezier3 = function Bezier3(out, t, p0, p1, p2, p3) {
          t = clamp01(t);
          var d = 1 - t;
          var k0 = d * d * d;
          var k1 = 3 * d * d * t;
          var k2 = 3 * d * t * t;
          var k3 = t * t * t;
          return out.set(k0 * p0.x + k1 * p1.x + k2 * p2.x + k3 * p3.x, k0 * p0.y + k1 * p1.y + k2 * p2.y + k3 * p3.y, k0 * p0.z + k1 * p1.z + k2 * p2.z + k3 * p3.z);
        } // Use the Thomas algorithm to compute smooth tangent values for a spline.  
        // Resultant tangents guarantee second-order smoothness of the curve.
        ;

        Spline.ComputeSmoothControlPoints = function ComputeSmoothControlPoints(knot, ctrl1, ctrl2) {
          var numPoints = knot.length;

          if (numPoints <= 2) {
            if (numPoints == 2) {
              Vec4.lerp(ctrl1[0], knot[0], knot[1], 0.33333);
              Vec4.lerp(ctrl2[0], knot[0], knot[1], 0.66666);
            } else if (numPoints == 1) {
              ctrl1[0] = ctrl2[0] = knot[0];
            }

            return;
          }

          var a = new Array(numPoints);
          var b = new Array(numPoints);
          var c = new Array(numPoints);
          var r = new Array(numPoints);
          var knot_any = knot;
          var ctrl1_any = ctrl1;
          var ctrl2_any = ctrl2;
          var axis_list = ["x", "y", "z", "w"];

          for (var k = 0; k < 4; ++k) {
            var axis = axis_list[k];
            var n = numPoints - 1; // Linear into the first segment

            a[0] = 0;
            b[0] = 2;
            c[0] = 1;
            r[0] = knot_any[0][axis] + 2 * knot_any[1][axis]; // Internal segments

            for (var i = 1; i < n - 1; ++i) {
              a[i] = 1;
              b[i] = 4;
              c[i] = 1;
              r[i] = 4 * knot_any[i][axis] + 2 * knot_any[i + 1][axis];
            } // Linear out of the last segment


            a[n - 1] = 2;
            b[n - 1] = 7;
            c[n - 1] = 0;
            r[n - 1] = 8 * knot_any[n - 1][axis] + knot_any[n][axis]; // Solve with Thomas algorithm

            for (var _i3 = 1; _i3 < n; ++_i3) {
              var m = a[_i3] / b[_i3 - 1];
              b[_i3] = b[_i3] - m * c[_i3 - 1];
              r[_i3] = r[_i3] - m * r[_i3 - 1];
            } // Compute ctrl1


            ctrl1_any[n - 1][axis] = r[n - 1] / b[n - 1];

            for (var _i4 = n - 2; _i4 >= 0; --_i4) {
              ctrl1_any[_i4][axis] = (r[_i4] - c[_i4] * ctrl1_any[_i4 + 1][axis]) / b[_i4];
            } // Compute ctrl2 from ctrl1


            for (var _i5 = 0; _i5 < n; _i5++) {
              ctrl2_any[_i5][axis] = 2 * knot_any[_i5 + 1][axis] - ctrl1_any[_i5 + 1][axis];
            }

            ctrl2_any[n - 1][axis] = 0.5 * (knot_any[n][axis] + ctrl1_any[n - 1][axis]);
          }
        };

        Spline.ComputeSmoothControlPointsLooped = function ComputeSmoothControlPointsLooped(knot, ctrl1, ctrl2) {
          var numPoints = knot.length;

          if (numPoints < 2) {
            if (numPoints == 1) ctrl1[0] = ctrl2[0] = knot[0];
            return;
          }

          var margin = Math.min(4, numPoints - 1);
          var length = numPoints + 2 * margin;
          var knotLooped = new Array(length);
          var ctrl1Looped = new Array(length);
          var ctrl2Looped = new Array(length);

          for (var i = 0; i < margin; ++i) {
            knotLooped[i] = knot[numPoints - (margin - i)];
            knotLooped[numPoints + margin + i] = knot[i];
          }

          for (var _i6 = 0; _i6 < numPoints; ++_i6) {
            knotLooped[_i6 + margin] = knot[_i6];
          }

          for (var _i7 = 0; _i7 < length; ++_i7) {
            ctrl1Looped[_i7] = new Vec4();
            ctrl2Looped[_i7] = new Vec4();
          }

          Spline.ComputeSmoothControlPoints(knotLooped, ctrl1Looped, ctrl2Looped);

          for (var _i8 = 0; _i8 < numPoints; ++_i8) {
            ctrl1[_i8] = ctrl1Looped[_i8 + margin];
            ctrl2[_i8] = ctrl2Looped[_i8 + margin];
          }
        };

        return Spline;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MinMap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, instantiate, Vec3, Component, GameData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d4d1dw3NLpOBKE68H/zmPxb", "MinMap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MinMap = exports('MinMap', (_dec = ccclass('MinMap'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MinMap, _Component);

        function MinMap() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.enemiesIcons = [];
          return _this;
        }

        var _proto = MinMap.prototype;

        _proto.start = function start() {
          this.enemiesIcons.push(this.node.getChildByName("enemys").children[0]);

          for (var i = 1; i < GameData.enemies.length; i++) {
            var obj = instantiate(this.node.getChildByName("enemys").children[0]);
            this.node.getChildByName("enemys").addChild(obj);
            this.enemiesIcons.push(obj);
          }
        };

        _proto.update = function update(deltaTime) {};

        _proto.CheckEnemy = function CheckEnemy() {
          var playerPos = GameData.player.node.getWorldPosition();
          var enemyPos;
          var maxDis = 100;
          var dis = 0;
          var way = new Vec3();
          this.node.getChildByName("player").setRotationFromEuler(new Vec3(0, 0, 0));
          var angle = -GameData.player.camYAxis.eulerAngles.y;
          this.enemiesIcons[0].parent.setRotationFromEuler(new Vec3(0, 0, angle));
          var forward = GameData.player.model.forward;

          for (var i = 0; i < GameData.enemies.length; i++) {
            enemyPos = GameData.enemies[i].node.getWorldPosition();
            this.enemiesIcons[i].setWorldRotationFromEuler(0, 0, angle + GameData.enemies[i].model.eulerAngles.y);
            Vec3.subtract(way, enemyPos, playerPos);
            dis = way.length();

            if (dis < maxDis) {
              this.enemiesIcons[i].active = true;
              this.enemiesIcons[i].setPosition(new Vec3(-way.x, way.z, 0));
            } else {
              this.enemiesIcons[i].active = false;
            }
          }
        };

        return MinMap;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/missTips.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Component, EventType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "99502VtqLVKdrK9i7NXYqI6", "missTips", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var missTips = exports('missTips', (_dec = ccclass('missTips'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(missTips, _Component);

        function missTips() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.anim = void 0;
          return _this;
        }

        var _proto = missTips.prototype;

        _proto.onLoad = function onLoad() {
          this.anim = this.node.getComponent(Animation);
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_Player_Miss, this, this.playAnim);
        };

        _proto.playAnim = function playAnim() {// this.anim.play();
          // SoundMgr.instacne.playSound(Tool.halfPercent() ? SoundType.V_Ricochet1 : SoundType.V_Ricochet2);
        };

        return missTips;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoneyComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, EventType, EventMgr, StorageMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "00561jnCFtMcqQxNurOxSXw", "MoneyComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MoneyComp = exports('MoneyComp', (_dec = ccclass('MoneyComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoneyComp, _Component);

        function MoneyComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = void 0;
          return _this;
        }

        var _proto = MoneyComp.prototype;

        _proto.onLoad = function onLoad() {
          this.label = this.node.getChildByName("Label").getComponent(Label);
        };

        _proto.onEnable = function onEnable() {
          this.updateMoney();
          EventMgr.on(EventType.Data_Money_Update, this, this.updateMoney);
        };

        _proto.onDisable = function onDisable() {
          EventMgr.off(EventType.Data_Money_Update, this, this.updateMoney);
        };

        _proto.updateMoney = function updateMoney() {
          this.label.string = StorageMgr.instance.storageData.money.toString();
        };

        return MoneyComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NavMesh.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './recast.mjs_cjs=&original=.js', './recast.js'], function (exports) {
  'use strict';

  var _createClass, cclegacy, _decorator, MeshRenderer, Vec3, gfx, math, geometry, _cjsExports;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      Vec3 = module.Vec3;
      gfx = module.gfx;
      math = module.math;
      geometry = module.geometry;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      exports('MeshDebugDataType', void 0);

      var _dec, _class;

      cclegacy._RF.push({}, "bd5f4A/A2xDaLznJLaUgQdf", "NavMesh", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NavMesh = exports('NavMesh', (_dec = ccclass('NavMesh'), _dec(_class = /*#__PURE__*/function () {
        /**
         * 构造函数 初始化recast
         * Recast 异步函数
         * @param cb 
         */
        function NavMesh() {
          this._recast = null;
          this._navMesh = null;
          this._config = null;
          this._positions = [];
          this._indices = [];
          this._timeStep = 1 / 60;
          this._tempVec = void 0;
          this._tempVec1 = void 0;
          this._tempVec2 = void 0;
        }

        var _proto = NavMesh.prototype;

        _proto.init = function init(cb) {
          if (cb === void 0) {
            cb = null;
          } // v0版本


          this._recast = new _cjsExports();
          this._navMesh = new this._recast.NavMesh();
          this._tempVec = new this._recast.Vec3();
          this._tempVec1 = new this._recast.Vec3();
          this._tempVec2 = new this._recast.Vec3();
          this.setDefaultConfig();
          cb && cb(); // // v1版本
          // new Recast().then((recast) => {
          //     this._recast = recast;
          //     this._navMesh = new this._recast.NavMesh();
          //     this.setDefaultConfig();
          //     this._tempVec = new this._recast.Vec3();
          //     this._tempVec1 = new this._recast.Vec3();
          //     this._tempVec2 = new this._recast.Vec3();
          //     if (cb) cb();
          // });
        }
        /**
         * 设置网创建导航网格所需参数
         * @param _config 
         */
        ;

        _proto.setConfig = function setConfig(_config) {
          this._config = _config;
        };

        _proto.setDefaultConfig = function setDefaultConfig() {
          this._config = {
            tileSize: 0,
            borderSize: 1,
            cs: 0.2,
            ch: 0.2,
            walkableSlopeAngle: 90,
            walkableHeight: 1.0,
            walkableClimb: 1,
            walkableRadius: 1,
            maxEdgeLen: 12.,
            maxSimplificationError: 1.3,
            minRegionArea: 8,
            mergeRegionArea: 20,
            maxVertsPerPoly: 6,
            detailSampleDist: 6,
            detailSampleMaxError: 1
          };
        }
        /**
         * 添加静态的模型
         */
        ;

        _proto.addStaticModle = function addStaticModle(node) {
          if (!node || !node.getComponent(MeshRenderer)) return;
          var render = node.getComponent(MeshRenderer);
          if (!render || !render.mesh) return;
          var matrix = node.getWorldMatrix();
          this.updateBaseDatas(render.mesh, matrix);
        }
        /**添加meshRender */
        ;

        _proto.addStaticMesh = function addStaticMesh(meshRenderer) {
          if (!meshRenderer || !meshRenderer.mesh) return;
          var matrix = meshRenderer.node.getWorldMatrix();
          this.updateBaseDatas(meshRenderer.mesh, matrix);
        }
        /**
         * 添加cocos的地形 
         * @param terrain 地形组件
         */
        ;

        _proto.addTerrain = function addTerrain(terrain) {
          var vectors = [];
          var matrix = terrain.node.getWorldMatrix();
          var blocks = terrain.getBlocks();

          for (var i = 0; i < blocks.length; i++) {
            var _vectors = this.getTerrainMeshData(terrain, blocks[i], matrix);

            vectors = vectors.concat(_vectors);
          } // return this.getNavMeshDebugLineData(vectors);


          this.mergeVector(vectors);
        };

        _proto.getTerrainMeshData = function getTerrainMeshData(terrain, block, worldMatrix) {
          var vectors = [];
          var index = block.getIndex();
          var TERRAIN_BLOCK_VERTEX_COMPLEXITY = 33; //地形顶点复杂成都

          var TERRAIN_BLOCK_TILE_COMPLEXITY = 32; //地形块瓦复杂性
          //网格化地形

          for (var j = 1; j < TERRAIN_BLOCK_VERTEX_COMPLEXITY; ++j) {
            for (var i = 1; i < TERRAIN_BLOCK_VERTEX_COMPLEXITY; ++i) {
              //左上角
              var x = index[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + (i - 1);
              var y = index[1] * TERRAIN_BLOCK_TILE_COMPLEXITY + (j - 1);
              var one = new Vec3(1, 1, 1);
              Vec3.transformMat4(one, terrain.getPosition(x, y), worldMatrix); //左下角

              x = index[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + (i - 1);
              y = index[1] * TERRAIN_BLOCK_TILE_COMPLEXITY + j;
              var two = new Vec3(1, 1, 1);
              Vec3.transformMat4(two, terrain.getPosition(x, y), worldMatrix); //右上角

              x = index[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + i;
              y = index[1] * TERRAIN_BLOCK_TILE_COMPLEXITY + (j - 1);
              var three = new Vec3(1, 1, 1);
              Vec3.transformMat4(three, terrain.getPosition(x, y), worldMatrix); //右下角

              x = index[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + i;
              y = index[1] * TERRAIN_BLOCK_TILE_COMPLEXITY + j;
              var four = new Vec3(1, 1, 1);
              Vec3.transformMat4(four, terrain.getPosition(x, y), worldMatrix); //第一个三角形

              vectors.push(one);
              vectors.push(two);
              vectors.push(four); //第二个三角形

              vectors.push(one);
              vectors.push(four);
              vectors.push(three);
            }
          }

          return vectors;
        }
        /**
         * 更新基础数据
         * positions  顶点
         * indices     顶点索引
         * @param mesh 
         * @param worldMatrix 
         */
        ;

        _proto.updateBaseDatas = function updateBaseDatas(mesh, worldMatrix) {
          var meshPosition = mesh.readAttribute(0, gfx.AttributeName.ATTR_POSITION); //网格顶点坐标

          var positions = [];

          for (var i = 0; i < meshPosition.length; i++) {
            positions.push(meshPosition[i]);
          } //网格顶点索引数据


          var indices = [];
          mesh.copyIndices(0, indices); //将有顶点索引的数据转化为无顶点索引的数据

          var pos = [];

          if (indices.length > 0) {
            for (var _i = 0; _i < indices.length; _i++) {
              var idx = indices[_i] * 3;
              pos.push(positions[idx]);
              pos.push(positions[idx + 1]);
              pos.push(positions[idx + 2]);
            }
          } else {
            pos = positions;
          } //将pos 中的数据转化为三角形世界坐标点


          var vectors = [];
          var vector = new Vec3(1.0, 1.0, 1.0);

          for (var _i2 = 0; _i2 < pos.length; _i2 += 3) {
            vector = new Vec3(pos[_i2], pos[_i2 + 1], pos[_i2 + 2]);
            Vec3.transformMat4(vector, vector, worldMatrix);
            vectors.push(vector);
          }

          this.mergeVector(vectors);
        };

        _proto.mergeVector = function mergeVector(vectors) {
          //三个点一个三角形
          //每三个点进行一次检测
          //检测三点的顺时针与逆时针  此处需要传入顺时针点  
          var offset = this._positions.length / 3;

          for (var i = 0; i < vectors.length; i += 3) {
            var _this$_indices;

            var one = vectors[i];
            var tow = vectors[i + 1];
            var three = vectors[i + 2];
            var arrPos = [one, tow, three]; //貌似不用检测
            // let value = Vec3.subtract(new Vec3(), arrPos[0], arrPos[1]).cross(Vec3.subtract(new Vec3(), arrPos[2], arrPos[1]));
            // //y 大于0 顺时针
            // //y 小于0 逆时针
            // if (value.y < 0) {
            //     console.log("逆时针");
            //     arrPos = arrPos.reverse();
            // }

            for (var j = 0; j < arrPos.length; j++) {
              this._positions.push(arrPos[j].x);

              this._positions.push(arrPos[j].y);

              this._positions.push(arrPos[j].z);
            }

            var indices = [offset, offset + 1, offset + 2];

            (_this$_indices = this._indices).push.apply(_this$_indices, indices);

            offset = this._positions.length / 3;
          }
        }
        /**
         * 清除所有网格数据
         */
        ;

        _proto.clean = function clean() {
          this._positions = [];
          this._indices = [];
        }
        /**
         * 构建导航网格
         */
        ;

        _proto.build = function build() {
          var rc = new this._recast.rcConfig();
          rc.cs = this._config.cs;
          rc.ch = this._config.ch;
          rc.borderSize = this._config.borderSize;
          rc.tileSize = this._config.tileSize;
          rc.walkableSlopeAngle = this._config.walkableSlopeAngle;
          rc.walkableHeight = this._config.walkableHeight;
          rc.walkableClimb = this._config.walkableClimb;
          rc.walkableRadius = this._config.walkableRadius;
          rc.maxEdgeLen = this._config.maxEdgeLen;
          rc.maxSimplificationError = this._config.maxSimplificationError;
          rc.minRegionArea = this._config.minRegionArea;
          rc.mergeRegionArea = this._config.mergeRegionArea;
          rc.maxVertsPerPoly = this._config.maxVertsPerPoly;
          rc.detailSampleDist = this._config.detailSampleDist;
          rc.detailSampleMaxError = this._config.detailSampleMaxError;
          var startTime = new Date().getTime();

          this._navMesh.build(this._positions, this._positions.length / 3, this._indices, this._indices.length, rc);

          console.log("_navMesh.build 耗时：" + (new Date().getTime() - startTime) / 1000 + "s");
        }
        /**
         * 获取导航网格数据
         * @param type  面和线 两种方式
         * @returns 
         */
        ;

        _proto.getNavMeshDebugData = function getNavMeshDebugData(type) {
          if (type === void 0) {
            type = MeshDebugDataType.SURFACE;
          }

          var debugNavMesh = this._navMesh.getDebugNavMesh();

          var triangleCount = debugNavMesh.getTriangleCount();
          var _indices = [];
          var _positions = [];
          var tri;
          var pt;

          for (tri = 0; tri < triangleCount * 3; tri++) {
            _indices.push(tri);
          }

          for (tri = 0; tri < triangleCount; tri++) {
            for (pt = 0; pt < 3; pt++) {
              var point = debugNavMesh.getTriangle(tri).getPoint(pt);

              _positions.push(point.x, point.y, point.z);
            }
          } //进行数据转换  转换为cocos可以使用的网格数据


          var vectors = [];

          for (var i = 0; i < _indices.length; i++) {
            var index = _indices[i] * 3;
            var vector = new Vec3(_positions[index], _positions[index + 1], _positions[index + 2]);
            vectors.push(vector);
          }

          if (type == MeshDebugDataType.SURFACE) {
            return this.getNavMeshDebugSurfaceData(vectors);
          } else {
            return this.getNavMeshDebugLineData(vectors);
          }
        }
        /**
         * 获取导航网格数据--面的网格数据
         * @param vectors 
         * @returns 
         */
        ;

        _proto.getNavMeshDebugSurfaceData = function getNavMeshDebugSurfaceData(vectors) {
          var positions = [];
          var normals = [];

          for (var i = 0; i < vectors.length; i += 3) {
            var one = vectors[i];
            var tow = vectors[i + 1];
            var three = vectors[i + 2];
            var arrPos = [one, tow, three];
            var value = Vec3.subtract(new Vec3(), arrPos[0], arrPos[1]).cross(Vec3.subtract(new Vec3(), arrPos[2], arrPos[1])); //y 大于0 顺时针
            //y 小于0 逆时针

            if (value.y > 0) {
              arrPos = arrPos.reverse();
            }

            for (var j = 0; j < arrPos.length; j++) {
              positions.push(arrPos[j].x);
              positions.push(arrPos[j].y);
              positions.push(arrPos[j].z);
              normals.push(0);
              normals.push(1);
              normals.push(0);
            }
          }

          return {
            positions: positions,
            normals: normals
          };
        }
        /**
         * 获取导航网格数据--线的网格数据
         * @param vectors 
         * @returns 
         */
        ;

        _proto.getNavMeshDebugLineData = function getNavMeshDebugLineData(vectors, lineWidth) {
          if (lineWidth === void 0) {
            lineWidth = 0.02;
          }

          var positions = [];
          var normals = []; //将所有的点连城线

          for (var i = 0; i < vectors.length; i += 3) {
            var one = vectors[i];
            var tow = vectors[i + 1];
            var three = vectors[i + 2];
            var datas = [one, tow, three];
            var value = Vec3.subtract(new Vec3(), datas[0], datas[1]).cross(Vec3.subtract(new Vec3(), datas[2], datas[1])); //y 大于0 顺时针
            //y 小于0 逆时针

            if (value.y > 0) {
              datas = datas.reverse();
            } //每三个顶点是一个三角形 


            var halfWidth = lineWidth / 2;
            var angle = math.toRadian(90);

            for (var idx = 0; idx < datas.length; idx++) {
              var leftPos = datas[idx].clone();
              var rigthPos = datas[idx + 1 >= datas.length ? 0 : idx + 1].clone();
              var tempRay = new geometry.Ray();
              geometry.Ray.fromPoints(tempRay, leftPos, rigthPos);
              var flagPos = new Vec3();
              tempRay.computeHit(flagPos, halfWidth);
              var leftBottomVec = Vec3.rotateY(new Vec3(), flagPos, leftPos, -angle);
              var leftTopVec = Vec3.rotateY(new Vec3(), flagPos, leftPos, angle);
              geometry.Ray.fromPoints(tempRay, rigthPos, leftPos);
              tempRay.computeHit(flagPos, halfWidth);
              var rightBottomVec = Vec3.rotateY(new Vec3(), flagPos, rigthPos, angle);
              var rightTopVec = Vec3.rotateY(new Vec3(), flagPos, rigthPos, -angle);
              var arrPos = [leftBottomVec, rightBottomVec, leftTopVec];

              var _value = Vec3.subtract(new Vec3(), arrPos[0], arrPos[1]).cross(Vec3.subtract(new Vec3(), arrPos[2], arrPos[1]));

              if (_value.y > 0) {
                arrPos = arrPos.reverse();
              }

              for (var j = 0; j < arrPos.length; j++) {
                positions.push(arrPos[j].x);
                positions.push(arrPos[j].y);
                positions.push(arrPos[j].z);
                normals.push(0);
                normals.push(1);
                normals.push(0);
              }

              arrPos = [];
              arrPos = [rightBottomVec, rightTopVec, leftTopVec];
              _value = Vec3.subtract(new Vec3(), arrPos[0], arrPos[1]).cross(Vec3.subtract(new Vec3(), arrPos[2], arrPos[1]));

              if (_value.y > 0) {
                arrPos = arrPos.reverse();
              }

              for (var _j = 0; _j < arrPos.length; _j++) {
                positions.push(arrPos[_j].x);
                positions.push(arrPos[_j].y);
                positions.push(arrPos[_j].z);
                normals.push(0);
                normals.push(1);
                normals.push(0);
              }
            }
          }

          return {
            positions: positions,
            normals: normals
          };
        }
        /**
        * 获取navmesh 数据
        */
        ;

        _proto.getNavMeshData = function getNavMeshData() {
          // console.log(this._recast.HEAPU8.buffer)
          var data = this._navMesh.getNavmeshData(); // console.log(data)


          var arr = new Uint8Array(this._recast.HEAPU8.buffer, data.dataPointer, data.size);
          var ret = new Uint8Array(data.size);
          ret.set(arr);
          this.navMesh.freeNavmeshData(data); // console.log(ret)

          return ret;
        }
        /**
         * 通过已有的数据创建navmesh
         * @param data 
         */
        ;

        _proto.buildFromNavMeshData = function buildFromNavMeshData(data) {
          var nDataBytes = data.length * data.BYTES_PER_ELEMENT;

          var dataPtr = this._recast._malloc(nDataBytes);

          var dataHeap = new Uint8Array(this._recast.HEAPU8.buffer, dataPtr, nDataBytes);
          dataHeap.set(data);
          var buf = new this._recast.NavmeshData();
          buf.dataPointer = dataHeap.byteOffset;
          buf.size = data.length; // this._navMesh = new this._recast.NavMesh();

          this.navMesh.buildFromNavmeshData(buf); // Free memory

          this._recast._free(dataHeap.byteOffset);
        }
        /**
         * 获取亮点之间的路径
         * @param start 
         * @param end 
         */
        ;

        _proto.findPath = function findPath(start, end) {
          var _start = this.getClosestPoint(start);

          this._tempVec1.x = _start.x;
          this._tempVec1.y = _start.y;
          this._tempVec1.z = _start.z;

          var _end = this.getClosestPoint(end);

          this._tempVec2.x = _end.x;
          this._tempVec2.y = _end.y;
          this._tempVec2.z = _end.z;

          var navPath = this._navMesh.computePath(this._tempVec1, this._tempVec2);

          var pointCount = navPath.getPointCount();
          var positions = [];

          for (var i = 0; i < pointCount; i++) {
            var p = navPath.getPoint(i);
            positions.push(new Vec3(p.x, p.y, p.z));
          }

          return positions;
        };

        _proto.getClosestPoint = function getClosestPoint(pos) {
          this._tempVec.x = pos.x;
          this._tempVec.y = pos.y;
          this._tempVec.z = pos.z;

          var ret = this._navMesh.getClosestPoint(this._tempVec);

          return new Vec3(ret.x, ret.y, ret.z);
        }
        /**
         * 创建人群代理
         */
        ;

        _proto.initCrowd = function initCrowd(maxAgents, maxAgentRadius) {
          return new NavMeshCorwd(this, maxAgents, maxAgentRadius);
        }
        /**
         *  Set the time step of the navigation tick update.
         * @param newTimeStep  s
         */
        ;

        _proto.setTimeStep = function setTimeStep(newTimeStep) {
          if (newTimeStep === void 0) {
            newTimeStep = 1 / 60;
          }

          this._timeStep = newTimeStep;
        };

        _proto.getTimeStep = function getTimeStep() {
          return this._timeStep;
        }
        /**
         * 添加圆柱形障碍物
         * @param position  位置
         * @param radius  半径
         * @param height  高
         * @returns 
         */
        ;

        _proto.addCylinderObstacle = function addCylinderObstacle(position, radius, height) {
          this._tempVec1.x = position.x;
          this._tempVec1.y = position.y;
          this._tempVec1.z = position.z;
          return this.navMesh.addCylinderObstacle(this._tempVec1, radius, height);
        }
        /**
         * 添加立方体障碍物
         * @param position  位置
         * @param size  尺寸
         * @param angle  角度（Y轴方向）
         * @returns 
         */
        ;

        _proto.addBoxObstacle = function addBoxObstacle(position, size, angle) {
          this._tempVec1.x = position.x;
          this._tempVec1.y = position.y;
          this._tempVec1.z = position.z;
          this._tempVec2.x = size.x;
          this._tempVec2.y = size.y;
          this._tempVec2.z = size.z;
          return this.navMesh.addBoxObstacle(this._tempVec1, this._tempVec2, angle);
        }
        /**
         * 移除障碍物
         * @param obstacle 
         */
        ;

        _proto.removeObstacle = function removeObstacle(obstacle) {
          this.navMesh.removeObstacle(obstacle);
        } // 添加障碍物后，然后在外边去调用
        ;

        _proto.update = function update(deltaTime) {
          if (this._navMesh) {
            this._navMesh.update(deltaTime);
          }
        };

        _createClass(NavMesh, [{
          key: "recast",
          get: function get() {
            return this._recast;
          }
        }, {
          key: "navMesh",
          get: function get() {
            return this._navMesh;
          }
        }]);

        return NavMesh;
      }()) || _class));
      var NavMeshCorwd = exports('NavMeshCorwd', /*#__PURE__*/function () {
        function NavMeshCorwd(navMeshMagr, maxAgents, maxAgentRadius) {
          this._navMeshMgr = null;
          this._recastCrowd = {};
          this._agents = [];
          this._tempVec = void 0;
          this._navMeshMgr = navMeshMagr;
          this._tempVec = new navMeshMagr.recast.Vec3();
          this._recastCrowd = new this._navMeshMgr.recast.Crowd(maxAgents, maxAgentRadius, this._navMeshMgr.navMesh.getNavMesh());
        }

        var _proto2 = NavMeshCorwd.prototype;

        _proto2.addAgent = function addAgent(pos, parameters) {
          var config = new this._navMeshMgr.recast.dtCrowdAgentParams();
          config.radius = parameters.radius;
          config.height = parameters.height;
          config.maxAcceleration = parameters.maxAcceleration;
          config.maxSpeed = parameters.maxSpeed;
          config.collisionQueryRange = parameters.collisionQueryRange;
          config.pathOptimizationRange = parameters.pathOptimizationRange;
          config.separationWeight = parameters.separationWeight;
          config.updateFlags = 0;
          config.obstacleAvoidanceType = 3; //障碍类型

          config.queryFilterType = 0;
          config.userData = 0;

          var agentIndex = this._recastCrowd.addAgent(new this._navMeshMgr.recast.Vec3(pos.x, pos.y, pos.z), config);

          this._agents.push(agentIndex);

          return agentIndex;
        };

        _proto2.getAgentPosition = function getAgentPosition(index) {
          var agentPos = this._recastCrowd.getAgentPosition(index);

          return new Vec3(agentPos.x, agentPos.y, agentPos.z);
        };

        _proto2.getAgentNextTargetPath = function getAgentNextTargetPath(index) {
          var agentPos = this._recastCrowd.getAgentNextTargetPath(index);

          return new Vec3(agentPos.x, agentPos.y, agentPos.z);
        };

        _proto2.getAgentVelocity = function getAgentVelocity(index) {
          var agentVel = this._recastCrowd.getAgentVelocity(index);

          return new Vec3(agentVel.x, agentVel.y, agentVel.z);
        }
        /**
         * 指定代理移动到目标位置
         * @param index 
         * @param destination 
         */
        ;

        _proto2.agentMoveTarget = function agentMoveTarget(index, target) {
          this._tempVec.x = target.x;
          this._tempVec.y = target.y;
          this._tempVec.z = target.z;

          this._recastCrowd.agentGoto(index, this._tempVec);
        }
        /**
        * 指定代理传送到目标位置
        */
        ;

        _proto2.agentTeleport = function agentTeleport(index, target) {
          this._recastCrowd.agentTeleport(index, new this._navMeshMgr.recast.Vec3(target.x, target.y, target.z));
        }
        /**
         *移除指定代理
         * @param index 
         */
        ;

        _proto2.removeAgent = function removeAgent(index) {
          this._recastCrowd.removeAgent(index);
        };

        _proto2.getAgents = function getAgents() {
          return this._agents;
        };

        _proto2.update = function update(deltaTime) {
          this._recastCrowd.update(deltaTime);
        };

        _proto2.destroy = function destroy() {
          this._recastCrowd.destroy();
        };

        _proto2.getAgentState = function getAgentState(agentIndex) {
          return this._recastCrowd.getAgentState(agentIndex);
        };

        _proto2.getAgentParameters = function getAgentParameters(agentIndex) {
          return this._recastCrowd.getAgentParameters(agentIndex);
        };

        _proto2.setAgentParameters = function setAgentParameters(agentIndex, parameters) {
          this._recastCrowd.setAgentParameters(agentIndex, parameters);
        };

        _createClass(NavMeshCorwd, [{
          key: "navMeshMgr",
          get: function get() {
            return this._navMeshMgr;
          }
        }]);

        return NavMeshCorwd;
      }());
      var MeshDebugDataType;

      (function (MeshDebugDataType) {
        MeshDebugDataType[MeshDebugDataType["SURFACE"] = 0] = "SURFACE";
        MeshDebugDataType[MeshDebugDataType["LINE"] = 1] = "LINE";
      })(MeshDebugDataType || (MeshDebugDataType = exports('MeshDebugDataType', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NavMeshAgent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NavMeshData.ts', './NavMeshMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Component, agent_config_small, NavMeshMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      agent_config_small = module.agent_config_small;
    }, function (module) {
      NavMeshMgr = module.NavMeshMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3104bYWYUxO2qvwVL+j9YUx", "NavMeshAgent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NavMeshAgent = exports('NavMeshAgent', (_dec = ccclass('NavMeshAgent'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NavMeshAgent, _Component);

        function NavMeshAgent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.mapIndex = 0;
          _this.crowdIndex = 0;
          _this.agentIndex = -1;
          _this.isPlayerMove = false;
          _this.goWay = new Vec3(0, 0, 0);
          return _this;
        }

        var _proto = NavMeshAgent.prototype;

        _proto.init = function init() {
          NavMeshMgr.instance.addAgent(this, agent_config_small);
        };

        _proto.die = function die() {
          NavMeshMgr.instance.removeAgent(this);
          this.agentIndex = -1;
        };

        _proto.update = function update(deltaTime) {
          if (this.agentIndex == -1) return;

          if (this.isPlayerMove) {
            var pos = this.node.getPosition();
            pos.add(this.goWay.clone().multiplyScalar(deltaTime));
            if (NavMeshMgr.instance) NavMeshMgr.instance.agentTeleport(this, pos);
          }
        };

        _proto.setTarget = function setTarget(pos, arriveCb) {
          if (this.agentIndex == -1) return;

          if (NavMeshMgr.instance) {
            NavMeshMgr.instance.agentMoveTarget(this, pos); // NavMeshMgr.instance.
          }
        };

        _proto.teleport = function teleport(pos) {
          if (this.agentIndex == -1) return;

          if (NavMeshMgr.instance) {
            NavMeshMgr.instance.agentTeleport(this, pos);
          }
        };

        _proto.getAgentVelocity = function getAgentVelocity() {
          if (this.agentIndex == -1) return;

          if (NavMeshMgr.instance) {
            return NavMeshMgr.instance.getAgentVelocity(this);
          }
        };

        _proto.getAgentMaxSpeed = function getAgentMaxSpeed() {
          if (this.agentIndex == -1) return;

          if (NavMeshMgr.instance) {
            return NavMeshMgr.instance.getAgentParameters(this).maxSpeed;
          }
        };

        _proto.setAgentMaxSpeed = function setAgentMaxSpeed(value) {
          if (this.agentIndex == -1) {
            console.warn("速度没set到", this.node.name, this.agentIndex);
            return;
          }

          if (NavMeshMgr.instance) {
            var data = NavMeshMgr.instance.getAgentParameters(this);
            data.maxSpeed = value;
            NavMeshMgr.instance.setAgentParameters(this, data);
          }
        };

        _proto.setAgentMaxAcceleration = function setAgentMaxAcceleration(value) {
          if (this.agentIndex == -1) {
            console.warn("加速度没set到", this.node.name, this.agentIndex);
            return;
          }

          if (NavMeshMgr.instance) {
            var data = NavMeshMgr.instance.getAgentParameters(this);
            data.maxAcceleration = value;
            NavMeshMgr.instance.setAgentParameters(this, data);
          }
        };

        return NavMeshAgent;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NavMeshData.ts", ['cc', './GameData.ts'], function (exports) {
  'use strict';

  var cclegacy, GameData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameData = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "23d3c00N0NGl5Iv6MBLIzIm", "NavMeshData", undefined);
      /**地图烘培信息 */


      var nav_map_config_small = exports('nav_map_config_small', {
        cs: 0.4,
        ch: 0.4,
        walkableSlopeAngle: 0.1,
        walkableHeight: 0.1,
        walkableClimb: 0.1,
        walkableRadius: 2,
        maxEdgeLen: 12.0,
        maxSimplificationError: 1.3,
        minRegionArea: 0.5,
        mergeRegionArea: 30,
        maxVertsPerPoly: 6,
        detailSampleDist: 6,
        detailSampleMaxError: 1,
        tileSize: 0,
        borderSize: 0
      });
      /**角色配置信息_小 */

      var agent_config_small = exports('agent_config_small', {
        radius: 2,
        height: 0.1,
        maxAcceleration: Number.MAX_VALUE,
        maxSpeed: GameData.tank_1_maxSpeed,
        collisionQueryRange: 10,
        pathOptimizationRange: 0,
        separationWeight: 0
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NavMeshExport.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NavMesh.ts', './NavMeshData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Material, Node, CCFloat, MeshRenderer, utils, gfx, Component, NavMesh, MeshDebugDataType, nav_map_config_small;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      Node = module.Node;
      CCFloat = module.CCFloat;
      MeshRenderer = module.MeshRenderer;
      utils = module.utils;
      gfx = module.gfx;
      Component = module.Component;
    }, function (module) {
      NavMesh = module.NavMesh;
      MeshDebugDataType = module.MeshDebugDataType;
    }, function (module) {
      nav_map_config_small = module.nav_map_config_small;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "e4886JFeFFLe4STrVc7HatQ", "NavMeshExport", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var NavMeshExport = exports('NavMeshExport', (_dec = ccclass('NavMeshExport'), _dec2 = executeInEditMode(true), _dec3 = property(Material), _dec4 = property(Node), _dec5 = property({
        type: CCFloat,
        visible: true,
        displayName: 'nav生成'
      }), _dec6 = property({
        type: CCFloat,
        visible: true,
        displayName: 'nav导出'
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NavMeshExport, _Component);

        function NavMeshExport() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "material", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "debugNode", _descriptor2, _assertThisInitialized(_this));

          _this._value = 0;
          _this._value1 = 0;
          _this.navMeshMgr = void 0;
          _this.navData = void 0;
          return _this;
        }

        var _proto = NavMeshExport.prototype;

        _proto.navMeshInit = function navMeshInit() {
          this.navMeshMgr = new NavMesh();
          this.navMeshMgr.init();
          this.setNavMeshConfig();
          this.startNavMesh();
        };

        _proto.navMeshExport = function navMeshExport() {
          if (!this.navData) return;
          var path = "nav-mesh.bin";
          this.navData = this.navMeshMgr.getNavMeshData();
          var url = "db://assets/NavMeshExport/";
          Editor.Message.send('asset-db', "create-asset", url + path, this.navData);
        };

        _proto.setNavMeshConfig = function setNavMeshConfig() {
          var _config = nav_map_config_small;
          this.navMeshMgr.setConfig(_config);
        };

        _proto.startNavMesh = function startNavMesh() {
          var meshRenders = this.node.getComponentsInChildren(MeshRenderer);

          for (var i = 0; i < meshRenders.length; i++) {
            if (meshRenders[i].node.parent.active) this.navMeshMgr.addStaticMesh(meshRenders[i]);
          }

          this.navMeshMgr.build();
          var navMeshData = this.navMeshMgr.getNavMeshDebugData(MeshDebugDataType.SURFACE);
          this.navData = this.navMeshMgr.getNavMeshData();
          this.createDebugMesh(navMeshData.positions, navMeshData.normals);
        };

        _proto.createDebugMesh = function createDebugMesh(positions, normals) {
          this.debugNode.destroyAllChildren();
          var node = new Node();
          var render = node.addComponent(MeshRenderer);
          var mesh = utils.createMesh({
            positions: positions,
            primitiveMode: gfx.PrimitiveMode.TRIANGLE_LIST,
            normals: normals
          });
          render.mesh = mesh;
          render.setMaterial(this.material, 0);
          this.debugNode.addChild(node);
        };

        _createClass(NavMeshExport, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            // this._value = v;
            this.navMeshInit(); // this.destroy();
          }
        }, {
          key: "value1",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            // this._value = v;
            this.navMeshExport(); // this.destroy();
          }
        }]);

        return NavMeshExport;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "material", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "debugNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "value", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "value1", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "value1"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NavMeshMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NavMesh.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Material, Enum, CCBoolean, Node, MeshRenderer, utils, gfx, Component, MeshDebugDataType, NavMesh, NavMeshCorwd;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      Enum = module.Enum;
      CCBoolean = module.CCBoolean;
      Node = module.Node;
      MeshRenderer = module.MeshRenderer;
      utils = module.utils;
      gfx = module.gfx;
      Component = module.Component;
    }, function (module) {
      MeshDebugDataType = module.MeshDebugDataType;
      NavMesh = module.NavMesh;
      NavMeshCorwd = module.NavMeshCorwd;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;

      cclegacy._RF.push({}, "055f2LL3L1CV5Y4I4UDCblU", "NavMeshMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NavMeshMgr = exports('NavMeshMgr', (_dec = ccclass('NavMeshMgr'), _dec2 = property(Material), _dec3 = property({
        type: Enum(MeshDebugDataType)
      }), _dec4 = property({
        serializable: true
      }), _dec5 = property({
        type: CCBoolean,
        visible: true
      }), _dec6 = property({
        serializable: true
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NavMeshMgr, _Component);

        function NavMeshMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.agents = [];

          _initializerDefineProperty(_this, "material", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_debugDataType", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_isDebug", _descriptor3, _assertThisInitialized(_this));

          _this._navMeshMgrs = [];
          _this._corwds = [];
          return _this;
        }

        var _proto = NavMeshMgr.prototype;
        /**获得网格上离目标最近的点 */

        _proto.getClosestPoint = function getClosestPoint(pos, navMesh) {
          return navMesh.getClosestPoint(pos);
        };
        /**增加agent */


        _proto.addAgent = function addAgent(agent, config) {
          //判断是大龙还是小龙
          var mgr;
          var crowd;
          mgr = this._navMeshMgrs[agent.mapIndex];
          crowd = this._corwds[agent.crowdIndex]; //让anget在网格点上

          var pos = mgr.getClosestPoint(agent.node.getPosition());
          agent.node.setPosition(pos); //加入crowd

          agent.agentIndex = crowd.addAgent(pos, config); //加入统一管理的agents（自建的）

          this.agents.push(agent);
        }
        /**删除agent */
        ;

        _proto.removeAgent = function removeAgent(agent) {
          var index = this.agents.indexOf(agent);
          this.agents.splice(index, 1);
          var crowd = this._corwds[agent.crowdIndex];
          crowd.removeAgent(agent.agentIndex);
        }
        /** 让agent移动到目标位置
         * @param index agent对应的index
         * @param targetPos 目标位置点
         * @param isBig 是否是大龙
         */
        ;

        _proto.agentMoveTarget = function agentMoveTarget(agent, targetPos) {
          var crowd = this._corwds[agent.crowdIndex];
          var pos = this.getClosestPoint(targetPos, this._navMeshMgrs[agent.mapIndex]);
          crowd.agentMoveTarget(agent.agentIndex, pos);
        };

        _proto.getAgentVelocity = function getAgentVelocity(agent) {
          var crowd = this._corwds[agent.crowdIndex];
          return crowd.getAgentVelocity(agent.agentIndex);
        };

        _proto.getAgentParameters = function getAgentParameters(agent) {
          var crowd = this._corwds[agent.crowdIndex];
          return crowd.getAgentParameters(agent.agentIndex);
        };

        _proto.setAgentParameters = function setAgentParameters(agent, config) {
          var crowd = this._corwds[agent.crowdIndex];
          crowd.setAgentParameters(agent.agentIndex, config);
        };

        _proto.agentTeleport = function agentTeleport(agent, targetPos) {
          var crowd = this._corwds[agent.crowdIndex];
          var pos = this.getClosestPoint(targetPos, this._navMeshMgrs[agent.mapIndex]);
          crowd.agentTeleport(agent.agentIndex, pos);
        };

        _proto.onLoad = function onLoad() {
          NavMeshMgr.instance = this;
        };

        _proto.init = function init(data, config) {
          var navMesh = new NavMesh();

          this._navMeshMgrs.push(navMesh);

          navMesh.init();
          navMesh.setConfig(config);
          navMesh.buildFromNavMeshData(data); //初始化crowd（后续应该要优化）

          this._corwds.push(new NavMeshCorwd(navMesh, 12, 6));
        } //lateUpdate再负责移动
        ;

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          for (var i = 0; i < this._corwds.length; i++) {
            this._corwds[i].update(deltaTime);
          }

          for (var _i = 0; _i < this.agents.length; _i++) {
            if (this.agents[_i].agentIndex == -1) continue;
            var crowd = this._corwds[this.agents[_i].crowdIndex];
            var pos = crowd.getAgentPosition(this.agents[_i].agentIndex);
            pos.y = -5.99;

            this.agents[_i].node.setPosition(pos);
          }
        };

        _proto.showDebug = function showDebug(navMesh) {
          if (this.isDebug) {
            var navMeshData = navMesh.getNavMeshDebugData(this._debugDataType);
            if (navMeshData) this.createDebugMesh(navMeshData.positions, navMeshData.normals);
          } else {
            this.debugNode.destroyAllChildren();
          }
        };

        _proto.createDebugMesh = function createDebugMesh(positions, normals) {
          this.debugNode.destroyAllChildren();
          var node = new Node();
          var render = node.addComponent(MeshRenderer);
          var mesh = utils.createMesh({
            positions: positions,
            primitiveMode: gfx.PrimitiveMode.TRIANGLE_LIST,
            normals: normals
          });
          render.mesh = mesh;
          render.setMaterial(this.material, 0);
          this.debugNode.addChild(node);
        };

        _createClass(NavMeshMgr, [{
          key: "debugNode",
          get: function get() {
            return this.node;
          }
        }, {
          key: "debugDataType",
          get: function get() {
            return this._debugDataType;
          },
          set: function set(value) {
            this._debugDataType = value; // this.showDebug();
          }
        }, {
          key: "isDebug",
          get: function get() {
            return this._isDebug;
          },
          set: function set(value) {
            this._isDebug = value; // this.showDebug();
          }
        }, {
          key: "navMeshMgrs",
          get: function get() {
            return this._navMeshMgrs;
          }
        }]);

        return NavMeshMgr;
      }(Component), _class3.instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "material", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "debugDataType", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "debugDataType"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_debugDataType", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return MeshDebugDataType.LINE;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "isDebug", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "isDebug"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_isDebug", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodeTool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Material, CCFloat, MeshRenderer, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      CCFloat = module.CCFloat;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "903547VTVxKBZsgAVuXi7i5", "NodeTool", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NodeTool = exports('NodeTool', (_dec = ccclass('NodeTool'), _dec2 = property(Material), _dec3 = property({
        type: CCFloat,
        visible: true,
        displayName: '随便修改一下值触发'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NodeTool, _Component);

        function NodeTool() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "newMat", _descriptor, _assertThisInitialized(_this));

          _this._value = 0;
          return _this;
        }

        _createClass(NodeTool, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            var renders = this.node.getComponentsInChildren(MeshRenderer);

            for (var i = 0; i < renders.length; i++) {
              renders[i].setMaterial(this.newMat, 0);
            }

            console.log("NodeTool已完成工作");
            this.destroy();
          }
        }]);

        return NodeTool;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "newMat", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "value", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype)), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoiseGenerator.ts", ['cc', './Math.ts'], function (exports) {
  'use strict';

  var cclegacy, Quat, Vec3, lerp, Perlin;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Quat = module.Quat;
      Vec3 = module.Vec3;
      lerp = module.lerp;
    }, function (module) {
      Perlin = module.Perlin;
    }],
    execute: function () {
      exports('NoiseProfile', void 0);

      cclegacy._RF.push({}, "92aa29Tdz9E3rHRk99/eeeT", "NoiseGenerator", undefined);

      var cos = Math.cos,
          PI = Math.PI;
      var PI2 = 2 * PI;
      var Noise_CM_4 = [[0.1, 7, 0, 0.75, 3, 0, 1.2, 1, 0], [0.15, 4, 0, 0.8, 1, 0, 1.4, 0.8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
      var Shake_6D = [[5.83, 0.09, 1, 9.17, 0.14, 1, 57.17, 0.15, 1], //rotX
      [1.8, 0.059, 1, 11.35, 0.041, 1, 54.17, 0.048, 1], //rotY
      [2.38, 0.017, 1, 10.52, 0.009, 1, 63.76, 0.016, 1], //rotZ
      [3.2, 0.011, 1, 7.7, 0.009, 1, 51.51, 0.002, 1], //posX
      [1.9, 0.059, 1, 9.1, 0.04, 0, 55.54, 0.05, 1], //posY
      [3.33, 0.021, 1, 9.22, 0.009, 1, 58.55, 0.017, 1] //posZ
      ];
      var Handheld_normal_extreme = [[0.2, 15, 0, 0.9, 5, 0, 2, 2, 0], [0.25, 7, 0, 1, 3, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
      var Handheld_normal_mild = [[0.15, 7, 0, 0.8, 4, 0, 1.2, 1, 0], [0.1, 5, 0, 0.75, 2, 0, 1.5, 0.8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
      var Handheld_normal_strong = [[0.4, 10, 0, 1.44, 5, 0, 2.49, 3, 0], [0.06, 10, 0, 0.73, 3, 0, 2, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
      var Handheld_tele_mild = [[0.2, 4, 0, 0.4, 2, 0, 0.7, 1, 0], [0.15, 2, 0, 0.5, 2, 0, 0.6, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
      var Handheld_tele_strong = [[0.39, 6.19, 0, 1.75, 1.84, 0, 2, 2.3, 0], [0.15, 3, 0, 0.9, 0.5, 0, 1.4, 0.5, 0], [0.1, 1, 0, 0, 0, 0, 0, 0, 0]];
      var Handheld_wideangle_mild = [[0.15, 12, 0, 0.6, 5, 0, 1.5, 1, 0], [0.1, 5, 0, 0.45, 4, 0, 1.2, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
      var Handheld_wideangle_strong = [[0.5, 17.46, 0, 0.94, 12.47, 0, 1.2, 4, 0], [0.25, 5, 0, 0.5, 4, 0, 1.3, 2, 0], [0.1, 0, 0, 0.4, 1, 0, 0, 0, 0]];
      var Profiles = [Noise_CM_4, Shake_6D, Handheld_normal_extreme, Handheld_normal_mild, Handheld_normal_strong, Handheld_tele_mild, Handheld_tele_strong, Handheld_wideangle_mild, Handheld_wideangle_strong];
      var NoiseProfile;

      (function (NoiseProfile) {
        NoiseProfile[NoiseProfile["Noise_CM_4"] = 0] = "Noise_CM_4";
        NoiseProfile[NoiseProfile["Shake_6D"] = 1] = "Shake_6D";
        NoiseProfile[NoiseProfile["Handheld_normal_extreme"] = 2] = "Handheld_normal_extreme";
        NoiseProfile[NoiseProfile["Handheld_normal_mild"] = 3] = "Handheld_normal_mild";
        NoiseProfile[NoiseProfile["Handheld_normal_strong"] = 4] = "Handheld_normal_strong";
        NoiseProfile[NoiseProfile["Handheld_tele_mild"] = 5] = "Handheld_tele_mild";
        NoiseProfile[NoiseProfile["Handheld_tele_strong"] = 6] = "Handheld_tele_strong";
        NoiseProfile[NoiseProfile["Handheld_wideangle_mild"] = 7] = "Handheld_wideangle_mild";
        NoiseProfile[NoiseProfile["Handheld_wideangle_strong"] = 8] = "Handheld_wideangle_strong";
      })(NoiseProfile || (NoiseProfile = exports('NoiseProfile', {})));

      var __rotation = new Quat();

      var __position = new Vec3();

      var NoiseGenerator = exports('NoiseGenerator', /*#__PURE__*/function () {
        function NoiseGenerator() {
          this._time = 0;
          this._values = [0, 0, 0, 0, 0, 0];
          this._noiseOffsets = [0, 0, 0];
        }

        var _proto = NoiseGenerator.prototype;

        _proto.reset = function reset() {
          var _this = this;

          this._time = 0;

          this._noiseOffsets.forEach(function (v, i) {
            return _this._noiseOffsets[i] = lerp(-1000, 1000, Math.random());
          });
        };

        _proto.fractalNoise = function fractalNoise(noise, deltaTime) {
          var t = this._time += deltaTime * noise.frequncyGain;
          var coeffs = Profiles[noise.profile] || Profiles[0];

          var values = this._values.fill(0);

          var noiseOffsets = this._noiseOffsets;

          for (var i = 0; i < coeffs.length; i++) {
            var coeff = coeffs[i];
            values[i] = NoiseGenerator.Noise(t, coeff[0], coeff[1], coeff[2], noiseOffsets[0]) + NoiseGenerator.Noise(t, coeff[3], coeff[4], coeff[5], noiseOffsets[1]) + NoiseGenerator.Noise(t, coeff[6], coeff[7], coeff[8], noiseOffsets[2]);
            values[i] *= noise.amplitudeGain;
          }

          return values;
        };

        NoiseGenerator.Noise = function Noise(t, frequency, amplitude, constant, offset) {
          if (offset === void 0) {
            offset = 0;
          }

          if (constant) {
            return cos(PI2 * t * frequency + offset) * 0.5 * amplitude;
          }

          return Perlin.Noise(t * frequency + offset) * amplitude;
        };

        NoiseGenerator.ApplyNoise = function ApplyNoise(values, vcam) {
          Quat.fromEuler(__rotation, values[0], values[1], values[2]);
          Vec3.set(__position, values[3], values[4], values[5]);
          Vec3.transformQuat(__position, __position, vcam.node.worldRotation);
          Quat.multiply(vcam.correctRotation, vcam.correctRotation, __rotation);
          Vec3.add(vcam.correctPosition, vcam.correctPosition, __position);
        };

        return NoiseGenerator;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoiseHandler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NoiseGenerator.ts', './CameraHandler.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, NoiseGenerator, CameraHandler;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      NoiseGenerator = module.NoiseGenerator;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0e3a0pD3pxPJZCwuB99++oU", "NoiseHandler", undefined);

      var NoiseHandler = exports('NoiseHandler', /*#__PURE__*/function (_CameraHandler) {
        _inheritsLoose(NoiseHandler, _CameraHandler);

        function NoiseHandler() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _CameraHandler.call.apply(_CameraHandler, [this].concat(args)) || this;
          _this._generator = new NoiseGenerator();
          return _this;
        }

        var _proto = NoiseHandler.prototype;

        _proto.onEnable = function onEnable() {
          this._generator.reset();
        };

        _proto.updateCamera = function updateCamera(deltaTime) {
          var vcam = this._vcam;

          var values = this._generator.fractalNoise(vcam.noise, deltaTime);

          NoiseGenerator.ApplyNoise(values, vcam);
        };

        return NoiseHandler;
      }(CameraHandler));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoiseStage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CameraHandler.ts', './NoiseHandler.ts', './BaseStage.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, CameraHandler, NoiseHandler, BaseStage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }, function (module) {
      NoiseHandler = module.NoiseHandler;
    }, function (module) {
      BaseStage = module.BaseStage;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9e1ccSzYTVCrL6k6/zwvvky", "NoiseStage", undefined);

      var NoiseStage = exports('NoiseStage', /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(NoiseStage, _BaseStage);

        function NoiseStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._handlers = [new CameraHandler(_this._vcam), new NoiseHandler(_this._vcam)];
          return _this;
        }

        var _proto = NoiseStage.prototype;

        _proto.onEnable = function onEnable() {
          this._handlers.forEach(function (v) {
            return v.enable = true;
          });
        };

        _proto.updateStage = function updateStage(deltaTime) {
          var noise = this._vcam.noise;
          var handler = this._handlers[noise.type];

          if (handler) {
            handler.updateCamera(deltaTime);
          }
        };

        return NoiseStage;
      }(BaseStage));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NpcAI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NavMeshMgr.ts', './EnumTypes.ts', './GameData.ts', './Tool.ts', './Hero.ts', './Tower.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Component, NavMeshMgr, CampType, GameData, Tool, Hero, Tower;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      NavMeshMgr = module.NavMeshMgr;
    }, function (module) {
      CampType = module.CampType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      Hero = module.Hero;
    }, function (module) {
      Tower = module.Tower;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a4a1eXuYBFAopecEcdav20S", "NpcAI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NpcAI = exports('NpcAI', (_dec = ccclass('NpcAI'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NpcAI, _Component);

        function NpcAI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.aimHero = void 0;
          _this.targetPoses = [];
          _this.targetIndex = 0;
          _this.hero = void 0;
          _this.nowTargetPos = null;
          _this.isWait = false;
          _this.targetTower = null;
          return _this;
        }

        var _proto = NpcAI.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {
          this.hero = this.node.getComponent(Hero);
          this.emojiShow();
          this.scheduleOnce(this.skillUse, Tool.randomInt(15, 30));
        };

        _proto.lateUpdate = function lateUpdate(dt) {
          var _this2 = this; //死亡不工作


          if (this.hero.isDead) {
            this.nowTargetPos = null;
            return;
          } //武器寻敌攻击模块


          if (GameData.aiAttack) this.searchTarget(); //等待不工作

          if (this.isWait) {
            return;
          }

          this.isWait = true;
          this.scheduleOnce(function () {
            _this2.isWait = false;
          }, 1);

          if (this.hero.hitFollowTarget != null) {
            if (Vec3.squaredDistance(this.hero.node.getWorldPosition(), this.hero.hitFollowTarget.getWorldPosition()) < 2500) {
              this.nowTargetPos = NavMeshMgr.instance.getClosestPoint(this.hero.node.getWorldPosition(), NavMeshMgr.instance.navMeshMgrs[this.hero.agent.mapIndex]); // this.targetTower = tower.getComponent(Tower);

              this.hero.moveToTaregtPos_AI(this.nowTargetPos);
            }
          } else {
            //agent不在网格内时不工作
            if (this.hero.agent && this.hero.agent.agentIndex != -1) {
              if (this.nowTargetPos) {
                //获取目标点
                var range = this.hero.agent.getAgentVelocity().lengthSqr() / (2 * this.hero.moveAcceleration); //根据当前速度和加速度，算出位移的公式

                if (Vec3.squaredDistance(this.nowTargetPos, this.node.getWorldPosition()) < range * range) {
                  //到达判定
                  this.nowTargetPos = null; // this.isWait = true;
                  // this.scheduleOnce(() => { this.isWait = false }, Tool.randomNumber(15, 25));
                } else if (this.hero.agent.getAgentVelocity().lengthSqr() < 1) {
                  this.nowTargetPos = null;
                }
              } else {
                if (GameData.aiMove) this.goPoint();
              }
            }
          }
        } //前往塔(弃用)
        ;

        _proto.goTower = function goTower() {
          //确定要去哪个塔
          var goTowerIndex; //先判定哪个塔没有占领或是敌方占领的

          var towersIndexs = [];

          for (var i = 0; i < GameData.towers.length; i++) {
            var comp = GameData.towers[i].getComponent(Tower);

            if (comp.nowState == 0 || comp.nowState == (this.hero.camp == CampType.Player ? -1 : 1)) {
              //已在塔内，增加继续留在塔的比重
              if (comp.herosInTower.indexOf(this.hero) != -1) {
                towersIndexs = [i];
                break;
              }

              towersIndexs.push(i); //加入候选
            }
          }

          if (towersIndexs.length > 0) {
            goTowerIndex = Tool.getRandomInArray(towersIndexs);
          } else {
            goTowerIndex = Tool.randomInt(0, 4);
          } //确定要去塔的Pos;


          var goPos = new Vec3();
          var range = Tool.randomNumber(15, 20); //塔的可站范围

          var tower = GameData.towers[goTowerIndex];
          var angle = Tool.randomNumber(0, Math.PI * 2);
          goPos.x = tower.getWorldPosition().x + Math.cos(angle) * range;
          goPos.z = tower.getWorldPosition().z + Math.sin(angle) * range;
          goPos.y = tower.getWorldPosition().y;
          this.nowTargetPos = goPos;
          this.targetTower = tower.getComponent(Tower);
          this.hero.moveToTaregtPos_AI(this.nowTargetPos);
        } //前往点
        ;

        _proto.goPoint = function goPoint() {
          var goPos = new Vec3(); // let range = Tool.randomNumber(1, 1);//塔的可站范围

          var tower = GameData.checkPoint.children[Tool.randomInt(0, GameData.checkPoint.children.length - 1)]; // let angle = Tool.randomNumber(0, Math.PI * 2);

          goPos.x = tower.getWorldPosition().x; //  + Math.cos(angle) * range;

          goPos.z = tower.getWorldPosition().z; // + Math.sin(angle) * range;

          goPos.y = tower.getWorldPosition().y;
          this.nowTargetPos = NavMeshMgr.instance.getClosestPoint(goPos, NavMeshMgr.instance.navMeshMgrs[this.hero.agent.mapIndex]); // this.targetTower = tower.getComponent(Tower);

          this.hero.moveToTaregtPos_AI(this.nowTargetPos);
        }
        /**随机时间发表情*/
        ;

        _proto.emojiShow = function emojiShow() {
          var _this3 = this;

          if (!GameData.aiEmoji) return;
          this.scheduleOnce(function () {
            _this3.scheduleOnce(_this3.emojiShow, Tool.randomNumber(5, 10));
          }); // console.log(this.node.name, "emojiShow");
          // this.hero.emoji_On(Tool.randomInt(PoolObjType.Cool, PoolObjType.Sad))
        };

        _proto.skillUse = function skillUse() {
          var _this4 = this;

          if (!GameData.aiSkill) return;
          this.scheduleOnce(function () {
            switch (_this4.hero.heroType) {
              default:
                if (!_this4.hero.isSkill2On) {
                  _this4.hero.Skill_2_On();

                  _this4.scheduleOnce(_this4.skillUse, Tool.randomInt(5, 10));
                } else {
                  _this4.hero.Skill_2_End();

                  _this4.scheduleOnce(_this4.skillUse, Tool.randomInt(15, 30));
                }

                break;
            }
          });
        } // #region 攻击模块
        //武器自动寻敌模块
        ;

        _proto.searchTarget = function searchTarget() {
          var target = this.hero.closestTarget; //先检查目前是否有射击目标，射击目标是否还在视野内,在则继续攻击

          if (this.hero.hitFollowTarget) {
            var comp = this.hero.hitFollowTarget.getComponent(Hero); // //如果现在攻击目标是玩家，可以先检测是否有其他选择，玩家攻击目标最后选择
            // if(comp.isPlayerCtrl&& this.hero.checkTargets.length >=2)
            // {
            // }
            // console.log( this.hero.inSightTargets.indexOf(comp))

            if (!comp.isPlayerCtrl && this.hero.inSightTargets.indexOf(comp) != -1) {
              target = comp;
            }
          }

          if (target) {
            this.aimTarget(target);
            if (this.hero.camp == CampType.Enemy) ;
          } else {
            this.aimTarget(null);
          }
        } //瞄准攻击目标
        ;

        _proto.aimTarget = function aimTarget(hero) {
          if (hero && !hero.isDead) this.hero.hitFollowTarget = hero.node;else this.hero.hitFollowTarget = null;
        } // #endregion
        ;

        return NpcAI;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OilShow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e5d66yJr7REQYzATD2+OrAj", "OilShow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Oil = exports('Oil', (_dec = ccclass('OilShow'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Oil, _Component);

        function Oil() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Oil.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return Oil;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OilUIComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, EventType, EventMgr, StorageMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "333d16KjUZDm6TWh1jV7Obx", "OilUIComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var OilUIComp = exports('OilUIComp', (_dec = ccclass('OilUIComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OilUIComp, _Component);

        function OilUIComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = void 0;
          _this.timeLabel = void 0;
          _this.nowTime = 0;
          _this.oilUpdateTime = 600;
          return _this;
        }

        var _proto = OilUIComp.prototype;

        _proto.onLoad = function onLoad() {
          this.label = this.node.getChildByName("Label");
          this.timeLabel = this.node.getChildByName("timeLabel");
        };

        _proto.onEnable = function onEnable() {
          this.OilInit();
          EventMgr.on(EventType.Data_Oil_Update, this, this.updateOil);
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          EventMgr.off(EventType.Data_Oil_Update, this, this.updateOil);
        } //体力的每秒计时
        ;

        _proto.OilInit = function OilInit() {
          // 获取存档上次更新时间
          var storageData = StorageMgr.instance.storageData;
          this.timeLabel.active = false;

          if (storageData.oilValue < 10) {
            // 同步到现在进度
            var timeDelta = new Date().getTime() - storageData.lastOilTime;
            var count = Math.floor(timeDelta / 600000);

            if (storageData.oilValue + count >= 10) {
              count = 10 - storageData.oilValue;
            }

            StorageMgr.instance.addOil(count, false);
            this.timeLabel.active = true;
          } // 开始计时检测


          this.schedule(this.timeCheck, 1);
          this.updateOil();
        };

        _proto.timeCheck = function timeCheck() {
          //更新UI显示
          if (StorageMgr.instance.storageData.oilValue >= 10) {
            this.timeLabel.active = false;
            this.updateOil();
          } else {
            this.timeLabel.active = true;
            this.updateOil();
          }
        };

        _proto.updateOil = function updateOil() {
          var timeDelta = new Date().getTime() - StorageMgr.instance.storageData.lastOilTime;
          var lastTime = timeDelta % 60000;
          this.nowTime = this.oilUpdateTime - Math.floor(lastTime / 1000); //检测是否够时间了，够时间就加体力

          if (this.nowTime < 0) {
            if (!StorageMgr.instance.addOil(1, false)) {
              this.nowTime = this.oilUpdateTime;
              StorageMgr.instance.refreshOilTime();
            }
          }

          this.timeLabel.active = StorageMgr.instance.storageData.oilValue < 10;
          var storageData = StorageMgr.instance.storageData;
          this.label.getComponent(Label).string = storageData.oilValue.toString() + "/10";
          var m = Math.floor(this.nowTime / 60);
          var ms = m.toString();

          if (m < 10) {
            ms = "0" + ms;
          }

          var s = this.nowTime % 60;
          var ss = s.toString();

          if (s < 10) {
            ss = "0" + ss;
          }

          this.timeLabel.getComponent(Label).string = ms + ":" + ss;
        };

        return OilUIComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PaintBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, GameData, EventMgr, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3c894eOBFVKL6UxxvhaRuQF", "PaintBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PaintBtn = exports('PaintBtn', (_dec = ccclass('PaintBtn'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PaintBtn, _Component);

        function PaintBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tips = void 0;
          return _this;
        }

        var _proto = PaintBtn.prototype;

        _proto.onLoad = function onLoad() {
          this.tips = this.node.getChildByName("tips");
        };

        _proto.start = function start() {
          this.tipsUpdate();
          Tool.d2_AddClickEvent(this.node, this, this.openPanel);
          EventMgr.on(EventType.Home_PaintTips_Update, this, this.tipsUpdate);
        };

        _proto.tipsUpdate = function tipsUpdate() {
          var data = StorageMgr.instance.storageData;
          var tankData = data.tankData;
          var nowTime = new Date().getTime();
          this.tips.active = false;

          for (var i = 0; i < tankData.length; i++) {
            if (tankData[i].unlockState) {
              for (var j = 0; j < tankData[i].paintDeadTime.length; j++) {
                if (nowTime >= tankData[i].paintDeadTime[j]) {
                  if (data.gold >= GameData.paintGoldCost[j]) {
                    this.tips.active = true;
                    return;
                  }
                }
              }
            }
          }
        };

        _proto.openPanel = function openPanel() {
          EventMgr.event(EventType.Home_Paint_Open);
        };

        return PaintBtn;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PaintShopPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './UMTrack.ts', './Tool.ts', './StatsComp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, RichText, Sprite, Component, EventType, GameData, EventMgr, StorageMgr, Platform, UMTrack, Tool, StatsComp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      RichText = module.RichText;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      StatsComp = module.StatsComp;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d5d85q2Of9Nb6OMb7CmhEeS", "PaintShopPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PaintShopPanel = exports('PaintShopPanel', (_dec = ccclass('PaintShopPanel'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PaintShopPanel, _Component);

        function PaintShopPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "slots", _descriptor, _assertThisInitialized(_this));

          _this.statPanel = void 0;
          _this.standardNum = void 0;
          _this.leftBtn = void 0;
          _this.rightBtn = void 0;
          _this.tankName = void 0;
          _this.returnBtn = void 0;
          _this.paint = void 0;
          _this.tail = void 0;
          _this.paintBtns = [];
          _this.isBuy = void 0;
          _this.noSale = void 0;
          _this.buyBtn = void 0;
          _this.equipBtn = void 0;
          _this.unEquipBtn = void 0;
          _this.nowChooseType = "paint";
          _this.nowChooseId = 0;
          _this.needBuyCost = 0;
          return _this;
        }

        var _proto = PaintShopPanel.prototype;

        _proto.onLoad = function onLoad() {
          this.returnBtn = this.node.getChildByName("ReturnBtn");
          this.leftBtn = this.node.getChildByPath("TankSelect/PreBtn");
          this.rightBtn = this.node.getChildByPath("TankSelect/NextBtn");
          this.tankName = this.node.getChildByPath("TankSelect/Name").getComponent(Label);
          this.statPanel = this.node.getChildByName("Stats").getComponent(StatsComp);
          this.standardNum = this.node.getChildByPath("Standard/Num").getComponent(RichText);
          this.paint = this.node.getChildByName("Paint");
          this.tail = this.node.getChildByName("Tail");
          var paintScroll = this.node.getChildByName("PaintScroll");
          this.paintBtns = Tool.d3_FindAllNodeHasName(paintScroll, "Paint");
          this.isBuy = this.statPanel.node.getChildByName("isBuy");
          this.buyBtn = this.isBuy.getChildByName("BuyBtn");
          this.noSale = this.statPanel.node.getChildByName("NoSale");
          this.equipBtn = this.statPanel.node.getChildByName("EquipBtn");
          this.unEquipBtn = this.statPanel.node.getChildByName("UnequipBtn");
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.returnBtn, this, this.closePanel);
          Tool.d2_AddClickEvent(this.leftBtn, this, this.selectLeft);
          Tool.d2_AddClickEvent(this.rightBtn, this, this.selectRight);
          Tool.d2_AddClickEvent(this.paint, this, this.selectPaint);
          Tool.d2_AddClickEvent(this.tail, this, this.selectTail);

          for (var i = 0; i < this.paintBtns.length; i++) {
            Tool.d2_AddClickEvent(this.paintBtns[i], this, this.choose, [i]);
          }

          Tool.d2_AddClickEvent(this.buyBtn, this, this.onBuyBtnClick);
          Tool.d2_AddClickEvent(this.equipBtn, this, this.onEquipBtnClick);
          Tool.d2_AddClickEvent(this.unEquipBtn, this, this.onUnequipBtnClick);
        };

        _proto.closePanel = function closePanel() {
          this.node.active = false;
          EventMgr.event(EventType.Home_Main_Open);
          console.log("关闭涂装界面");
          EventMgr.event(EventType.Home_Tank_PaintChange);
        };

        _proto.onEnable = function onEnable() {
          console.log("打开涂装界面");
          this.selectPaint();
          this.updateUI();
        }
        /**paint,tail */
        ;

        _proto.updateUI = function updateUI() {
          var storageData = StorageMgr.instance.storageData;
          var tankData = Tool.cloneArray_Obj(storageData.tankData);
          var data = tankData[GameData.nowChooseTankIndex];
          this.tankName.string = GameData.tankNames[data.id];
          var gameData = GameData.getTankStatData(data);
          var nowTime = new Date().getTime(); //按钮信息更新

          var lastTime = 0;

          for (var i = 0; i < this.paintBtns.length; i++) {
            this.paintBtns[i].getComponent(Sprite).spriteFrame = i == this.nowChooseId ? this.slots[1] : this.slots[0];
            var isLock = nowTime >= data.paintDeadTime[i];

            if (isLock) {
              if (data.nowPaintIndex == i) {
                data.nowPaintIndex = -1;
                StorageMgr.instance.changeStorgeTankData(Tool.cloneArray_Obj(tankData));
                EventMgr.event(EventType.Home_Tank_PaintChange);
              }

              lastTime = GameData.paintBuyLastTime[i];
            } else {
              lastTime = data.paintDeadTime[i] - nowTime;
            }

            this.paintBtns[i].getChildByName("isLock").active = isLock;
            this.paintBtns[i].getChildByName("isSelect").active = data.nowPaintIndex == i;
            this.paintBtns[i].getChildByName("tips").active = isLock && storageData.gold >= GameData.paintGoldCost[i] && nowTime >= data.paintDeadTime[i];
            var h = Math.floor(lastTime / 1000 / 60 / 60);
            var m = Math.floor(lastTime / 1000 / 60 % 60);
            var str = "";

            if (h > 0) {
              str = h + "小时";
            } else if (m >= 1) {
              str = m + "分钟";
            } else {
              str = "少于1分钟";
            }

            this.paintBtns[i].getChildByName("Time").getComponent(Label).string = str;
          }

          if (this.nowChooseType == "paint") {
            var _isLock = nowTime >= data.paintDeadTime[this.nowChooseId];

            var isEquip = data.nowPaintIndex == this.nowChooseId; //战力显示

            if (isEquip) {
              data.nowPaintIndex = -1;
            } else {
              data.nowPaintIndex = this.nowChooseId;
            }

            var nextData = GameData.getTankStatData(data);
            var deltaPower = nextData.power() - gameData.power();

            if (deltaPower != 0) {
              var color = deltaPower > 0 ? "#29FF00" : "#FF0000";
              var add = deltaPower > 0 ? "+" : "";
              this.standardNum.string = "<color=#FFFFFF >" + gameData.power().toString() + " </color><color=" + color + ">" + add + deltaPower.toString() + "</color>";
            } else {
              this.standardNum.string = "<color=#FFFFFF >" + gameData.power().toString() + "</color>";
            }

            this.statPanel.updateUI(gameData, nextData); //按钮更新

            this.isBuy.active = _isLock;
            this.equipBtn.active = !isEquip && !_isLock;
            this.unEquipBtn.active = isEquip && !_isLock; //购买价格更新

            if (this.isBuy.active) {
              var price = this.isBuy.getChildByPath("Pirce/Num").getComponent(Label);
              var needBuyCost = GameData.paintGoldCost[this.nowChooseId];
              this.needBuyCost = needBuyCost;
              price.string = needBuyCost.toString();
            }
          } else {
            console.warn("选择了不存在的栏目");
          }
        };

        _proto.choose = function choose(ids) {
          this.nowChooseId = ids[0];
          this.updateUI();
          var storageData = StorageMgr.instance.storageData;
          var tankData = Tool.cloneArray_Obj(storageData.tankData);
          tankData[GameData.nowChooseTankIndex].nowPaintIndex = this.nowChooseId;
          EventMgr.event(EventType.Home_Tank_PaintChange, tankData);
        };

        _proto.onBuyBtnClick = function onBuyBtnClick() {
          var storageData = StorageMgr.instance.storageData;
          var tankData = Tool.cloneArray_Obj(storageData.tankData);
          var data = tankData[GameData.nowChooseTankIndex];

          if (!data.unlockState) {
            Platform.instance.showToast("请先解锁该坦克");
            return;
          }

          if (this.nowChooseType == "paint") {
            if (storageData.gold >= this.needBuyCost) {
              StorageMgr.instance.changeGold(-this.needBuyCost);
              var nowTime = new Date().getTime();
              var isLock = nowTime >= data.paintDeadTime[this.nowChooseId];

              if (isLock) {
                data.paintDeadTime[this.nowChooseId] = nowTime + GameData.paintBuyLastTime[this.nowChooseId];
              } else {
                data.paintDeadTime[this.nowChooseId] += GameData.paintBuyLastTime[this.nowChooseId];
              }

              StorageMgr.instance.changeStorgeTankData(tankData);
              this.onEquipBtnClick();
              UMTrack.instance.trackEvent("Get_Paint");
            } else {
              Platform.instance.showToast("黄金不足");
            }
          } else if (this.nowChooseType == "tail") {
            console.warn("选择了不存在的栏目");
          } else {
            console.warn("选择了不存在的栏目");
          } // this.updateUI();

        };

        _proto.onEquipBtnClick = function onEquipBtnClick() {
          var storageData = StorageMgr.instance.storageData;
          var tankData = Tool.cloneArray_Obj(storageData.tankData);
          var data = tankData[GameData.nowChooseTankIndex];
          data.nowPaintIndex = this.nowChooseId;
          StorageMgr.instance.changeStorgeTankData(tankData);
          EventMgr.event(EventType.Home_Tank_PaintChange);
          this.updateUI();
        };

        _proto.onUnequipBtnClick = function onUnequipBtnClick() {
          var storageData = StorageMgr.instance.storageData;
          var tankData = Tool.cloneArray_Obj(storageData.tankData);
          var data = tankData[GameData.nowChooseTankIndex];
          data.nowPaintIndex = -1;
          StorageMgr.instance.changeStorgeTankData(tankData);
          EventMgr.event(EventType.Home_Tank_PaintChange);
          this.updateUI();
        };

        _proto.selectPaint = function selectPaint() {
          this.nowChooseType = "paint";
          this.choose([0]);
        };

        _proto.selectTail = function selectTail() {
          Platform.instance.showToast("敬请期待");
          return;
        };

        _proto.selectLeft = function selectLeft() {
          EventMgr.event(EventType.Home_Tank_ChooseLeft);
          EventMgr.event(EventType.Home_Tank_PaintChange);
          this.choose([0]);
          this.updateUI();
        };

        _proto.selectRight = function selectRight() {
          EventMgr.event(EventType.Home_Tank_ChooseRight);
          EventMgr.event(EventType.Home_Tank_PaintChange);
          this.choose([0]);
          this.updateUI();
        };

        return PaintShopPanel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "slots", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlatForm_wx.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './WxPlatform.ts', './Platform.ts', './SoundMgr.ts', './UMTrack.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, game, WxPlatform, Platform, SoundMgr, UMTrack;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
    }, function (module) {
      WxPlatform = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }, function (module) {
      UMTrack = module.UMTrack;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1cc50XoJhFFOboXBQ09plo7", "PlatForm_wx", undefined);

      var Platform_wx = exports('default', /*#__PURE__*/function (_Platform) {
        _inheritsLoose(Platform_wx, _Platform);

        function Platform_wx() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Platform.call.apply(_Platform, [this].concat(args)) || this;
          _this.videoId = "adunit-acdd6cb9af015fc2";
          return _this;
        }

        var _proto = Platform_wx.prototype;

        _proto.onLoad = function onLoad() {
          _Platform.prototype.onLoad.call(this);

          this.platformApi = window["wx"];
          this.showShareMenuWithTicket(true);
          this.regisiterWXShareCallback();
        }
        /**
        * 弹窗
        * @param msg 文本
        * @param duration 提示的延迟时间
        */
        ;

        _proto.showToast = function showToast(msg, duration) {
          if (duration === void 0) {
            duration = 1500;
          }

          window["wx"].showToast({
            title: msg,
            icon: "none",
            duration: duration,
            image: "",
            mask: false,
            success: function success() {// throw new Error("Function not implemented.");
            },
            fail: function fail() {// throw new Error("Function not implemented.");
            },
            complete: function complete() {// throw new Error("Function not implemented.");
            }
          });
        }
        /**显示右上角转发分享功能 */
        ;

        _proto.showShareMenuWithTicket = function showShareMenuWithTicket(ticket) {
          window["wx"].showShareMenu({
            withShareTicket: ticket,
            success: function success() {},
            fail: function fail() {},
            complete: function complete() {}
          });
        }
        /**注册右上角转发分享监听 */
        ;

        _proto.regisiterWXShareCallback = function regisiterWXShareCallback() {
          var shareId = 1;

          if (window["wx"]) {
            var object = {
              title: "分享",
              image: ""
            };
            window['wx'].onShareAppMessage(function () {
              console.log("用户点击了转发按钮");
              var shareObj = {
                title: object.title,
                imageUrl: object.image,
                query: "share_id=" + shareId,
                success: function success(res) {//console.log("分享成功");
                },
                fail: function fail() {//console.log("分享失败");
                }
              };
              return shareObj;
            });
          }
        };
        /**视频激励 */


        _proto.showVideo = function showVideo(success, fail) {
          game.pause();
          UMTrack.instance.trackEvent("Video_Click");
          if (SoundMgr.instacne) SoundMgr.instacne.auidoSource.stop();
          WxPlatform.instance.showVideoAd(function () {}, function (isSuccess) {
            if (isSuccess) {
              success && success();
              Platform.instance.showToast("视频激励观看成功");
              UMTrack.instance.trackEvent("Video_Award");
            } else {
              fail && fail();
              Platform.instance.showToast("视频激励观看失败");
            }

            game.resume();
            if (SoundMgr.instacne) SoundMgr.instacne.auidoSource.play();
          });
        };

        return Platform_wx;
      }(Platform));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Platform.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "b52cdxF8T1Od5EkqXHskyJw", "Platform", undefined);

      var ccclass = _decorator.ccclass;
      var Platform = exports('default', (_dec = ccclass('Platform'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Platform, _Component);

        function Platform() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.isSubPackage = true;
          _this.isVibrate = true;
          _this.platformApi = void 0;
          return _this;
        }

        var _proto = Platform.prototype;
        /**初始化 */

        _proto.onLoad = function onLoad() {
          Platform.instance = this;
        }
        /**平台api */
        ;
        /**加载分包 */


        _proto.loadSubPackage = function loadSubPackage(loadName, callback, progressCallback) {
          if (this.platformApi && this.isSubPackage) {
            var loadTask = this.platformApi.loadSubpackage({
              name: loadName,
              success: function success(res) {
                console.log("分包加载成功：", loadName);
                callback.call(true, res);
              },
              fail: function fail(res) {
                console.error("分包加载失败：", loadName, JSON.stringify(res));
                callback.call(false, res);
              }
            });
            loadTask.onProgressUpdate(function (res) {
              progressCallback && progressCallback(res.progress); // console.log("分包================", JSON.stringify(res.progress));
            });
          } else {
            console.log("没有平台API");
            callback(true);
          }
        }
        /**弹窗 */
        ;

        _proto.showToast = function showToast(msg, duration) {
          if (duration === void 0) {
            duration = 1000;
          }

          console.log(msg, duration.toString() + "ms");
        }
        /**短震动 */
        ;

        _proto.vibrateShort = function vibrateShort() {
          if (this.platformApi && this.isVibrate) this.platformApi.vibrateShort();
        }
        /**长震动 */
        ;

        _proto.vibrateLong = function vibrateLong() {
          if (this.platformApi && this.isVibrate) this.platformApi.vibrateLong();
        }
        /**前后台切换回调 */
        ;

        _proto.regisiterCallback = function regisiterCallback() {
          if (this.platformApi) {
            this.platformApi.offShow(this.onShowEvent);
            this.platformApi.onShow(this.onShowEvent);
            this.platformApi.offHide(this.onHideEvent);
            this.platformApi.onHide(this.onHideEvent);
          }
        };

        _proto.onShowEvent = function onShowEvent(e) {
          EventMgr.event(EventType.Platform_Wake_Do, e);
        };

        _proto.onHideEvent = function onHideEvent(e) {
          EventMgr.event(EventType.Platform_Hide_Do, e);
        }
        /**视频激励 */
        ;

        _proto.showVideo = function showVideo(success, fail) {
          this.showToast("无视频，默认发放奖励");
          success && success();
        };

        return Platform;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerCtr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './AssetMgr.ts', './EventMgr.ts', './StorageMgr.ts', './TouchMgr.ts', './Tool.ts', './CircleBar.ts', './SkillBtn.ts', './Hero.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, find, Node, Input, assetManager, SpriteFrame, Sprite, Vec2, Component, EventType, TeachStepType, GameData, AssetMgr, EventMgr, StorageMgr, TouchEventType, Tool, CircleBar, SkillBtn, Hero;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      find = module.find;
      Node = module.Node;
      Input = module.Input;
      assetManager = module.assetManager;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Vec2 = module.Vec2;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
      TeachStepType = module.TeachStepType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      AssetMgr = module.AssetMgr;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      TouchEventType = module.TouchEventType;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      CircleBar = module.CircleBar;
    }, function (module) {
      SkillBtn = module.SkillBtn;
    }, function (module) {
      Hero = module.Hero;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "829afvpKsJPtp8tag5ngyJx", "PlayerCtr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var viewSize = view.getVisibleSize();
      var PlayerCtr = exports('PlayerCtr', (_dec = ccclass('PlayerCtr'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerCtr, _Component);

        function PlayerCtr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.camControlNode = void 0;
          _this.fireBtn = void 0;
          _this.skillBtn = void 0;
          _this.cool = void 0;
          _this.happy = void 0;
          _this.sad = void 0;
          _this.hero = void 0;
          _this.firstTouchId = null;
          _this.orignalHorizontalAlways = 0;
          _this.orignalAxisAlways = 0;
          _this.camCtr_moveVec2 = new Vec2();
          return _this;
        }

        var _proto = PlayerCtr.prototype;

        _proto.onLoad = function onLoad() {
          viewSize = view.getVisibleSize();
          var canvas = find("Canvas");
          this.camControlNode = canvas.getChildByPath("GameUI/CamControlNode");
          this.fireBtn = canvas.getChildByPath("GameUI/FireBtn");
          this.skillBtn = canvas.getChildByPath("GameUI/SkillBtn");
          this.cool = canvas.getChildByPath("GameUI/CoolBtn");
          this.happy = canvas.getChildByPath("GameUI/HappyBtn");
          this.sad = canvas.getChildByPath("GameUI/SadBtn"); // console.log(this.cool, this.happy, this.sad);

          for (var i = 0; i < 2; i++) {
            this.fireBtn.children[i].active = i == 0;
          }

          if (!this.camControlNode) {
            console.warn("玩家摄像机操控Node找不到");
          }
        };

        _proto.start = function start() {
          EventMgr.on(EventType.Game_FireBtn_CD, this, this.fireBtnCDUpdate);
        };

        _proto.fireBtnCDUpdate = function fireBtnCDUpdate(value) {
          // console.log(value);
          this.fireBtn.getComponent(CircleBar).value = value;
        };

        _proto.lateUpdate = function lateUpdate(dt) {
          this.skillUIUpdate(dt);
        };

        _proto.controlOn = function controlOn() {
          this.hero = this.node.getComponent(Hero);
          if (!this.hero) return; //移动

          EventMgr.on(TouchEventType.joyAxis, this, this.moveCtrl); //视角

          this.camControlNode.on(Node.EventType.TOUCH_START, this.camCtr_CheckOn, this);
          this.camControlNode.on(Node.EventType.TOUCH_END, this.camCtr_CheckOff, this);
          this.camControlNode.on(Node.EventType.TOUCH_CANCEL, this.camCtr_CheckOff, this);
          this.camControlNode.on(Node.EventType.TOUCH_MOVE, this.camCtr_TouchMove, this);
          this.fireBtn.on(Node.EventType.TOUCH_START, this.camCtr_CheckOn, this);
          this.fireBtn.on(Node.EventType.TOUCH_END, this.camCtr_CheckOff, this);
          this.fireBtn.on(Node.EventType.TOUCH_CANCEL, this.camCtr_CheckOff, this);
          this.fireBtn.on(Node.EventType.TOUCH_MOVE, this.camCtr_TouchMove_fireBtn, this); //开火

          this.fireBtn.on(Input.EventType.TOUCH_START, this.fireOn, this);
          this.fireBtn.on(Input.EventType.TOUCH_END, this.fireOff, this);
          this.fireBtn.on(Input.EventType.TOUCH_CANCEL, this.fireOff, this); //技能

          Tool.d2_AddClickEvent(this.skillBtn, this, this.skillOn, [], false, false); //表情

          Tool.d2_AddClickEvent(this.cool, this, this.onCoolClick, [], false);
          Tool.d2_AddClickEvent(this.happy, this, this.onHappyClick, [], false);
          Tool.d2_AddClickEvent(this.sad, this, this.onSadClick, [], false);
        };

        _proto.controlOff = function controlOff() {
          //移动
          EventMgr.off(TouchEventType.joyAxis, this, this.moveCtrl);
          this.moveCtrl([0, 0]); //视角

          this.camControlNode.off(Node.EventType.TOUCH_START, this.camCtr_CheckOn, this);
          this.camControlNode.off(Node.EventType.TOUCH_END, this.camCtr_CheckOff, this);
          this.camControlNode.off(Node.EventType.TOUCH_CANCEL, this.camCtr_CheckOff, this);
          this.camControlNode.off(Node.EventType.TOUCH_MOVE, this.camCtr_TouchMove, this);
          this.fireBtn.off(Node.EventType.TOUCH_START, this.camCtr_CheckOn, this);
          this.fireBtn.off(Node.EventType.TOUCH_END, this.camCtr_CheckOff, this);
          this.fireBtn.off(Node.EventType.TOUCH_CANCEL, this.camCtr_CheckOff, this);
          this.fireBtn.off(Node.EventType.TOUCH_MOVE, this.camCtr_TouchMove_fireBtn, this); //开火

          this.fireBtn.off(Input.EventType.TOUCH_START, this.fireOn, this);
          this.fireBtn.off(Input.EventType.TOUCH_END, this.fireOff, this);
          this.fireBtn.off(Input.EventType.TOUCH_CANCEL, this.fireOff, this);
          this.fireOff(); //技能

          this.skillBtn.targetOff(this); //表情

          this.cool.targetOff(this);
          this.happy.targetOff(this);
          this.sad.targetOff(this);
        } //#region 移动
        ;

        _proto.moveCtrl = function moveCtrl(e) {
          if (StorageMgr.instance.storageData.playCount == 0) {
            if (GameData.teachStep == TeachStepType.moveTeach) {
              e[0] = 0;

              if (e[1] < 0) {
                e[1] = 0;
              }
            } else {
              e[0] = 0;
              e[1] = 0;
            }
          }

          this.hero.moveCtrl_forPlayer(e);
        } // #endregion
        //#region 摄像机
        ;

        _proto.camCtr_CheckOn = function camCtr_CheckOn(e) {
          // console.log(e.getID(), "On");
          if (!this.firstTouchId) {
            this.firstTouchId = e.getID();
            this.orignalHorizontalAlways = e.getUILocation().x / viewSize.width;
            this.orignalAxisAlways = e.getUILocation().y / viewSize.height;
          }
        } //摄像机的移动touchId
        ;

        _proto.camCtr_TouchMove = function camCtr_TouchMove(e) {
          if (this.firstTouchId != null && e.getID() == this.firstTouchId) {
            var y = e.getUILocation().x / viewSize.width - this.orignalHorizontalAlways;
            var x = e.getUILocation().y / viewSize.height - this.orignalAxisAlways;
            this.orignalHorizontalAlways = e.getUILocation().x / viewSize.width;
            this.orignalAxisAlways = e.getUILocation().y / viewSize.height;
            this.camCtr_moveVec2.x = x;
            this.camCtr_moveVec2.y = y; // EventMgr.event(EventType.Player_Ctr_CamRot, this.camCtr_moveVec2);

            if (StorageMgr.instance.storageData.playCount != 0) {
              this.hero.camRot_ForPlayer(this.camCtr_moveVec2);
            }
          }
        };

        _proto.camCtr_TouchMove_fireBtn = function camCtr_TouchMove_fireBtn(e) {
          if (this.firstTouchId != null && e.getID() == this.firstTouchId) {
            var y = e.getUILocation().x / viewSize.width - this.orignalHorizontalAlways;
            var x = e.getUILocation().y / viewSize.height - this.orignalAxisAlways;
            this.orignalHorizontalAlways = e.getUILocation().x / viewSize.width;
            this.orignalAxisAlways = e.getUILocation().y / viewSize.height;
            this.camCtr_moveVec2.x = x;
            this.camCtr_moveVec2.y = y; // EventMgr.event(EventType.Player_Ctr_CamRot, this.camCtr_moveVec2);

            if (StorageMgr.instance.storageData.playCount != 0) {
              this.hero.camRot_ForPlayer(this.camCtr_moveVec2, true);
            }
          }
        };

        _proto.camCtr_CheckOff = function camCtr_CheckOff(e) {
          // console.log(e.getID(), "Off");
          if (this.firstTouchId == e.getID()) {
            this.firstTouchId = null;
            this.orignalHorizontalAlways = e.getUILocation().x / viewSize.width;
            this.orignalAxisAlways = e.getUILocation().y / viewSize.height;
          }
        } // #endregion
        //#region 开火
        ;

        _proto.fireOn = function fireOn() {
          for (var i = 0; i < 2; i++) {
            this.fireBtn.children[i].active = i == 1;
          }

          this.hero.fireOn();
        };

        _proto.fireOff = function fireOff() {
          for (var i = 0; i < 2; i++) {
            this.fireBtn.children[i].active = i == 0;
          }

          this.hero.fireOff();
        } // #endregion
        // #region 技能
        ;

        _proto.skillOn = function skillOn() {
          EventMgr.event(EventType.Game_Teach_Skill);

          switch (this.hero.heroType) {
            default:
              if (!this.hero.isSkill2On) {
                this.hero.Skill_2_On();
              } else {
                this.hero.Skill_2_End();
              }

              break;
          }
        };

        _proto.skillUIUpdate = function skillUIUpdate(dt) {
          if (!this.hero) return;
          var CD = 0;
          var CDMax = 1;

          switch (this.hero.heroType) {
            default:
              CD = this.hero.skill2CD;
              CDMax = GameData.skill_2_cd;
              break;
          }

          var progress = CD / CDMax;
          this.skillBtn.getComponent(SkillBtn).updateSkillBtn(progress);
        };

        _proto.changeSkillIcon = function changeSkillIcon(index) {
          var _this2 = this;

          var url = "UI/skill";
          assetManager.getBundle(AssetMgr.instance.stageSubPackageUrl).loadDir(url, SpriteFrame, function (err, res) {
            if (err) {
              console.warn(err);
            } else {
              for (var i = 0; i < res.length; i++) {
                if (res[i].name == "skill" + index.toString()) {
                  _this2.skillBtn.getChildByName("icon").getComponent(Sprite).spriteFrame = res[i];
                  break;
                }
              }
            }
          });
        } // #endregion
        // #region 表情
        ;

        _proto.onCoolClick = function onCoolClick() {// this.hero.emoji_On(PoolObjType.Cool);
        };

        _proto.onHappyClick = function onHappyClick() {// this.hero.emoji_On(PoolObjType.Happy);
        };

        _proto.onSadClick = function onSadClick() {// this.hero.emoji_On(PoolObjType.Sad);
        } // #endregion
        ;

        return PlayerCtr;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayFeedBack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ProgressBar, Animation, Component, EventType, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1b53aBXmXVPKYuYBaErjLBr", "PlayFeedBack", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayFeedBack = exports('PlayFeedBack', (_dec = ccclass('PlayFeedBack'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayFeedBack, _Component);

        function PlayFeedBack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.bite = void 0;
          _this.sniperCam = void 0;
          _this.dash = void 0;
          _this.aoe = void 0;
          _this.charge = void 0;
          return _this;
        }

        var _proto = PlayFeedBack.prototype;

        _proto.onLoad = function onLoad() {
          // this.bite = this.node.getChildByName("Bite");
          this.sniperCam = this.node.getChildByName("SniperCam"); // this.dash = this.node.getChildByName("Dash");
          // this.aoe = this.node.getChildByName("Aoe");

          this.charge = this.node.getChildByName("Charge");
        };

        _proto.start = function start() {
          // this.bite.active = true;
          this.sniperCam.active = false; // this.dash.active = true;
          // this.aoe.active = true;

          this.charge.active = true; // EventMgr.on(EventType.Game_Skill1_Bite, this, this.showBite);
          // EventMgr.on(EventType.Game_Skill4_Sweep, this, this.showSweap);
          // EventMgr.on(EventType.Game_Skill5_Hit, this, this.showDash);

          EventMgr.on(EventType.Game_Skill2_Aim_Open, this, this.openAim);
          EventMgr.on(EventType.Game_Skill2_Aim_Close, this, this.closeAim);
          EventMgr.on(EventType.Game_Skill2_Aim_Update, this, this.updateAim);
          EventMgr.on(EventType.Game_Reload_Open, this, this.openReload);
          EventMgr.on(EventType.Game_Reload_Close, this, this.closeReload);
          EventMgr.on(EventType.Game_Reload_Update, this, this.updateReload);
        };

        _proto.openReload = function openReload() {
          this.charge.active = true;
          this.updateReload(1);
        };

        _proto.closeReload = function closeReload() {
          this.charge.active = false;
        };

        _proto.updateReload = function updateReload(value) {
          var bars = this.charge.getComponentsInChildren(ProgressBar);

          for (var i = 0; i < bars.length; i++) {
            bars[i].progress = value;
          }
        };

        _proto.openAim = function openAim() {
          this.sniperCam.active = true;
        };

        _proto.closeAim = function closeAim() {
          this.sniperCam.active = false;
        };

        _proto.updateAim = function updateAim(value) {
          var bars = this.sniperCam.getComponentsInChildren(ProgressBar);

          for (var i = 0; i < bars.length; i++) {
            bars[i].progress = value;
          }
        };

        _proto.showBite = function showBite() {
          this.bite.getComponent(Animation).play();
        };

        _proto.showSweap = function showSweap() {
          this.aoe.getComponent(Animation).play();
        };

        _proto.showDash = function showDash() {
          this.dash.getComponent(Animation).play();
        };

        return PlayFeedBack;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d9e6bKPmrBKVKpydYfynAUT", "PoolComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoolComp = exports('PoolComp', (_dec = ccclass('PoolComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PoolComp, _Component);

        function PoolComp() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = PoolComp.prototype;

        _proto.firstBorn = function firstBorn() {};

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.node.active = true;
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        return PoolComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolComp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, instantiate, Component, PoolComp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      exports('PoolObjType', void 0);

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "593efpN5e1IgayKKpGwgYdf", "PoolMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      /**这个顺序需要跟场景外面的顺序一致 */

      var PoolObjType;

      (function (PoolObjType) {
        PoolObjType[PoolObjType["Bullet_4"] = 0] = "Bullet_4";
        PoolObjType[PoolObjType["FireEffect"] = 1] = "FireEffect";
        PoolObjType[PoolObjType["HitEffect"] = 2] = "HitEffect";
        PoolObjType[PoolObjType["BoomP"] = 3] = "BoomP";
        PoolObjType[PoolObjType["RicochetP"] = 4] = "RicochetP";
        PoolObjType[PoolObjType["Heal_S"] = 5] = "Heal_S";
        PoolObjType[PoolObjType["Power_S"] = 6] = "Power_S";
        PoolObjType[PoolObjType["Shield_S"] = 7] = "Shield_S";
      })(PoolObjType || (PoolObjType = exports('PoolObjType', {})));

      var PoolMgr = exports('PoolMgr', (_dec = ccclass('PoolMgr'), _dec2 = menu('Mgr/PoolMgr'), _dec3 = property({
        type: [Prefab],
        visible: true,
        displayName: '池子物品'
      }), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PoolMgr, _Component);

        function PoolMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefabs", _descriptor, _assertThisInitialized(_this));

          _this.nodePoolChildren = [];
          _this.mainScene = void 0;
          _this.nodePoolNames = [];
          _this.typeMaxCount = [];
          _this.addPoolObj = void 0;
          _this.addPoolComp = void 0;
          return _this;
        }

        var _proto = PoolMgr.prototype;

        _proto.getObj = function getObj(type) {
          this.nodePoolChildren = this.node.getComponentsInChildren(PoolComp);

          for (var i = this.nodePoolChildren.length - 1; i >= 0; i--) {
            if (this.nodePoolChildren[i].node.name == this.nodePoolNames[type]) {
              //如果池子里有
              this.mainScene.addChild(this.nodePoolChildren[i].node);
              this.nodePoolChildren[i].init(); // console.log("从池子里拿")

              return this.nodePoolChildren[i];
            }
          } //走到这里证明池子里没有要的东西了


          var comp = this.bornNew(type);
          comp.init(); // console.log("自己拿", comp.node.name);

          return comp;
        };

        _proto.recyleObj = function recyleObj(obj) {
          if (obj.node) {
            obj.recyle();
            var pool = this.node.getChildByName(obj.node.name);
            pool.addChild(obj.node);
            this.checkPoolTop(pool);
          }
        };

        _proto.clearObj = function clearObj(obj) {
          obj.clear();
          obj.node.destroy();
        };

        _proto.onLoad = function onLoad() {
          PoolMgr.instance = this;
          this.mainScene = this.node.scene;
          this.typeMaxCount.length = 0;

          for (var i = 0; i < this.prefabs.length; i++) {
            this.typeMaxCount.push(3);
          } //特殊池子需要改的上限
          // this.typeMaxCount[PoolObjType.Bullet_1] = 20;


          this.typeMaxCount[PoolObjType.Bullet_4] = 10;
          this.typeMaxCount[PoolObjType.HitEffect] = 10;
          this.typeMaxCount[PoolObjType.FireEffect] = 10; // this.typeMaxCount[PoolObjType.Happy] = 5;
          // this.typeMaxCount[PoolObjType.Cool] = 5;
          // this.typeMaxCount[PoolObjType.Sad] = 5;
          // this.typeMaxCount[PoolObjType.Power_S] = 5;
          //在池子生成时，生成一个初始分类池

          for (var _i = 0; _i < this.prefabs.length; _i++) {
            this.nodePoolNames.push(this.prefabs[_i].data.name);
            this.node.addChild(new Node(this.prefabs[_i].data.name));

            for (var j = 0; j < this.typeMaxCount[_i]; j++) {
              this.recyleObj(this.bornNew(_i));
            }
          } // this.schedule(() => {
          //     let count = 0;
          //     for (let i = 0; i < this.node.children.length; i++) {
          //         count += this.node.children[i].children.length
          //     }
          //     console.log("当前池子数量", count);
          // },1)

        };

        _proto.bornNew = function bornNew(type) {
          this.addPoolObj = instantiate(this.prefabs[type]);
          this.addPoolComp = this.addPoolObj.getComponent(PoolComp);
          this.addPoolComp.firstBorn();
          this.mainScene.addChild(this.addPoolObj);
          return this.addPoolComp;
        }
        /**检测当前池子的数量和到上限值进行清理 */
        ;

        _proto.checkPoolTop = function checkPoolTop(pool) {
          if (pool.children.length > this.typeMaxCount[pool.getSiblingIndex()]) {
            console.log(pool.name, "超过上限，清理");
            this.clearObj(pool.children[0].getComponent(PoolComp));
          }
        };

        return PoolMgr;
      }(Component), _class3.instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Predictor.ts", ['cc', './Math.ts'], function (exports) {
  'use strict';

  var cclegacy, Vec3, SmoothDamper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }, function (module) {
      SmoothDamper = module.SmoothDamper;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c8d6930H0tIwYdCiSEhw5fJ", "Predictor", undefined);

      var __delta = new Vec3();

      var Predictor = exports('Predictor', /*#__PURE__*/function () {
        function Predictor() {
          this._prePos = null;
          this._velocity = new Vec3();
          this._dampingVelocity = new Vec3();
          this._smoothDamper = new SmoothDamper();
        }

        var _proto = Predictor.prototype;

        _proto.predictPosition = function predictPosition(out, wpos, lookaheadDamping, lookaheadTime, deltaTime) {
          if (this._prePos === null) {
            this._prePos = new Vec3(wpos);
            out.set(wpos);
          } else {
            Vec3.subtract(this._velocity, wpos, this._prePos).multiplyScalar(1 / deltaTime);

            this._smoothDamper.Vec3_smoothDamp(this._dampingVelocity, this._dampingVelocity, this._velocity, lookaheadDamping, deltaTime);

            this._prePos.set(wpos);

            Vec3.multiplyScalar(__delta, this._dampingVelocity, lookaheadTime);
            Vec3.add(out, wpos, __delta);
          }

          return out;
        };

        return Predictor;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RankComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts', './StorageMgr.ts', './Tool.ts', './Bar.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, GameData, StorageMgr, Tool, Bar;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      Bar = module.Bar;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "46d7fbYt1BLKITsuiVBEiwI", "RankComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RankComp = exports('RankComp', (_dec = ccclass('RankComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RankComp, _Component);

        function RankComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.rankIcons = void 0;
          _this.titleLabel = void 0;
          _this.valueLabel = void 0;
          _this.progressBar = void 0;
          _this.rankName = ["列兵", "士官", "少尉", "中尉", "上尉", "少校", "中校", "上校", "少将", "中将", "五星上将", "陆军元帅"];
          return _this;
        }

        var _proto = RankComp.prototype;

        _proto.onLoad = function onLoad() {
          this.rankIcons = this.node.getChildByName("icon_bg");
          this.titleLabel = this.node.getChildByName("rankLabel").getComponent(Label);
          this.valueLabel = this.node.getChildByName("rankValueLabel").getComponent(Label);
          this.progressBar = this.node.getChildByName("rankProgress").getComponent(Bar);
        };

        _proto.start = function start() {
          var rankPoint = StorageMgr.instance.storageData.rankPoint;
          var rankIndex = 0;
          var rankCount = 0;

          for (var i = 0; i < GameData.rankScore.length; i++) {
            rankCount += GameData.rankScore[i];
            rankIndex = i;

            if (rankPoint < rankCount || i == GameData.rankScore.length - 1) {
              rankCount = rankPoint - rankCount + GameData.rankScore[i];
              break;
            }
          }

          var pos = this.valueLabel.node.getPosition();

          if (rankIndex < this.rankName.length - 2) {
            pos.x = -60;
          } else {
            pos.x = -100;
          }

          this.valueLabel.node.setPosition(pos);
          this.valueLabel.string = rankCount.toString() + "/" + GameData.rankScore[rankIndex].toString();
          this.titleLabel.string = this.rankName[rankIndex];
          this.progressBar.value = rankCount / GameData.rankScore[rankIndex];
          Tool.activeIndexInChildren(this.rankIcons, rankIndex);
        };

        return RankComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RotateLoop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Quat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "0afa6Tmq7VA1b5TmLrh73qC", "RotateLoop", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RotateLoop = exports('default', (_dec = ccclass('RotateLoop'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RotateLoop, _Component);

        function RotateLoop() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "duration", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "angle", _descriptor2, _assertThisInitialized(_this));

          _this.quat = new Quat();
          return _this;
        }

        var _proto = RotateLoop.prototype; // // onLoad () {}

        _proto.start = function start() {};

        _proto.update = function update(dt) {
          Quat.rotateZ(this.quat, this.node.getRotation(), -1 / 15);
          this.node.setRotation(this.quat);
        };

        return RotateLoop;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "duration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "angle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 360;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RunUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JJMgr.ts', './JJWxTrap.ts', './WxPlatform.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Animation, Component, JJMgr, JJWxTrap, WxPlatform, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatform = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f6d82FFNM9AN4CbUkKi1ko1", "RunUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RunUI = exports('default', (_dec = ccclass('RunUI'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RunUI, _Component);

        function RunUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "Man", _descriptor, _assertThisInitialized(_this));

          _this.ccb = null;
          _this.hadClick = false;
          return _this;
        }

        var _proto = RunUI.prototype;

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.ccb && this.ccb();
        };

        _proto.showUI = function showUI(ccb) {
          this.ccb = ccb;

          if (!JJWxTrap.Instance.NewWuchu || !JJMgr.instance.dataConfig.front_run_switch) {
            this.ccb && this.ccb();
            return;
          }

          this.Man.getComponent(Animation).getState('RenRun').speed = 0.4;
          this.Man.getComponent(Animation).play('RenIdle');
          this.Man.children[0].getComponent(Animation).play('Ren');
          this.hadClick = false;
          WxPlatform.instance.showBanner();
          this.node.active = true;
        };

        _proto.continueBtnCB = function continueBtnCB() {
          var _this2 = this;

          if (this.hadClick) return;
          this.hadClick = true;
          WxPlatformBannerAd.Instance.hideBannerFun(true);
          this.Man.getComponent(Animation).play('RenRun');
          this.scheduleOnce(function () {
            _this2.node.active = false;
          }, 1.5);
        };

        _proto.adBtnCB = function adBtnCB() {
          var _this3 = this;

          if (this.hadClick) return;
          WxPlatform.instance.showVideoAd(function () {
            _this3.Man.children[0].getComponent(Animation).play('Ren1');

            _this3.Man.getComponent(Animation).getState('RenRun').speed = 0.4;

            _this3.continueBtnCB();
          }, function () {
            _this3.hadClick = false;
          });
        } // // update (dt) {}
        ;

        return RunUI;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "Man", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import JJMgr from "../JJMgr";
      // import JJWxTrap from "../JJWxTrap";
      // import WxPlatform from "../WxPlatform";
      // import WxPlatformBannerAd from "../WxPlatformBannerAd";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class RunUI extends cc.Component {
      // 
      //     @property(cc.Node)
      //     Man: cc.Node = null
      // 
      //     ccb: Function = null
      //     hadClick: boolean = false
      // 
      //     protected onDisable(): void {
      //         this.unscheduleAllCallbacks()
      //         this.ccb && this.ccb()
      //     }
      // 
      //     showUI(ccb: Function) {
      //         this.ccb = ccb
      //         if (!JJWxTrap.Instance.NewWuchu || !JJMgr.instance.dataConfig.front_run_switch) {
      //             this.ccb && this.ccb()
      //             return
      //         }
      //         this.Man.getComponent(cc.Animation).getAnimationState('RenRun').speed = 0.4
      //         this.Man.getComponent(cc.Animation).play('RenIdle')
      //         this.Man.children[0].getComponent(cc.Animation).play('Ren')
      //         this.hadClick = false
      //         WxPlatform.instance.showBanner()
      // 
      //         this.node.active = true
      //     }
      // 
      //     continueBtnCB() {
      //         if (this.hadClick) return
      //         this.hadClick = true
      //         WxPlatformBannerAd.Instance.hideBannerFun(true)
      // 
      //         this.Man.getComponent(cc.Animation).play('RenRun')
      //         this.scheduleOnce(() => {
      //             this.node.active = false
      //         }, 1.5)
      //     }
      // 
      //     adBtnCB() {
      //         if (this.hadClick) return
      //         WxPlatform.instance.showVideoAd(() => {
      //             this.Man.children[0].getComponent(cc.Animation).play('Ren1')
      //             this.Man.getComponent(cc.Animation).getAnimationState('RenRun').speed = 0.4
      //             this.continueBtnCB()
      //         }, () => {
      //             this.hadClick = false
      //         })
      //     }
      // 
      //     // update (dt) {}
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScaleLoop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Tween, tween, v3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Tween = module.Tween;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "246fenS1MtHwp4bZ/jx74nP", "ScaleLoop", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScaleLoop = exports('default', (_dec = ccclass('ScaleLoop'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScaleLoop, _Component);

        function ScaleLoop() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "originScale", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "targetScale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scaleDuration", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ScaleLoop.prototype; // // onLoad () {}

        _proto.start = function start() {
          Tween.stopAllByTarget(this.node);
          tween(this.node).to(this.scaleDuration, {
            scale: v3(this.targetScale, this.targetScale, 0)
          }).to(0.2, {
            scale: v3(this.originScale, this.originScale, 0)
          }).union().repeatForever().start();
        } // // update (dt) {}
        ;

        return ScaleLoop;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "originScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "targetScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scaleDuration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScaleTween.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d59030Cq+lEjK/1xsiW78N2", "ScaleTween", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScaleTween = exports('ScaleTween', (_dec = ccclass('ScaleTween'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScaleTween, _Component);

        function ScaleTween() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.t = void 0;
          return _this;
        }

        var _proto = ScaleTween.prototype;

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          var t = tween(this.node.getScale()).to(0.5, new Vec3(1.2, 1.2, 1.2), {
            onUpdate: function onUpdate(target) {
              // onUpdate 接受当前缓动的进度
              _this2.node.setScale(target); // 将缓动系统计算出的结果赋予 node 的位置

            }
          }).to(0.5, new Vec3(1, 1, 1), {
            onUpdate: function onUpdate(target) {
              // onUpdate 接受当前缓动的进度
              _this2.node.setScale(target); // 将缓动系统计算出的结果赋予 node 的位置

            }
          }).union();
          this.t = t.repeatForever().start();
        };

        _proto.onDisable = function onDisable() {
          this.t.stop();
          this.node.scale = new Vec3(1, 1, 1);
        };

        return ScaleTween;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SceneToJson.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, CCFloat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "73f58mADKtF5pdX9/OYIbTM", "SceneToJson", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var SceneToJson = exports('SceneToJson', (_dec = ccclass('SceneToJson'), _dec2 = menu("Tool/SceneToJson"), _dec3 = property({
        type: Node,
        visible: true,
        displayName: '读取节点'
      }), _dec4 = property({
        type: CCFloat,
        visible: true,
        displayName: '随便修改一下值读取'
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SceneToJson, _Component);

        function SceneToJson() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "stage", _descriptor, _assertThisInitialized(_this));

          _this._value = 0;
          return _this;
        }

        var _proto = SceneToJson.prototype;

        _proto.readScene = function readScene() {
          var jsonInfo = [];

          for (var i = 0; i < this.stage.children.length; i++) {
            var obj = this.stage.children[i];
            var name = obj.name;
            var pos = this.V3ToJson(obj.getPosition());
            var rot = this.QuatToJson(obj.getRotation());
            var sca = this.V3ToJson(obj.getScale());
            var objJson = {
              name: name,
              pos: pos,
              rot: rot,
              sca: sca
            };
            jsonInfo.push(objJson);
          }

          var path = "sceneJson.json";
          Editor.Message.send('asset-db', "create-asset", "db://assets/" + path, JSON.stringify(jsonInfo));
        }
        /**V3转成json数据 */
        ;

        _proto.V3ToJson = function V3ToJson(v3) {
          return {
            x: v3.x.toString(),
            y: v3.y.toString(),
            z: v3.z.toString()
          };
        }
        /**Quat转成json数据 */
        ;

        _proto.QuatToJson = function QuatToJson(quaternion) {
          return {
            x: quaternion.x.toString(),
            y: quaternion.y.toString(),
            z: quaternion.z.toString(),
            w: quaternion.w.toString()
          };
        };

        _createClass(SceneToJson, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(v) {
            this.readScene();
          }
        }]);

        return SceneToJson;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "stage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "value", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "value"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScrollUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JJMgr.ts', './JJWxTrap.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, instantiate, v3, Sprite, JJMgr, JJWxTrap;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
      instantiate = module.instantiate;
      v3 = module.v3;
      Sprite = module.Sprite;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "031b7VcdSJJzpl/U/4pTZPt", "ScrollUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScrollUI = exports('default', (_dec = ccclass('ScrollUI'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollUI, _Component);

        function ScrollUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "content", _descriptor2, _assertThisInitialized(_this));

          _this.myNavArr = [];
          _this.fingerArr = [];
          _this.hotArr = [];
          return _this;
        }

        var _proto = ScrollUI.prototype;

        _proto.onEnable = function onEnable() {
          this.myNavArr = [].concat(JJMgr.instance.navDataArr);
          var arr1 = [];
          var arr2 = [];

          for (var i = 0; i < JJMgr.instance.navDataArr.length; i++) {
            arr1.push(i);
            arr2.push(i);
          }

          this.hotArr = this.getRandomItemInArrWithoutSelf(-1, arr1, 6);
          this.fingerArr = this.getRandomItemInArrWithoutSelf(-1, arr2, 6);

          this._init();
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
          this.content.destroyAllChildren();
        };

        _proto._init = function _init() {
          var _this2 = this;

          var _loop = function _loop(i) {
            var node = instantiate(_this2.item);
            node.active = true;
            node.setPosition(v3(0, 0, 0));

            _this2.content.addChild(node);

            var icon = node.getChildByName('icon').getComponent(Sprite);
            var finger = node.getChildByName('finger');
            var hot = node.getChildByName('hot');
            finger.active = _this2.fingerArr.indexOf(i) != -1;
            hot.active = _this2.hotArr.indexOf(i) != -1;
            JJMgr.instance.loadImgByUrl(icon, _this2.myNavArr[i].icon);
            node.on(Node.EventType.TOUCH_END, function (event) {
              _this2.navCB(i);
            }, _this2);
          };

          for (var i = 0; i < this.myNavArr.length; i++) {
            _loop(i);
          }
        };

        _proto.navCB = function navCB(id) {
          console.log('click id:', id);
          JJMgr.instance.NavigateApp(id, function () {
            if (JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_quxiao_switch) JJWxTrap.Instance.clickFinishMoreGame();
          }, function () {});
        } // //打乱数组
        ;

        _proto.shuffleArr = function shuffleArr(arr) {
          var i = arr.length;

          while (i) {
            var j = Math.floor(Math.random() * i--);
            var _ref = [arr[i], arr[j]];
            arr[j] = _ref[0];
            arr[i] = _ref[1];
          }

          return arr;
        };

        _proto.getRandomItemInArrWithoutSelf = function getRandomItemInArrWithoutSelf(self, arr, count) {
          if (count === void 0) {
            count = 1;
          }

          var temp = [].concat(arr);
          temp.splice(temp.indexOf(self), 1);
          temp = this.shuffleArr(temp);
          return temp.slice(0, count);
        } // // update (dt) {}
        ;

        return ScrollUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import JJMgr, { SceneDir } from "../JJMgr";
      // import JJWxTrap from "../JJWxTrap";
      // 
      // const { ccclass, property } = cc._decorator;
      // 
      // @ccclass
      // export default class ScrollUI extends cc.Component {
      //     @property(cc.Node)
      //     item: cc.Node = null
      // 
      //     @property(cc.Node)
      //     content: cc.Node = null
      // 
      //     myNavArr: any[] = []
      //     fingerArr: any[] = []
      //     hotArr: any[] = []
      // 
      //     onEnable() {
      //         this.myNavArr = [].concat(JJMgr.instance.navDataArr)
      //         let arr1 = []
      //         let arr2 = []
      //         for (let i = 0; i < JJMgr.instance.navDataArr.length; i++) {
      //             arr1.push(i)
      //             arr2.push(i)
      //         }
      //         this.hotArr = this.getRandomItemInArrWithoutSelf(-1, arr1, 6)
      //         this.fingerArr = this.getRandomItemInArrWithoutSelf(-1, arr2, 6)
      //         this._init()
      //     }
      // 
      //     onDisable() {
      //         this.unscheduleAllCallbacks()
      //         this.content.destroyAllChildren()
      //     }
      // 
      //     _init() {
      //         for (let i = 0; i < this.myNavArr.length; i++) {
      //             let node: cc.Node = cc.instantiate(this.item)
      //             node.active = true
      //             node.setPosition(cc.v2(0, 0))
      //             this.content.addChild(node)
      // 
      //             let icon: cc.Sprite = node.getChildByName('icon').getComponent(cc.Sprite)
      //             let finger = node.getChildByName('finger')
      //             let hot = node.getChildByName('hot')
      // 
      //             finger.active = this.fingerArr.indexOf(i) != -1
      //             hot.active = this.hotArr.indexOf(i) != -1
      //             JJMgr.instance.loadImgByUrl(icon, this.myNavArr[i].icon)
      // 
      //             node.on(cc.Node.EventType.TOUCH_END, (event) => { this.navCB(i) }, this)
      //         }
      //     }
      // 
      //     navCB(id: number) {
      //         console.log('click id:', id)
      //         JJMgr.instance.NavigateApp(id, () => {
      //             if (JJWxTrap.Instance.NewWuchu && JJMgr.instance.dataConfig.front_quxiao_switch)
      //                 JJWxTrap.Instance.clickFinishMoreGame()
      //         }, () => {
      // 
      //         })
      //     }
      // 
      //     //打乱数组
      //     shuffleArr(arr: any[]) {
      //         let i = arr.length;
      //         while (i) {
      //             let j = Math.floor(Math.random() * i--);
      //             [arr[j], arr[i]] = [arr[i], arr[j]];
      //         }
      //         return arr;
      //     }
      //     getRandomItemInArrWithoutSelf(self: any, arr: any[], count: number = 1) {
      //         let temp: any = [].concat(arr)
      //         temp.splice(temp.indexOf(self), 1)
      //         temp = this.shuffleArr(temp)
      //         return temp.slice(0, count)
      //     }
      //     // update (dt) {}
      // }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SelectUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './SoundMgr.ts', './StorageMgr.ts', './Platform.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Sprite, Color, Component, SoundType, EventType, GameData, EventMgr, SoundMgr, StorageMgr, Platform, Tool;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      SoundType = module.SoundType;
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d62eeG5RjNHeocDIclY4ADe", "SelectUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SelectUI = exports('SelectUI', (_dec = ccclass('SelectUI'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SelectUI, _Component);

        function SelectUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tankIcons", _descriptor, _assertThisInitialized(_this));

          _this.btns = void 0;
          _this["default"] = void 0;
          _this.timeCount = void 0;
          _this.autoTimeCount = 10;
          _this.defaultSelectIndex = 0;
          _this.teachHand = void 0;
          _this.activeTankIndex = [false, false, false];
          _this.tankPower = [0, 0, 0];
          _this.minTankIndex = 0;
          return _this;
        }

        var _proto = SelectUI.prototype;

        _proto.onLoad = function onLoad() {
          var layout = this.node.getChildByName("Layout");
          this.btns = layout.children;
          this["default"] = this.node.getChildByName("IsDefault");
          this.timeCount = this.node.getChildByName("timeCount").getComponent(Label);
          this.init();
        };

        _proto.onEnable = function onEnable() {
          var maxTankIndex = 0;
          var maxPower = 0;
          var maxBtnPosX = 0;

          for (var i = 0; i < this.btns.length; i++) {
            var btn = this.btns[i].getChildByName("btn");
            var icon = this.btns[i].getChildByName("icon");
            var name = this.btns[i].getChildByName("name");
            var repair = this.btns[i].getChildByName("repair");
            repair.active = !this.activeTankIndex[i];
            icon.getComponent(Sprite).color = this.activeTankIndex[i] ? new Color(255, 255, 255, 255) : new Color(50, 50, 50, 255);

            if (!this.activeTankIndex[i]) {
              name.getComponent(Label).string = "已被击毁";
            } else {
              if (this.tankPower[i] > maxPower) {
                maxTankIndex = i;
                maxBtnPosX = this.btns[i].getPosition().x;
                maxPower = this.tankPower[i];
              }
            }

            btn.getChildByName("gg").active = !this.activeTankIndex[i];
            btn.getChildByName("Label").getComponent(Label).string = this.activeTankIndex[i] ? "出战" : "修复并出战";
          }

          var pos = this["default"].getPosition();
          pos.x = maxBtnPosX;
          this["default"].setPosition(pos);
          this.defaultSelectIndex = maxTankIndex;
          this.autoTimeCount = 10;
          this.timeCount.string = "准备时间:10";
          this.schedule(this.autoCheck, 1);
        };

        _proto.start = function start() {
          this.scheduleOnce(this.onEnable);
        };

        _proto.autoCheck = function autoCheck() {
          this.autoTimeCount--;
          this.timeCount.string = "准备时间:" + this.autoTimeCount;
          if (this.autoTimeCount > 0) ;else {
            this.autoSelect();
          }
          if (!GameData.isPlayingCountDown) SoundMgr.instacne.playSound(SoundType.Beep);
        };

        _proto.autoSelect = function autoSelect() {
          this.onSelectClick([this.defaultSelectIndex]);
        };

        _proto.init = function init() {
          if (StorageMgr.instance.storageData.playCount == 0) {
            //    this this.onSelectClick([0]);
            this.node.active = false;
          } else {
            var data = GameData.playerGameTankData;
            var minPower = Number.MAX_VALUE;

            for (var i = 0; i < data.length; i++) {
              var power = data[i].power();

              if (power < minPower) {
                minPower = power;
                this.minTankIndex = i;
              }
            }

            for (var _i = 0; _i < this.btns.length; _i++) {
              if (_i >= data.length) {
                this.btns[_i].active = false;
                continue;
              }

              this.activeTankIndex[_i] = true;
              this.tankPower[_i] = data[_i].power();

              var icon = this.btns[_i].getChildByName("icon");

              var btn = this.btns[_i].getChildByName("btn");

              var powerLabel = this.btns[_i].getChildByPath("Standard/Num").getComponent(Label);

              powerLabel.string = this.tankPower[_i].toString();
              icon.getComponent(Sprite).spriteFrame = this.tankIcons[data[_i].id];

              var name = this.btns[_i].getChildByName("name");

              name.getComponent(Label).string = GameData.tankNames[data[_i].id];
              btn.getChildByName("gg").active = false;
              btn.getChildByName("Label").getComponent(Label).string = "出战";
              Tool.d2_AddClickEvent(btn, this, this.onSelectClick, [_i]);
            }
          }
        };

        _proto.onSelectClick = function onSelectClick(array) {
          this.unschedule(this.autoCheck);
          var index = array[0];

          if (this.activeTankIndex[index]) {
            EventMgr.event(EventType.Game_Player_Select, array[0]);
            if (index != this.minTankIndex) this.activeTankIndex[index] = false;
          } else {
            Platform.instance.showVideo(function () {
              EventMgr.event(EventType.Game_Player_Select, array[0]);
            }, function () {});
          }
        } // onClick2() {
        //     if (!AssetMgr.instance.isDinasor2Bundle) {
        //         Platform.instance.showToast("该恐龙正在赶往战场");
        //         return;
        //     }
        //     if (StorageMgr.instance.storageData.hasDinosaur[DinasorType.Dinasor2] == 1) {
        //         EventMgr.event(EventType.Game_Player_Select, 1);
        //     } else {
        //         Platform.instance.showVideo(() => {
        //             UMTrack.instance.trackEvent("Game_TryOn")
        //             EventMgr.event(EventType.Game_Player_Select, 1);
        //         }, () => { })
        //     }
        // }
        ;

        return SelectUI;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tankIcons", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShieldBuff.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5df2+/tXtJfJ/be4zotBUD", "ShieldBuff", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ShieldBuff = exports('ShieldBuff', (_dec = ccclass('ShieldBuff'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(ShieldBuff, _PoolComp);

        function ShieldBuff() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;
          _this.anim = void 0;
          return _this;
        }

        var _proto = ShieldBuff.prototype;

        _proto.firstBorn = function firstBorn() {
          this.anim = this.node.getComponent(Animation);
        };

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.node.active = true;
          this.anim.play();
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
        };

        return ShieldBuff;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShopBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, EventMgr, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3f987yZHaRLIZxS7Xq9EsSs", "ShopBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ShopBtn = exports('ShopBtn', (_dec = ccclass('ShopBtn'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShopBtn, _Component);

        function ShopBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tips = void 0;
          return _this;
        }

        var _proto = ShopBtn.prototype;

        _proto.onLoad = function onLoad() {
          this.tips = this.node.getChildByName("tips");
        };

        _proto.start = function start() {
          this.tipsCheck();
          Tool.d2_AddClickEvent(this.node, this, this.openShopPanel);
          EventMgr.on(EventType.Home_ShopTips_Update, this, this.tipsCheck);
        };

        _proto.tipsCheck = function tipsCheck() {
          var data = StorageMgr.instance.storageData.shopDailyGet;
          var isAllGet = true;

          for (var i = 0; i < data.length; i++) {
            if (!data[i]) {
              isAllGet = false;
              break;
            }
          }

          this.tips.active = !isAllGet;
        };

        _proto.openShopPanel = function openShopPanel() {
          EventMgr.event(EventType.Home_Shop_Open);
        };

        return ShopBtn;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShopPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './Tool.ts', './ItemPool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, EventMgr, StorageMgr, Platform, Tool, ItemPoolType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      ItemPoolType = module.ItemPoolType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d0c29txfuVLSLyOHSG+uer3", "ShopPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ShopPanel = exports('ShopPanel', (_dec = ccclass('ShopPanel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShopPanel, _Component);

        function ShopPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.backBtn = void 0;
          _this.awardBtns = [];
          return _this;
        }

        var _proto = ShopPanel.prototype;

        _proto.onLoad = function onLoad() {
          this.backBtn = this.node.getChildByName("backBtn");
          var items = Tool.d3_FindAllNodeHasName(this.node, "Item");

          for (var i = 0; i < items.length; i++) {
            this.awardBtns.push(items[i].getChildByName("btn"));
          }
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.backBtn, this, this.closePanel);

          for (var i = 0; i < this.awardBtns.length; i++) {
            Tool.d2_AddClickEvent(this.awardBtns[i], this, this.getAward, [i]);
          }
        };

        _proto.closePanel = function closePanel() {
          this.node.active = false;
          console.log("关闭商店界面");
        };

        _proto.getAward = function getAward(indexArray) {
          var _this2 = this;

          var index = indexArray[0];
          console.log("商店领取奖励", index);
          var data = StorageMgr.instance.storageData;
          var dailyGet = Tool.cloneArray_normal(data.shopDailyGet);

          if (index > 0) {
            if (dailyGet[index - 1]) {
              Platform.instance.showToast("今天这个已经领取过了");
              return;
            }
          } // let self = this;


          Platform.instance.showVideo(function () {
            if (index > 0) {
              dailyGet[index - 1] = true;
              StorageMgr.instance.changeShopDailyGet(dailyGet);
            }

            switch (index) {
              case 0:
                StorageMgr.instance.addOil(3);
                EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.oil, 3, _this2.awardBtns[index].getWorldPosition());
                break;

              case 1:
                StorageMgr.instance.addOil(5);
                EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.oil, 5, _this2.awardBtns[index].getWorldPosition());
                break;

              case 2:
                StorageMgr.instance.changeGold(30);
                EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.gold, 3, _this2.awardBtns[index].getWorldPosition());
                break;

              case 3:
                StorageMgr.instance.changeMoney(4000);
                EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.money, 15, _this2.awardBtns[index].getWorldPosition());
                break;

              default:
                console.warn("未知的奖励索引", index);
                break;
            }
          }, function () {});
        };

        return ShopPanel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SignComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, EventMgr, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "631bbqWkHVD4LcFrV1/TCSp", "SignComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SignComp = exports('SignComp', (_dec = ccclass('SignComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SignComp, _Component);

        function SignComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tips = void 0;
          return _this;
        }

        var _proto = SignComp.prototype;

        _proto.onLoad = function onLoad() {
          this.tips = this.node.getChildByName("tips");
        };

        _proto.start = function start() {
          this.tipsUpdate();
          Tool.d2_AddClickEvent(this.node, this, this.openSignPanel);
          EventMgr.on(EventType.Home_SignTips_Update, this, this.tipsUpdate);
        };

        _proto.tipsUpdate = function tipsUpdate() {
          var data = StorageMgr.instance.storageData;
          var week = data.weekSignProgress;
          var real = data.realSignProgress;
          var delta = week - real;
          this.tips.active = delta > 0;
        };

        _proto.openSignPanel = function openSignPanel() {
          EventMgr.event(EventType.Home_Sign_Open);
        };

        return SignComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SignPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './UMTrack.ts', './Tool.ts', './ItemPool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, UITransform, Component, EventType, EventMgr, StorageMgr, Platform, UMTrack, Tool, ItemPoolType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      ItemPoolType = module.ItemPoolType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3f1d8n9K85EULiLShvWzhzA", "SignPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SignPanel = exports('SignPanel', (_dec = ccclass('SignPanel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SignPanel, _Component);

        function SignPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.backBtn = void 0;
          _this.days = [];
          _this.choose = void 0;
          _this.timeLabel = void 0;
          return _this;
        }

        var _proto = SignPanel.prototype;

        _proto.onLoad = function onLoad() {
          this.backBtn = this.node.getChildByName("backBtn");
          this.days = Tool.d3_FindAllNodeHasName(this.node, "day");
          this.timeLabel = this.node.getChildByName("timeLabel").getComponent(Label);
          this.choose = this.node.getChildByName("choose");
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.backBtn, this, this.closePanel);
        };

        _proto.closePanel = function closePanel() {
          this.node.active = false;
          console.log("关闭签到界面");
        };

        _proto.onEnable = function onEnable() {
          console.log("打开签到界面");
          this.updateUI();
        };

        _proto.updateUI = function updateUI() {
          var data = StorageMgr.instance.storageData; //获取周进度和实际进度

          var week = data.weekSignProgress;
          var real = data.realSignProgress; // console.log(real, week);
          //签到剩余天数

          var remainDay = 8 - week;
          this.timeLabel.string = "剩余" + remainDay + "天"; //打勾更新

          for (var i = 0; i < this.days.length; i++) {
            this.days[i].getChildByName("right").active = i < real;
            var video = this.days[i].getChildByName("video");
            if (video) video.active = false;
          }

          var delta = week - real;
          var isCanSign = true;
          var isVideoSign = true;

          if (delta == 0) {
            console.log("已签到");
            this.choose.active = false;
            isCanSign = false;
          } else if (delta == 1) {
            console.log("今天的免费签到，不用补签");
            this.choose.active = true;
            isVideoSign = false;
          } else {
            console.log("要补签");
            this.choose.active = true;
          }

          if (isVideoSign && isCanSign) {
            var _video = this.days[real].getChildByName("video");

            if (_video) _video.active = true;
          }

          if (this.choose.active) {
            this.choose.setWorldPosition(this.days[real].getWorldPosition());

            if (real == 6) {
              this.choose.getComponent(UITransform).width = 570;
              this.choose.getComponent(UITransform).height = 570;
            } else {
              this.choose.getComponent(UITransform).width = 260;
              this.choose.getComponent(UITransform).height = 260;
            }
          }

          if (isCanSign) {
            //按钮激活
            for (var _i = 0; _i < this.days.length; _i++) {
              if (_i == real) {
                if (isVideoSign) {
                  Tool.d2_AddClickEvent(this.days[_i], this, this.signVideo);
                } else {
                  Tool.d2_AddClickEvent(this.days[_i], this, this.sign);
                }
              } else {
                this.days[_i].targetOff(this);
              }
            }
          } else {
            for (var _i2 = 0; _i2 < this.days.length; _i2++) {
              this.days[_i2].targetOff(this);
            }
          }
        };

        _proto.sign = function sign() {
          StorageMgr.instance.changeRealSignProgress(StorageMgr.instance.storageData.realSignProgress + 1);
          this.updateUI();
          this.getAward(StorageMgr.instance.storageData.realSignProgress);
        };

        _proto.signVideo = function signVideo() {
          var self = this;
          Platform.instance.showVideo(function () {
            StorageMgr.instance.changeRealSignProgress(StorageMgr.instance.storageData.realSignProgress + 1);
            self.updateUI();
            self.getAward(StorageMgr.instance.storageData.realSignProgress);
          }, function () {});
        };

        _proto.getAward = function getAward(index) {
          console.log("领取第", index, "天的礼物"); //不同天数的礼物效果

          var nowVipTime;
          var nowTime;

          switch (index) {
            case 1:
              StorageMgr.instance.changeMoney(10000);
              EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.money, 20, this.days[0].getWorldPosition());
              break;

            case 2:
              nowVipTime = StorageMgr.instance.storageData.vipTime;
              nowTime = new Date().getTime();

              if (nowVipTime <= nowTime) {
                nowVipTime = nowTime;
              }

              nowVipTime += 30 * 60 * 1000;
              StorageMgr.instance.changeVipTime(nowVipTime);
              UMTrack.instance.trackEvent("Get_Vip");
              break;

            case 3:
              StorageMgr.instance.changeGold(100);
              EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.gold, 10, this.days[2].getWorldPosition());
              break;

            case 4:
              //获得贴纸
              console.log("获得贴纸");
              var storageData = StorageMgr.instance.storageData;
              var tankData = Tool.cloneArray_Obj(storageData.tankData);
              nowTime = new Date().getTime();

              for (var i = 0; i < tankData.length; i++) {
                var data = tankData[i];

                if (data.paintDeadTime[3] <= nowTime) {
                  data.paintDeadTime[3] = nowTime + 6 * 60 * 60 * 1000;
                } else {
                  data.paintDeadTime += 6 * 60 * 60 * 1000;
                }
              }

              StorageMgr.instance.changeStorgeTankData(tankData); //弹出奖励窗口获得贴纸

              break;

            case 5:
              nowVipTime = StorageMgr.instance.storageData.vipTime;
              nowTime = new Date().getTime();

              if (nowVipTime <= nowTime) {
                nowVipTime = nowTime;
              }

              nowVipTime += 48 * 60 * 60 * 1000;
              StorageMgr.instance.changeVipTime(nowVipTime);
              UMTrack.instance.trackEvent("Get_Vip");
              break;

            case 6:
              StorageMgr.instance.changeMoney(10000);
              EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.money, 20, this.days[5].getWorldPosition());
              break;

            case 7:
              console.log("获得坦克");
              var datas = Tool.cloneArray_normal(StorageMgr.instance.storageData.tankData);
              datas[2].unlockState = true;
              StorageMgr.instance.changeStorgeTankData(datas); //TODO 弹出奖励窗口获得坦克

              break;

            default:
              console.warn("签到了未知天数");
              break;
          }
        };

        return SignPanel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CircleBar.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Sprite, Component, CircleBar;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      CircleBar = module.CircleBar;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d493cM4Gd5L/4aC/k8ltZDj", "SkillBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillBtn = exports('SkillBtn', (_dec = ccclass('SkillBtn'), _dec2 = property({
        type: SpriteFrame
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillBtn, _Component);

        function SkillBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.bar = void 0;

          _initializerDefineProperty(_this, "blackFrame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "activeFrame", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SkillBtn.prototype;

        _proto.onLoad = function onLoad() {
          this.bar = this.getComponent(CircleBar);
        };

        _proto.start = function start() {
          this.updateSkillBtn(0);
        };

        _proto.updateSkillBtn = function updateSkillBtn(progress) {
          this.bar.value = progress;
          this.getComponent(Sprite).spriteFrame = progress == 0 ? this.activeFrame : this.blackFrame;
        };

        return SkillBtn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blackFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "activeFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioClip, AudioSource, assetManager, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      assetManager = module.assetManager;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "b0b1dbls6BHU7AFoanj1Trg", "SoundMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu,
          requireComponent = _decorator.requireComponent;
      var SoundMgr = exports('SoundMgr', (_dec = ccclass('SoundMgr'), _dec2 = menu('Mgr/SoundMgr'), _dec3 = property({
        type: [AudioClip]
      }), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SoundMgr, _Component);

        function SoundMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "clips", _descriptor, _assertThisInitialized(_this));

          _this.auidoSource = void 0;
          _this.idle = void 0;
          _this.move = void 0;
          _this.isLoadSound = false;
          _this.hasLoadSound = {};
          _this.bundle = void 0;
          _this.hasPlayingSound = [];
          return _this;
        }

        var _proto = SoundMgr.prototype;

        _proto.onLoad = function onLoad() {
          SoundMgr.instacne = this;
          this.auidoSource = this.node.getComponent(AudioSource);
          this.idle = this.node.getChildByName("idle").getComponent(AudioSource);
          this.move = this.node.getChildByName("move").getComponent(AudioSource);

          if (!this.auidoSource) {
            this.auidoSource = this.node.addComponent(AudioSource);
          }

          this.bundle = assetManager.getBundle("03_Sound");
        };

        _proto.playSound = function playSound(clip, volume) {
          if (volume === void 0) {
            volume = 1;
          }

          var audioClip = this.hasLoadSound[clip];

          if (audioClip) {
            this.playSoundAPI(audioClip, volume);
          } else {
            var self = this;
            this.bundle.load("Sounds/" + clip, AudioClip, function (err, audioClip) {
              if (err) {
                console.warn(err);
                return;
              }

              self.playSoundAPI(audioClip, volume);
            });
          }
        };

        _proto.playSoundAPI = function playSoundAPI(clip, volume) {
          var _this2 = this;

          var index = this.hasPlayingSound.indexOf(clip.name);

          if (index == -1) {
            this.hasPlayingSound.push(clip.name);
            this.auidoSource.playOneShot(clip, volume);
            var time = 0.25 * clip.getDuration();
            this.scheduleOnce(function () {
              _this2.hasPlayingSound.splice(_this2.hasPlayingSound.indexOf(clip.name), 1);
            }, time);
          }
        };

        _proto.playSoundNoLimted = function playSoundNoLimted(clip, volume) {
          if (volume === void 0) {
            volume = 0.25;
          }

          var audioClip = this.hasLoadSound[clip];

          if (audioClip) {
            this.auidoSource.playOneShot(audioClip, volume);
          } else {
            var self = this;
            this.bundle.load("Sounds/" + clip, AudioClip, function (err, audioClip) {
              if (err) {
                console.warn(err);
                return;
              }

              self.auidoSource.playOneShot(audioClip, volume);
            });
          } // let index = this.hasPlayingSound.indexOf(clip);
          // if (index == -1) {
          //     this.auidoSource.playOneShot(this.clips[clip], volume);
          //     // let time = 0.25 * this.clips[clip].getDuration();
          // }

        };

        _proto.playMusic = function playMusic(clip) {
          var audioClip = this.hasLoadSound[clip];

          if (audioClip) {
            this.musicPlayApi(audioClip);
          } else {
            var self = this;
            this.bundle.load("Sounds/" + clip, AudioClip, function (err, audioClip) {
              if (err) {
                console.warn(err);
                return;
              }

              self.musicPlayApi(audioClip);
            });
          }
        };

        _proto.musicPlayApi = function musicPlayApi(audioClip) {
          if (!this.auidoSource.clip) {
            this.auidoSource.clip = audioClip;
            this.auidoSource.play();
            return;
          }

          if (this.auidoSource.clip.name != audioClip.name) {
            this.auidoSource.stop();
            this.auidoSource.clip = audioClip;
            this.auidoSource.play();
          }
        };

        _proto.setMuiscVolume = function setMuiscVolume(volume) {
          this.auidoSource.volume = volume;
        };

        _proto.stopMusic = function stopMusic() {
          this.auidoSource.stop();
        };

        _proto.initMoveSound = function initMoveSound() {
          this.idle.play();
          this.move.play();
        };

        _proto.playMoveSound = function playMoveSound(value) {
          if (!this.idle.playing) {
            this.idle.play();
          }

          if (!this.move.playing) {
            this.move.play();
          }

          this.idle.volume = 1 - value;
          this.move.volume = value;
        };

        _proto.stopMoveSound = function stopMoveSound() {
          this.idle.stop();
          this.move.stop();
        };

        return SoundMgr;
      }(Component), _class3.instacne = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "clips", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpeedBuff.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PoolComp.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ParticleSystem, PoolComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem = module.ParticleSystem;
    }, function (module) {
      PoolComp = module.PoolComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "eac47u6tlFDjLtIicFzwndb", "SpeedBuff", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpeedBuff = exports('SpeedBuff', (_dec = ccclass('SpeedBuff'), _dec(_class = /*#__PURE__*/function (_PoolComp) {
        _inheritsLoose(SpeedBuff, _PoolComp);

        function SpeedBuff() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PoolComp.call.apply(_PoolComp, [this].concat(args)) || this;
          _this.effect = void 0;
          return _this;
        }

        var _proto = SpeedBuff.prototype;

        _proto.firstBorn = function firstBorn() {
          this.effect = this.node.children[0].getComponent(ParticleSystem);
        };

        _proto.clear = function clear() {};

        _proto.init = function init() {
          this.node.active = true;
          this.effect.play();
        };

        _proto.recyle = function recyle() {
          this.node.active = false;
          this.effect.stop();
        };

        return SpeedBuff;
      }(PoolComp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SphereController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, tween, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "657c3fUNq5HCJcQBKCjO//j", "SphereController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SphereController = exports('SphereController', (_dec = ccclass('SphereController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SphereController, _Component);

        function SphereController() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SphereController.prototype;

        _proto.onLoad = function onLoad() {
          var _this = this;

          var pos = this.node.position;
          var from = new Vec3(pos.x, 7, pos.z);
          var to = new Vec3(pos.x, 1.25, pos.z);
          tween(this.node).to(1, {
            position: to
          }, {
            easing: 'quartIn'
          }).call(function () {
            _this.node.emit("setImpulse");
          }).to(1, {
            position: from
          }, {
            easing: 'quadOut'
          }).union().repeatForever().start();
        };

        return SphereController;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StartBoxUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomAdMgr.ts', './JJMgr.ts', './JJWxTrap.ts', './WxPlatform.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ProgressBar, Quat, Tween, tween, Component, CustomAdMgr, JJMgr, JJWxTrap, WxPlatform, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      Quat = module.Quat;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      CustomAdMgr = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }, function (module) {
      WxPlatform = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "b0157ssWNtAxaIU6RwO1Rvo", "StartBoxUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StartBoxUI = exports('default', (_dec = ccclass('StartBoxUI'), _dec2 = property(Node), _dec3 = property(ProgressBar), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StartBoxUI, _Component);

        function StartBoxUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "box", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pBar", _descriptor2, _assertThisInitialized(_this));

          _this.ccb = null;
          _this.showCallback = null;
          _this.hadShowBanner = false;
          _this.preTime = 0;
          _this.rateTime = 0;
          _this.minclicknum = void 0;
          _this.maxclicknum = void 0;
          _this.needClick = void 0;
          _this.isforce = false;
          _this.addProgerss = void 0;
          _this.repeatCount = 0;
          _this.isRepeat = void 0;
          _this.clickCount = 0;
          _this.lianxu_num = void 0;
          _this.quat1 = new Quat();
          _this.quat2 = new Quat();
          _this.quat3 = new Quat();
          return _this;
        }

        var _proto = StartBoxUI.prototype;

        _proto.onDisable = function onDisable() {
          var _this2 = this;

          this.unscheduleAllCallbacks();
          CustomAdMgr.instance.hideGrid();
          WxPlatformBannerAd.Instance.hideBannerFun(true);

          if (this.repeatCount > 0) {
            JJWxTrap.Instance.com.scheduleOnce(function () {
              _this2.showUI(_this2.isRepeat, _this2.lianxu_num, _this2.ccb);

              _this2.repeatCount--;
            }, 0.1);
          } else {
            this.ccb && this.ccb();
          }
        };

        _proto.showUI = function showUI(isRepeat, lianxu_num, cb) {
          this.clickCount = 0;
          this.lianxu_num = lianxu_num;
          this.isRepeat = isRepeat;

          if (isRepeat && this.repeatCount <= 0) {
            this.repeatCount = lianxu_num;
          }

          this.minclicknum = Number(JJMgr.instance.dataConfig.front_box_clicks[0]);
          this.maxclicknum = Number(JJMgr.instance.dataConfig.front_box_clicks[1]);
          this.needClick = JJMgr.instance.GetRandom(this.minclicknum, this.maxclicknum - JJMgr.instance.dataConfig.front_progress_bar_reduce);
          this.isforce = JJMgr.instance.dataConfig.front_is_box_force;
          this.addProgerss = 1 / this.maxclicknum;
          console.log('this.needClick:', this.needClick);
          console.log('this.addProgerss:', this.addProgerss);
          this.ccb = cb;
          this.node.active = true;
          this.hadShowBanner = false;
          this.pBar.progress = 0;
          this.rateTime = 0;
          this.preTime = 0;
          this.schedule(this.DecBar);
          WxPlatform.instance.showBanner();
        };

        _proto.closeCB = function closeCB() {
          this.node.active = false;
        };

        _proto.clickCB = function clickCB() {
          var _this4 = this;

          this.clickCount++;
          this.pBar.progress += this.addProgerss;

          if (this.pBar.progress > 1) {
            this.pBar.progress = 1;
          }

          this.shakeBox();

          if (!this.hadShowBanner) {
            this.isforce = JJMgr.instance.dataConfig.front_is_box_force;
            var closeTime = JJMgr.instance.dataConfig.front_box_hide_time / 1000;

            var cb = function cb() {
              _this4.hadShowBanner = true;

              _this4.scheduleOnce(function () {
                if (!CustomAdMgr.instance.getIsShow()) {
                  _this4.repeatCount = 0;
                }

                CustomAdMgr.instance.hideGrid();
                {
                  _this4.closeCB();
                }
              }, closeTime);

              CustomAdMgr.instance.showGrid();
            };

            var diff = this.rateTime - this.preTime;
            var arr = JJMgr.instance.dataConfig.front_box_sulv_qujian; //['0,0.2', '0.2,0.3', '0.3,0.4']

            var randNum = this.getRandomItemInArr(arr);
            var strArr = randNum.split('|');
            var v1 = strArr[0];
            var v2 = strArr[1];

            if (this.pBar.progress * 100 >= JJMgr.instance.dataConfig.front_box_sulv_start && parseFloat(v1) <= diff && diff <= parseFloat(v2)) {
              console.log('宝箱触发频率：', diff);

              if (JJMgr.instance.dataConfig.front_sulv_wuchu_switch) {
                this.isforce = true;
                closeTime = JJMgr.instance.dataConfig.front_fbox_hide_time / 1000;
              }

              cb();
              return;
            }

            this.preTime = this.rateTime;

            if (this.pBar.progress >= this.needClick * this.addProgerss && !this.hadShowBanner) {
              console.log('宝箱触发进度');
              cb();
              return;
            } // // 点击次数


            if (this.clickCount >= JJMgr.instance.dataConfig.front_box_click_count) {
              console.log('点击次数', this.clickCount);
              this.clickCount = 0;
              cb();
            }
          }
        };

        _proto.shakeBox = function shakeBox() {
          Tween.stopAllByTarget(this.box);
          Quat.fromEuler(this.quat1, 0, 0, -10);
          Quat.fromEuler(this.quat2, 0, 0, 10);
          Quat.fromEuler(this.quat3, 0, 0, 0);
          tween(this.box).to(0.1, {
            rotation: this.quat1
          }).to(0.2, {
            rotation: this.quat2
          }).to(0.1, {
            rotation: this.quat3
          }).start();
        };

        _proto.DecBar = function DecBar() {
          this.pBar.progress -= JJMgr.instance.dataConfig.front_progress_bar_return;

          if (this.pBar.progress < 0) {
            this.pBar.progress = 0;
          }
        };

        _proto.update = function update(dt) {
          this.rateTime += dt;
        };

        _proto.GetRandom = function GetRandom(mix, max, isInt) {
          if (isInt === void 0) {
            isInt = true;
          }

          var w = max - mix;
          var r1 = Math.random() * w;
          r1 += mix;
          return isInt ? Math.floor(r1) : r1;
        };

        _proto.getRandomItemInArr = function getRandomItemInArr(arr) {
          return arr[Math.floor(Math.random() * arr.length)];
        };

        return StartBoxUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "box", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StartPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './UMTrack.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Color, Sprite, Label, Component, EventType, GameData, EventMgr, StorageMgr, Platform, UMTrack, Tool;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Color = module.Color;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "5baf8AYlQ9P25FHzVol2nki", "StartPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StartPanel = exports('StartPanel', (_dec = ccclass('StartPanel'), _dec2 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StartPanel, _Component);

        function StartPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "icons", _descriptor, _assertThisInitialized(_this));

          _this.returnBtn = void 0;
          _this.tanks = [];
          _this.itemList = void 0;
          _this.itemBuyBtns = [];
          _this.startBtn_team = void 0;
          _this.startBtn_single = void 0;
          _this.editBtn = void 0;
          return _this;
        }

        var _proto = StartPanel.prototype;

        _proto.onLoad = function onLoad() {
          this.returnBtn = this.node.getChildByName("ReturnBtn");
          this.editBtn = this.node.getChildByName("EditBtn");
          var tanksNode = this.node.getChildByName("Tanks");
          this.itemList = this.node.getChildByName("itemList");

          for (var i = 1; i <= 3; i++) {
            this.tanks.push(tanksNode.children[i]);
          }

          for (var _i = 0; _i < this.itemList.children.length; _i++) {
            var btn = this.itemList.children[_i].getChildByName("btn");

            this.itemBuyBtns.push(btn);
          }

          this.startBtn_team = this.node.getChildByName("startBtn_team");
          this.startBtn_single = this.node.getChildByName("startBtn_single");
        };

        _proto.onEnable = function onEnable() {
          this.updateUI();
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.returnBtn, this, this.closePanel);
          Tool.d2_AddClickEvent(this.startBtn_team, this, this.startGameTeam);
          Tool.d2_AddClickEvent(this.startBtn_single, this, this.startGameSingle);

          for (var i = 0; i < this.itemBuyBtns.length; i++) {
            Tool.d2_AddClickEvent(this.itemBuyBtns[i], this, this.buyItem, [i]);
          }

          Tool.d2_AddClickEvent(this.editBtn, this, this.goEdit, [], true, false);
        };

        _proto.closePanel = function closePanel() {
          this.node.active = false;
          console.log("关闭开始界面");
        };

        _proto.goEdit = function goEdit() {
          this.node.active = false;
          EventMgr.event(EventType.Home_TankShop_Open, true);
        };

        _proto.startGameTeam = function startGameTeam() {
          var storageData = StorageMgr.instance.storageData;

          if (storageData.rankPoint < GameData.rankScore[0]) {
            Platform.instance.showToast("团队模式需要士官级别才开启");
            return;
          }

          GameData.startGameMode = "team";
          this.startGame();
          UMTrack.instance.trackEvent("Play_Team");
        };

        _proto.startGameSingle = function startGameSingle() {
          GameData.startGameMode = "single";
          this.startGame();
          UMTrack.instance.trackEvent("Play_Single");
        };

        _proto.startGame = function startGame() {
          var storageData = StorageMgr.instance.storageData;

          if (storageData.nowChooseTankIndex.length == 0) {
            Platform.instance.showToast("必须至少选择一部坦克");
            return;
          }

          if (storageData.oilValue >= 1) {
            StorageMgr.instance.reduceOil(1);
            EventMgr.event(EventType.Home_StartGame_Event);
          } else {
            Platform.instance.showToast("体力不足");
          }
        };

        _proto.updateUI = function updateUI() {
          var storageData = StorageMgr.instance.storageData;
          var tankData = storageData.nowChooseTankIndex;
          var icon;
          var name;
          var color;

          for (var i = 0; i < this.tanks.length; i++) {
            if (i < tankData.length) {
              //显示有的坦克
              icon = this.icons[tankData[i]];
              name = GameData.tankNames[tankData[i]];
              color = new Color(255, 255, 255, 255);
            } else {
              //暂无
              icon = this.icons[0];
              name = "暂无";
              color = new Color(0, 0, 0, 200);
            }

            this.tanks[i].getChildByName("icon").getComponent(Sprite).spriteFrame = icon;
            this.tanks[i].getChildByName("Label").getComponent(Label).string = name;
            this.tanks[i].getChildByName("icon").getComponent(Sprite).color = color;
          } //更新道具情况


          var itemData = storageData.itemData;

          for (var _i2 = 0; _i2 < this.itemList.children.length; _i2++) {
            this.itemList.children[_i2].getChildByName("value").getComponent(Label).string = "剩余：" + itemData[_i2].toString();
          } //更新按钮状态（士官前不开启团队模式）


          if (storageData.rankPoint < GameData.rankScore[0]) {
            this.startBtn_team.getComponent(Sprite).grayscale = true;
          } else {
            this.startBtn_team.getComponent(Sprite).grayscale = false;
          }
        };

        _proto.buyItem = function buyItem(indexArray) {
          var index = indexArray[0];
          var price = 0;
          var type = "money";

          switch (index) {
            case 0:
              price = 1000;
              type = "money";
              break;

            case 1:
              price = 1000;
              type = "money";
              break;

            case 2:
              price = 2;
              type = "gold";
              break;

            case 3:
              price = 2;
              type = "gold";
              break;

            case 4:
              price = 2;
              type = "gold";
              break;

            default:
              console.warn("购买了不存在的道具");
              break;
          }

          var storageData = StorageMgr.instance.storageData;

          if (type == "money") {
            if (storageData.money >= price) {
              StorageMgr.instance.changeMoney(-price); //解锁道具

              var data = Tool.cloneArray_normal(storageData.itemData);
              data[index] += 1;
              StorageMgr.instance.changeItemData(data);
              this.updateUI();
            }
          } else if (type == "gold") {
            if (storageData.gold >= price) {
              StorageMgr.instance.changeGold(-price); // 解锁道具

              var _data = Tool.cloneArray_normal(storageData.itemData);

              _data[index] += 1;
              StorageMgr.instance.changeItemData(_data);
              this.updateUI();
            }
          }
        };

        return StartPanel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "icons", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StateController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioClip, Animation, AudioSource, game, randomRangeInt, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      Animation = module.Animation;
      AudioSource = module.AudioSource;
      game = module.game;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "d41cfxJDflJ6pMNnUJOfdPw", "StateController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StateController = exports('StateController', (_dec = ccclass('StateController'), _dec2 = property(AudioClip), _dec3 = property(AudioClip), _dec4 = property(AudioClip), _dec5 = property(AudioClip), _dec6 = property([AudioClip]), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StateController, _Component);

        function StateController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "shootSound", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "walkSound", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aimInSound", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "reloadSound", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "casingSounds", _descriptor5, _assertThisInitialized(_this));

          _this._state = StateController.IDLE;
          _this._values = {};
          _this._animFinshed = false;
          _this._animation = null;
          _this._audioSource = null;
          return _this;
        }

        var _proto = StateController.prototype;

        _proto.onLoad = function onLoad() {
          var _this$_animation,
              _this2 = this;

          this._animation = this.getComponent(Animation);
          (_this$_animation = this._animation) == null ? void 0 : _this$_animation.on(Animation.EventType.FINISHED, function () {
            _this2._animFinshed = true;
          });
          this._audioSource = this.getComponent(AudioSource);
          game.on("__playCasingSound", this._onPlayCasing, this);
        };

        _proto.onDestroy = function onDestroy() {
          game.off("__playCasingSound", this._onPlayCasing, this);
        };

        _proto._onPlayCasing = function _onPlayCasing() {
          if (this._audioSource) {
            var index = randomRangeInt(0, this.casingSounds.length - 1);

            this._audioSource.playOneShot(this.casingSounds[index]);
          }
        };

        _proto.getState = function getState() {
          return this._state;
        };

        _proto.setState = function setState(state, force, duration) {
          if (force === void 0) {
            force = false;
          }

          if (this._state !== state || force) {
            this._state = state;

            if (this._animation) {
              this._animation.crossFade(state, duration);

              this._animFinshed = false;
            }

            if (this._audioSource) {
              switch (state) {
                case StateController.WALK:
                  this._audioSource.clip = this.walkSound;
                  this._audioSource.loop = true;

                  this._audioSource.play();

                  break;

                case StateController.IDLE:
                  this._audioSource.stop();

                  break;

                case StateController.AIM_FIRE:
                case StateController.FIRE:
                  this.shootSound && this._audioSource.playOneShot(this.shootSound);
                  break;

                case StateController.AIM_IN:
                  this.aimInSound && this._audioSource.playOneShot(this.aimInSound);
                  break;

                case StateController.RELOAD_OUTOF_AMMO:
                  this.reloadSound && this._audioSource.playOneShot(this.reloadSound);
                  break;
              }
            }
          }
        };

        _proto.getValue = function getValue(k) {
          return this._values[k];
        };

        _proto.setValue = function setValue(k, v) {
          this._values[k] = v;
        };

        _proto.update = function update() {
          var state = this._state;
          var values = this._values;

          switch (state) {
            case StateController.IDLE:
              if (values.mouseLeft) {
                state = StateController.FIRE;
              } else if (values.mouseRight) {
                state = StateController.AIM_IN;
              } else if (values.moveSpeed > 0.2) {
                state = StateController.WALK;
              }

              break;

            case StateController.WALK:
              if (values.mouseRight) {
                state = StateController.AIM_IN;
              } else if (values.moveSpeed <= 0.2) {
                state = StateController.IDLE;
              }

              break;

            case StateController.AIM_IN:
              if (!values.mouseRight) {
                state = StateController.AIM_OUT;
              } else if (values.mouseLeft) {
                state = StateController.AIM_FIRE;
              }

              break;

            case StateController.AIM_OUT:
              if (values.moveSpeed > 0.2) {
                state = StateController.WALK;
              } else {
                state = StateController.IDLE;
              }

              break;

            case StateController.FIRE:
              if (!values.mouseLeft) {
                state = StateController.IDLE;
              }

              break;

            case StateController.AIM_FIRE:
              if (!values.mouseLeft) {
                if (values.mouseRight) {
                  state = StateController.AIM_FIRE_POSE;
                } else {
                  state = StateController.IDLE;
                }
              }

              break;

            case StateController.AIM_FIRE_POSE:
              if (!values.mouseRight) {
                state = StateController.AIM_OUT;
              }

              break;

            case StateController.RELOAD_OUTOF_AMMO:
              if (this._animFinshed) {
                state = StateController.IDLE;
              }

              break;
          }

          this.setState(state);
        };

        return StateController;
      }(Component), _class3.AIM_IN = "Armature|aim_in", _class3.AIM_OUT = "Armature|aim_out", _class3.AIM_FIRE = "Armature|aim_fire", _class3.AIM_FIRE_POSE = "Armature|aim_fire_pose", _class3.IDLE = "Armature|idle", _class3.WALK = "Armature|walk", _class3.FIRE = "Armature|fire", _class3.RELOAD_OUTOF_AMMO = "Armature|reload_out_of_ammo", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "shootSound", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "walkSound", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "aimInSound", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "reloadSound", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "casingSounds", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StatsComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, Sprite, Component, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6feaftzsNFDxK1d9+2/0LyW", "StatsComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StatsComp = exports('StatsComp', (_dec = ccclass('StatsComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StatsComp, _Component);

        function StatsComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.hp = void 0;
          _this.armor = void 0;
          _this.rpm = void 0;
          _this.power = void 0;
          _this.speed = void 0;
          _this.maxHp = 6000;
          _this.maxArmor = 100;
          _this.maxRpm = 150;
          _this.maxPower = 300;
          _this.maxSpeed = 50;
          _this.greenColor = "#00FF7A";
          _this.redColor = "#FF007A";
          return _this;
        }

        var _proto = StatsComp.prototype;

        _proto.onLoad = function onLoad() {
          this.hp = this.node.getChildByName("Hp");
          this.armor = this.node.getChildByName("Armor");
          this.rpm = this.node.getChildByName("Rpm");
          this.power = this.node.getChildByName("Power");
          this.speed = this.node.getChildByName("Speed");
        };

        _proto.updateUI = function updateUI(nowData, nextData) {
          //如果没有下一级数据，则使用现在的数据
          if (!nextData) nextData = nowData; //血量展示

          this.statBar(this.hp, nowData.hp / this.maxHp, nextData.hp / this.maxHp); //护甲展示

          this.statBar(this.armor, nowData.armor / this.maxArmor, nextData.armor / this.maxArmor); //射速展示
          // let nowRpm = (1 / nowData.attackInvertal) * 50;
          // let nextRpm = (1 / nextData.attackInvertal) * 50;
          // this.statBar(this.rpm, nowRpm / this.maxRpm, nextRpm / this.maxRpm);
          //杀伤力展示

          var nowPower = nowData.attack / nowData.attackInvertal;
          var nextPower = nextData.attack / nextData.attackInvertal;
          this.statBar(this.power, nowPower / this.maxPower, nextPower / this.maxPower); //机动性展示

          var nowSpeed = nowData.maxSpeed + nowData.acceleration;
          var nextSpeed = nextData.maxSpeed + nextData.acceleration;
          this.statBar(this.speed, nowSpeed / this.maxSpeed, nextSpeed / this.maxSpeed);
        };

        _proto.statBar = function statBar(bar, nowValue, nextValue) {
          if (nowValue > 1) nowValue = 1;
          if (nextValue > 1) nextValue = 1;
          bar.getChildByName("Color").getComponent(UITransform).width = nowValue >= nextValue ? nowValue * 100 : nextValue * 100;
          bar.getChildByName("Color").getComponent(Sprite).color = Tool.d3_getRgbByHex(nowValue >= nextValue ? this.redColor : this.greenColor);
          bar.getChildByName("White").getComponent(UITransform).width = nowValue >= nextValue ? nextValue * 100 : nowValue * 100;
        };

        return StatsComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StorageData.ts", ['cc', './DataClass.ts'], function (exports) {
  'use strict';

  var cclegacy, TankStorgeData;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      TankStorgeData = module.TankStorgeData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f5046Umw/JJcbMzFTAf5pk3", "StorageData", undefined);
      /**
       * 缓存数据类型
       * 根据游戏去做配置
       */


      var StorageData = exports('StorageData', function StorageData() {
        this.playCount = 0;
        this.gameVersion = "29";
        this.firstDay = 0;
        this.lastDay = 0;
        this.lastOilTime = 0;
        this.oilValue = 10;
        this.vipTime = 0;
        this.money = 0;
        this.gold = 0;
        this.rankPoint = 0;
        this.weekSignProgress = 1;
        this.realSignProgress = 0;
        this.vipDailyAwardGet = false;
        this.vipDailyUnlock = 0;
        this.shopDailyGet = [false, false, false];
        this.tankData = [new TankStorgeData(0, true), new TankStorgeData(1, false), new TankStorgeData(2, false), new TankStorgeData(3, false), new TankStorgeData(4, false)];
        this.nowChooseTankIndex = [0];
        this.itemData = [0, 0, 0, 0, 0];
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StorageMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './StorageData.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, StorageData, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      StorageData = module.StorageData;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "6ea42h4lndLC588kDBinVo+", "StorageMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var StorageMgr = exports('default', (_dec = ccclass('StorageMgr'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StorageMgr, _Component);

        function StorageMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.storageData = new StorageData();
          _this.storageName = new StorageData();
          return _this;
        }

        var _proto = StorageMgr.prototype;

        _proto.onLoad = function onLoad() {
          StorageMgr.instance = this;
          this.init(); //没有版本控制，或不是最新版本存档,则清掉所有存档，更换新存档

          if (this.storageData.gameVersion == undefined || this.storageData.gameVersion != new StorageData().gameVersion) {
            console.log("清理存档");
            localStorage.clear();
            this.storageData = new StorageData();
            this.storageName = new StorageData();

            for (var key in this.storageData) {
              this.writeStorage(key, this.storageName[key]);
              console.log("初始化缓存数据", key, this.storageName[key]);
              this.storageName[key] = key; //数据键名更新
            }
          }
        };

        _proto.init = function init() {
          for (var key in this.storageData) {
            var jsonData = this.readStorage(key);

            if (!jsonData) {
              this.writeStorage(key, this.storageName[key]);
              console.log("初始化缓存数据", key, this.storageName[key]);
            } else {
              this.storageData[key] = JSON.parse(jsonData);
              console.log("加载缓存数据", key, this.storageData[key]);
            }

            this.storageName[key] = key; //数据键名更新
          }
        }
        /**写入缓存 */
        ;

        _proto.writeStorage = function writeStorage(key, value) {
          localStorage.setItem(key, JSON.stringify(value));
          this.storageData[key] = value;
        }
        /**读取缓存 */
        ;

        _proto.readStorage = function readStorage(key) {
          return localStorage.getItem(key);
        }
        /**移除缓存 */
        ;

        _proto.removeStorage = function removeStorage(key) {
          localStorage.removeItem(key);
        }
        /**存入所有存档 */
        ;

        _proto.SaveAllStorge = function SaveAllStorge() {
          for (var key in this.storageData) {
            this.writeStorage(key, this.storageData[key]);
          }
        }
        /**加体力 */
        ;

        _proto.addOil = function addOil(value, isEvent) {
          if (isEvent === void 0) {
            isEvent = true;
          }

          var oldOil = this.storageData.oilValue;
          oldOil += value;

          if (oldOil >= 10) {
            this.refreshOilTime();
          }

          this.writeStorage("oilValue", oldOil);
          if (isEvent) EventMgr.event(EventType.Data_Oil_Update);
          return oldOil >= 10;
        }
        /**刷新体力时间 */
        ;

        _proto.refreshOilTime = function refreshOilTime() {
          this.storageData.lastOilTime = new Date().getTime();
          console.log("刷新体力时间");
          this.writeStorage("lastOilTime", this.storageData.lastOilTime);
        }
        /**扣体力 */
        ;

        _proto.reduceOil = function reduceOil(value) {
          var oldOil = this.storageData.oilValue;
          if (oldOil < value) return false;
          oldOil -= value;
          this.writeStorage("oilValue", oldOil);
          EventMgr.event(EventType.Data_Oil_Update);
          return true;
        }
        /**增加或减少现金 */
        ;

        _proto.changeMoney = function changeMoney(value) {
          var oldMoney = this.storageData.money;
          oldMoney += value;

          if (oldMoney < 0) {
            oldMoney = 0;
          }

          this.writeStorage("money", oldMoney);
          EventMgr.event(EventType.Data_Money_Update);
          EventMgr.event(EventType.Home_PaintTips_Update);
          EventMgr.event(EventType.Home_UpgradeTips_Update);
          EventMgr.event(EventType.Home_TankTips_Update);
        }
        /**增加或减少金币 */
        ;

        _proto.changeGold = function changeGold(value) {
          var oldGold = this.storageData.gold;
          oldGold += value;

          if (oldGold < 0) {
            oldGold = 0;
          }

          this.writeStorage("gold", oldGold);
          EventMgr.event(EventType.Data_Gold_Update);
          EventMgr.event(EventType.Home_PaintTips_Update);
          EventMgr.event(EventType.Home_UpgradeTips_Update);
          EventMgr.event(EventType.Home_TankTips_Update);
        }
        /**增加Rank点数 */
        ;

        _proto.changeRank = function changeRank(value) {
          var oldRank = this.storageData.rankPoint;
          value = Math.floor(value);
          oldRank += value;

          if (oldRank >= 110319) {
            oldRank = 110319;
          }

          this.writeStorage("rankPoint", oldRank);
        }
        /**游玩次数增加 */
        ;

        _proto.addPlayCount = function addPlayCount() {
          var oldPlayCount = this.storageData.playCount;
          oldPlayCount++;
          this.writeStorage("playCount", oldPlayCount);
        }
        /**更新vip的截止时间 */
        ;

        _proto.changeVipTime = function changeVipTime(value) {
          var oldVipTime = this.storageData.vipTime;
          oldVipTime = value;
          this.writeStorage("vipTime", oldVipTime);
          EventMgr.event(EventType.Home_VipTips_Update);
        }
        /**更新第一天的时间 */
        ;

        _proto.changeFirstDay = function changeFirstDay(value) {
          var oldFirstDay = this.storageData.firstDay;
          oldFirstDay = value;
          this.writeStorage("firstDay", oldFirstDay);
        }
        /**更新上次登录的时间 */
        ;

        _proto.changeLastDay = function changeLastDay(value) {
          var oldLastDay = this.storageData.lastDay;
          oldLastDay = value;
          this.writeStorage("lastDay", oldLastDay);
        }
        /**更新这周的签到进度 */
        ;

        _proto.changeWeekSignProgress = function changeWeekSignProgress(value) {
          var oldWeekSignProgress = this.storageData.weekSignProgress;
          oldWeekSignProgress = value;
          this.writeStorage("weekSignProgress", oldWeekSignProgress);
          EventMgr.event(EventType.Home_SignTips_Update);
        }
        /**更新实际的签到进度 */
        ;

        _proto.changeRealSignProgress = function changeRealSignProgress(value) {
          var oldRealSignProgress = this.storageData.realSignProgress;
          oldRealSignProgress = value;
          this.writeStorage("realSignProgress", oldRealSignProgress);
          EventMgr.event(EventType.Home_SignTips_Update);
        }
        /**更新vip领取情况 */
        ;

        _proto.changeVipDailyAwardGet = function changeVipDailyAwardGet(value) {
          this.writeStorage("vipDailyAwardGet", value);
          EventMgr.event(EventType.Home_VipTips_Update);
        }
        /**vip视频开通情况0,1,2,3, */
        ;

        _proto.changeVipDailyUnlock = function changeVipDailyUnlock(value) {
          this.writeStorage("vipDailyUnlock", value);
        }
        /**商店每日更新存档 */
        ;

        _proto.changeShopDailyGet = function changeShopDailyGet(value) {
          this.writeStorage("shopDailyGet", value);
          EventMgr.event(EventType.Home_ShopTips_Update);
        }
        /**坦克存储信息 */
        ;

        _proto.changeStorgeTankData = function changeStorgeTankData(data) {
          this.writeStorage("tankData", data);
          EventMgr.event(EventType.Home_PaintTips_Update);
          EventMgr.event(EventType.Home_UpgradeTips_Update);
          EventMgr.event(EventType.Home_TankTips_Update);
        }
        /**坦克编队信息 */
        ;

        _proto.changeChooseTank = function changeChooseTank(indexs) {
          this.writeStorage("nowChooseTankIndex", indexs);
        }
        /**更新道具信息 */
        ;

        _proto.changeItemData = function changeItemData(datas) {
          this.writeStorage("itemData", datas);
        };

        return StorageMgr;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwitchMat.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, _decorator, MeshRenderer, CCFloat, Material, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      CCFloat = module.CCFloat;
      Material = module.Material;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _dec4, _dec5, _dec6, _dec7, _dec8, _class4, _class5, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "6c0a7BePH5M+L1b3LMe265D", "SwitchMat", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var matData = exports('matData', (_dec = ccclass('matData'), _dec2 = property({
        displayName: 'name'
      }), _dec3 = property({
        type: [MeshRenderer],
        displayName: 'renders'
      }), _dec(_class = (_class2 = function matData() {
        _initializerDefineProperty(this, "name", _descriptor, this);

        _initializerDefineProperty(this, "renders", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "renders", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      var SwitchMat = exports('SwitchMat', (_dec4 = ccclass('SwitchMat'), _dec5 = property({
        type: CCFloat,
        visible: true,
        displayName: '更新材质'
      }), _dec6 = property({
        type: CCFloat,
        visible: true,
        displayName: '获取子节点信息'
      }), _dec7 = property(Material), _dec8 = property([matData]), _dec4(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SwitchMat, _Component);

        function SwitchMat() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._changeMatButton = 0;

          _initializerDefineProperty(_this, "baseMat", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "matDatas", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SwitchMat.prototype;

        _proto.onLoad = function onLoad() {// this.changeMat();
        };

        _proto.getInfo = function getInfo() {
          var childern = this.node.children;
          this.matDatas = [];

          for (var i = 0; i < childern.length; i++) {
            console.log(i);
            var data = new matData();
            data.name = childern[i].name;
            data.renders = childern[i].getComponentsInChildren(MeshRenderer);
            this.matDatas.push(data);
          }
        };

        _proto.changeMat = function changeMat() {
          var childern = this.node.children;
          var h = this.baseMat.passes[1].getHandle("baseColorMap");
          var o;
          this.baseMat.passes[1].getUniform(h, o);
          console.log(o);

          for (var i = 0; i < this.matDatas.length; i++) {// console.log(this.matDatas[i].texture);
            // for (let j = 0; j < this.matDatas[i].renders.length; j++) {
            //     let mat = new Material()
            //     mat.copy(this.baseMat);
            //     let h = mat.passes[1].getHandle("BaseColorMap");
            //     if (this.matDatas[i].texture) {
            //         // new Texture2D().;
            //     }
            //     // mat.passes[1].setUniform(h,)
            //     this.matDatas[i].renders[j].setMaterial(mat, 0);
            // }
          }
        };

        _createClass(SwitchMat, [{
          key: "changeMatButton",
          get: function get() {
            return 0;
          },
          set: function set(v) {
            this._changeMatButton = 0;
            this.changeMat();
          }
        }, {
          key: "getChildInfo",
          get: function get() {
            return 0;
          },
          set: function set(v) {
            this.getInfo();
          }
        }]);

        return SwitchMat;
      }(Component), (_applyDecoratedDescriptor(_class5.prototype, "changeMatButton", [_dec5], Object.getOwnPropertyDescriptor(_class5.prototype, "changeMatButton"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "getChildInfo", [_dec6], Object.getOwnPropertyDescriptor(_class5.prototype, "getChildInfo"), _class5.prototype), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "baseMat", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "matDatas", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TankShop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './Tool.ts', './StatsComp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Sprite, Component, EventType, GameData, EventMgr, StorageMgr, Platform, Tool, StatsComp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      StatsComp = module.StatsComp;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "628b1R2MzFGvbzKv1uSYrEo", "TankShop", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TankShop = exports('TankShop', (_dec = ccclass('TankShop'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TankShop, _Component);

        function TankShop() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "tankSlots", _descriptor, _assertThisInitialized(_this));

          _this.returnBtn = void 0;
          _this.tankBtns = [];
          _this.statPanel = void 0;
          _this.standardNum = void 0;
          _this.isBuy = void 0;
          _this.buyBtn = void 0;
          _this.equipBtn = void 0;
          _this.unequipBtn = void 0;
          _this.noSale = void 0;
          _this.slotCount = void 0;
          _this.leftBtn = void 0;
          _this.rightBtn = void 0;
          _this.tankName = void 0;
          return _this;
        }

        var _proto = TankShop.prototype;

        _proto.onLoad = function onLoad() {
          this.returnBtn = this.node.getChildByName("ReturnBtn");
          var selectContent = this.node.getChildByPath("SelectScroll/view/content");
          this.tankBtns = Tool.cloneArray_normal(selectContent.children);
          this.leftBtn = this.node.getChildByPath("TankSelect/PreBtn");
          this.rightBtn = this.node.getChildByPath("TankSelect/NextBtn");
          this.tankName = this.node.getChildByPath("TankSelect/Name").getComponent(Label);
          this.statPanel = this.node.getChildByName("Stats").getComponent(StatsComp);
          this.standardNum = this.node.getChildByPath("Standard/Num").getComponent(Label);
          this.isBuy = this.node.getChildByPath("Stats/isBuy");
          this.buyBtn = this.isBuy.getChildByName("BuyBtn");
          this.equipBtn = this.node.getChildByPath("Stats/EquipBtn");
          this.unequipBtn = this.node.getChildByPath("Stats/UnequipBtn");
          this.noSale = this.node.getChildByPath("Stats/NoSale");
          this.slotCount = this.node.getChildByName("SlotCount");
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.returnBtn, this, this.closePanel);

          for (var i = 0; i < this.tankBtns.length; i++) {
            Tool.d2_AddClickEvent(this.tankBtns[i], this, this.selectTank, [i]);
          }

          Tool.d2_AddClickEvent(this.leftBtn, this, this.selectLeft);
          Tool.d2_AddClickEvent(this.rightBtn, this, this.selectRight);
          Tool.d2_AddClickEvent(this.buyBtn, this, this.onBuyBtnClick);
          Tool.d2_AddClickEvent(this.equipBtn, this, this.onEuquipBtnClick);
          Tool.d2_AddClickEvent(this.unequipBtn, this, this.onUnequipBtnClick);
        };

        _proto.closePanel = function closePanel() {
          this.node.active = false;
          EventMgr.event(EventType.Home_Main_Open);
          console.log("关闭坦克界面");
        };

        _proto.onEnable = function onEnable() {
          console.log("打开坦克界面");
          this.updateUI();
        };

        _proto.selectTank = function selectTank(indexArray) {
          var index = indexArray[0];
          EventMgr.event(EventType.Home_Tank_Choose, index);
          this.updateUI();
        };

        _proto.selectLeft = function selectLeft() {
          EventMgr.event(EventType.Home_Tank_ChooseLeft);
          this.updateUI();
        };

        _proto.selectRight = function selectRight() {
          EventMgr.event(EventType.Home_Tank_ChooseRight);
          this.updateUI();
        };

        _proto.updateUI = function updateUI() {
          var datas = StorageMgr.instance.storageData.tankData;
          var nowGetTank = StorageMgr.instance.storageData.nowChooseTankIndex;
          var data;
          var storageData = StorageMgr.instance.storageData;
          var isSelect;

          for (var i = 0; i < this.tankBtns.length; i++) {
            data = datas[i];
            isSelect = nowGetTank.indexOf(data.id) != -1;
            this.tankBtns[i].getChildByName("isLock").active = !data.unlockState;
            this.tankBtns[i].getChildByName("isSelect").active = isSelect;
            this.tankBtns[i].getComponent(Sprite).spriteFrame = i == GameData.nowChooseTankIndex ? this.tankSlots[1] : this.tankSlots[0];

            if (i == GameData.nowChooseTankIndex) {
              var unlockData = GameData.tankUnlockData[GameData.nowChooseTankIndex]; //当前展示的坦克数据更新

              this.tankName.string = GameData.tankNames[data.id];
              var gameData = GameData.getTankStatData(data);
              this.standardNum.string = gameData.power().toString();
              this.statPanel.updateUI(gameData); //按钮更新

              if (data.unlockState) {
                //查看是否装备进行判断
                this.isBuy.active = false;
                this.equipBtn.active = !isSelect;
                this.unequipBtn.active = isSelect;
                this.noSale.active = false;
              } else if (unlockData.type == "money" || unlockData.type == "gold") {
                //未解锁
                this.isBuy.active = true;
                this.equipBtn.active = false;
                this.unequipBtn.active = false;
                this.noSale.active = false;
              } else {
                //需要签到解锁
                this.isBuy.active = false;
                this.equipBtn.active = false;
                this.unequipBtn.active = false;
                this.noSale.active = true;
              } //购买价格显示


              if (this.isBuy.active) {
                var price = this.isBuy.getChildByName("Pirce");
                var gold = price.getChildByName("isGold");
                var money = price.getChildByName("isMoney");
                var num = price.getChildByName("Num").getComponent(Label);

                switch (unlockData.type) {
                  case "money":
                    gold.active = false;
                    money.active = true;
                    num.string = unlockData.count.toString();
                    break;

                  case "gold":
                    gold.active = true;
                    money.active = false;
                    num.string = unlockData.count.toString();
                    break;
                }
              }
            }
          }

          for (var _i = 0; _i < 3; _i++) {
            this.slotCount.children[_i + 1].children[0].active = _i < nowGetTank.length;
          } //选的部件高亮

        };

        _proto.onBuyBtnClick = function onBuyBtnClick() {
          var storageData = StorageMgr.instance.storageData;
          var unlockData = GameData.tankUnlockData[GameData.nowChooseTankIndex];

          switch (unlockData.type) {
            case "money":
              if (storageData.money >= unlockData.count) {
                StorageMgr.instance.changeMoney(-unlockData.count);
              } else {
                Platform.instance.showToast("现金不足");
                return;
              }

              break;

            case "gold":
              if (storageData.gold >= unlockData.count) {
                StorageMgr.instance.changeGold(-unlockData.count);
              } else {
                Platform.instance.showToast("黄金不足");
                return;
              }

              break;

            default:
              Platform.instance.showToast("不能购买");
              return;
          }

          var datas = Tool.cloneArray_normal(StorageMgr.instance.storageData.tankData);
          datas[GameData.nowChooseTankIndex].unlockState = true;
          StorageMgr.instance.changeStorgeTankData(datas);
          this.updateUI();
        };

        _proto.onEuquipBtnClick = function onEuquipBtnClick() {
          var nowGetTank = Tool.cloneArray_normal(StorageMgr.instance.storageData.nowChooseTankIndex);

          if (nowGetTank.length >= 3) {
            nowGetTank.shift();
          }

          nowGetTank.push(GameData.nowChooseTankIndex);
          StorageMgr.instance.changeChooseTank(nowGetTank);
          this.updateUI();
        };

        _proto.onUnequipBtnClick = function onUnequipBtnClick() {
          var nowGetTank = Tool.cloneArray_normal(StorageMgr.instance.storageData.nowChooseTankIndex);
          nowGetTank.splice(nowGetTank.indexOf(GameData.nowChooseTankIndex), 1);
          StorageMgr.instance.changeChooseTank(nowGetTank);
          this.updateUI();
        };

        return TankShop;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tankSlots", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TankShopBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, GameData, EventMgr, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "510b7ZAy61MerOzcaR5vZfw", "TankShopBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TankShopBtn = exports('TankShopBtn', (_dec = ccclass('TankShopBtn'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TankShopBtn, _Component);

        function TankShopBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tips = void 0;
          return _this;
        }

        var _proto = TankShopBtn.prototype;

        _proto.onLoad = function onLoad() {
          this.tips = this.node.getChildByName("tips");
        };

        _proto.start = function start() {
          this.tipsUpdate();
          Tool.d2_AddClickEvent(this.node, this, this.openPanel);
          EventMgr.on(EventType.Home_TankTips_Update, this, this.tipsUpdate);
        };

        _proto.openPanel = function openPanel() {
          EventMgr.event(EventType.Home_TankShop_Open);
        };

        _proto.tipsUpdate = function tipsUpdate() {
          var storageData = StorageMgr.instance.storageData;
          var data = storageData.tankData;
          var money = storageData.money;
          var gold = storageData.gold;

          for (var i = 0; i < data.length; i++) {
            if (!data[i].unlockState) {
              switch (GameData.tankUnlockData[i].type) {
                case "null":
                  this.tips.active = false;
                  break;

                case "money":
                  this.tips.active = money >= GameData.tankUnlockData[i].count;
                  break;

                case "gold":
                  this.tips.active = gold >= GameData.tankUnlockData[i].count;
                  break;

                case "sign":
                  this.tips.active = false;
                  break;
              }

              if (this.tips.active) return;
            }
          }
        };

        return TankShopBtn;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, director, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3df2f/RLuhEZpkoNfdN9c9W", "Test", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Test = exports('Test', (_dec = ccclass('Test'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Test, _Component);

        function Test() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Test.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        _proto.goLoad = function goLoad() {
          director.loadScene("Load");
        };

        return Test;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Tool.ts", ['cc', './EnumTypes.ts', './SoundMgr.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Input, Vec2, Color, Vec3, tween, SoundType, SoundMgr;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Input = module.Input;
      Vec2 = module.Vec2;
      Color = module.Color;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      SoundType = module.SoundType;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3378deDU0pKDZeS1ht/W+jO", "Tool", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var Tool = exports('default', (_dec = menu("Tool/Tool"), _dec(_class = /*#__PURE__*/function () {
        function Tool() {}
        /** 按钮事件
          * @param btn 按钮
          * @param caller 事件对象
          * @param callBack 回调函数
          */


        Tool.d2_AddClickEvent = function d2_AddClickEvent(btn, caller, callBack, args, isSound, isTween) {
          if (args === void 0) {
            args = [];
          }

          if (isSound === void 0) {
            isSound = true;
          }

          if (isTween === void 0) {
            isTween = true;
          }

          btn.targetOff(caller);
          /**tween参数 */

          var tweenTime = 0.06;
          var oldSize = btn.scale.x;
          var newSize = oldSize * 0.9;
          var isPressed = false;

          var cbDown = function cbDown() {
            isPressed = true;
            if (isTween) tween(btn).to(tweenTime, {
              scale: new Vec3(newSize, newSize, 1)
            }).start();
          };

          btn.on(Input.EventType.TOUCH_START, cbDown, caller);

          var cbUp = function cbUp() {
            if (isPressed == false) return;
            isPressed = false;

            if (isTween) {
              tween(btn).to(tweenTime, {
                scale: new Vec3(oldSize, oldSize, 1)
              }).call(function () {
                if (callBack) callBack.call(caller, args);
              }).start();
            } else {
              if (callBack) callBack.call(caller, args);
            } // 增加按钮声音


            if (isSound) {
              if (SoundMgr.instacne) SoundMgr.instacne.playSound(SoundType.SelectBtn);
            }
          };

          btn.on(Input.EventType.TOUCH_END, cbUp, caller); // btn.on(Laya.Event.MOUSE_UP, caller, cbUp, args);

          var cbOut = function cbOut() {
            if (isPressed == false) return;
            isPressed = false;
            if (isTween) tween(btn).to(tweenTime, {
              scale: new Vec3(oldSize, oldSize, 1)
            }).start();
          };

          btn.on(Input.EventType.TOUCH_CANCEL, cbOut, caller);
        }
        /** 遍历rootNode的子节点，查找name匹配的节点
        * @param rootNode 根节点
        * @param name 需要查找的节点的name
        */
        ;

        Tool.d3_FindNodeByName = function d3_FindNodeByName(rootNode, name) {
          var targetNode = null;

          var funC = function funC(node) {
            for (var i = 0; i < node.children.length; i++) {
              if (node.children[i].name == name) {
                targetNode = node.children[i];
                return;
              } else {
                funC(node.children[i]);
              }
            }
          };

          funC(rootNode);
          return targetNode;
        }
        /** 遍历rootNode的子节点，查找所有name匹配的节点
        * @param rootNode 根节点
        * @param name 需要查找的节点的name
        */
        ;

        Tool.d3_FindAllNodeByName = function d3_FindAllNodeByName(rootNode, name) {
          var targetNode = [];

          var funC = function funC(node) {
            for (var i = 0; i < node.children.length; i++) {
              if (node.children[i].name == name) {
                targetNode.push(node.children[i]);
              }

              funC(node.children[i]);
            }
          };

          funC(rootNode);
          return targetNode;
        }
        /** 遍历rootNode的子节点，查找含name的节点
        * @param rootNode 根节点
        * @param name 需要查找的节点含有的name
        */
        ;

        Tool.d3_FindNodeHasName = function d3_FindNodeHasName(rootNode, name) {
          var targetNode = null;

          var funC = function funC(node) {
            for (var i = 0; i < node.children.length; i++) {
              if (node.children[i].name.indexOf(name) != -1) {
                targetNode = node.children[i];
                return;
              } else {
                funC(node.children[i]);
              }
            }
          };

          funC(rootNode);
          return targetNode;
        }
        /** 遍历rootNode的子节点，查找所有含name的节点
         *  @param rootNode 根节点
         *  @param name 需要查找的节点含有的name
        */
        ;

        Tool.d3_FindAllNodeHasName = function d3_FindAllNodeHasName(rootNode, name) {
          var targetNode = [];

          var funC = function funC(node) {
            for (var i = 0; i < node.children.length; i++) {
              if (node.children[i].name.indexOf(name) != -1) {
                targetNode.push(node.children[i]);
              }

              funC(node.children[i]);
            }
          };

          funC(rootNode);
          return targetNode;
        }
        /**将所有第一级子物体的active设为false */
        ;

        Tool.unactiveAllChildren = function unactiveAllChildren(node) {
          for (var i = 0; i < node.children.length; i++) {
            node.children[i].active = false;
          }
        }
        /**只激活对应index的子物体 */
        ;

        Tool.activeIndexInChildren = function activeIndexInChildren(node, index) {
          for (var i = 0; i < node.children.length; i++) {
            node.children[i].active = i == index;
          }
        }
        /**二维向量相减 */
        ;

        Tool.vector2Reduce = function vector2Reduce(a, b) {
          return new Vec2(a.x - b.x, a.y - b.y);
        }
        /** 2D向量夹角 顺时针(0,180)，逆时针(0,-180) ,v2相对与v1的什么方向 */
        ;

        Tool.getAngle2DWay = function getAngle2DWay(v1, v2) {
          var a = Vec2.dot(v1, v2);
          var b = Vec2.len(v1) * Vec2.len(v2);
          var angle;

          if (b == 0) {
            angle = 0;
          } else {
            angle = Math.acos(a / b) * 180 / Math.PI;
            var axis = v1.x * v2.y - v2.x * v1.y;

            if (axis > 0) {
              angle *= 1;
            } else if (axis < 0) {
              angle *= -1;
            } else {
              angle = angle;
            }
          }

          return angle;
        }
        /**随机抽取数组中一个元素(不删除) */
        ;

        Tool.getRandomInArray = function getRandomInArray(array) {
          if (array.length) {
            var r = Math.random() * array.length;
            r = Math.floor(r);
            return array[r];
          } else {
            console.error("传入错误参数,返回空");
            return null;
          }
        }
        /**依照比重随机抽取数组中一个元素(不删除) */
        ;

        Tool.getRandomByArray_Precent = function getRandomByArray_Precent(array, weightArray) {
          if (array.length != weightArray.length) {
            console.log("长度不一致", array, weightArray);
            return null;
          }

          var maxWeight = 0;

          for (var i = 0; i < weightArray.length; i++) {
            maxWeight += weightArray[i];
          }

          var percentAxis = 0;
          var axis = Math.random();

          for (var _i = 0; _i < weightArray.length; _i++) {
            percentAxis += weightArray[_i] / maxWeight; // console.log(percentAxis, axis);

            if (axis <= percentAxis) {
              return array[_i];
            }
          }

          return null;
        }
        /**随机抽取数组中一个元素(删除) */
        ;

        Tool.takeRandomInArray = function takeRandomInArray(array) {
          if (array.length) {
            var r = Math.random() * array.length;
            r = Math.floor(r);
            var obj = array[r];
            array.splice(r, 1);
            return obj;
          } else {
            console.error("传入错误参数,返回空");
            return null;
          }
        }
        /**从比重得到几率 */
        ;

        Tool.getPrecentFromWeight = function getPrecentFromWeight(weightArray) {
          var maxWeight = 0;

          for (var i = 0; i < weightArray.length; i++) {
            maxWeight += weightArray[i];
          }

          var percentAxis = 0;
          var precentArray = [];

          for (var _i2 = 0; _i2 < weightArray.length; _i2++) {
            if (maxWeight == 0) {
              precentArray.push(1 / weightArray.length);
              console.log("比重传入全部都是0，返回平均数组");
            } else {
              percentAxis = weightArray[_i2] / maxWeight;
              precentArray.push(percentAxis);
            }
          }

          return precentArray;
        }
        /**随机范围数值 a是小，b是大*/
        ;

        Tool.randomNumber = function randomNumber(a, b) {
          return a + (b - a) * Math.random();
        }
        /**随机范围整数（包含最大值），a是小，b是大 */
        ;

        Tool.randomInt = function randomInt(a, b) {
          return Math.floor(a + (b + 1 - a) * Math.random());
        }
        /**一半几率 */
        ;

        Tool.halfPercent = function halfPercent() {
          return Math.random() < 0.5;
        }
        /**指定几率 */
        ;

        Tool.percent = function percent(axis) {
          return Math.random() < axis;
        }
        /**复制数组 */
        ;

        Tool.cloneArray_normal = function cloneArray_normal(array) {
          var outArray = [].concat(array);
          return outArray;
        };

        Tool.cloneArray_Obj = function cloneArray_Obj(array) {
          var outArray = JSON.parse(JSON.stringify(array));
          return outArray;
        }
        /**从十六进制值获取颜色Color */
        ;

        Tool.d3_getRgbByHex = function d3_getRgbByHex(_hexColor) {
          var color = [],
              rgb = [];

          var hexColor = _hexColor.replace(/#/, "");

          if (hexColor.length == 3) {
            // 处理 "#abc" 成 "#aabbcc"
            var tmp = [];

            for (var i = 0; i < 3; i++) {
              tmp.push(hexColor.charAt(i) + hexColor.charAt(i));
            }

            hexColor = tmp.join("");
          }

          for (var i = 0; i < 3; i++) {
            color[i] = "0x" + hexColor.substr(i * 2, 2); // rgb.push(parseInt(Number(color[i])));

            rgb.push(parseInt(color[i]));
          }

          return new Color(rgb[0], rgb[1], rgb[2], 255);
        }
        /**获取角度 */
        ;

        Tool.d3_getAngle = function d3_getAngle(v1, v2) {
          var a = Vec3.dot(v1, v2);
          var b = v1.length() * v2.length();

          if (b == 0) {
            if (v1.z > v2.z) return 0;else if (v1.z < v2.z) return 180;
            if (v1.y > v2.y) return 90;else if (v1.y < v2.y) return -90;
          }

          var cosAngle = a / b;

          if (cosAngle < -1) {
            cosAngle = -1;
          }

          if (cosAngle > 1) {
            cosAngle = 1;
          }

          var angle = Math.acos(cosAngle) * 180 / Math.PI;
          return angle;
        }
        /**获得法线对应平面投影 */
        ;

        Tool.d3_getProjection = function d3_getProjection(dir, normal) {
          var upProject = normal.multiplyScalar(Vec3.dot(dir, normal));
          var downProject = new Vec3();
          Vec3.subtract(downProject, dir, upProject);
          return downProject;
        }
        /**编辑器存储文件(Editor状态专用)
         * @param path 路径+文件名+格式名
         * @param data 数据
         */
        ;

        Tool.local_SaveData = function local_SaveData(path, data) {
          Editor.Message.send('asset-db', "create-asset", "db://assets/" + path, data);
        }
        /**金币收集 */
        // static coinCollectAnim(url, startPos, endPos, parent, amount = 15, callBack = null) {
        //     var amountTmp = amount;
        //     for (var i = 0; i < amount; i++) {
        //         let coin = Laya.Pool.getItemByClass("coin", Laya.Image);
        //         coin.skin = url;
        //         coin.x = startPos.x;
        //         coin.y = startPos.y;
        //         coin.scale(0.8, 0.8);
        //         parent.addChild(coin);
        //         let time = 300 + Math.random() * 100 - 50;  Laya.Tween.to(coin, { x: coin.x + Math.random() * 250 - 125, y: coin.y + Math.random() * 250 - 125 }, time);
        //         Laya.timer.once(time + 50, this, function () {
        //             Laya
        //       .Tween.to(coin, { x: endPos.x, y: endPos.y }, 400, null, new Laya.Handler(this, function () {
        //                 parent.removeChild(coin);
        //                 Laya.Pool.recover("coin", coin);
        //                 amountTmp--;
        //                 if (amountTmp == 0 && callBack) callBack(parent);
        //             }));
        //         })
        //     }
        // }
        ;

        return Tool;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TopState.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './SoundMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, instantiate, Vec3, Component, EventType, SoundType, GameData, EventMgr, SoundMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
      SoundType = module.SoundType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      SoundMgr = module.SoundMgr;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fdd2fFnCAxAXa8qSBSgu+ZQ", "TopState", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TopState = exports('TopState', (_dec = ccclass('TopState'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TopState, _Component);

        function TopState() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.targetLabel = void 0;
          _this.nowTime = GameData.singleTime;
          _this.playerCount = void 0;
          _this.enemyCount = void 0;
          _this.playerScore = void 0;
          _this.enemyScore = void 0;
          return _this;
        }

        var _proto = TopState.prototype;

        _proto.onLoad = function onLoad() {
          this.targetLabel = this.node.getChildByName("target").getComponentInChildren(Label);
        };

        _proto.start = function start() {
          EventMgr.on(EventType.TopState_Alive_Update, this, this.peopleCountUpdate);
          EventMgr.on(EventType.TopState_Score_Update, this, this.scoreUpdate);
          this.peopleCountInit();
          this.scoreInit();

          switch (GameData.startGameMode) {
            case "team":
              this.targetLabel.string = "率先击杀" + GameData.teamKillWinScore.toString();
              break;

            case "single":
              EventMgr.on(EventType.Game_Single_StartTime, this, this.startSingleCount);
              break;
          }
        };

        _proto.startSingleCount = function startSingleCount() {
          EventMgr.off(EventType.Game_Single_StartTime, this, this.startSingleCount);
          this.schedule(this.singleUpdate, 1);
        };

        _proto.singleUpdate = function singleUpdate() {
          this.nowTime--;
          this.targetLabel.string = "剩余时间：" + this.nowTime;

          if (this.nowTime <= 0) {
            this.unschedule(this.singleUpdate);
          }

          if (this.nowTime <= 30) {
            GameData.isPlayingCountDown = true;
            SoundMgr.instacne.playSound(SoundType.Beep);
          }
        } //#region 玩家存活人数
        ;

        _proto.peopleCountInit = function peopleCountInit() {
          this.playerCount = this.node.getChildByName("PlayerCount");
          this.enemyCount = this.node.getChildByName("EnemyCount");

          for (var i = 1; i < GameData.players.length; i++) {
            var obj = instantiate(this.playerCount.children[0]);
            this.playerCount.addChild(obj);
          }

          for (var _i = 1; _i < GameData.enemies.length; _i++) {
            var _obj = instantiate(this.enemyCount.children[0]);

            this.enemyCount.addChild(_obj);
          }
        };

        _proto.peopleCountUpdate = function peopleCountUpdate(data) {
          for (var i = 0; i < this.playerCount.children.length; i++) {
            this.playerCount.children[i].active = i < data.playerCount;
          }

          for (var _i2 = 0; _i2 < this.enemyCount.children.length; _i2++) {
            this.enemyCount.children[_i2].active = _i2 < data.enemyCount;
          }
        } // #endregion
        //#region 分数更新
        ;

        _proto.scoreInit = function scoreInit() {
          this.playerScore = this.node.getChildByName("PlayerScore");
          this.enemyScore = this.node.getChildByName("EnemyScore");
        };

        _proto.scoreUpdate = function scoreUpdate(data) {
          if (data.playerScore >= data.enemyScore) {
            this.playerScore.children[1].children[0].setRotationFromEuler(new Vec3(0, 0, 0));
            this.enemyScore.children[1].children[0].setRotationFromEuler(new Vec3(0, 0, 180));
          } else {
            this.playerScore.children[1].children[0].setRotationFromEuler(new Vec3(0, 0, 180));
            this.enemyScore.children[1].children[0].setRotationFromEuler(new Vec3(0, 0, 0));
          }

          this.playerScore.getComponentInChildren(Label).string = data.playerScore.toString();
          this.enemyScore.getComponentInChildren(Label).string = data.enemyScore.toString();
        } // #endregion
        ;

        return TopState;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Tool.ts', './EventMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, view, Vec2, input, Input, Component, Tool, EventMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      view = module.view;
      Vec2 = module.Vec2;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }],
    execute: function () {
      exports('TouchEventType', void 0);

      var _dec, _dec2, _class, _class2;

      cclegacy._RF.push({}, "034e3b33zdA+5k3ZdMJZ7Xa", "TouchMgr", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var Ray = geometry.Ray;
      var viewSize = view.getVisibleSize();
      var TouchEventType;

      (function (TouchEventType) {
        TouchEventType["start"] = "touchStart";
        TouchEventType["move"] = "touchMove";
        TouchEventType["end"] = "touchEnd";
        TouchEventType["getAxis"] = "GetAxis";
        TouchEventType["slideWay"] = "slideWay";
        TouchEventType["singleTouchStart"] = "singleTouchStart";
        TouchEventType["singleTouchMove"] = "singleTouchMove";
        TouchEventType["singleTouchEnd"] = "singleTouchEnd";
        TouchEventType["secondTouchStart"] = "secondTouchStart";
        TouchEventType["secondTouchMove"] = "secondTouchMove";
        TouchEventType["secondTouchEnd"] = "secondTouchEnd";
        TouchEventType["getAxisAlways"] = "getAxisAlways";
        TouchEventType["joyAxis"] = "joyAxis";
        TouchEventType["keyDown"] = "keyDown";
        TouchEventType["camRayClickCheck"] = "camRayClickCheck";
      })(TouchEventType || (TouchEventType = exports('TouchEventType', {})));

      var TouchMgr = exports('TouchMgr', (_dec = ccclass('TouchMgr'), _dec2 = menu('Mgr/TouchMgr'), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TouchMgr, _Component);

        function TouchMgr() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.firstId = -1;
          _this.secondId = -1;
          _this.firstOriginalPoint = new Vec2();
          _this.secondOriginalPoint = new Vec2();
          _this.isSecond = false;
          _this.startPos = void 0;
          _this.nowPos = void 0;
          _this.isDown = void 0;
          _this.touchTimer = void 0;
          _this.orignalHorizontal = 0;
          _this.orignalAxis = 0;
          _this.orignalHorizontalAlways = 0;
          _this.orignalAxisAlways = 0;
          _this.camRay = void 0;
          return _this;
        }

        var _proto = TouchMgr.prototype;

        _proto.onLoad = function onLoad() {
          TouchMgr.instance = this;
        };

        _proto.onEnable = function onEnable() {
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          input.on(Input.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
          input.on(Input.EventType.KEY_DOWN, this.keyDown, this);
          viewSize = view.getVisibleSize();
        };

        _proto.onDisable = function onDisable() {
          EventMgr.clearTarget(this);
        };

        _proto.keyDown = function keyDown(e) {
          EventMgr.event(TouchEventType.keyDown, e.keyCode);
        };

        _proto.onTouchStart = function onTouchStart(e) {
          // console.log("触摸事件ID",e.getID())
          if (this.isSecond == false) {
            if (this.firstId == -1) {
              this.checkOut(e);
              this.firstId = e.getID();
              EventMgr.event(TouchEventType.singleTouchStart, e); // console.log("单指按下");

              this.firstOriginalPoint = new Vec2(e.getLocationX() / viewSize.width, e.getLocationY() / viewSize.height);
            } else if (this.firstId != e.getID() && this.secondId == -1) {
              this.secondId = e.getID();
              this.isSecond = true;
              EventMgr.event(TouchEventType.secondTouchStart, e); // console.log("双指按下");

              this.secondOriginalPoint = new Vec2(e.getLocationX() / viewSize.width, e.getLocationY() / viewSize.height);
            }
          } else {
            if (this.firstId == -1) {
              this.firstId = e.getID();
              this.firstOriginalPoint = new Vec2(e.getLocationX() / viewSize.width, e.getLocationY() / viewSize.height);
            } else if (this.secondId == -1) {
              this.secondId = e.getID();
              this.secondOriginalPoint = new Vec2(e.getLocationX() / viewSize.width, e.getLocationY() / viewSize.height);
            }
          }

          this.checkOutAlways(e);
        };

        _proto.onTouchMove = function onTouchMove(e) {
          if (this.isSecond == false) {
            if (e.getID() == this.firstId) {
              this.checkWay(e);
              this.checkOut(e);
              EventMgr.event(TouchEventType.singleTouchMove, e); // console.log("单指移动");
            }
          } else {
            if (this.firstId != -1 && this.secondId != -1) {
              var data = {
                distance: 0,
                angle: 0
              };
              var lastDir = Tool.vector2Reduce(this.secondOriginalPoint, this.firstOriginalPoint);
              var lastDistance = Vec2.len(lastDir);
              var nowDir;

              if (e.getID() == this.firstId) {
                nowDir = Tool.vector2Reduce(this.secondOriginalPoint, new Vec2(e.getLocation().x / viewSize.width, e.getLocation().y / viewSize.height));
              } else if (e.getID() == this.secondId) {
                nowDir = Tool.vector2Reduce(new Vec2(e.getLocation().x / viewSize.width, e.getLocation().y / viewSize.height), this.firstOriginalPoint);
              }

              if (nowDir) {
                var nowDistance = Vec2.len(nowDir);
                data.distance = nowDistance - lastDistance;
                data.angle = Tool.getAngle2DWay(lastDir, nowDir);
                EventMgr.event(TouchEventType.secondTouchMove, data); // console.log("双指移动", data.distance, data.angle);
              }
            }
          }

          if (e.getID() == this.firstId) {
            this.firstOriginalPoint = new Vec2(new Vec2(e.getLocation().x / viewSize.width, e.getLocation().y / viewSize.height));
          }

          if (e.getID() == this.secondId) {
            this.secondOriginalPoint = new Vec2(new Vec2(e.getLocation().x / viewSize.width, e.getLocation().y / viewSize.height));
          }

          this.checkWayAlways(e);
        };

        _proto.onTouchEnd = function onTouchEnd(e) {
          this.checkOutAlways(e);

          if (e.getID() == this.firstId) {
            this.firstOriginalPoint = new Vec2(new Vec2(e.getLocation().x / viewSize.width, e.getLocation().y / viewSize.height));
          }

          if (e.getID() == this.secondId) {
            this.secondOriginalPoint = new Vec2(new Vec2(e.getLocation().x / viewSize.width, e.getLocation().y / viewSize.height));
          }

          if (this.isSecond == false) {
            if (e.getID() == this.firstId) {
              this.checkOut(e);
              EventMgr.event(TouchEventType.singleTouchEnd, e);
              this.firstId = -1; // console.log("单指松开");
            }
          } else {
            if (e.getID() == this.firstId) {
              this.firstId = -1;
            }

            if (e.getID() == this.secondId) {
              this.secondId = -1;
            }

            if (this.firstId == -1 && this.secondId == -1) {
              // console.log("双指松开");
              this.isSecond = false;
            }
          }
        };

        _proto.WayCheck = function WayCheck() {
          var dir = Tool.vector2Reduce(this.nowPos, this.startPos);
          var scale = Vec2.len(dir);
          var sensitivity = 100;

          if (scale > sensitivity) {
            var angle = Math.atan2(dir.y, dir.x) / Math.PI * 180;
            this.isDown = false; //  EventMgr.event(TouchEventType.slideWay, { call: call, angle: angle, dir: dir })
          }

          this.startPos = this.nowPos;
        };

        _proto.onDestroy = function onDestroy() {
          if (this.touchTimer) {
            clearTimeout(this.touchTimer);
          }
        } //左右参数处理（建议打包）
        ; //玩家用
        //查看方向（传入差值即可（位置中点0，范围-0.5~0.5，但传入差值为-1~1）


        _proto.checkWay = function checkWay(e) {
          var horizontal = e.getLocationX() - this.orignalHorizontal;
          var axis = e.getLocationY() - this.orignalAxis; //移动接口

          EventMgr.event(TouchEventType.getAxis, [{
            x: horizontal,
            y: axis
          }]);
        } //按下和松开的时候，重置初始点
        ;

        _proto.checkOut = function checkOut(e) {
          this.orignalHorizontal = e.stageX;
          this.orignalAxis = e.stageY;
        };

        _proto.checkWayAlways = function checkWayAlways(e) {
          var horizontal = e.getUILocation().x / viewSize.width - this.orignalHorizontalAlways;
          var axis = e.getUILocation().y / viewSize.height - this.orignalAxisAlways; //移动接口

          this.checkOutAlways(e);
          EventMgr.event(TouchEventType.getAxisAlways, {
            x: horizontal,
            y: axis,
            touchId: e.getID()
          });
        };

        _proto.checkOutAlways = function checkOutAlways(e) {
          this.orignalHorizontalAlways = e.getUILocation().x / viewSize.width;
          this.orignalAxisAlways = e.getUILocation().y / viewSize.height;
        } //#region 摄像机射线检测(需要物理)
        ;

        _proto.camRayInit = function camRayInit() {
          input.on(Input.EventType.TOUCH_START, this.camRayCheck, this);
        };

        _proto.camRayCheck = function camRayCheck(e) {// this.camRay = new Ray();
          // cinestation.mainCamera.screenPointToRay(e.getLocation().x, e.getLocation().y, this.camRay);
          // if (PhysicsSystem.instance.raycastClosest(this.camRay)) {
          // 	EventMgr.event(TouchEventType.camRayClickCheck, PhysicsSystem.instance.raycastClosestResult.clone());
          // } else {
          // 	EventMgr.event(TouchEventType.camRayClickCheck, null);
          // }
        };

        _proto.camRayOff = function camRayOff() {
          input.off(Input.EventType.TOUCH_START, this.camRayCheck, this);
        } // #endregion
        ;

        return TouchMgr;
      }(Component), _class2.instance = void 0, _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Tower.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './TowerUI.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, Component, CampType, GameData, TowerUI;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      CampType = module.CampType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      TowerUI = module.TowerUI;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4f30500bjtOVLy64BBnwkoX", "Tower", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Tower = exports('Tower', (_dec = ccclass('Tower'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Tower, _Component);

        function Tower() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.towerId = 0;
          _this.progress = 0;
          _this.nowState = 0;
          _this.range_raidus = 25;
          _this.range_raidus_pow = 625;
          _this.herosInTower = [];
          _this.ringRender = void 0;
          _this.ringRnederHandle = void 0;
          return _this;
        }

        var _proto = Tower.prototype;

        _proto.onLoad = function onLoad() {
          this.range_raidus_pow = this.range_raidus * this.range_raidus; // this.ringRender = this.node.getChildByName("Ring").getComponent(MeshRenderer);
          // this.ringRnederHandle = this.ringRender.material.passes[0].getHandle("mainColor");
        };

        _proto.update = function update(dt) {
          //判断在塔范围内的Hero
          this.herosInTower.length = 0;
          var heroPos;
          var dis;

          for (var i = 0; i < GameData.heros.length; i++) {
            if (GameData.heros[i].isDead) continue;
            heroPos = GameData.heros[i].node.getWorldPosition();
            dis = Vec3.squaredDistance(this.node.getWorldPosition(), heroPos);

            if (dis < this.range_raidus_pow) {
              this.herosInTower.push(GameData.heros[i]);
            }
          } //判断是否有需要击打的部分
          //判断在场的Hero是否全部为Player或Enemy


          var heroCamp = null;

          if (this.herosInTower.length > 0) {
            heroCamp = this.herosInTower[0].camp;
          }

          for (var _i = 0; _i < this.herosInTower.length; _i++) {
            if (this.herosInTower[_i].camp != heroCamp) {
              //如果有其他阵营的人，进度条不会变化
              heroCamp = null;
              break;
            }
          } //进度条变化情况


          var isPlayerShow = false;

          if (this.herosInTower.length == 0) {
            //没人
            switch (this.nowState) {
              case -1:
                this.progress -= dt / GameData.tower_controlBackTime;

                if (this.progress < -1) {
                  this.progress = -1;
                }

                break;

              case 0:
                if (this.progress < 0) {
                  this.progress += dt / GameData.tower_controlBackTime;

                  if (this.progress > 0) {
                    this.progress = 0;
                  }
                } else if (this.progress > 0) {
                  this.progress -= dt / GameData.tower_controlBackTime;

                  if (this.progress < 0) {
                    this.progress = 0;
                  }
                }

                break;

              case 1:
                this.progress += dt / GameData.tower_controlBackTime;

                if (this.progress > 1) {
                  this.progress = 1;
                }

                break;
            }
          } else {
            if (heroCamp != null) {
              //如果全部为同一阵营
              switch (heroCamp) {
                case CampType.Player:
                  this.progress += dt / GameData.tower_controlTime * this.herosInTower.length;

                  if (this.progress > 1) {
                    this.progress = 1;
                    this.nowState = 1;
                  } else if (this.progress >= 0) {
                    if (this.nowState == -1) this.nowState = 0;
                  }

                  break;

                case CampType.Enemy:
                  this.progress -= dt / GameData.tower_controlTime * this.herosInTower.length;

                  if (this.progress < -1) {
                    this.progress = -1;
                    this.nowState = -1;
                  } else if (this.progress <= 0) {
                    if (this.nowState == 1) this.nowState = 0;
                  }

                  break;
              }
            } //更新玩家所在塔UI


            for (var _i2 = 0; _i2 < this.herosInTower.length; _i2++) {
              if (this.herosInTower[_i2].isPlayerCtrl) {
                isPlayerShow = true;
                break;
              }
            }
          } //是否更新塔的UI


          if (TowerUI.instance && isPlayerShow) ; //更新塔的3D圆环
          // let color = new Color(255, 255, 255, 155);
          // if (this.nowState == 1) {
          //     color = GameData.playerColor.clone();
          // } else if (this.nowState == -1) {
          //     color = GameData.enemyColor.clone();
          // }
          // color.a = 155;
          // this.ringRender.material.passes[0].setUniform(this.ringRnederHandle, color)
        };

        return Tower;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerUI_Small.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameData.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Sprite, Component, GameData, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "62818oOpFJNBIE0d7UOGa4h", "TowerUI_Small", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TowerUI_Small = exports('TowerUI_Small', (_dec = ccclass('TowerUI_Small'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerUI_Small, _Component);

        function TowerUI_Small() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ring = void 0;
          _this.mid = void 0;
          _this.word = void 0;
          return _this;
        }

        var _proto = TowerUI_Small.prototype;

        _proto.onLoad = function onLoad() {
          this.ring = this.node.getChildByName("ring");
          this.mid = this.node.getChildByName("mid");
          this.word = this.node.getChildByName("word");
        };

        _proto.towerUpdate = function towerUpdate(data) {
          // console.log(data);
          this.ring.active = data.isShow;
          this.mid.active = data.isShow;
          this.word.active = data.isShow;

          if (data.isShow) {
            var campIndex = data.progress >= 0 ? 0 : 1; //文字更新

            for (var i = 0; i < this.word.children.length; i++) {
              this.word.children[i].active = data.towerId == i;
            } //进度更新


            var progress = campIndex == 0 ? data.progress : -data.progress;
            Tool.unactiveAllChildren(this.mid);
            Tool.unactiveAllChildren(this.ring);
            var mid = this.mid.children[campIndex];
            var ring = this.ring.children[campIndex];
            mid.active = true;
            ring.active = true;
            mid.getComponent(Sprite).fillRange = progress;
            ring.getComponent(Sprite).fillRange = -data.progress;
          }
        };

        _proto.follow = function follow(node3D, offsetVec3) {
          /* 
          Get the 3D node's world position (node3DWorldPos),
          and change it to the position on Canvas (node3DUIPos),
          then you can set the 2d node's position according to the node3DUIPos.
          */
          var node3DWorldPos = node3D.getWorldPosition();
          node3DWorldPos.add(offsetVec3);
          if (!GameData.cam) return;
          var node3DUIPos = GameData.cam.convertToUINode(node3DWorldPos, this.node.parent);
          this.node.setPosition(node3DUIPos);
        };

        return TowerUI_Small;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './DataClass.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Sprite, Component, TowerUIData, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      TowerUIData = module.TowerUIData;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "661deZ2KF9IvLLgV/qukIRS", "TowerUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TowerUI = exports('TowerUI', (_dec = ccclass('TowerUI'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerUI, _Component);

        function TowerUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ring = void 0;
          _this.mid = void 0;
          _this.word = void 0;
          _this.allData = [];
          return _this;
        }

        var _proto = TowerUI.prototype;

        _proto.onLoad = function onLoad() {
          TowerUI.instance = this;
          this.ring = this.node.getChildByName("ring");
          this.mid = this.node.getChildByName("mid");
          this.word = this.node.getChildByName("word");
        };

        _proto.lateUpdate = function lateUpdate() {
          if (this.allData.length > 0) {
            for (var i = 0; i < this.allData.length; i++) {
              if (this.allData[i].isShow) {
                this.towerUpdate(this.allData[i]);
                break;
              }
            }

            this.allData.length = 0;
          } else {
            this.towerUpdate(new TowerUIData(false));
          }
        };

        _proto.towerUpdate = function towerUpdate(data) {
          // console.log(data);
          this.ring.active = data.isShow;
          this.mid.active = data.isShow;
          this.word.active = data.isShow;

          if (data.isShow) {
            var campIndex = data.progress >= 0 ? 0 : 1; //文字更新

            for (var i = 0; i < this.word.children.length; i++) {
              this.word.children[i].active = data.towerId == i;
            } //进度更新


            var progress = campIndex == 0 ? data.progress : -data.progress;
            Tool.unactiveAllChildren(this.mid);
            Tool.unactiveAllChildren(this.ring);
            var mid = this.mid.children[campIndex];
            var ring = this.ring.children[campIndex];
            mid.active = true;
            ring.active = true;
            mid.getComponent(Sprite).fillRange = progress;
            ring.getComponent(Sprite).fillRange = -data.progress;
          }
        };

        return TowerUI;
      }(Component), _class2.instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TrackedHandler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Math.ts', './CameraHandler.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Vec3, quarticDamp, Vec3_closeTo, CameraHandler;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }, function (module) {
      quarticDamp = module.quarticDamp;
      Vec3_closeTo = module.Vec3_closeTo;
    }, function (module) {
      CameraHandler = module.CameraHandler;
    }],
    execute: function () {
      cclegacy._RF.push({}, "394f8KsH69BrKYjKrRxsXm7", "TrackedHandler", undefined);

      var __worldPos = new Vec3();

      var TrackedHandler = exports('TrackedHandler', /*#__PURE__*/function (_CameraHandler) {
        _inheritsLoose(TrackedHandler, _CameraHandler);

        function TrackedHandler() {
          return _CameraHandler.apply(this, arguments) || this;
        }

        var _proto = TrackedHandler.prototype;

        _proto.updateCamera = function updateCamera(deltaTime) {
          var vcam = this._vcam;
          var tracked = vcam.body.tracked;

          if (tracked.path) {
            if (tracked.autoDolly.enable && vcam.follow) {
              var wpos = vcam.follow.worldPosition;
              var progress = tracked.path.findClosestPoint(wpos, tracked.progress, tracked.autoDolly.searchRadius, tracked.autoDolly.searchResolution); //TODO：startSegment

              tracked.progress = quarticDamp(tracked.progress, progress, tracked.damping, deltaTime);
            }

            tracked.path.evaluatePosition(__worldPos, tracked.progress);
          }

          if (!Vec3_closeTo(__worldPos, vcam.node.worldPosition)) {
            vcam.node.worldPosition = __worldPos;
          }
        };

        return TrackedHandler;
      }(CameraHandler));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Types.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "40519iR4mJJb649sETbQDxH", "Types", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UMTrack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy, _decorator;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "66481x39YFPPLMhufOD40BX", "UMTrack", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UMTrack = exports('UMTrack', (_dec = ccclass('UMTrack'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function UMTrack() {}

        var _proto = UMTrack.prototype; // 1.初始化

        _proto.init = function init() {} // 2.上报事件(可选)   UMTrack.instance.trackEvent(UMEvent.Loading_in);
        ;

        _proto.trackEvent = function trackEvent(evenId, param) {} // 3.关卡统计(可选)
        ;

        _proto.onStart = function onStart(stageId, stageName) {};

        _proto.onEnd = function onEnd(stageId, stageName) {};

        _proto.onInitLevel = function onInitLevel(levelId, levelName) {};

        _proto.onSetLevel = function onSetLevel(levelId, levelName) {};

        _createClass(UMTrack, null, [{
          key: "instance",
          get: function get() {
            if (UMTrack._instance === null) {
              UMTrack._instance = new UMTrack();
            }

            return UMTrack._instance;
          },
          set: function set(value) {
            UMTrack._instance = value;
          }
        }]);

        return UMTrack;
      }(), _class2._instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UpgradeBtn.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, EventType, GameData, EventMgr, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "eb6aapYzdVEy7DvowkroJQa", "UpgradeBtn", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UpgradeBtn = exports('UpgradeBtn', (_dec = ccclass('UpgradeBtn'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UpgradeBtn, _Component);

        function UpgradeBtn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tips = void 0;
          return _this;
        }

        var _proto = UpgradeBtn.prototype;

        _proto.onLoad = function onLoad() {
          this.tips = this.node.getChildByName("tips");
        };

        _proto.start = function start() {
          this.tipsUpdate();
          Tool.d2_AddClickEvent(this.node, this, this.openPanel);
          EventMgr.on(EventType.Home_UpgradeTips_Update, this, this.tipsUpdate);
        };

        _proto.openPanel = function openPanel() {
          EventMgr.event(EventType.Home_Upgrade_Open);
        };

        _proto.tipsUpdate = function tipsUpdate() {
          var storageData = StorageMgr.instance.storageData;
          var data = storageData.tankData;
          var money = storageData.money;
          var gold = storageData.gold;
          this.tips.active = false;

          for (var i = 0; i < data.length; i++) {
            if (data[i].unlockState) //坦克是否拥有
              {
                //坦克部件
                for (var j = 0; j < data[i].partLevel.length; j++) {
                  if (data[i].partLevel[j] < 9) {
                    if (money >= GameData.partUpgradeCostFormula(i, data[i].partLevel[j], data[i].id)) {
                      this.tips.active = true;
                      return;
                    }
                  }
                } //技术部件


                for (var _j = 0; _j < data[i].techState.length; _j++) {
                  if (!data[i].techState[_j]) {
                    //技术部件是否拥有
                    switch (GameData.techUpgradeCostType[_j]) {
                      case "money":
                        if (money >= GameData.techUpgradeCostCount[_j]) {
                          this.tips.active = true;
                          return;
                        }

                        break;

                      case "gold":
                        if (gold >= GameData.techUpgradeCostCount[_j]) {
                          this.tips.active = true;
                          return;
                        }

                        break;
                    }
                  }
                }
              }
          }
        };

        return UpgradeBtn;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UpgradePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './GameData.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './UMTrack.ts', './Tool.ts', './StatsComp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, CCString, Label, RichText, Sprite, Component, EventType, GameData, EventMgr, StorageMgr, Platform, UMTrack, Tool, StatsComp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      CCString = module.CCString;
      Label = module.Label;
      RichText = module.RichText;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      GameData = module.default;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      StatsComp = module.StatsComp;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "7e820jtH7dBdLMyPCKSIfpU", "UpgradePanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UpgradePanel = exports('UpgradePanel', (_dec = ccclass('UpgradePanel'), _dec2 = property([SpriteFrame]), _dec3 = property([SpriteFrame]), _dec4 = property([CCString]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UpgradePanel, _Component);

        function UpgradePanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "slots", _descriptor, _assertThisInitialized(_this));

          _this.statPanel = void 0;
          _this.standardNum = void 0;
          _this.partScroll = void 0;
          _this.techScroll = void 0;
          _this.part = void 0;
          _this.tech = void 0;
          _this.info = void 0;
          _this.isBuy = void 0;
          _this.skillCountLayout = void 0;
          _this.buyBtn = void 0;
          _this.returnBtn = void 0;
          _this.leftBtn = void 0;
          _this.rightBtn = void 0;
          _this.tankName = void 0;
          _this.partBtns = [];
          _this.techBtns = [];
          _this.techName = ["引燃弹头", "合理利用", "高效修复", "临危不惧", "精准打击", "高级电控"];

          _initializerDefineProperty(_this, "techIcons", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "techWords", _descriptor3, _assertThisInitialized(_this));

          _this.nowChooseType = "part";
          _this.nowChooseId = 0;
          _this.nowBuyType = "money";
          _this.nowBuyCost = 0;
          return _this;
        }

        var _proto = UpgradePanel.prototype;

        _proto.onLoad = function onLoad() {
          this.returnBtn = this.node.getChildByName("ReturnBtn");
          this.leftBtn = this.node.getChildByPath("TankSelect/PreBtn");
          this.rightBtn = this.node.getChildByPath("TankSelect/NextBtn");
          this.tankName = this.node.getChildByPath("TankSelect/Name").getComponent(Label);
          this.statPanel = this.node.getChildByName("Stats").getComponent(StatsComp);
          this.standardNum = this.node.getChildByPath("Standard/Num").getComponent(RichText);
          this.partScroll = this.node.getChildByName("PartScroll");
          this.techScroll = this.node.getChildByName("SkillScroll");
          this.part = this.node.getChildByName("Part");
          this.tech = this.node.getChildByName("Skill");
          this.info = this.node.getChildByName("Info");
          this.partBtns = Tool.d3_FindAllNodeHasName(this.partScroll, "Part");
          var content = this.techScroll.getChildByPath("view/content");

          for (var i = 0; i < content.children.length; i++) {
            this.techBtns.push(content.children[i]);
          }

          this.skillCountLayout = this.node.getChildByPath("SkillCount/layout");
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.returnBtn, this, this.closePanel);
          Tool.d2_AddClickEvent(this.leftBtn, this, this.selectLeft);
          Tool.d2_AddClickEvent(this.rightBtn, this, this.selectRight);
          Tool.d2_AddClickEvent(this.part, this, this.selectPart);
          Tool.d2_AddClickEvent(this.tech, this, this.selectTech);

          for (var i = 0; i < this.partBtns.length; i++) {
            Tool.d2_AddClickEvent(this.partBtns[i], this, this.choose, [i]);
          }

          for (var _i = 0; _i < this.techBtns.length; _i++) {
            Tool.d2_AddClickEvent(this.techBtns[_i], this, this.choose, [_i]);
          }
        };

        _proto.closePanel = function closePanel() {
          this.node.active = false;
          EventMgr.event(EventType.Home_TankColor_Change);
          EventMgr.event(EventType.Home_Main_Open);
          console.log("关闭升级界面");
        };

        _proto.onEnable = function onEnable() {
          console.log("打开升级界面");
          this.selectPart();
          this.updateUI();
        };

        _proto.updateUI = function updateUI() {
          //选择坦克的数据
          var storageData = StorageMgr.instance.storageData;
          var tankData = Tool.cloneArray_Obj(storageData.tankData);
          var data = tankData[GameData.nowChooseTankIndex];
          this.tankName.string = GameData.tankNames[data.id];
          var gameData = GameData.getTankStatData(data); //已搭载技术更新

          for (var i = 0; i < this.skillCountLayout.children.length; i++) {
            this.skillCountLayout.children[i].active = data.techState[i];
          }

          if (this.nowChooseType == "part") {
            this.nowBuyType = "money";
            this.techScroll.active = false;
            this.tech.getChildByName("isSelect").active = false;
            this.partScroll.active = true;
            this.part.getChildByName("isSelect").active = true;
            this.statPanel.node.active = true;
            this.info.active = false;

            for (var _i2 = 0; _i2 < this.partBtns.length; _i2++) {
              this.partBtns[_i2].getComponent(Sprite).spriteFrame = _i2 == this.nowChooseId ? this.slots[1] : this.slots[0];
              this.partBtns[_i2].getChildByName("Level").getComponent(Label).string = (data.partLevel[_i2] + 1).toString();
              var level = data.partLevel[_i2] + 1;
              if (level >= 9) level = 9;
              this.partBtns[_i2].getChildByName("CanBuy").active = data.partLevel[_i2] < 9 && StorageMgr.instance.storageData.money >= GameData.partUpgradeCostFormula(_i2, level, data.id);
            }

            if (data.partLevel[this.nowChooseId] >= 9) {
              //战力更新
              this.standardNum.string = "<color=#FFFFFF >" + gameData.power().toString() + "</color>"; //状态栏显示

              this.statPanel.updateUI(gameData); //按键更新

              this.isBuy.active = false;
              console.log("该部件已满级");
            } else {
              console.log("该部件未满级"); //部件升级效果预览

              data.partLevel[this.nowChooseId]++;

              if (data.partLevel[this.nowChooseId] >= 9) {
                data.partLevel[this.nowChooseId] = 9;
              } //战力显示


              var nextData = GameData.getTankStatData(data);
              var deltaPower = nextData.power() - gameData.power();

              if (deltaPower != 0) {
                var color = deltaPower > 0 ? "#29FF00" : "#FF0000";
                var add = deltaPower > 0 ? "+" : "";
                this.standardNum.string = "<color=#FFFFFF >" + gameData.power().toString() + " </color><color=" + color + ">" + add + deltaPower.toString() + "</color>";
              } else {
                this.standardNum.string = "<color=#FFFFFF >" + gameData.power().toString() + "</color>";
              } //状态栏显示


              this.statPanel.updateUI(gameData, nextData); //按键更新

              this.isBuy.active = true;
              var levelUpNeed = GameData.partUpgradeCostFormula(this.nowChooseId, data.partLevel[this.nowChooseId], data.id);
              this.isBuy.getChildByPath("Pirce/Num").getComponent(Label).string = levelUpNeed.toString(); //购买价格更新

              this.nowBuyCost = levelUpNeed;
            }
          } else if (this.nowChooseType == "tech") {
            this.nowBuyType = GameData.techUpgradeCostType[this.nowChooseId];
            this.techScroll.active = true;
            this.tech.getChildByName("isSelect").active = true;
            this.partScroll.active = false;
            this.part.getChildByName("isSelect").active = false;
            this.statPanel.node.active = false;
            this.info.active = true; //按钮信息更新

            for (var _i3 = 0; _i3 < this.techBtns.length; _i3++) {
              this.techBtns[_i3].getComponent(Sprite).spriteFrame = _i3 == this.nowChooseId ? this.slots[1] : this.slots[0];
              this.techBtns[_i3].getChildByName("isLock").active = !data.techState[_i3];
              this.techBtns[_i3].getChildByName("isSelect").active = data.techState[_i3];
              var isCanBuy = false;

              if (!data.techState[_i3]) {
                switch (this.nowBuyType) {
                  case "money":
                    isCanBuy = storageData.money >= GameData.techUpgradeCostCount[this.nowChooseId];
                    break;

                  case "gold":
                    isCanBuy = storageData.gold >= GameData.techUpgradeCostCount[this.nowChooseId];
                    break;
                }
              }

              this.techBtns[_i3].getChildByName("CanBuy").active = isCanBuy;
            } //战力显示


            this.standardNum.string = "<color=#FFFFFF >" + gameData.power().toString() + "</color>"; //信息栏更新

            this.info.getChildByName("Name").getComponent(Label).string = this.techName[this.nowChooseId];
            this.info.getChildByName("Describe").getComponent(RichText).string = this.techWords[this.nowChooseId];
            this.info.getChildByName("Icon").getComponent(Sprite).spriteFrame = this.techIcons[this.nowChooseId]; //按钮更新

            var isLock = !data.techState[this.nowChooseId];
            this.isBuy.active = isLock;
            this.info.getChildByName("UnequipBtn").active = !isLock; //购买价格更新

            if (isLock) {
              var _levelUpNeed = GameData.techUpgradeCostCount[this.nowChooseId];
              this.nowBuyCost = _levelUpNeed;
              var price = this.isBuy.getChildByPath("Pirce");
              price.getChildByName("Num").getComponent(Label).string = _levelUpNeed.toString();
              price.getChildByName("isGold").active = this.nowBuyType == "gold";
              price.getChildByName("isMoney").active = this.nowBuyType == "money";
            }
          } else {
            console.warn("选择了不存在的栏目");
          }
        };

        _proto.choose = function choose(ids) {
          this.nowChooseId = ids[0];

          if (this.nowChooseType == "part") {
            EventMgr.event(EventType.Home_TankColor_Change, this.nowChooseId);
          } else {
            EventMgr.event(EventType.Home_TankColor_Change);
          }

          this.updateUI();
        };

        _proto.onBuyBtnClick = function onBuyBtnClick() {
          var storageData = StorageMgr.instance.storageData;
          var tankData = Tool.cloneArray_Obj(storageData.tankData);
          var data = tankData[GameData.nowChooseTankIndex];

          if (!data.unlockState) {
            Platform.instance.showToast("请先解锁该坦克");
            return;
          }

          if (this.nowChooseType == "part") {
            if (this.nowBuyType == "money") {
              if (storageData.money >= this.nowBuyCost) {
                StorageMgr.instance.changeMoney(-this.nowBuyCost);
                data.partLevel[this.nowChooseId]++;
                StorageMgr.instance.changeStorgeTankData(tankData);
                UMTrack.instance.trackEvent("Get_Upgrade");
              } else {
                Platform.instance.showToast("现金不足");
              }
            } else if (this.nowBuyType == "gold") {
              if (storageData.gold >= this.nowBuyCost) {
                StorageMgr.instance.changeGold(-this.nowBuyCost);
                data.partLevel[this.nowChooseId]++;
                StorageMgr.instance.changeStorgeTankData(tankData);
                UMTrack.instance.trackEvent("Get_Upgrade");
              } else {
                Platform.instance.showToast("黄金不足");
              }
            }
          } else if (this.nowChooseType == "tech") {
            if (this.nowBuyType == "money") {
              if (storageData.money >= this.nowBuyCost) {
                StorageMgr.instance.changeMoney(-this.nowBuyCost);
                data.techState[this.nowChooseId] = true;
                StorageMgr.instance.changeStorgeTankData(tankData);
                UMTrack.instance.trackEvent("Get_Upgrade");
              } else {
                Platform.instance.showToast("现金不足");
              }
            } else if (this.nowBuyType == "gold") {
              if (storageData.gold >= this.nowBuyCost) {
                StorageMgr.instance.changeGold(-this.nowBuyCost);
                data.techState[this.nowChooseId] = true;
                StorageMgr.instance.changeStorgeTankData(tankData);
                UMTrack.instance.trackEvent("Get_Upgrade");
              } else {
                Platform.instance.showToast("黄金不足");
              }
            }
          } else {
            console.warn("选择了不存在的栏目");
          }

          this.updateUI();
        };

        _proto.selectTech = function selectTech() {
          this.nowChooseType = "tech";
          this.isBuy = this.info.getChildByName("isBuy");
          this.buyBtn = this.isBuy.getChildByName("BuyBtn");
          Tool.d2_AddClickEvent(this.buyBtn, this, this.onBuyBtnClick);
          this.choose([0]);
        };

        _proto.selectPart = function selectPart() {
          this.nowChooseType = "part";
          this.isBuy = this.statPanel.node.getChildByName("isBuy");
          this.buyBtn = this.isBuy.getChildByName("BuyBtn");
          Tool.d2_AddClickEvent(this.buyBtn, this, this.onBuyBtnClick);
          this.choose([0]);
        };

        _proto.selectLeft = function selectLeft() {
          EventMgr.event(EventType.Home_Tank_ChooseLeft);
          EventMgr.event(EventType.Home_TankColor_Change);

          if (this.nowChooseType == "part") {
            this.selectPart();
          } else if (this.nowChooseType == "tech") {
            this.selectTech();
          }

          this.updateUI();
        };

        _proto.selectRight = function selectRight() {
          EventMgr.event(EventType.Home_Tank_ChooseRight);
          EventMgr.event(EventType.Home_TankColor_Change);

          if (this.nowChooseType == "part") {
            this.selectPart();
          } else if (this.nowChooseType == "tech") {
            this.selectTech();
          }

          this.updateUI();
        };

        return UpgradePanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "slots", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "techIcons", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "techWords", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamAim.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './VCamComposer.ts', './VCamHardLook.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Enum, VCamComposer, VCamHardLook;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
    }, function (module) {
      VCamComposer = module.VCamComposer;
    }, function (module) {
      VCamHardLook = module.VCamHardLook;
    }],
    execute: function () {
      exports('AimType', void 0);

      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b5ce9A29MhBxp+Y4Lc9reA0", "VCamAim", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AimType;

      (function (AimType) {
        AimType[AimType["None"] = 0] = "None";
        AimType[AimType["Composer"] = 1] = "Composer";
        AimType[AimType["HardLookAt"] = 2] = "HardLookAt";
      })(AimType || (AimType = exports('AimType', {})));

      var VCamAim = exports('VCamAim', (_dec = ccclass("VCamAim"), _dec2 = property({
        type: Enum(AimType)
      }), _dec3 = property({
        type: VCamComposer,
        visible: function visible() {
          return this.type === AimType.Composer;
        }
      }), _dec4 = property({
        type: VCamHardLook,
        visible: function visible() {
          return this.type === AimType.HardLookAt;
        }
      }), _dec(_class = (_class2 = function VCamAim() {
        _initializerDefineProperty(this, "type", _descriptor, this);

        _initializerDefineProperty(this, "composer", _descriptor2, this);

        _initializerDefineProperty(this, "hardLookat", _descriptor3, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return AimType.Composer;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "composer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamComposer();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "hardLookat", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamHardLook();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamAutoDolly.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Events.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _initializerDefineProperty, cclegacy, _decorator, game, CinestationEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
    }, function (module) {
      CinestationEvent = module.CinestationEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "6faa8Kj6xFD/Y2h9t5y/JgK", "VCamAutoDolly", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VCamAutoDoly = exports('VCamAutoDoly', (_dec = ccclass("VCamAutoDoly"), _dec2 = property({
        visible: false
      }), _dec3 = property({
        visible: false
      }), _dec4 = property({
        visible: false
      }), _dec5 = property({
        tooltip: "开启自动定位"
      }), _dec6 = property({
        tooltip: "当前位置两侧搜索的片段数量。\n数值为0时，搜索整个路径"
      }), _dec7 = property({
        tooltip: "将轨道分成多个片段来搜索。\n数值越大，结果越精确，性能消耗也越大"
      }), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function VCamAutoDoly() {
          _initializerDefineProperty(this, "_enable", _descriptor, this);

          _initializerDefineProperty(this, "_searchRadius", _descriptor2, this);

          _initializerDefineProperty(this, "_searchResolution", _descriptor3, this);
        }

        _createClass(VCamAutoDoly, [{
          key: "enable",
          get: function get() {
            return this._enable;
          },
          set: function set(v) {
            if (this._enable !== v) {
              this._enable = v;
              if (CC_EDITOR) game.emit(CinestationEvent.EDITOR_CHANGED);
            }
          }
        }, {
          key: "searchRadius",
          get: function get() {
            return this._searchRadius;
          },
          set: function set(v) {
            if (this._searchRadius !== v) {
              this._searchRadius = v;
              if (CC_EDITOR) game.emit(CinestationEvent.EDITOR_CHANGED);
            }
          }
        }, {
          key: "searchResolution",
          get: function get() {
            return this._searchResolution;
          },
          set: function set(v) {
            if (this._searchResolution !== v) {
              this._searchResolution = v;
              if (CC_EDITOR) game.emit(CinestationEvent.EDITOR_CHANGED);
            }
          }
        }]);

        return VCamAutoDoly;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_enable", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_searchRadius", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_searchResolution", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "enable", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "enable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "searchRadius", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "searchRadius"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "searchResolution", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "searchResolution"), _class2.prototype)), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamBody.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Events.ts', './VCamFreeLook.ts', './VCamTracked.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _initializerDefineProperty, cclegacy, _decorator, Enum, game, CinestationEvent, VCamFreeLook, VCamTracked;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      game = module.game;
    }, function (module) {
      CinestationEvent = module.CinestationEvent;
    }, function (module) {
      VCamFreeLook = module.VCamFreeLook;
    }, function (module) {
      VCamTracked = module.VCamTracked;
    }],
    execute: function () {
      exports('BodyType', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "98051KqNLZKB5mU2JZrUz3P", "VCamBody", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BodyType;

      (function (BodyType) {
        BodyType[BodyType["None"] = 0] = "None";
        BodyType[BodyType["FreeLook"] = 1] = "FreeLook";
        BodyType[BodyType["Tracked"] = 2] = "Tracked";
      })(BodyType || (BodyType = exports('BodyType', {})));

      var VCamBody = exports('VCamBody', (_dec = ccclass("VCamBody"), _dec2 = property({
        visible: false
      }), _dec3 = property({
        animatable: false,
        type: Enum(BodyType)
      }), _dec4 = property({
        animatable: false,
        type: VCamFreeLook,
        visible: function visible() {
          return this.type === BodyType.FreeLook;
        }
      }), _dec5 = property({
        type: VCamTracked,
        visible: function visible() {
          return this.type === BodyType.Tracked;
        }
      }), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function VCamBody() {
          _initializerDefineProperty(this, "_type", _descriptor, this);

          _initializerDefineProperty(this, "freelook", _descriptor2, this);

          _initializerDefineProperty(this, "tracked", _descriptor3, this);
        }

        _createClass(VCamBody, [{
          key: "type",
          get: function get() {
            return this._type;
          },
          set: function set(v) {
            if (this._type !== v) {
              this._type = v;
              if (CC_EDITOR) game.emit(CinestationEvent.EDITOR_CHANGED);
            }
          }
        }]);

        return VCamBody;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_type", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return BodyType.None;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "type", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "freelook", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamFreeLook();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tracked", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamTracked();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamComposer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Events.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _initializerDefineProperty, cclegacy, _decorator, game, Vec3, CinestationEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      Vec3 = module.Vec3;
    }, function (module) {
      CinestationEvent = module.CinestationEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "a20f4DBjy1CkIZ+lahC6hYS", "VCamComposer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VCamComposer = exports('VCamComposer', (_dec = ccclass("VCamComposer"), _dec2 = property({
        visible: false
      }), _dec3 = property({
        visible: false
      }), _dec4 = property({
        visible: false
      }), _dec5 = property({
        visible: false
      }), _dec6 = property({
        tooltip: "从LookAt目标的中心作局部空间的位置偏移。 \n所需区域不是跟踪目标的中心时，微调跟踪目标的位置"
      }), _dec7 = property({
        tooltip: "根据LookAt目标的运动速度，动态调整偏移量。\n预估了目标将在未来几秒内出现的位置",
        range: [0, 1],
        step: 0.1,
        slide: true
      }), _dec8 = property({
        tooltip: "控制预估的阻尼系数。\n数值越大阻尼越强，预测越滞后，可以消除因为预测带来的抖动",
        range: [0.1, 2],
        step: 0.1,
        slide: true
      }), _dec9 = property({
        tooltip: "瞄准目标的阻尼系数。\n数值越小，可以更快的将目标保持在死区，数值越大，瞄准速度越慢。",
        range: [0.1, 2],
        step: 0.1,
        slide: true
      }), _dec10 = property({
        tooltip: "死区宽度。\n如果目标在死区内，相机则不会旋转",
        range: [0, 1],
        step: 0.01,
        slide: true
      }), _dec11 = property({
        tooltip: "死区高度。\n如果目标在死区内，相机则不会旋转",
        range: [0, 1],
        step: 0.01,
        slide: true
      }), _dec12 = property({
        tooltip: "软区宽度。\n如果目标在软区内，相机将在lookatDamping指定时间内旋转到死区",
        range: [0, 1],
        step: 0.01,
        slide: true
      }), _dec13 = property({
        tooltip: "软区高度。\n如果目标在软区内，相机将在lookatDamping指定时间内旋转到死区",
        range: [0, 1],
        step: 0.01,
        slide: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function VCamComposer() {
          _initializerDefineProperty(this, "_deadZoneWidth", _descriptor, this);

          _initializerDefineProperty(this, "_deadZoneHeight", _descriptor2, this);

          _initializerDefineProperty(this, "_softZoneWidth", _descriptor3, this);

          _initializerDefineProperty(this, "_softZoneHeight", _descriptor4, this);

          _initializerDefineProperty(this, "trackedObjectOffset", _descriptor5, this);

          _initializerDefineProperty(this, "lookaheadTime", _descriptor6, this);

          _initializerDefineProperty(this, "lookaheadDamping", _descriptor7, this);

          _initializerDefineProperty(this, "lookatDamping", _descriptor8, this);
        }

        _createClass(VCamComposer, [{
          key: "deadZoneWidth",
          get: function get() {
            return this._deadZoneWidth;
          },
          set: function set(v) {
            if (this._deadZoneWidth !== v) {
              this._deadZoneWidth = v;
              if (CC_EDITOR) game.emit(CinestationEvent.COMPOSER_CHANGED);
            }
          }
        }, {
          key: "deadZoneHeight",
          get: function get() {
            return this._deadZoneHeight;
          },
          set: function set(v) {
            if (this._deadZoneHeight !== v) {
              this._deadZoneHeight = v;
              if (CC_EDITOR) game.emit(CinestationEvent.COMPOSER_CHANGED);
            }
          }
        }, {
          key: "softZoneWidth",
          get: function get() {
            return this._softZoneWidth;
          },
          set: function set(v) {
            if (this._softZoneWidth !== v) {
              this._softZoneWidth = v;
              if (CC_EDITOR) game.emit(CinestationEvent.COMPOSER_CHANGED);
            }
          }
        }, {
          key: "softZoneHeight",
          get: function get() {
            return this._softZoneHeight;
          },
          set: function set(v) {
            if (this._softZoneHeight !== v) {
              this._softZoneHeight = v;
              if (CC_EDITOR) game.emit(CinestationEvent.COMPOSER_CHANGED);
            }
          }
        }]);

        return VCamComposer;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_deadZoneWidth", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_deadZoneHeight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_softZoneWidth", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_softZoneHeight", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "trackedObjectOffset", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lookaheadTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lookaheadDamping", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lookatDamping", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "deadZoneWidth", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "deadZoneWidth"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "deadZoneHeight", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "deadZoneHeight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "softZoneWidth", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "softZoneWidth"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "softZoneHeight", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "softZoneHeight"), _class2.prototype)), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamFreeLook.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Vec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "0b999naWjlKBKlbbhrzf9kj", "VCamFreeLook", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VCamFreeLook = exports('VCamFreeLook', (_dec = ccclass("VCamFreeLook"), _dec2 = property({
        tooltip: "禁止水平方向旋转",
        animatable: false
      }), _dec3 = property({
        tooltip: "禁止垂直方向旋转",
        animatable: false
      }), _dec4 = property({
        tooltip: "禁止相机推移",
        animatable: false
      }), _dec5 = property({
        tooltip: "禁止相机平移",
        animatable: false
      }), _dec6 = property({
        tooltip: "旋转速度",
        animatable: false,
        range: [0.1, 5],
        step: 0.1,
        slide: true
      }), _dec7 = property({
        tooltip: "旋转平滑系数。\n数值越大旋转惯性越大",
        animatable: false,
        range: [0.1, 5],
        step: 0.1,
        slide: true
      }), _dec8 = property({
        tooltip: "平移速度",
        animatable: false,
        range: [0.1, 5],
        step: 0.1,
        slide: true
      }), _dec9 = property({
        tooltip: "平移平滑系数。\n数值越大平移惯性越大",
        animatable: false,
        range: [0.1, 5],
        step: 0.1,
        slide: true
      }), _dec10 = property({
        tooltip: "与Follow目标之间的位移，初始值为(0,0,-10)"
      }), _dec11 = property({
        tooltip: "跟随阻尼系数。\n数字越小相机越灵敏，越大越迟顿",
        animatable: false,
        range: [0, 5],
        step: 0.1,
        slide: true
      }), _dec(_class = (_class2 = function VCamFreeLook() {
        _initializerDefineProperty(this, "forbidX", _descriptor, this);

        _initializerDefineProperty(this, "forbidY", _descriptor2, this);

        _initializerDefineProperty(this, "forbidZ", _descriptor3, this);

        _initializerDefineProperty(this, "forbidPan", _descriptor4, this);

        _initializerDefineProperty(this, "rotateSpeed", _descriptor5, this);

        _initializerDefineProperty(this, "rotateSmoothing", _descriptor6, this);

        _initializerDefineProperty(this, "panSpeed", _descriptor7, this);

        _initializerDefineProperty(this, "panSmoothing", _descriptor8, this);

        _initializerDefineProperty(this, "followOffset", _descriptor9, this);

        _initializerDefineProperty(this, "followDamping", _descriptor10, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "forbidX", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "forbidY", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "forbidZ", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "forbidPan", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "rotateSpeed", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "rotateSmoothing", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "panSpeed", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "panSmoothing", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "followOffset", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, -10);
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "followDamping", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamHardLook.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Vec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "47535R8yGBJapZG+5BzZbdz", "VCamHardLook", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VCamHardLook = exports('VCamHardLook', (_dec = ccclass("VCamHardLook"), _dec2 = property({
        tooltip: "从LookAt目标的中心作局部空间的位置偏移。 \n所需区域不是跟踪目标的中心时，微调跟踪目标的位置"
      }), _dec(_class = (_class2 = function VCamHardLook() {
        _initializerDefineProperty(this, "trackedObjectOffset", _descriptor, this);
      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "trackedObjectOffset", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamImpulse.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Enum, Layers;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Layers = module.Layers;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "8f0fdpmkflDmIp1ZB3EmmMS", "VCamImpulse", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VCamImpulse = exports('VCamImpulse', (_dec = ccclass("VCamImpulse"), _dec2 = property({
        type: Enum(Layers.Enum)
      }), _dec(_class = (_class2 = function VCamImpulse() {
        _initializerDefineProperty(this, "source", _descriptor, this);
      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "source", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return Layers.Enum.DEFAULT;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamLens.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Events.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _initializerDefineProperty, cclegacy, _decorator, game, CinestationEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
    }, function (module) {
      CinestationEvent = module.CinestationEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "1b0c6SIESZLp7YflAThQCmy", "VCamLens", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VCamLens = exports('VCamLens', (_dec = ccclass("VCamLens"), _dec2 = property({
        visible: false
      }), _dec3 = property({
        visible: false
      }), _dec4 = property({
        visible: false
      }), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function VCamLens() {
          _initializerDefineProperty(this, "_fov", _descriptor, this);

          _initializerDefineProperty(this, "_near", _descriptor2, this);

          _initializerDefineProperty(this, "_far", _descriptor3, this);
        }

        _createClass(VCamLens, [{
          key: "fov",
          get: function get() {
            return this._fov;
          },
          set: function set(v) {
            if (this._fov !== v) {
              this._fov = v;
              if (CC_EDITOR) game.emit(CinestationEvent.LENS_CHANGED);
            }
          }
        }, {
          key: "near",
          get: function get() {
            return this._near;
          },
          set: function set(v) {
            if (this._near !== v) {
              this._near = v;
              if (CC_EDITOR) game.emit(CinestationEvent.LENS_CHANGED);
            }
          }
        }, {
          key: "far",
          get: function get() {
            return this._far;
          },
          set: function set(v) {
            if (this._far !== v) {
              this._far = v;
              if (CC_EDITOR) game.emit(CinestationEvent.LENS_CHANGED);
            }
          }
        }]);

        return VCamLens;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_fov", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 45;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_near", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_far", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1000;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "fov", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "fov"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "near", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "near"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "far", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "far"), _class2.prototype)), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamNoise.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './NoiseGenerator.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, Enum, NoiseProfile;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
    }, function (module) {
      NoiseProfile = module.NoiseProfile;
    }],
    execute: function () {
      exports('NoiseType', void 0);

      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "64113KNDFdCe5TQiq+NPHCc", "VCamNoise", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NoiseType;

      (function (NoiseType) {
        NoiseType[NoiseType["None"] = 0] = "None";
        NoiseType[NoiseType["Perlin"] = 1] = "Perlin";
      })(NoiseType || (NoiseType = exports('NoiseType', {})));

      var VCamNoise = exports('VCamNoise', (_dec = ccclass("VCamNoise"), _dec2 = property({
        type: Enum(NoiseType)
      }), _dec3 = property({
        tooltip: "多种预置噪声参数",
        type: Enum(NoiseProfile),
        visible: function visible() {
          return this.type !== NoiseType.None;
        }
      }), _dec4 = property({
        tooltip: "幅度增益。数值越大相机晃动幅度越明显",
        visible: function visible() {
          return this.type !== NoiseType.None;
        }
      }), _dec5 = property({
        tooltip: "频率增益。数值越大相机晃动频率越高",
        visible: function visible() {
          return this.type !== NoiseType.None;
        }
      }), _dec(_class = (_class2 = function VCamNoise() {
        _initializerDefineProperty(this, "type", _descriptor, this);

        _initializerDefineProperty(this, "profile", _descriptor2, this);

        _initializerDefineProperty(this, "amplitudeGain", _descriptor3, this);

        _initializerDefineProperty(this, "frequncyGain", _descriptor4, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return NoiseType.None;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "profile", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return NoiseProfile.Noise_CM_4;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "amplitudeGain", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "frequncyGain", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VCamTracked.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationSmoothPath.ts', './Events.ts', './VCamAutoDolly.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _initializerDefineProperty, cclegacy, _decorator, game, CinestationSmoothPath, CinestationEvent, VCamAutoDoly;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
    }, function (module) {
      CinestationSmoothPath = module.CinestationSmoothPath;
    }, function (module) {
      CinestationEvent = module.CinestationEvent;
    }, function (module) {
      VCamAutoDoly = module.VCamAutoDoly;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "28daaTaX7tIHIg1KeO3hzdb", "VCamTracked", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VCamTracked = exports('VCamTracked', (_dec = ccclass("VCamTracked"), _dec2 = property({
        visible: false
      }), _dec3 = property({
        tooltip: "相机移动的路径。\n此属性必须是CinestationSmoothPath",
        animatable: false,
        type: CinestationSmoothPath
      }), _dec4 = property({
        tooltip: "移动进度。\n数值0表示第一个位置点，数值1表示第二个位置点，以此类推。"
      }), _dec5 = property({
        tooltip: "跟随阻尼系数。\n数字越小相机越灵敏，越大越迟顿",
        animatable: false,
        range: [0.1, 5],
        step: 0.1,
        slide: true
      }), _dec6 = property({
        animatable: false,
        type: VCamAutoDoly
      }), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function VCamTracked() {
          _initializerDefineProperty(this, "_progress", _descriptor, this);

          _initializerDefineProperty(this, "path", _descriptor2, this);

          _initializerDefineProperty(this, "damping", _descriptor3, this);

          _initializerDefineProperty(this, "autoDolly", _descriptor4, this);
        }

        _createClass(VCamTracked, [{
          key: "progress",
          get: function get() {
            return this._progress;
          },
          set: function set(v) {
            if (this._progress !== v) {
              this._progress = v;
              if (CC_EDITOR) game.emit(CinestationEvent.EDITOR_CHANGED);
            }
          }
        }]);

        return VCamTracked;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_progress", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "path", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "progress", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "progress"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "damping", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "autoDolly", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamAutoDoly();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/videoToggle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "80e55OdRYtLGKa9VvN83FSy", "videoToggle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var videoToggle = exports('videoToggle', (_dec = ccclass('videoToggle'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(videoToggle, _Component);

        function videoToggle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "backNode", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = videoToggle.prototype;

        _proto.onChange = function onChange() {
          this.backNode.active = this.getComponent(Toggle).isChecked;
        };

        return videoToggle;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "backNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VipComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts', './Tool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, EventType, EventMgr, StorageMgr, Tool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Tool = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e0207/c5ClIBI+uKSRrHJ7B", "VipComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VipComp = exports('VipComp', (_dec = ccclass('VipComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VipComp, _Component);

        function VipComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = void 0;
          _this.tips = void 0;
          return _this;
        }

        var _proto = VipComp.prototype;

        _proto.onLoad = function onLoad() {
          this.tips = this.node.getChildByName("tips");
          this.label = this.node.getChildByName("Label").getComponent(Label);
        };

        _proto.start = function start() {
          // let d = Math.floor(deltaTime / 1000 / 60 / 60 / 24);
          // let h = Math.floor(deltaTime / 1000 / 60 / 60 % 24);
          // let m = Math.floor(deltaTime / 1000 / 60 % 60);
          this.tipsCheck();
          this.timeCheck();
          this.schedule(this.timeCheck, 1);
          Tool.d2_AddClickEvent(this.node, this, this.openVIPPanel);
          EventMgr.on(EventType.Home_VipTips_Update, this, this.tipsCheck);
        }
        /**检查是否满足提示*/
        ;

        _proto.tipsCheck = function tipsCheck() {
          var time = new Date().getTime();
          var vipTime = StorageMgr.instance.storageData.vipTime;
          var isVip = vipTime > time;
          this.tips.active = !isVip || isVip && !StorageMgr.instance.storageData.vipDailyAwardGet;
        };

        _proto.onEnable = function onEnable() {
          this.timeCheck();
          this.schedule(this.timeCheck, 1);
          Tool.d2_AddClickEvent(this.node, this, this.openVIPPanel);
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
        };

        _proto.timeCheck = function timeCheck() {
          var time = new Date().getTime();
          var vipTime = StorageMgr.instance.storageData.vipTime;
          var isVip = vipTime > time;
          var str = "";

          if (isVip) {
            var deltaTime = vipTime - time;
            var h = Math.floor(deltaTime / 1000 / 60 / 60);
            var m = Math.floor(deltaTime / 1000 / 60 % 60);

            if (h > 0) {
              str = h + "小时";
            } else if (m >= 1) {
              str = m + "分钟";
            } else {
              str = "少于1分钟";
            }
          } else {
            str = "获得VIP";
          }

          this.label.string = str;
        };

        _proto.openVIPPanel = function openVIPPanel() {
          EventMgr.event(EventType.Home_VIP_Open);
        };

        return VipComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VipPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './EnumTypes.ts', './EventMgr.ts', './StorageMgr.ts', './Platform.ts', './UMTrack.ts', './Tool.ts', './ItemPool.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, EventType, EventMgr, StorageMgr, Platform, UMTrack, Tool, ItemPoolType;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EventType = module.EventType;
    }, function (module) {
      EventMgr = module.EventMgr;
    }, function (module) {
      StorageMgr = module.default;
    }, function (module) {
      Platform = module.default;
    }, function (module) {
      UMTrack = module.UMTrack;
    }, function (module) {
      Tool = module.default;
    }, function (module) {
      ItemPoolType = module.ItemPoolType;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ffaa9tRtBBIG7rSKx9jC9VG", "VipPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var VipPanel = exports('VipPanel', (_dec = ccclass('VipPanel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VipPanel, _Component);

        function VipPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.backBtn = void 0;
          _this.dailyAwardBtn = void 0;
          _this.getVipBtn = void 0;
          _this.unlockItems = [];
          _this.timeLabel = void 0;
          _this.unlockTime = [903000, 903000, 86403000];
          return _this;
        }

        var _proto = VipPanel.prototype;

        _proto.onLoad = function onLoad() {
          this.backBtn = this.node.getChildByName("backBtn");
          this.dailyAwardBtn = this.node.getChildByPath("daily_1/dailyAwardBtn");
          var daily2 = this.node.getChildByName("daily_2");
          this.getVipBtn = daily2.getChildByName("getVipBtn");
          this.unlockItems = Tool.d3_FindAllNodeHasName(daily2, "item");
          this.timeLabel = this.node.getChildByName("timeLabel");
        };

        _proto.start = function start() {
          Tool.d2_AddClickEvent(this.backBtn, this, this.closePanel);
          Tool.d2_AddClickEvent(this.dailyAwardBtn, this, this.getDailyAward);
          Tool.d2_AddClickEvent(this.getVipBtn, this, this.getVipUnlock);
        };

        _proto.closePanel = function closePanel() {
          console.log("关闭VIP界面");
          this.node.active = false;
        };

        _proto.onEnable = function onEnable() {
          console.log("打开VIP界面");
          this.updateUI();
          this.schedule(this.timeCheck, 1);
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
        };

        _proto.updateUI = function updateUI() {
          var data = StorageMgr.instance.storageData;
          var time = new Date().getTime();
          var vipTime = data.vipTime;
          var isVip = vipTime > time;
          var dailyAward = data.vipDailyAwardGet;
          var unlockState = data.vipDailyUnlock;

          for (var i = 0; i < this.unlockItems.length; i++) {
            this.unlockItems[i].getChildByName("get").active = i < unlockState;
          } //更新VIP剩余时间


          var str = "";

          if (isVip) {
            var deltaTime = vipTime - time;
            var h = Math.floor(deltaTime / 1000 / 60 / 60);
            var m = Math.floor(deltaTime / 1000 / 60 % 60);

            if (h > 0) {
              str = h + "小时" + m + "分钟";
            } else if (m >= 1) {
              str = m + "分钟";
            } else {
              str = "少于1分钟";
            }

            str = "剩余有效期：" + str;
          } else {
            str = "未开通VIP";
          }

          this.timeLabel.getComponent(Label).string = str;
        } //每秒检测
        ;

        _proto.timeCheck = function timeCheck() {
          this.updateUI();
        };

        _proto.getDailyAward = function getDailyAward() {
          var data = StorageMgr.instance.storageData;
          var time = new Date().getTime();
          var vipTime = data.vipTime;
          var isVip = vipTime > time;
          var dailyAward = data.vipDailyAwardGet;

          if (!isVip) {
            Platform.instance.showToast("要开通VIP才能领取噢");
            return;
          }

          if (dailyAward) {
            Platform.instance.showToast("今天已经领取了");
            return;
          } // 给到道具效果  和更改存档


          StorageMgr.instance.addOil(8);
          StorageMgr.instance.changeGold(18);
          EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.oil, 8, this.dailyAwardBtn.getWorldPosition());
          EventMgr.event(EventType.Home_GetItem_Effect, ItemPoolType.gold, 5, this.dailyAwardBtn.getWorldPosition());
          StorageMgr.instance.changeVipDailyAwardGet(true);
          Platform.instance.showToast("成功领取VIP每日奖励");
        };

        _proto.getVipUnlock = function getVipUnlock() {
          var data = StorageMgr.instance.storageData;
          var unlockState = data.vipDailyUnlock;

          if (unlockState >= 3) {
            console.log("今天VIP已经获取完了");
            return;
          } //给与VIP时长，Toast提示，修改解锁状态,和更新UI


          var self = this;
          Platform.instance.showVideo(function () {
            var time = new Date().getTime();
            var vipTime = data.vipTime;
            var isVip = vipTime > time;

            if (isVip) {
              vipTime += self.unlockTime[unlockState];
            } else {
              vipTime = time + self.unlockTime[unlockState];
            }

            var h = 0;
            var m = self.unlockTime[unlockState] / 1000 / 60;

            if (m > 60) {
              h = Math.floor(m / 60);
              m = Math.floor(m % 60);
            }

            var str = "VIP时长增加";

            if (h > 0) {
              str = str + h + "小时";
            } else {
              str = str + m + "分钟";
            }

            Platform.instance.showToast("VIP时长增加" + str);
            StorageMgr.instance.changeVipTime(vipTime);
            UMTrack.instance.trackEvent("Get_Vip");
            StorageMgr.instance.changeVipDailyUnlock(unlockState + 1);
            self.updateUI();
          }, function () {});
        };

        return VipPanel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VirtualCamera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationData.ts', './Events.ts', './Visualization.ts', './VCamAim.ts', './VCamBody.ts', './VCamImpulse.ts', './VCamLens.ts', './VCamNoise.ts', './AimStage.ts', './BodyStage.ts', './ImpulseStage.ts', './NoiseStage.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, _decorator, Node, Vec3, Quat, game, view, Mat4, toRadian, utils, cinestation, CinestationEvent, Visualization, VCamAim, VCamBody, BodyType, VCamImpulse, VCamLens, VCamNoise, AimStage, BodyStage, ImpulseStage, NoiseStage;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      game = module.game;
      view = module.view;
      Mat4 = module.Mat4;
      toRadian = module.toRadian;
      utils = module.utils;
    }, function (module) {
      cinestation = module.cinestation;
    }, function (module) {
      CinestationEvent = module.CinestationEvent;
    }, function (module) {
      Visualization = module.Visualization;
    }, function (module) {
      VCamAim = module.VCamAim;
    }, function (module) {
      VCamBody = module.VCamBody;
      BodyType = module.BodyType;
    }, function (module) {
      VCamImpulse = module.VCamImpulse;
    }, function (module) {
      VCamLens = module.VCamLens;
    }, function (module) {
      VCamNoise = module.VCamNoise;
    }, function (module) {
      AimStage = module.AimStage;
    }, function (module) {
      BodyStage = module.BodyStage;
    }, function (module) {
      ImpulseStage = module.ImpulseStage;
    }, function (module) {
      NoiseStage = module.NoiseStage;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "e84d7HSHCRNU4Jgu1AdeBGI", "VirtualCamera", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var VirtualCamera = exports('VirtualCamera', (_dec = ccclass('VirtualCamera'), _dec2 = property({
        visible: false
      }), _dec3 = property({
        visible: false
      }), _dec4 = property({
        tooltip: "在运行时显示死区和软区"
      }), _dec5 = property({
        tooltip: "虚拟相机优先级。\n数值越大优先级越高，默认值是10"
      }), _dec6 = property({
        tooltip: "瞄准目标",
        type: Node
      }), _dec7 = property({
        tooltip: "跟踪目标",
        type: Node
      }), _dec8 = property({
        type: VCamLens
      }), _dec9 = property({
        type: VCamBody
      }), _dec10 = property({
        animatable: false,
        type: VCamAim
      }), _dec11 = property({
        animatable: false,
        type: VCamNoise
      }), _dec12 = property({
        animatable: false,
        type: VCamImpulse
      }), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Visualization) {
        _inheritsLoose(VirtualCamera, _Visualization);

        function VirtualCamera() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Visualization.call.apply(_Visualization, [this].concat(args)) || this;
          _this._editorChanged = true;
          _this._composerChanged = true;
          _this._visibleDefault = false;

          _initializerDefineProperty(_this, "_lookAt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_follow", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "debug", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "priority", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lens", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "body", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aim", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "noise", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "impulse", _descriptor9, _assertThisInitialized(_this));

          _this._stages = [new BodyStage(_assertThisInitialized(_this)), new AimStage(_assertThisInitialized(_this)), new NoiseStage(_assertThisInitialized(_this)), new ImpulseStage(_assertThisInitialized(_this))];
          _this._finalPosition = new Vec3();
          _this._finalRotation = new Quat();
          _this._correctPosition = new Vec3();
          _this._correctRotation = new Quat();
          _this._lookaheadPosition = new Vec3();
          return _this;
        }

        var _proto = VirtualCamera.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          if (CC_EDITOR) {
            game.on(CinestationEvent.LENS_CHANGED, function () {
              return _this2._modelChanged = true;
            });
            game.on(CinestationEvent.EDITOR_CHANGED, function () {
              return _this2._editorChanged = true;
            });
            game.on(CinestationEvent.COMPOSER_CHANGED, function () {
              return _this2._composerChanged = true;
            });
            this.node.on(Node.EventType.TRANSFORM_CHANGED, this._onTransformChanged, this);
          }
        };

        _proto._onTransformChanged = function _onTransformChanged(transBit) {
          if (!this.follow) return;

          if (transBit & Node.TransformBit.POSITION) {
            switch (this.body.type) {
              case BodyType.Tracked:
                this._editorChanged = true;
                break;

              case BodyType.FreeLook:
                Vec3.subtract(this.body.freelook.followOffset, this.node.worldPosition, this.follow.worldPosition);
                this._editorChanged = true;
                break;
            }
          }
        };

        _proto.onEnable = function onEnable() {
          _Visualization.prototype.onEnable.call(this);

          cinestation.addCamera(this);
        };

        _proto.onDisable = function onDisable() {
          _Visualization.prototype.onDisable.call(this);

          cinestation.removeCamera(this);
          this.onDeActive();
        };

        _proto.onActive = function onActive() {
          this._stages.forEach(function (v) {
            return v.enable = true;
          });
        };

        _proto.onDeActive = function onDeActive() {
          this._stages.forEach(function (v) {
            return v.enable = false;
          });
        };

        _proto.updateCamera = function updateCamera(dt) {
          if (CC_EDITOR && !this._isChangedInEditor()) {
            return;
          }

          Quat.identity(this._correctRotation);
          Vec3.zero(this._correctPosition);

          for (var _iterator = _createForOfIteratorHelperLoose(this._stages), _step; !(_step = _iterator()).done;) {
            var stage = _step.value;
            stage.updateStage(dt);
          }
        };

        _proto._isChangedInEditor = function _isChangedInEditor() {
          if (this._editorChanged) {
            //fixbug: ccc inpector
            this._editorChanged = false;
            return true;
          }

          return false;
        };

        _proto._updateMesh = function _updateMesh(mesh) {
          var corners = [new Vec3(-1, -1, -1), new Vec3(1, -1, -1), new Vec3(-1, 1, -1), new Vec3(1, 1, -1), new Vec3(-1, -1, 1), new Vec3(1, -1, 1), new Vec3(-1, 1, 1), new Vec3(1, 1, 1)];
          var lens = this.lens;
          var size = view.getDesignResolutionSize();
          var matProjInv = Mat4.perspective(new Mat4(), toRadian(lens.fov), size.width / size.height, lens.near, lens.far).invert();

          for (var i = 0; i < 8; i++) {
            corners[i].transformMat4(matProjInv);
          }

          var positions = [],
              colors = [];

          for (var _i = 0; _i < 8; _i++) {
            for (var j = 0; j < 3; j++) {
              Vec3.toArray(positions, corners[_i], positions.length);
              Vec3.toArray(positions, corners[_i ^ 1 << j], positions.length);
              colors.push(1, 1, 1, 1);
              colors.push(1, 1, 1, 1);
            }
          }

          return utils.createMesh({
            positions: positions,
            colors: colors
          }, mesh);
        };

        _createClass(VirtualCamera, [{
          key: "lookAt",
          get: function get() {
            return this._lookAt;
          },
          set: function set(v) {
            this._lookAt = v;
            this._editorChanged = CC_EDITOR;
          }
        }, {
          key: "follow",
          get: function get() {
            return this._follow;
          },
          set: function set(v) {
            this._follow = v;
            this._editorChanged = CC_EDITOR;
          }
        }, {
          key: "active",
          get: function get() {
            return cinestation.vcam === this;
          },
          set: function set(v) {
            cinestation.activeCamera(v ? this : null);
          }
        }, {
          key: "correctPosition",
          get: function get() {
            return this._correctPosition;
          }
        }, {
          key: "correctRotation",
          get: function get() {
            return this._correctRotation;
          }
        }, {
          key: "finalPosition",
          get: function get() {
            return Vec3.add(this._finalPosition, this.node.worldPosition, this._correctPosition);
          }
        }, {
          key: "finalRotation",
          get: function get() {
            return Quat.multiply(this._finalRotation, this.node.worldRotation, this._correctRotation);
          }
        }, {
          key: "lookaheadPosition",
          get: function get() {
            return this._lookaheadPosition;
          }
        }]);

        return VirtualCamera;
      }(Visualization), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_lookAt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_follow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "debug", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "priority", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "lookAt", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "lookAt"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "follow", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "follow"), _class2.prototype), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lens", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamLens();
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "body", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamBody();
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "aim", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamAim();
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "noise", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamNoise();
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "impulse", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new VCamImpulse();
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Visualization.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CinestationShareAssets.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, _decorator, director, renderer, Component, cinestationShareAssets;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      renderer = module.renderer;
      Component = module.Component;
    }, function (module) {
      cinestationShareAssets = module.cinestationShareAssets;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "33adaQlUqdEy5hcZt+9bHhU", "Visualization", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Visualization = exports('Visualization', (_dec = ccclass('Visualization'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Visualization, _Component);

        function Visualization() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._modelChanged = false;
          _this._mesh = null;
          _this._model = null;
          _this._material = cinestationShareAssets.lineMaterial;
          _this._visibleInRuntime = CC_EDITOR;
          _this._visibleDefault = true;
          return _this;
        }

        var _proto = Visualization.prototype;

        _proto.onEnable = function onEnable() {
          if (this._visibleInRuntime) {
            this._createModel();

            this._attachToScene();
          }
        };

        _proto.onDisable = function onDisable() {
          if (this._visibleInRuntime) {
            this._detachFromScene();
          }
        };

        _proto._attachToScene = function _attachToScene() {
          if (this._model && this.node && this.node.scene) {
            if (this._model.scene) {
              this._detachFromScene();
            }

            this._getRenderScene().addModel(this._model);
          }
        };

        _proto._detachFromScene = function _detachFromScene() {
          if (this._model && this._model.scene) {
            this._model.scene.removeModel(this._model);
          }
        };

        _proto._createModel = function _createModel() {
          if (this._model) return;
          this._model = director.root.createModel(renderer.scene.Model);
          this._model.node = this._model.transform = this.node;
          this._model.enabled = this._visibleDefault;
          this._modelChanged = true;
        };

        _proto.update = function update(dt) {
          if (this._modelChanged && this._model) {
            this._modelChanged = false;
            this._mesh = this._updateMesh(this._mesh);
            this._mesh && this._model.initSubModel(0, this._mesh.renderingSubMeshes[0], this._material);
          }
        };

        _proto._updateMesh = function _updateMesh(mesh) {
          return mesh;
        };

        _createClass(Visualization, [{
          key: "visible",
          get: function get() {
            return this._model ? this._model.enabled : false;
          },
          set: function set(v) {
            if (this._model) this._model.enabled = v;
          }
        }]);

        return Visualization;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WeaponController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './CustomInput.ts', './StateController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, Node, Prefab, Vec3, lerp, clamp, instantiate, Component, customInput, StateController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Node = module.Node;
      Prefab = module.Prefab;
      Vec3 = module.Vec3;
      lerp = module.lerp;
      clamp = module.clamp;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      customInput = module.customInput;
    }, function (module) {
      StateController = module.StateController;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "c0716SCpO9GEZo32AffHxgX", "WeaponController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WeaponController = exports('WeaponController', (_dec = ccclass('WeaponController'), _dec2 = property(Camera), _dec3 = property(Node), _dec4 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WeaponController, _Component);

        function WeaponController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._swaySmoothness = 4;
          _this._swayMovement = new Vec3();
          _this._state = null;
          _this._fireInterval = 0;

          _initializerDefineProperty(_this, "gunCamera", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fireRate", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "casingSpawnPoint", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "casingPrefab", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = WeaponController.prototype;

        _proto.onLoad = function onLoad() {
          this._state = this.getComponent(StateController);
        };

        _proto.update = function update(dt) {
          if (this.gunCamera) {
            var fov = customInput.mouseRight ? 20 : 40;
            this.gunCamera.fov = lerp(this.gunCamera.fov, fov, dt * 10);
          }

          this._swayMovement.set(customInput.mouseX, customInput.mouseY).multiplyScalar(0.0005);

          this._swayMovement.x = clamp(this._swayMovement.x, -0.06, 0.06);
          this._swayMovement.y = clamp(this._swayMovement.y, -0.06, 0.06);
          this.node.position = this.node.position.lerp(this._swayMovement, dt * this._swaySmoothness);

          if (this._state && customInput.mouseLeft) {
            this._fireInterval += dt;

            if (this._fireInterval >= 1 / this.fireRate) {
              this._fireInterval = 0;

              this._state.setState(customInput.mouseRight ? StateController.AIM_FIRE : StateController.FIRE, true, 0);

              if (this.casingPrefab && this.casingSpawnPoint) {
                var bullet = instantiate(this.casingPrefab);
                bullet.parent = this.node.scene;
                bullet.worldPosition = this.casingSpawnPoint.worldPosition;
                bullet.worldRotation = this.casingSpawnPoint.worldRotation;
              }
            }
          }
        };

        return WeaponController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gunCamera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fireRate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 16;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "casingSpawnPoint", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "casingPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WxPlatform.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './env', './AppConfig.ts', './BasePlatform.ts', './JJMgr.ts', './WxPlatformBannerAd.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, WECHAT, BasePlatform, JJMgr, WxPlatformBannerAd;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      WECHAT = module.WECHAT;
    }, null, function (module) {
      BasePlatform = module.default;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      WxPlatformBannerAd = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "94a82hcI5VDmJQGpuTAXQQQ", "WxPlatform", undefined);

      var WxPlatform = exports('default', /*#__PURE__*/function (_BasePlatform) {
        _inheritsLoose(WxPlatform, _BasePlatform);

        function WxPlatform() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BasePlatform.call.apply(_BasePlatform, [this].concat(args)) || this;
          _this.shareCallBack = void 0;
          _this.sysInfo = void 0;
          _this.bannerSize = void 0;
          _this.bannerTopFactor = 0;
          _this.videoAd = void 0;
          _this.isForceShowVideo = void 0;
          _this.videoEndCallback = void 0;
          _this.videoCloseCallback = void 0;
          _this.interAd = void 0;
          _this.interAdOnClose = null;
          _this.homeGridAds = void 0;
          _this.gameGridAd = void 0;
          _this.singleGridAd = void 0;
          return _this;
        }

        var _proto = WxPlatform.prototype;

        _proto.init = function init() {} // /*************************** 广告-start ***************************/
        ;

        _proto.initAd = function initAd() {};

        _proto.setBannerTop = function setBannerTop(top) {
          WxPlatformBannerAd.Instance.setBannerTop(top);
        };

        _proto.showBanner = function showBanner() {
          return WxPlatformBannerAd.Instance.showBanner();
        };

        _proto.hideBanner = function hideBanner() {
          WxPlatformBannerAd.Instance.hideBanner();
        };

        _proto.loadVideoAd = function loadVideoAd() {} // /**
        // *
        // * @param endCB 看完视频执行回调
        // * @param closeCB 无论是否看完视频都执行回调（一般不能与endCB并存）
        // * @param isForceShowVideo 启动游戏是否强制调起视频，无论是否已加载完成
        // * @returns
        // */
        ;

        _proto.showVideoAd = function showVideoAd(endCB, closeCB, isForceShowVideo) {
          {
            endCB && endCB();
            closeCB && closeCB();
            return;
          }
        } // /*************************** 插屏 ***************************/
        ;

        _proto.createInterAd = function createInterAd() {};

        _proto.showInterAd = function showInterAd(obj) {
          // // if (!obj) {
          // //     obj = { onClose: () => { } }
          // // }
          // // if (this.interAdOnClose) {
          // //     this.interAd.offClose(this.interAdOnClose);
          // // }
          // // this.interAdOnClose = () => {
          // //     obj.onClose();
          // // }
          // // this.interAd.onClose(this.interAdOnClose);
          if (this.interAd) {
            this.interAd.show();
          }
        } // /*************************** 格子 ***************************/
        // /**首页格子广告 */
        ;

        _proto.createHomeCustomAd = function createHomeCustomAd(isShow) {// // if (CC_WECHATGAME) {
          // //     if (!this.homeGridAds) {
          // //         let gridAmount = JJMgr.instance.dataConfig.front_gezi_number * 2;
          // //         this.homeGridAds = [];
          // //         for (let i = 0; i < gridAmount; i++) {
          // //             let style2 = this.getGridPos(i, 270 * (Math.floor(i / 2) + 1));
          // //             let gridAd = window['wx']["createCustomAd"]({ adUnitId: this.gridId, adIntervals: 30, style: style2 })
          // //             this.homeGridAds.push(gridAd);
          // //             gridAd.onLoad(() => {
          // //                 if (isShow) { gridAd.show(); }
          // //             });
          // //         }
          // //     }
          // //     else if (isShow) {
          // //         this.showHomeGridAd();
          // //     }
          // // }
        };

        _proto.createGameCustomAd = function createGameCustomAd() {};

        _proto.createSingleCustomAd = function createSingleCustomAd() {// // if (CC_WECHATGAME) {
          // //     let style2 = this.getGridPos(1);
          // //     let gridAd = window['wx']["createCustomAd"]({ adUnitId: this.gridId, adIntervals: 30, style: style2 })
          // //     this.singleGridAd = gridAd;
          // //     gridAd.onLoad(() => { });
          // // }
        };

        _proto.showHomeGridAd = function showHomeGridAd() {// // if (!this.homeGridAds) return;
          // // for (let i = 0; i < this.homeGridAds.length; i++) {
          // //     this.homeGridAds[i].show();
          // // }
        };

        _proto.hideHomeGridAd = function hideHomeGridAd() {// // if (!this.homeGridAds) return;
          // // for (let i = 0; i < this.homeGridAds.length; i++) {
          // //     this.homeGridAds[i].hide();
          // // }
        };

        _proto.showGameGridAd = function showGameGridAd() {
          if (!this.gameGridAd) return;

          if (JJMgr.instance.dataConfig.front_dangezi_switch) {
            for (var i = 0; i < this.gameGridAd.length; i++) {
              this.gameGridAd[i].show();
            }
          }
        };

        _proto.hideGameGridAd = function hideGameGridAd() {
          if (!this.gameGridAd) return;

          for (var i = 0; i < this.gameGridAd.length; i++) {
            this.gameGridAd[i].hide();
          }
        };

        _proto.showSingleGridAd = function showSingleGridAd() {// // if (!this.singleGridAd) return;
          // // this.singleGridAd.show();
        };

        _proto.hideSingleGridAd = function hideSingleGridAd() {// // if (!this.singleGridAd) return;
          // // this.singleGridAd.hide();
        };

        _proto.getGridPos = function getGridPos(index, top) {
          if (top === void 0) {
            top = 120;
          }

          var style = {
            width: 20,
            height: 20
          };

          if (index % 2 == 0) {
            style.left = 20;
            style.top = top;
          } else {
            style.left = this.sysInfo.windowWidth - 90;
            style.top = top;
          }

          return style;
        } // /*************************** 广告-end ***************************/
        ;

        _proto.getSystemInfoSync = function getSystemInfoSync() {} // /**显示右上角转发分享功能 */
        ;

        _proto.showShareMenuWithTicket = function showShareMenuWithTicket(ticket) {
          window['wx'].showShareMenu({
            withShareTicket: ticket,
            success: function success() {},
            fail: function fail() {},
            complete: function complete() {}
          });
        } // /**注册右上角转发分享监听 */
        ;

        _proto.regisiterWXShareCallback = function regisiterWXShareCallback() {} // /**
        // * 显示提示内容
        // * @param title 描述内容
        // * @param duration 时间(毫秒)
        // */
        ;

        _proto.showToast = function showToast(title, duration) {} // /**分享游戏 */
        ;

        _proto.shareGame = function shareGame(callBack) {} // /**手机短震动 */
        ;

        _proto.playVibrateShort = function playVibrateShort() {} // /**手机长震动 */
        ;

        _proto.playVibrateLong = function playVibrateLong() {};

        _proto.showModal = function showModal(content) {
          //提示，取消，重新分享
          return;
        };

        _proto.WxOnHide = function WxOnHide(fun) {};

        _proto.WxOffHide = function WxOffHide(fun) {
          if (fun && WECHAT) {
            window["wx"].offHide(fun);
          }
        };

        _proto.WxOnShow = function WxOnShow(fun) {};

        _proto.WxOffShow = function WxOffShow(fun) {
          if (fun && WECHAT) {
            window["wx"].offShow(fun);
          }
        } // /******************** ald-统计 ********************/
        // /**
        // * 埋点事件
        // * @param eventName 事件名称
        // * @param params 参数
        // */
        ;

        _proto.aldSendEvent = function aldSendEvent(eventName, params) {
          console.log("埋点：", eventName);
        };

        _proto.aldSendTest = function aldSendTest(eventName, params) {};

        _proto.aldSendOpenid = function aldSendOpenid(openId) {// // if (CC_WECHATGAME) {
          // //     window['wx'].aldSendOpenid(openId);
          // // }
        } // /******************** jiujiu-统计 ********************/
        // /**
        // * 统计Banner曝光数
        // */
        ;

        _proto.JJBannerAdShowCount = function JJBannerAdShowCount() {} // /**
        // * 统计激励视频曝光数
        // * @param isEnded 是否播放结束
        // * @param videoName 激励视频名称
        // */
        ;

        _proto.JJSendVideoAdCount = function JJSendVideoAdCount(isEnded, videoName) {} // /**
        // * 主动转发统计素材分享次数
        // * @param cb 分享回调
        // */
        ;

        _proto.JJShareAppMessage = function JJShareAppMessage(shareData, cb) {
          window['wx']["JJShareAppMessage"](function () {
            return {
              title: shareData.title,
              imageUrl: shareData.imageUrl,
              id: shareData.id
            };
          }).then(function (res) {
            cb(res);
          });
        } // /**
        // * 被动转发统计素材分享次数
        // */
        ;

        _proto.JJOnShareAppMessage = function JJOnShareAppMessage(shareData) {
          window['wx']["JJOnShareAppMessage"](function () {
            return {
              title: shareData.title,
              imageUrl: shareData.imageUrl,
              id: shareData.id
            };
          });
        };

        _createClass(WxPlatform, [{
          key: "bannerLoadError",
          get: function get() {
            return WxPlatformBannerAd.Instance.isLoadBannerError;
          } // /*************************** 视频 ***************************/
          ,
          set: function set(v) {}
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new WxPlatform();
            }

            return this._instance;
          }
        }]);

        return WxPlatform;
      }(BasePlatform));
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import AppConfig from "./AppConfig";
      // import BasePlatform from "./BasePlatform";
      // import JJMgr from "./JJMgr";
      // import WxPlatformBannerAd from "./WxPlatformBannerAd";
      //
      //
      // export default class WxPlatform extends BasePlatform {
      //     private static _instance: WxPlatform
      //     public static get instance(): WxPlatform {
      //         if (!this._instance) {
      //             this._instance = new WxPlatform()
      //         }
      //         return this._instance
      //     }
      //     private shareCallBack: Function;
      //     sysInfo: any;
      //
      //     init() {
      //         if (CC_WECHATGAME) {
      //             this.getSystemInfoSync();
      //
      //             this.videoId = AppConfig.wechat.videoAdUnitId[0];
      //             this.interId = AppConfig.wechat.interstitialAdUnitId[0];
      //             this.gridId = AppConfig.wechat.customAd;
      //
      //             this.initAd();
      //
      //             var launchInfo = window['wx'].getLaunchOptionsSync();
      //             var query = launchInfo.query;
      //             console.log("init query:", query);
      //         }
      //     }
      //
      //     /*************************** 广告-start ***************************/
      //     initAd() {
      //         if (CC_WECHATGAME) {
      //             // this.loadVideoAd();
      //             // this.createGameCustomAd();
      //             // this.createSingleCustomAd();
      //         }
      //     }
      //
      //     bannerSize: any;
      //     bannerTopFactor: number = 0;
      //     setBannerTop(top) {
      //         WxPlatformBannerAd.Instance.setBannerTop(top);
      //     }
      //
      //     showBanner() {
      //         return WxPlatformBannerAd.Instance.showBanner();
      //     }
      //
      //     hideBanner() {
      //         WxPlatformBannerAd.Instance.hideBanner();
      //     }
      //
      //     set bannerLoadError(v) { }
      //     get bannerLoadError() { return WxPlatformBannerAd.Instance.isLoadBannerError }
      //
      //     /*************************** 视频 ***************************/
      //     private videoAd: any;
      //     isForceShowVideo: boolean;
      //     private videoEndCallback: Function;
      //     private videoCloseCallback: Function;
      //
      //     loadVideoAd() {
      //         if (CC_WECHATGAME) {
      //             var self = this;
      //             var videoAd = this.videoAd;
      //             if (videoAd != null) {
      //                 videoAd.offLoad(onLoadVideo);
      //                 videoAd.offError(onErrorVideo);
      //                 videoAd.offClose(onCloseVideo);
      //             }
      //
      //             var videoAd = window['wx'].createRewardedVideoAd({ adUnitId: self.videoId });
      //             videoAd.onLoad(onLoadVideo);
      //             videoAd.onError(onErrorVideo);
      //             videoAd.onClose(onCloseVideo);
      //             this.videoAd = videoAd;
      //         }
      //
      //         function onLoadVideo() {
      //             console.log('video 加载成功');
      //         }
      //
      //         function onErrorVideo(err) {
      //             console.error('video 加载错误', err);
      //         }
      //
      //         function onCloseVideo(res) {
      //             // 小于 2.1.0 的基础库版本，res 是一个 undefined
      //             let isEnded = (res && res.isEnded || res === undefined) ? true : false;
      //             if (isEnded) {
      //                 //观看视频成功次数埋点
      //                 self.videoEndCallback && self.videoEndCallback()
      //                 self.videoEndCallback = null
      //             }
      //             self.videoCloseCallback && self.videoCloseCallback(isEnded)
      //             self.videoCloseCallback = null
      //         }
      //     }
      //
      //     /**
      //      *
      //      * @param endCB 看完视频执行回调
      //      * @param closeCB 无论是否看完视频都执行回调（一般不能与endCB并存）
      //      * @param isForceShowVideo 启动游戏是否强制调起视频，无论是否已加载完成
      //      * @returns
      //      */
      //     showVideoAd(endCB?: Function, closeCB?: Function, isForceShowVideo = false) {
      //         if (!CC_WECHATGAME) {
      //             endCB && endCB()
      //             closeCB && closeCB()
      //             return;
      //         }
      //         this.videoEndCallback = endCB;
      //         this.videoCloseCallback = closeCB;
      //         if (this.videoAd == null) {
      //             this.loadVideoAd();
      //         }
      //         if (CC_WECHATGAME) {
      //             var videoAd = this.videoAd;
      //             videoAd.show().then(() => { }).catch(err => {
      //                 videoAd.load().then(() => videoAd.show()).catch(err => {
      //                     this.videoEndCallback && this.videoEndCallback()
      //                     this.videoEndCallback = null
      //                     this.videoCloseCallback && this.videoCloseCallback()
      //                     this.videoCloseCallback = null
      //                 });
      //             });
      //         } else {
      //             this.videoEndCallback && this.videoEndCallback()
      //             this.videoEndCallback = null
      //             this.videoCloseCallback && this.videoCloseCallback()
      //             this.videoCloseCallback = null
      //         }
      //     }
      //     /*************************** 插屏 ***************************/
      //     interAd: any;
      //     createInterAd() {
      //         if (CC_WECHATGAME) {
      //             if (this.interAd) {
      //                 this.interAd.show();
      //                 return
      //             }
      //             this.interAd = window['wx']["createInterstitialAd"]({ adUnitId: this.interId });
      //             this.interAd.onLoad(() => {
      //                 console.log("插屏广告加载成功");
      //             });
      //             this.interAd.onError(() => {
      //                 this.interAd = null
      //             })
      //         }
      //     }
      //     interAdOnClose: Function = null;
      //     showInterAd(obj?) {
      //         // if (!obj) {
      //         //     obj = { onClose: () => { } }
      //         // }
      //         // if (this.interAdOnClose) {
      //         //     this.interAd.offClose(this.interAdOnClose);
      //         // }
      //         // this.interAdOnClose = () => {
      //         //     obj.onClose();
      //         // }
      //         // this.interAd.onClose(this.interAdOnClose);
      //
      //         if (this.interAd) {
      //             this.interAd.show();
      //         }
      //     }
      //
      //     /*************************** 格子 ***************************/
      //     /**首页格子广告 */
      //     homeGridAds: any[];
      //     /**游戏中格子广告 */
      //     gameGridAd: any[];
      //     /**独立格子广告 */
      //     singleGridAd: any;
      //
      //     createHomeCustomAd(isShow?) {
      //         // if (CC_WECHATGAME) {
      //         //     if (!this.homeGridAds) {
      //         //         let gridAmount = JJMgr.instance.dataConfig.front_gezi_number * 2;
      //         //         this.homeGridAds = [];
      //         //         for (let i = 0; i < gridAmount; i++) {
      //         //             let style2 = this.getGridPos(i, 270 * (Math.floor(i / 2) + 1));
      //         //             let gridAd = window['wx']["createCustomAd"]({ adUnitId: this.gridId, adIntervals: 30, style: style2 })
      //         //             this.homeGridAds.push(gridAd);
      //
      //         //             gridAd.onLoad(() => {
      //         //                 if (isShow) { gridAd.show(); }
      //         //             });
      //         //         }
      //         //     }
      //         //     else if (isShow) {
      //         //         this.showHomeGridAd();
      //         //     }
      //         // }
      //     }
      //
      //     createGameCustomAd() {
      //         if (CC_WECHATGAME && JJMgr.instance.dataConfig.front_dangezi_switch && !this.gameGridAd) {
      //             this.gameGridAd = [];
      //             for (let i = 0; i < 2; i++) {
      //                 let style2 = this.getGridPos(i, 80 * (Math.floor(i / 2) + 1));
      //                 let gridAd = window['wx']["createCustomAd"]({ adUnitId: this.gridId[i], adIntervals: 30, style: style2 })
      //                 this.gameGridAd.push(gridAd);
      //                 gridAd.onLoad(() => { /* gridAd.show();  */ });
      //             }
      //         }
      //     }
      //
      //     createSingleCustomAd() {
      //         // if (CC_WECHATGAME) {
      //         //     let style2 = this.getGridPos(1);
      //         //     let gridAd = window['wx']["createCustomAd"]({ adUnitId: this.gridId, adIntervals: 30, style: style2 })
      //         //     this.singleGridAd = gridAd;
      //         //     gridAd.onLoad(() => { });
      //         // }
      //     }
      //
      //     showHomeGridAd() {
      //         // if (!this.homeGridAds) return;
      //         // for (let i = 0; i < this.homeGridAds.length; i++) {
      //         //     this.homeGridAds[i].show();
      //         // }
      //     }
      //
      //     hideHomeGridAd() {
      //         // if (!this.homeGridAds) return;
      //         // for (let i = 0; i < this.homeGridAds.length; i++) {
      //         //     this.homeGridAds[i].hide();
      //         // }
      //     }
      //
      //     showGameGridAd() {
      //         if (!this.gameGridAd) return;
      //         if (JJMgr.instance.dataConfig.front_dangezi_switch) {
      //             for (let i = 0; i < this.gameGridAd.length; i++) {
      //                 this.gameGridAd[i].show();
      //             }
      //         }
      //     }
      //
      //     hideGameGridAd() {
      //         if (!this.gameGridAd) return;
      //         for (let i = 0; i < this.gameGridAd.length; i++) {
      //             this.gameGridAd[i].hide();
      //         }
      //     }
      //
      //     showSingleGridAd() {
      //         // if (!this.singleGridAd) return;
      //         // this.singleGridAd.show();
      //     }
      //
      //     hideSingleGridAd() {
      //         // if (!this.singleGridAd) return;
      //         // this.singleGridAd.hide();
      //     }
      //
      //     getGridPos(index, top = 120) {
      //         let style: any = { width: 20, height: 20 };
      //         if (index % 2 == 0) {
      //             style.left = 20;
      //             style.top = top;
      //         }
      //         else {
      //             style.left = this.sysInfo.windowWidth - 90;
      //             style.top = top;
      //         }
      //         return style;
      //     }
      //
      //     /*************************** 广告-end ***************************/
      //
      //     getSystemInfoSync() {
      //         if (CC_WECHATGAME) {
      //             this.sysInfo = window['wx'].getSystemInfoSync();
      //         }
      //     }
      //
      //     /**显示右上角转发分享功能 */
      //     showShareMenuWithTicket(ticket) {
      //         window['wx'].showShareMenu({
      //             withShareTicket: ticket,
      //             success: function () { },
      //             fail: function () { },
      //             complete: function () { }
      //         })
      //     }
      //
      //     /**注册右上角转发分享监听 */
      //     regisiterWXShareCallback() {
      //         var shareId = 1;
      //         if (CC_WECHATGAME) {
      //             var object = JJMgr.instance.shareContext;
      //             window['wx'].onShareAppMessage(function () {
      //                 console.log("用户点击了转发按钮");
      //                 let shareObj = {
      //                     title: object.title,
      //                     imageUrl: object.image,
      //                     query: "share_id=" + shareId,
      //                     success: function (res) {
      //                         //console.log("分享成功");
      //                     },
      //                     fail: function () {
      //                         //console.log("分享失败");
      //                     },
      //                 }
      //                 return shareObj;
      //             })
      //         }
      //     }
      //
      //     /**
      //      * 显示提示内容
      //      * @param title 描述内容
      //      * @param duration 时间(毫秒)
      //      */
      //     showToast(title, duration) {
      //         if (CC_WECHATGAME) {
      //             window['wx'].showToast({
      //                 title: title,
      //                 duration: duration,
      //                 icon: 'none',
      //                 success: function () { },
      //                 fail: function () { },
      //                 complete: function () { },
      //                 image: "",
      //                 mask: false
      //             });
      //         }
      //     }
      //
      //     /**分享游戏 */
      //     shareGame(callBack?: Function) {
      //         if (CC_WECHATGAME) {
      //             console.log("分享游戏");
      //             // var shareId = 1;
      //             var object = JJMgr.instance.shareContext;
      //             this.JJShareAppMessage(object, callBack);
      //
      //             // var shareObj = {
      //             //     title: object.title,
      //             //     imageUrl: object.image,
      //             //     query: "share_id=" + shareId,
      //             //     success: function () { },
      //             //     fail: function () { },
      //             //     complete: function () { },
      //             // };
      //
      //             // window['wx'].shareAppMessage(shareObj);
      //
      //             // if (callBack) {
      //             //     console.log("分享回调", callBack);
      //             //     this.shareCallBack = callBack;
      //             //     this.shareTime = new Date().getTime();
      //             // }
      //         }
      //     }
      //
      //     /**手机短震动 */
      //     playVibrateShort() {
      //         if (CC_WECHATGAME) {
      //             window['wx'].vibrateShort({
      //                 success: function () { },
      //                 fail: function () { },
      //                 complete: function () { }
      //             })
      //         }
      //     }
      //
      //     /**手机长震动 */
      //     playVibrateLong() {
      //         if (CC_WECHATGAME) {
      //             window['wx'].vibrateLong({
      //                 success: function () { },
      //                 fail: function () { },
      //                 complete: function () { }
      //             })
      //         }
      //     }
      //
      //     showModal(content) { //提示，取消，重新分享
      //         if (!CC_WECHATGAME) return;
      //         var self = this;
      //         window['wx'].showModal({
      //             title: "提示",
      //             content: content,
      //             showCancel: true,
      //             confirmText: "重新分享",
      //
      //             success(res) {
      //                 if (res.confirm) {
      //                     console.log("点击确定");
      //                     self.shareGame(self.shareCallBack);
      //                 }
      //                 else if (res.cancel) {
      //                     console.log("点击取消");
      //                 }
      //             }
      //
      //         });
      //     }
      //
      //     WxOnHide(fun: Function) {
      //         if (cc.sys.platform === cc.sys.WECHAT_GAME) {
      //             window["wx"].onHide(fun)
      //         }
      //     }
      //     WxOffHide(fun: Function) {
      //         if (fun && cc.sys.platform === cc.sys.WECHAT_GAME) {
      //             window["wx"].offHide(fun)
      //         }
      //     }
      //     WxOnShow(fun: Function) {
      //         if (cc.sys.platform === cc.sys.WECHAT_GAME) {
      //             window["wx"].onShow(fun)
      //         }
      //     }
      //     WxOffShow(fun: Function) {
      //         if (fun && cc.sys.platform === cc.sys.WECHAT_GAME) {
      //             window["wx"].offShow(fun)
      //         }
      //     }
      //
      //     /******************** ald-统计 ********************/
      //     /**
      //      * 埋点事件
      //      * @param eventName 事件名称
      //      * @param params 参数
      //      */
      //     aldSendEvent(eventName: string, params?) {
      //         console.log("埋点：", eventName);
      //         if (CC_WECHATGAME) {
      //             // window['wx'].aldSendEvent(eventName, params);
      //
      //             //九九事件打点
      //             window['wx']["JJSendEvent"](() => {
      //                 return {
      //                     name: eventName,
      //                     param: params
      //                 }
      //             });
      //         }
      //     }
      //
      //     aldSendTest(eventName, params?) {
      //         if (CC_WECHATGAME) {
      //             window['wx'].aldSendEvent(eventName, params);
      //         }
      //     }
      //
      //     aldSendOpenid(openId: string) {
      //         // if (CC_WECHATGAME) {
      //         //     window['wx'].aldSendOpenid(openId);
      //         // }
      //     }
      //
      //     /******************** jiujiu-统计 ********************/
      //     /**
      //      * 统计Banner曝光数
      //      */
      //     JJBannerAdShowCount() {
      //         var self = this;
      //         if (CC_WECHATGAME) {
      //             window['wx']["JJBannerAdShowCount"](() => {
      //                 return {
      //                     adUnitId: "",
      //                     adUnitName: "banner",
      //                     pageName: 'all'
      //                 }
      //             });
      //         }
      //     }
      //
      //     /**
      //      * 统计激励视频曝光数
      //      * @param isEnded 是否播放结束
      //      * @param videoName 激励视频名称
      //      */
      //     JJSendVideoAdCount(isEnded, videoName) {
      //         var self = this;
      //         if (CC_WECHATGAME) {
      //             window['wx']["JJSendVideoAdCount"](() => {
      //                 return {
      //                     adUnitId: self.videoId,
      //                     adUnitName: videoName,
      //                     isEnded: isEnded
      //                 }
      //             });
      //         }
      //     }
      //
      //     /**
      //      * 主动转发统计素材分享次数
      //      * @param cb 分享回调
      //      */
      //     JJShareAppMessage(shareData, cb) {
      //         window['wx']["JJShareAppMessage"](() => {
      //             return {
      //                 title: shareData.title,
      //                 imageUrl: shareData.imageUrl,
      //                 id: shareData.id
      //             }
      //         }).then(res => {
      //             cb(res);
      //         });
      //     }
      //
      //     /**
      //      * 被动转发统计素材分享次数
      //      */
      //     JJOnShareAppMessage(shareData) {
      //         window['wx']["JJOnShareAppMessage"](() => {
      //             return {
      //                 title: shareData.title,
      //                 imageUrl: shareData.imageUrl,
      //                 id: shareData.id
      //             }
      //         });
      //     }
      // }

      WxPlatform._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WxPlatformBannerAd.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './JJMgr.ts', './JJWxTrap.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, JJMgr, JJWxTrap;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      JJMgr = module.default;
    }, function (module) {
      JJWxTrap = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "51a2ft6sXpGUbTT7jXb3RY+", "WxPlatformBannerAd", undefined);

      var WxPlatformBannerAd = exports('default', /*#__PURE__*/function () {
        function WxPlatformBannerAd() {
          this._sysInfo = void 0;
          this.isLoadBannerError = false;
          this.bannerIds = void 0;
          this.bannerAdArr = [];
          this.bannerTimeArr = [];
          this.bannerErrorArr = [];
          this.bannerCountArr = [];
          this.currentIndex = 0;
          this.indexTime = 0;
          this.showBanner = void 0;
          this.hideBanner = void 0;
        }

        var _proto = WxPlatformBannerAd.prototype; // /**初始化广告 */

        _proto.initAd = function initAd(bannerIds) {
          if (bannerIds === void 0) {
            bannerIds = [];
          } // //本地bannerIds


          this.bannerIds = [];
          this.bannerIds = this.bannerIds.concat(JJMgr.instance.shuffleArr(bannerIds));
          this.showBanner = this.showBannerFun;
          this.hideBanner = this.hideBannerFun;
          this.createBannerAd();
        };

        _proto.createBannerAd = function createBannerAd() {
          this.bannerAdArr = [];
          this.bannerTimeArr = [];
          this.bannerErrorArr = [];
          this.currentIndex = 0;

          for (var i = 0; i < this.bannerIds.length; i++) {
            this.bannerErrorArr.push(false);
            this.bannerTimeArr.push(0);
            this.bannerCountArr.push(0);
            var bannerAd = this.getBannerAd(i);
            this.bannerAdArr.push(bannerAd);
          }
        };

        _proto.getBannerAd = function getBannerAd(index, isRand) {
          var _this = this;

          if (isRand === void 0) {
            isRand = false;
          }

          console.log('创建banner：', index);
          var bannerAd = window["wx"].createBannerAd({
            adUnitId: isRand ? this.getRandomItemInArr(this.bannerIds) : this.bannerIds[index],
            style: {
              top: this.sysInfo.screenHeight * 0.8,
              width: this.sysInfo.screenWidth * 0.8,
              left: this.sysInfo.screenWidth / 2 - 150
            },
            adIntervals: JJMgr.instance.dataConfig.front_banner_auto_refresh_time / 1000
          });
          bannerAd.onError(function () {
            console.log('banner加载失败：', index);
            _this.bannerErrorArr[index] = true;
          });
          bannerAd.onLoad(function () {
            console.log('banner加载成功:', index);
            _this.bannerErrorArr[index] = false;
          });
          bannerAd.onResize(function () {
            bannerAd.style.top = _this.sysInfo.screenHeight - bannerAd.style.realHeight;
            bannerAd.style.left = _this.sysInfo.screenWidth / 2 - bannerAd.style.realWidth / 2;
          });
          return bannerAd;
        };

        _proto.getIsAllError = function getIsAllError() {
          var isAllError = true;

          for (var i = 0; i < this.bannerErrorArr.length; i++) {
            if (!this.bannerErrorArr[i]) {
              isAllError = false;
              break;
            }
          }

          return isAllError;
        };

        _proto.showBannerFun = function showBannerFun() {
          if (this.currentIndex >= this.bannerAdArr.length) this.currentIndex = 0;

          if (this.bannerCountArr[this.currentIndex] >= JJMgr.instance.dataConfig.front_banner_refresh_num) {
            this.bannerCountArr[this.currentIndex] = 0;
            this.currentIndex++;
            if (this.currentIndex >= this.bannerAdArr.length) this.currentIndex = 0;
          } // //检测是否还有banner


          for (var i = 0; i < this.bannerErrorArr.length; i++) {
            if (this.bannerErrorArr[i] == false) {
              break;
            }
          } // // if (!hasBanner) {
          // //     //全部banner报错
          // //     JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime)
          // //     this.createBannerAd()
          // //     return false
          // // }
          // //banner报错取下一个


          for (var _i = 0; _i < this.bannerErrorArr.length; _i++) {
            if (this.bannerErrorArr[this.currentIndex]) {
              this.bannerTimeArr[this.currentIndex] = 0;
              this.bannerCountArr[this.currentIndex] = 0;
              this.bannerAdArr[this.currentIndex] = this.getBannerAd(this.currentIndex);
              this.currentIndex++;

              if (this.currentIndex >= this.bannerAdArr.length) {
                this.currentIndex = 0;
              }
            } else {
              break;
            }
          }

          this.hideBannerFun();
          console.log('当前展示的bannerId：', this.currentIndex);

          if (this.bannerAdArr[this.currentIndex]) {
            this.bannerAdArr[this.currentIndex].show();
            this.bannerCountArr[this.currentIndex]++;
          }

          JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime); // // console.log('当前展示banner ID：', this.currentIndex)
          // // for (let i = 0; i < this.bannerTimeArr.length; i++) {
          // //     console.log('banner' + i + '展示时间：', this.bannerTimeArr[i])
          // // }

          JJWxTrap.Instance.com.schedule(WxPlatformBannerAd.Instance.updateBannerTime, 0.1);
          return true;
        } // // 游戏首页、游戏主页、游戏结算页 banner每隔 front_dl_banner_time 毫秒切换下一个实例
        ;

        _proto.showBannerFun2 = function showBannerFun2() {
          this.hideBannerFun();
          this.showBannerFun(); // // this.showBannerFun2Int = setInterval(()=>{
          // //     this.showBannerFun2Fun();
          // // }, JJMgr.instance.dataConfig.front_dl_banner_time);
        };

        _proto.showBannerFun2Fun = function showBannerFun2Fun() {
          this.showBannerFun();
        };

        _proto.hideBannerFun = function hideBannerFun(clear) {
          JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime);

          for (var i = 0; i < this.bannerAdArr.length; i++) {
            this.bannerAdArr[i] && this.bannerAdArr[i].hide();
          }

          if (clear) {
            this.hideBannerFun2();
          }
        };

        _proto.hideBannerFun2 = function hideBannerFun2() {// // if(this.showBannerFun2Int){
          // //     clearInterval(this.showBannerFun2Int)
          // // }
        };

        _proto.checkBannerTimeOut = function checkBannerTimeOut() {
          var front_banner_refresh_time = JJMgr.instance.dataConfig.front_banner_refresh_time;

          if (!JJWxTrap.Instance.NewWuchu2) {
            front_banner_refresh_time = 30000;
          }

          if (this.bannerTimeArr[this.currentIndex] >= front_banner_refresh_time / 1000) {
            JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime);
            this.hideBannerFun();
            this.bannerAdArr[this.currentIndex].destroy();
            this.bannerTimeArr[this.currentIndex] = 0;
            this.bannerErrorArr[this.currentIndex] = true;
            this.bannerAdArr[this.currentIndex] = this.getBannerAd(this.currentIndex);
            this.bannerAdArr[this.currentIndex].show();
            JJWxTrap.Instance.com.schedule(WxPlatformBannerAd.Instance.updateBannerTime, 0.1);
          }
        };

        _proto.updateBannerTime = function updateBannerTime() {
          var self = WxPlatformBannerAd.Instance;
          self.bannerTimeArr[self.currentIndex] += 0.1;
          self.checkBannerTimeOut();
        };

        _proto.countIndexTime = function countIndexTime() {
          JJWxTrap.Instance.com.schedule(WxPlatformBannerAd.Instance.updateIndexTime, 0.1);
        };

        _proto.updateIndexTime = function updateIndexTime() {
          var self = WxPlatformBannerAd.Instance;
          self.indexTime += 0.1;

          if (self.indexTime >= JJMgr.instance.dataConfig.front_assign_banner_time / 1000) {
            self.hideBannerFun();
            self.currentIndex++; // //self.currentIndex = self.getRandomIndex(self.currentIndex)

            self.showBannerFun();
            self.indexTime = 0;
          }
        };

        _proto.stopCountIndexTime = function stopCountIndexTime() {
          JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateIndexTime);
        };

        _proto.showHideBanner = function showHideBanner() {
          JJWxTrap.Instance.com.scheduleOnce(WxPlatformBannerAd.Instance.showHideBannerShow, JJMgr.instance.dataConfig.front_gezi_time / 1000);
        };

        _proto.showHideBannerShow = function showHideBannerShow() {
          WxPlatformBannerAd.Instance.showBannerFun();
          JJWxTrap.Instance.com.scheduleOnce(WxPlatformBannerAd.Instance.showHideBannerHide, 1);
        };

        _proto.showHideBannerHide = function showHideBannerHide() {
          WxPlatformBannerAd.Instance.hideBannerFun();
          JJWxTrap.Instance.com.scheduleOnce(WxPlatformBannerAd.Instance.showHideBannerShow, JJMgr.instance.dataConfig.front_gezi_time / 1000);
        };

        _proto.clearShowHideBanner = function clearShowHideBanner() {
          JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.showHideBannerHide);
          JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.showHideBannerShow);
          WxPlatformBannerAd.Instance.hideBannerFun();
        };

        _proto.getRandomIndex = function getRandomIndex(withoutNum) {
          var arr = [];

          for (var i = 0; i < this.bannerIds.length; i++) {
            arr.push(i);
          }

          var randNum = this.getRandomItemInArrWithoutSelf(withoutNum, arr)[0];
          return randNum;
        };

        _proto.setBannerTop = function setBannerTop(a) {} // //打乱数组
        ;

        _proto.shuffleArr = function shuffleArr(arr) {
          var i = arr.length;

          while (i) {
            var j = Math.floor(Math.random() * i--);
            var _ref = [arr[i], arr[j]];
            arr[j] = _ref[0];
            arr[i] = _ref[1];
          }

          return arr;
        };

        _proto.getRandomItemInArrWithoutSelf = function getRandomItemInArrWithoutSelf(self, arr, count) {
          if (count === void 0) {
            count = 1;
          }

          var temp = [].concat(arr);
          temp.splice(temp.indexOf(self), 1);
          temp = this.shuffleArr(temp);
          return temp.slice(0, count);
        };

        _proto.getRandomItemInArr = function getRandomItemInArr(arr) {
          return arr[Math.floor(Math.random() * arr.length)];
        };

        _createClass(WxPlatformBannerAd, [{
          key: "sysInfo",
          get: function get() {
            if (!this._sysInfo) {
              this._sysInfo = window["wx"].getSystemInfoSync();
            }

            return this._sysInfo;
          }
        }], [{
          key: "Instance",
          get: // // showBannerFun2Int: number;
          function get() {
            if (!WxPlatformBannerAd._instance) {
              WxPlatformBannerAd._instance = new WxPlatformBannerAd();
            }

            return WxPlatformBannerAd._instance;
          }
        }]);

        return WxPlatformBannerAd;
      }());
      /**
       * 注意：已把原脚本注释，由于脚本变动过大，转换的时候可能有遗落，需要自行手动转换
       */
      // import JJMgr from "./JJMgr";
      // import JJWxTrap from "./JJWxTrap";
      //
      // export default class WxPlatformBannerAd {
      //
      //     static _instance: WxPlatformBannerAd;
      //     // showBannerFun2Int: number;
      //     static get Instance(): WxPlatformBannerAd {
      //         if (!WxPlatformBannerAd._instance) {
      //             WxPlatformBannerAd._instance = new WxPlatformBannerAd;
      //         }
      //         return WxPlatformBannerAd._instance;
      //     }
      //
      //     private _sysInfo: any;
      //     get sysInfo() {
      //         if (!this._sysInfo) {
      //             this._sysInfo = window["wx"].getSystemInfoSync();
      //         }
      //         return this._sysInfo;
      //     }
      //
      //     isLoadBannerError: boolean = false
      //     /**bannerIds */
      //     bannerIds: string[];
      //
      //     bannerAdArr: any[] = []
      //     bannerTimeArr: number[] = []
      //     bannerErrorArr: boolean[] = []
      //     bannerCountArr: number[] = []
      //     currentIndex: number = 0
      //     indexTime: number = 0
      //
      //     showBanner: Function;
      //     hideBanner: Function;
      //
      //     /**初始化广告 */
      //     initAd(bannerIds = []) {
      //         //本地bannerIds
      //         this.bannerIds = [];
      //         this.bannerIds = this.bannerIds.concat(JJMgr.instance.shuffleArr(bannerIds));
      //         this.showBanner = this.showBannerFun;
      //         this.hideBanner = this.hideBannerFun;
      //         this.createBannerAd()
      //     }
      //
      //     createBannerAd() {
      //         if (CC_PREVIEW) return
      //         this.bannerAdArr = []
      //         this.bannerTimeArr = []
      //         this.bannerErrorArr = []
      //         this.currentIndex = 0
      //         for (let i = 0; i < this.bannerIds.length; i++) {
      //             this.bannerErrorArr.push(false)
      //             this.bannerTimeArr.push(0)
      //             this.bannerCountArr.push(0)
      //             let bannerAd = this.getBannerAd(i)
      //             this.bannerAdArr.push(bannerAd)
      //         }
      //     }
      //     getBannerAd(index: number, isRand: boolean = false) {
      //         console.log('创建banner：', index)
      //         let bannerAd = window["wx"].createBannerAd({
      //             adUnitId: isRand ? this.getRandomItemInArr(this.bannerIds) : this.bannerIds[index],
      //             style: {
      //                 top: this.sysInfo.screenHeight * 0.8,
      //                 width: this.sysInfo.screenWidth * 0.8,
      //                 left: this.sysInfo.screenWidth / 2 - 150
      //             },
      //             adIntervals: JJMgr.instance.dataConfig.front_banner_auto_refresh_time / 1000
      //         })
      //         bannerAd.onError(() => {
      //             console.log('banner加载失败：', index)
      //             this.bannerErrorArr[index] = true;
      //         })
      //         bannerAd.onLoad(() => {
      //             console.log('banner加载成功:', index)
      //             this.bannerErrorArr[index] = false;
      //         })
      //         bannerAd.onResize(() => {
      //             bannerAd.style.top = this.sysInfo.screenHeight - bannerAd.style.realHeight
      //             bannerAd.style.left = this.sysInfo.screenWidth / 2 - bannerAd.style.realWidth / 2
      //         })
      //         return bannerAd
      //     }
      //
      //     getIsAllError() {
      //         let isAllError: boolean = true
      //         for (let i = 0; i < this.bannerErrorArr.length; i++) {
      //             if (!this.bannerErrorArr[i]) {
      //                 isAllError = false
      //                 break
      //             }
      //         }
      //         return isAllError
      //     }
      //
      //     showBannerFun() {
      //         if (CC_PREVIEW) return false
      //         if (this.currentIndex >= this.bannerAdArr.length) this.currentIndex = 0
      //
      //         if (this.bannerCountArr[this.currentIndex] >= JJMgr.instance.dataConfig.front_banner_refresh_num) {
      //             this.bannerCountArr[this.currentIndex] = 0
      //             this.currentIndex++
      //             if (this.currentIndex >= this.bannerAdArr.length) this.currentIndex = 0
      //         }
      //
      //         //检测是否还有banner
      //         let hasBanner: boolean = false
      //         for (let i = 0; i < this.bannerErrorArr.length; i++) {
      //             if (this.bannerErrorArr[i] == false) {
      //                 hasBanner = true
      //                 break
      //             }
      //         }
      //         // if (!hasBanner) {
      //         //     //全部banner报错
      //         //     JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime)
      //         //     this.createBannerAd()
      //         //     return false
      //         // }
      //
      //         //banner报错取下一个
      //         for (let i = 0; i < this.bannerErrorArr.length; i++) {
      //             if (this.bannerErrorArr[this.currentIndex]) {
      //                 this.bannerTimeArr[this.currentIndex] = 0
      //                 this.bannerCountArr[this.currentIndex] = 0
      //                 this.bannerAdArr[this.currentIndex] = this.getBannerAd(this.currentIndex)
      //                 this.currentIndex++
      //                 if (this.currentIndex >= this.bannerAdArr.length) {
      //                     this.currentIndex = 0
      //                 }
      //             } else {
      //                 break
      //             }
      //         }
      //
      //         this.hideBannerFun()
      //
      //         console.log('当前展示的bannerId：', this.currentIndex)
      //         if(this.bannerAdArr[this.currentIndex]){
      //             this.bannerAdArr[this.currentIndex].show()
      //             this.bannerCountArr[this.currentIndex]++
      //         }
      //         JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime)
      //
      //         // console.log('当前展示banner ID：', this.currentIndex)
      //         // for (let i = 0; i < this.bannerTimeArr.length; i++) {
      //         //     console.log('banner' + i + '展示时间：', this.bannerTimeArr[i])
      //         // }
      //         JJWxTrap.Instance.com.schedule(WxPlatformBannerAd.Instance.updateBannerTime, 0.1)
      //         return true
      //     }
      //     // 游戏首页、游戏主页、游戏结算页 banner每隔 front_dl_banner_time 毫秒切换下一个实例
      //     showBannerFun2() {
      //         this.hideBannerFun();
      //         this.showBannerFun();
      //
      //         // this.showBannerFun2Int = setInterval(()=>{
      //         //     this.showBannerFun2Fun();
      //         // }, JJMgr.instance.dataConfig.front_dl_banner_time);
      //     }
      //     showBannerFun2Fun(){
      //         this.showBannerFun();
      //     }
      //
      //     hideBannerFun(clear?) {
      //         if (CC_PREVIEW) return
      //         JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime)
      //         for (let i = 0; i < this.bannerAdArr.length; i++) {
      //             this.bannerAdArr[i] && this.bannerAdArr[i].hide()
      //         }
      //         if(clear){
      //             this.hideBannerFun2();
      //         }
      //     }
      //     hideBannerFun2() {
      //         // if(this.showBannerFun2Int){
      //         //     clearInterval(this.showBannerFun2Int)
      //         // }
      //     }
      //
      //     checkBannerTimeOut() {
      //         if (CC_PREVIEW) return
      //
      //         // 不支持误触的情况下，front_banner_refresh_time 的值前端写死为 30000 毫秒
      //         let front_banner_refresh_time = JJMgr.instance.dataConfig.front_banner_refresh_time;
      //         if(!JJWxTrap.Instance.NewWuchu2){
      //             front_banner_refresh_time = 30000;
      //         }
      //
      //         if (this.bannerTimeArr[this.currentIndex] >= front_banner_refresh_time / 1000) {
      //             JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateBannerTime)
      //             this.hideBannerFun()
      //             this.bannerAdArr[this.currentIndex].destroy()
      //             this.bannerTimeArr[this.currentIndex] = 0
      //             this.bannerErrorArr[this.currentIndex] = true
      //             this.bannerAdArr[this.currentIndex] = this.getBannerAd(this.currentIndex)
      //             this.bannerAdArr[this.currentIndex].show()
      //             JJWxTrap.Instance.com.schedule(WxPlatformBannerAd.Instance.updateBannerTime, 0.1)
      //         }
      //     }
      //
      //     updateBannerTime() {
      //         let self = WxPlatformBannerAd.Instance
      //         self.bannerTimeArr[self.currentIndex] += 0.1
      //         self.checkBannerTimeOut()
      //     }
      //
      //     countIndexTime() {
      //         JJWxTrap.Instance.com.schedule(WxPlatformBannerAd.Instance.updateIndexTime, 0.1)
      //     }
      //     updateIndexTime() {
      //         let self = WxPlatformBannerAd.Instance
      //         self.indexTime += 0.1
      //         if (self.indexTime >= JJMgr.instance.dataConfig.front_assign_banner_time / 1000) {
      //             self.hideBannerFun()
      //             self.currentIndex++
      //             //self.currentIndex = self.getRandomIndex(self.currentIndex)
      //             self.showBannerFun()
      //             self.indexTime = 0
      //         }
      //     }
      //     stopCountIndexTime() {
      //         JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.updateIndexTime)
      //     }
      //
      //     showHideBanner() {
      //         JJWxTrap.Instance.com.scheduleOnce(WxPlatformBannerAd.Instance.showHideBannerShow, JJMgr.instance.dataConfig.front_gezi_time / 1000)
      //     }
      //     showHideBannerShow() {
      //         WxPlatformBannerAd.Instance.showBannerFun()
      //         JJWxTrap.Instance.com.scheduleOnce(WxPlatformBannerAd.Instance.showHideBannerHide, 1)
      //     }
      //     showHideBannerHide() {
      //         WxPlatformBannerAd.Instance.hideBannerFun()
      //         JJWxTrap.Instance.com.scheduleOnce(WxPlatformBannerAd.Instance.showHideBannerShow, JJMgr.instance.dataConfig.front_gezi_time / 1000)
      //     }
      //     clearShowHideBanner() {
      //         JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.showHideBannerHide)
      //         JJWxTrap.Instance.com.unschedule(WxPlatformBannerAd.Instance.showHideBannerShow)
      //         WxPlatformBannerAd.Instance.hideBannerFun()
      //     }
      //
      //     getRandomIndex(withoutNum: number) {
      //         let arr: number[] = []
      //         for (let i = 0; i < this.bannerIds.length; i++) {
      //             arr.push(i)
      //         }
      //         let randNum = this.getRandomItemInArrWithoutSelf(withoutNum, arr)[0]
      //         return randNum
      //     }
      //
      //     setBannerTop(a) {
      //
      //     }
      //     //打乱数组
      //     shuffleArr(arr: any[]) {
      //         let i = arr.length;
      //         while (i) {
      //             let j = Math.floor(Math.random() * i--);
      //             [arr[j], arr[i]] = [arr[i], arr[j]];
      //         }
      //         return arr;
      //     }
      //     getRandomItemInArrWithoutSelf(self: any, arr: any[], count: number = 1) {
      //         let temp: any = [].concat(arr)
      //         temp.splice(temp.indexOf(self), 1)
      //         temp = this.shuffleArr(temp)
      //         return temp.slice(0, count)
      //     }
      //     getRandomItemInArr(arr: any[]): any {
      //         return arr[Math.floor(Math.random() * arr.length)]
      //     }
      // }

      WxPlatformBannerAd._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});