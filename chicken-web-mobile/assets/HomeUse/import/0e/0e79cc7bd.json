[1,["1flYaOYpNFuKkn4hep3hx6","2a9F6KYu9JeaI4m7IMYsgE@f9941","27gM9MxfFNCp69cp1fl5Tm@1f586","a7YStUNeNCOKGpSntUY1g5","9cliuL1FdK3KxWKkACSZLX@f9941","5dAxZaj8ZI8rqoIC6WI3hE@f9941","f1tmlMj8BHm7JboUk4TPsU@f9941","d7EzaTiuFGv7fhlcUccyBB@f9941","02OBjIP1tKr5c8xu8+HcmL@f9941","f5hyWqhxVPWZgXa01c16vu@f9941","acozXXX5JEbIYEcj5ffo0t@f9941","feHBofl/pBx70PkkAxiRMD@f9941","7bixjVnnJKBqFaw1EOi5uq@f9941","91SIVdSjpNLL+CdnLHCyXS@f9941","42JjNpmy9IspVgqyJXrl6n@f9941","20g1ukYUVPvKWKBRznAKo+@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","7dJPkcgtxJd4XtTUedBvfm@f9941","65XDBeLVFILqv12YvbOnJv@f9941","88YCjZyOhFOah6TOGePiR8@f9941","a5I71AjYRNfKwOM8+67ElQ@f9941","b6qFD3tuVJObHHMP2yGSyM@f9941","e01qgELOhO2rRDAe6Y2T2J@f9941","7dy4zsSJFOd6W+fdB7t5V7@f9941","85Gfcdew1Pr6rKdTEkV2Du@f9941","59hMeOgFtDILUMQ2bx9P5U@f9941","48mPdPrZlMor6nTDF2u96X@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","f97kjzR8tBi7Nykj3LXwg6@f9941","98EkoeKtVL1ps1NkIXtcaD","52nSft8QNBur/7fIwiRQ8L@f9941","4fxIfs6uhNN5FK1KUyW5/I@f9941","0c2GA6nWVHAbe06/EpATrU","a8f4RlmY5Mr6RZSxJjFjH/","f3mkcWcHJKkoCLRi5GxvcV@f9941","81N1hO3BVN75zpgKAKxYh3@f9941","5a6a2akHNDqZNrhWGV1L2m@f9941","2eik3/XmNJaZchW82tiqC2@f9941","0bZ/2IJmdA0Y/yVkAmrhWC@f9941","7fW0vDT/JP37CtmVYrmVCh@f9941","08K/YPzEJAZ4ZGVLIC+Lxe@f9941","2dwnENSuxILI1TdUTaknb8@f9941","a5hypqSExB+YT+Rjvmwk4m@f9941","14WjTX2GtOhZof+rw9RRZy@f9941","cfc0ltlfhAeJnCFO8g+b6R@f9941","c7L4w9nRBHfKm4NtiKzBa7@f9941","98Z9j83T5NBppbOLZUjs9k@f9941","3aDHXfq41ApoyAG96H7kCS@f9941","3ep9jQjvBOCoBdYy69YFM5@f9941","a0TBwcxedHPKQDOpLSPMEO@f9941","b22DDTE/9DcLvHkba7xxfV@f9941","88bJXtWM9PAbbb2Xq3Q4R7@f9941","1cIt1OEjBPn6IJ7zuT7OZ2@f9941","06cXctT/9M3INoYgeNA5en@f9941","bfMbgrsGhAd7SrhsmDhvSx@f9941","5a+F1ew2BP5aMwWW4WLTPN@f9941","e1y1r/GUdHV7xFPz56JQ8R@f9941","a7yfy/b4tHyb3/mPpX3u7U@f9941","38r1sKBoJAxIGV/QlfEhSd@f9941","02OBjIP1tKr5c8xu8+HcmL@6c48a","5afxHlYmJEPLU96JhFraHV@6c48a","06cXctT/9M3INoYgeNA5en@6c48a","08K/YPzEJAZ4ZGVLIC+Lxe@6c48a","0bZ/2IJmdA0Y/yVkAmrhWC@6c48a","cfzBb+XixK5rGnz3a5t0lt@f9941","daAPEDzxVFQZh9qrcl5vVh@f9941","a68rOtn6VFiKKUqbnjHUq/@f9941","79cvW2wjBA5oLfFbk4ENnv@f9941","d1gER3lHJLlJkS8Vm+pzmW@f06f0","d1gER3lHJLlJkS8Vm+pzmW@438fe","39BBXZbR9H0abcoteu5LlG","0b+WADfHtFeqReZNI30UY0@64be3","0b+WADfHtFeqReZNI30UY0@438fe","5bHIYyEXtIBoQKC7aSeojX@9ebbc","5bHIYyEXtIBoQKC7aSeojX@438fe","f3aBiUzR5GkZFB9j7LX3vQ","5bHIYyEXtIBoQKC7aSeojX@3f0c5","d8AFyytWZKcqmI7LUH089p","10yG2Fj4xAGpatv6xAAlOe@f25ae","10yG2Fj4xAGpatv6xAAlOe@438fe","055lB+5xdGc63Bo94da9Rd","10yG2Fj4xAGpatv6xAAlOe@c6160","bbUD48RLlK6ppH6b0XWD5I","7dYXiABWJBMacpCEi1ZXLZ@3c70c","7dYXiABWJBMacpCEi1ZXLZ@438fe","804J4saDVFfrZB7lmniklX","7dYXiABWJBMacpCEi1ZXLZ@b16e1","c9V1DVhQNJMrpmlDJNkmiH@f9941","c0VOr4i/tFebiRe3JLEmYI@f9941","5ewKL2DxBJgoTVu/xggmZB@f9941","882MDHLbFNfaAsaK+Pw4Ny@f9941","a8Qk0aLyJN9KgVWCDfe44M@f9941","d7VLs1LsBKQqVU5AZ9xvmU@f9941","a68YXGepZJfbzWIxex/nZf@f9941","e09RxUJ6xAQIt4tAelmJYs@f9941","b0wiRMhn9P1JdkEeW8DAB6@f9941","e4h/vpgrBC3Ki6phwrsKI/@f9941","86YUSS1ztNPK5e92yrWrYS@f9941","c7WM8mJQVFXIXBmS1wdjBv@f9941","e5DLCFgj5GMoacNEZz08J4@f9941","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","6faPHJpGFK9LziG5sLFbQS@6c48a","14WjTX2GtOhZof+rw9RRZy@6c48a","1cIt1OEjBPn6IJ7zuT7OZ2@6c48a","2a9F6KYu9JeaI4m7IMYsgE@6c48a","2dwnENSuxILI1TdUTaknb8@6c48a","2eik3/XmNJaZchW82tiqC2@6c48a","38r1sKBoJAxIGV/QlfEhSd@6c48a","ca9K8CjwNEP5YUbHHtp28Y@6c48a","3aDHXfq41ApoyAG96H7kCS@6c48a","3ep9jQjvBOCoBdYy69YFM5@6c48a","42JjNpmy9IspVgqyJXrl6n@6c48a","48mPdPrZlMor6nTDF2u96X@6c48a","4fxIfs6uhNN5FK1KUyW5/I@6c48a","52nSft8QNBur/7fIwiRQ8L@6c48a","59hMeOgFtDILUMQ2bx9P5U@6c48a","5a6a2akHNDqZNrhWGV1L2m@6c48a","5a+F1ew2BP5aMwWW4WLTPN@6c48a","5dAxZaj8ZI8rqoIC6WI3hE@6c48a","5ewKL2DxBJgoTVu/xggmZB@6c48a","65XDBeLVFILqv12YvbOnJv@6c48a","79cvW2wjBA5oLfFbk4ENnv@6c48a","7bixjVnnJKBqFaw1EOi5uq@6c48a","7dJPkcgtxJd4XtTUedBvfm@6c48a","7dy4zsSJFOd6W+fdB7t5V7@6c48a","7fW0vDT/JP37CtmVYrmVCh@6c48a","d5EJoKH4ZIOLpN8O2uCbe0@6c48a","81N1hO3BVN75zpgKAKxYh3@6c48a","85Gfcdew1Pr6rKdTEkV2Du@6c48a","86YUSS1ztNPK5e92yrWrYS@6c48a","88YCjZyOhFOah6TOGePiR8@6c48a","88bJXtWM9PAbbb2Xq3Q4R7@6c48a","882MDHLbFNfaAsaK+Pw4Ny@6c48a","91SIVdSjpNLL+CdnLHCyXS@6c48a","98Z9j83T5NBppbOLZUjs9k@6c48a","9cliuL1FdK3KxWKkACSZLX@6c48a","a0TBwcxedHPKQDOpLSPMEO@6c48a","a5I71AjYRNfKwOM8+67ElQ@6c48a","a5hypqSExB+YT+Rjvmwk4m@6c48a","a68YXGepZJfbzWIxex/nZf@6c48a","a68rOtn6VFiKKUqbnjHUq/@6c48a","a7yfy/b4tHyb3/mPpX3u7U@6c48a","a8Qk0aLyJN9KgVWCDfe44M@6c48a","48C5SUTntBg6HsQMH+JFks@6c48a","acozXXX5JEbIYEcj5ffo0t@6c48a","b0wiRMhn9P1JdkEeW8DAB6@6c48a","b22DDTE/9DcLvHkba7xxfV@6c48a","b6qFD3tuVJObHHMP2yGSyM@6c48a","a80rw0dfVFN4Ok8jPInqge@6c48a","bfMbgrsGhAd7SrhsmDhvSx@6c48a","c0VOr4i/tFebiRe3JLEmYI@6c48a","c7L4w9nRBHfKm4NtiKzBa7@6c48a","c7WM8mJQVFXIXBmS1wdjBv@6c48a","c9V1DVhQNJMrpmlDJNkmiH@6c48a","cfc0ltlfhAeJnCFO8g+b6R@6c48a","d7EzaTiuFGv7fhlcUccyBB@6c48a","d7VLs1LsBKQqVU5AZ9xvmU@6c48a","356Slqff9Lla+o5TdiZ3B9@6c48a","e01qgELOhO2rRDAe6Y2T2J@6c48a","e09RxUJ6xAQIt4tAelmJYs@6c48a","e1y1r/GUdHV7xFPz56JQ8R@6c48a","e4h/vpgrBC3Ki6phwrsKI/@6c48a","e5DLCFgj5GMoacNEZz08J4@6c48a","f1tmlMj8BHm7JboUk4TPsU@6c48a","525YFC1lBEEajVp0BTOPqf@6c48a","f3mkcWcHJKkoCLRi5GxvcV@6c48a","f5hyWqhxVPWZgXa01c16vu@6c48a","f97kjzR8tBi7Nykj3LXwg6@6c48a","feHBofl/pBx70PkkAxiRMD@6c48a"],["node","_parent","_spriteFrame","_textureSource","_defaultClip","_normalSprite","_target","mainTexture","_effectAsset","_mesh","spriteFrame","_skeleton","target","_hoverSprite","_pressedSprite","_disabledSprite","wordSprite","nameSprite","defendClip","attackClip","showSprite","bar","getNewPanel","hand","tipsLabel_Down","cup","show","bookBtn","recycleIcon","chestNode","moreGameBtn","startGameBtn","awardCupClip","book","pool","item","content","scrollView","showLabel","levelClip","upagreBtn","camera","_cameraComponent","enemeyNameLabel","scene","videoUnlcok","upgradeUnlock","_envmapHDR","_envmapLDR"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_active","_id","_components","_parent","_lpos","_children","_lscale","_lrot","_euler"],-1,9,1,5,2,5,5,5],["cc.Widget",["_alignFlags","_verticalCenter","_top","_left","_bottom","_originalHeight","_right","_originalWidth","_isAbsVerticalCenter","_horizontalCenter","_alignMode","node"],-8,1],["cc.Sprite",["_sizeMode","_type","_fillType","_fillStart","_useGrayscale","_fillRange","node","_spriteFrame","_color","_fillCenter"],-3,1,6,5,5],["cc.Node",["_name","_layer","_active","_components","_children","_parent","_lpos","_lscale"],0,12,2,1,5,5],"cc.ImageAsset",["cc.Label",["_string","_actualFontSize","_fontSize","_isBold","_overflow","_enableWrapText","_lineHeight","node"],-4,1],["cc.Node",["_name","_parent","_lpos","_children","_lrot","_euler","_components","_lscale"],2,1,5,9,5,5,2,5],["cc.Layout",["_layoutType","_spacingX","_paddingLeft","_resizeMode","_paddingRight","_paddingTop","_spacingY","_verticalDirection","_isAlign","node"],-6,1],["15c1cOMq9hNFYnUkQHabVYz",["_value","_isCenter","_spaceX","node","spriteFrame"],0,1,6],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.Button",["_transition","node","clickEvents","_normalSprite","_normalColor","_target","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,9,6,5,1,6,6,6],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.SkeletalAnimation",["playOnLoad","node","_clips","_defaultClip","_sockets"],2,1,3,6,9],["cc.Camera",["_visibility","_projection","_priority","_orthoHeight","_far","_clearFlags","_name","_fov","_fovAxis","node","_color"],-6,1,5],["poolData",["chickenType"],2],"cc.TextureCube",["cc.Material",["_states","_defines","_props"],1,12],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.SceneAsset",["_name"],2],["36dd3dUb6hE7IQKahYTEUuR",["node","pool","book","awardCupClip","startGameBtn","moreGameBtn","chestNode","recycleIcon","bookBtn","show","cup","tipsLabel_Down","hand","getNewPanel"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1],["a8bc8XRFjNI04id3etY5jJa",["node","scrollView","content","item","showSprite","attackClip","defendClip","nameSprite","wordSprite","icons","names","words"],3,1,1,1,1,1,1,1,1,1,3,3,3],["b8cc4o/70JAC7E2rcm7FOQ8",["node","upagreBtn","levelClip","showLabel","videoUnlcok","upgradeUnlock"],3,1,1,1,1,6,6],["860e4GyAQpJ/pFumbHbSlQB",["node","camera"],3,1,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["ea30f/A+0RNfa65OdaeORxY",["node","player","enemy","enemeyNameLabel"],3,1,1,1,1],["cc.BlockInputEvents",["node"],3,1],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["69119QstPhOxbARLgmGmk+H",["node","bar"],3,1,1],["d59030Cq+lEjK/1xsiW78N2",["node"],3,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Mask",["node"],3,1],["cc.Scene",["_name","autoReleaseAssets","_children","_globals"],1,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",["_enabled","_useHDR","_envmapHDR","_envmapLDR"],1,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.SkinnedMeshRenderer",["node","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.MeshRenderer",["node","_materials","lightmapSettings","_mesh"],3,1,3,4,6],["cc.DirectionalLight",["node","_staticSettings"],3,1,4],["cc.StaticLightSettings",[],3],["c1784EDyn9GwJODMeR0kLVl",["node","chickenPool","recycleIcon","moveShow","chest","chickenIcon"],3,1,9,1,1,1,3],["cc.ScrollView",["bounceDuration","vertical","node","_content"],1,1,1],["293eemEXMFOOaCZrayj8CgW",["node","icons","names","words"],3,1,3,3,3],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[1,0,5,6,2],[7,0,1,3,2,4,5,2],[1,0,5,7,6,9,10,2],[10,0,1,1],[3,6,7,1],[1,0,1,5,4,6,3],[7,0,1,3,2,4,7,5,2],[1,0,5,6,9,10,2],[10,0,1,2,1],[31,0,1,2,3,2],[3,6,8,7,1],[1,0,1,5,7,4,6,3],[3,6,1],[1,0,2,1,5,4,6,4],[1,0,1,5,4,3],[4,0,1,5,3,6,3],[3,0,6,7,2],[1,0,1,5,7,4,3],[1,0,1,5,7,4,6,8,3],[1,0,2,1,5,4,6,8,4],[3,1,6,7,2],[2,0,7,5,11,4],[12,0,1,3,3],[17,0,1,2,3],[19,0,1,2,3],[6,0,1,2,3,7,5],[41,1],[2,0,1,11,3],[15,0,2],[11,0,1,2,4,5,3,2],[18,0,1,2,3,4],[1,0,7,6,9,10,2],[1,0,1,7,4,6,3],[1,0,5,7,4,2],[1,0,7,9,10,2],[1,0,5,7,2],[7,0,1,3,2,2],[40,0,1,2,3,4,5,1],[15,1],[1,0,1,5,4,6,8,3],[1,0,5,4,2],[1,0,1,7,4,3],[1,0,1,7,4,6,8,3],[4,0,1,5,3,3],[10,0,1],[3,0,6,2],[3,0,4,6,8,7,3],[11,0,1,2,4,5,3,6,7,8,2],[8,9,1],[13,0,1,2,4,3,2],[28,0,1,2],[42,0,1,2,3,1],[1,0,2,1,5,7,4,4],[1,0,5,4,6,2],[4,0,1,5,4,3,6,3],[7,0,1,6,2,2],[2,0,6,1,11,4],[2,0,3,2,11,4],[2,0,4,11,3],[2,0,9,11,3],[13,0,1,2,3,2],[9,0,2,1,3,4,4],[9,0,1,3,4,3],[29,0,1,1],[6,0,1,3,7,4],[20,0,2],[1,0,2,1,7,4,4],[1,0,3,7,4,6,3],[1,0,1,3,7,4,6,4],[1,0,2,1,5,7,4,6,4],[1,0,5,4,9,8,10,2],[1,0,5,4,8,2],[1,0,5,4,6,9,8,10,2],[4,0,2,1,4,3,4],[4,0,1,4,3,6,7,3],[4,0,1,4,3,3],[4,0,1,5,4,3,3],[2,0,2,1,11,4],[2,0,3,6,2,4,11,6],[2,0,1,8,11,4],[2,0,3,1,11,4],[2,0,2,4,1,5,11,6],[2,0,4,1,11,4],[2,0,3,10,11,4],[2,0,2,11,3],[21,0,1,2,3,4,5,6,7,8,9,10,11,12,13,1],[22,0,1,2,3,4,5,6,7,8,9,10,11,1],[23,0,1,2,3,4,5,1],[3,1,0,6,7,3],[3,1,0,6,8,7,3],[3,1,2,3,6,9,4],[3,1,2,3,5,6,9,5],[24,0,1,1],[11,0,1,2,3,2],[12,0,1,2,3,4],[25,0,1,1],[8,0,2,4,5,1,6,9,7],[8,3,0,1,9,4],[8,3,0,2,1,7,8,9,7],[26,0,1,2,3,1],[27,0,1],[9,0,1,3,3],[9,0,2,1,3,4],[30,0,1],[32,0,1],[33,0,1,2,3,3],[34,0,1,2,3,4,1],[35,0,1,2,3,4,2],[36,0,1,1],[37,0,1,2,3,3],[38,1],[39,1],[6,0,1,2,4,5,3,7,7],[6,0,1,2,7,4],[6,0,1,6,4,7,5],[14,1,2,3,4,5,0,9,10,7],[14,6,7,8,0,9,10,5],[43,0,1,1],[44,1],[45,0,1,2,3,4,5,1],[46,0,1,2,3,3],[47,0,1,2,3,1],[48,0,1,2,4]],[[[{"name":"ksjm_fx","rect":{"x":0,"y":0,"width":53,"height":66},"offset":{"x":-0.5,"y":0},"originalSize":{"width":54,"height":66},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[60]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[61,3]],[[{"name":"Chick07","rect":{"x":0,"y":0,"width":317,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":318,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[62]],[[{"name":"Chick03","rect":{"x":0,"y":0,"width":141,"height":47},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[63]],[[{"name":"tjjm_ms_dk","rect":{"x":0,"y":0,"width":674,"height":167},"offset":{"x":0,"y":0.5},"originalSize":{"width":674,"height":168},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[64]],[[[30,"Skin-0",2796660156,["Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008/Bone009","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bone055","Bip001/Bip001 Pelvis/Bip001 Spine/Bone057","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bone017","Bip001/Bip001 Pelvis/Bip001 Spine/Bone017/Bone018","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bone046","Bip001/Bip001 Pelvis/Bip001 Spine/Bone048"],[[[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007961550145410001,-2.2083790351956623e-9,0,0.0007961550145410001,0.9999997019767761,0.0000014026923054188956,0,-0.8954627513885498,0.0010009447578340769,4.638861739181266e-9,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,1.6291687643388286e-7,-0.0000013868005908079795,0,-1.6292068494294654e-7,1,-0.0000027577068522077752,0,-0.5538838505744934,2.799727338853586e-9,7.69988844240288e-7,1],[7,0.8362900018692017,0.08740312606096268,0.5412760972976685,0,-0.539489209651947,-0.044970422983169556,0.8407907485961914,0,0.09782916307449341,-0.9951574206352234,0.009544728323817253,0,0.155292809009552,0.003005382837727666,-1.2781851291656494,1],[7,0.8347641825675964,0.10094060748815536,0.5412760972976685,0,-0.5386897921562195,-0.05370492860674858,0.8407908082008362,0,0.11393912136554718,-0.9934419393539429,0.00954472552984953,0,-0.07313785701990128,0.0018206991953775287,-1.2781851291656494,1],[7,0.9685469269752502,-0.0000013817837043461623,0.24883116781711578,0,-0.24883118271827698,-1.615458415926696e-7,0.9685468673706055,0,-0.0000012981246300114435,-1,-5.002955276722787e-7,0,-0.18721283972263336,-4.4181149405631004e-7,-1.2619315385818481,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.5538630485534668,-0.004807609599083662,0.2409680187702179,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060084879398346,-0.0008022890542633832,0.2409680038690567,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.11363556236028671,-0.0017899028025567532,0.2409680336713791,1],[7,1.1752034900780473e-8,-8.916826743643469e-8,-1,0,-0.1696649193763733,-0.9855018258094788,8.588157385247541e-8,0,-0.985501766204834,0.1696649193763733,-2.6710377909466843e-8,0,-0.5040633678436279,0.8067043423652649,-2.6612507753043246e-8,1],[7,4.698937061675679e-8,-8.850243915503597e-8,-1,0,-0.12223055958747864,-0.9925017356872559,8.209529056557585e-8,0,-0.9925016760826111,0.12223056703805923,-5.7454737856232896e-8,0,-0.7630423903465271,0.7710146903991699,-4.3321531251194756e-8,1],[7,-0.8362897634506226,-0.08740585297346115,0.5412760376930237,0,-0.539489209651947,-0.044970422983169556,-0.8407907485961914,0,0.09783145040273666,-0.9951571822166443,-0.009546209126710892,0,0.15529277920722961,0.0030053844675421715,1.2781850099563599,1],[7,-0.8347638845443726,-0.10094334185123444,0.5412760972976685,0,-0.5386898517608643,-0.05370492488145828,-0.8407907485961914,0,0.11394142359495163,-0.993441641330719,-0.009546221233904362,0,-0.0731377899646759,0.0018206938402727246,1.2781851291656494,1],[7,-0.9685469269752502,-0.000001360030182695482,0.24883116781711578,0,-0.24883118271827698,-1.615458415926696e-7,-0.9685468673706055,0,0.0000013574506283475785,-1,-1.8195318318703357e-7,0,-0.18721283972263336,-4.418113803694723e-7,1.2619315385818481,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.553862988948822,-0.004807609133422375,-0.24096810817718506,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060080409049988,-0.0008022895199246705,-0.24096812307834625,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.1136355847120285,-0.0017899028025567532,-0.24096809327602386,1],[7,0.32790839672088623,-0.06360384821891785,0.94256591796875,0,0.571391761302948,0.8078979849815369,-0.14426440000534058,0,0.7523214221000671,-0.585879921913147,-0.30125924944877625,0,-1.193467140197754,-0.9403395652770996,0.13649781048297882,1],[7,-0.31276053190231323,0.023043308407068253,-0.9495524764060974,0,0.49993661046028137,0.8540163636207581,-0.14394260942935944,0,0.8076164722442627,-0.51973557472229,-0.2786228060722351,0,-1.1045746803283691,-1.0428223609924316,0.1259332150220871,1],[7,0.8347641825675964,-0.5411955714225769,0.10137157887220383,0,-0.5386897921562195,-0.8408332467079163,-0.05303541570901871,0,0.11393912136554718,-0.010335772298276424,-0.9934340715408325,0,-0.3015294671058655,1.2781860828399658,0.0008029166492633522,1],[7,9.136626033523498e-8,2.940556687036633e-9,-1,0,0.9149177670478821,-0.4036404490470886,8.240567694883794e-8,0,-0.4036404490470886,-0.9149177670478821,-3.9569481913304116e-8,0,-1.6701561212539673,0.744115948677063,-2.795633236019057e-7,1],[7,1.886903078229807e-9,6.792306095348977e-8,-1,0,0.7883754372596741,-0.6151944994926453,-4.0298303360941645e-8,0,-0.6151944994926453,-0.7883754372596741,-5.470968034160251e-8,0,-1.638730764389038,1.1808820962905884,-4.5721709085455586e-8,1],[7,0.0000013430886838250444,-0.000001402693328600435,1,0,1,1.6292257498662366e-7,-0.0000013430885701382067,0,-1.6292068494294654e-7,1,0.0000014026935559741105,0,-1.2931724786758423,-5.373119904561463e-8,0.000001738707965159847,1],[7,-0.8347638845443726,0.5411955714225769,0.1013743132352829,0,-0.5386898517608643,-0.8408332467079163,0.05303540825843811,0,0.11394142359495163,-0.01033727079629898,0.9934337139129639,0,-0.3015294671058655,1.2781862020492554,-0.0008028923766687512,1],[7,-0.1836378574371338,0.0028329973574727774,-0.9829898476600647,0,0.08587609976530075,0.9962188005447388,-0.013171873055398464,0,0.9792356491088867,-0.08683419972658157,-0.18318675458431244,0,-0.5332214832305908,-1.4157981872558594,-0.11129197478294373,1],[7,0.1909463256597519,-0.00277319410815835,0.9815964698791504,0,0.08545911312103271,0.9962459802627563,-0.01380945835262537,0,0.9778733849525452,-0.08652323484420776,-0.1904664784669876,0,-0.5333605408668518,-1.4159709215164185,-0.1061711460351944,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[24,".bin",2924934222,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":110664,"length":26352,"count":6588,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":110664,"count":1537,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,22,23,24]]},"minPosition",8,[1,-1.0728731155395508,0.0012688270071521401,-1.2066993713378906],"maxPosition",8,[1,1.0728731155395508,2.301602840423584,0.7406718730926514]]],-1],0,0,[],[],[]],[[[65,"Home"],[31,"Bip001 Spine",[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56],[1,0.3415794372558594,-0.0002878685190808028,4.7410151182702975e-7],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[31,"Bip001 Spine",[-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112],[1,0.3415794372558594,-0.0002878685190808028,4.7410151182702975e-7],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[31,"Bip001 Spine",[-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168],[1,0.3415794372558594,-0.0002878685190808028,4.7410151182702975e-7],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[31,"Bip001 Spine",[-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-181,-182,-183,-184,-185,-186,-187,-188,-189,-190,-191,-192,-193,-194,-195,-196,-197,-198,-199,-200,-201,-202,-203,-204,-205,-206,-207,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-219,-220,-221,-222,-223,-224],[1,0.3415794372558594,-0.0002878685190808028,4.7410151182702975e-7],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[31,"Bip001 Spine",[-225,-226,-227,-228,-229,-230,-231,-232,-233,-234,-235,-236,-237,-238,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-250,-251,-252,-253,-254,-255,-256,-257,-258,-259,-260,-261,-262,-263,-264,-265,-266,-267,-268,-269,-270,-271,-272,-273,-274,-275,-276,-277,-278,-279,-280],[1,0.3415794372558594,-0.0002878685190808028,4.7410151182702975e-7],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[41,"StartMenu",33554432,[-297,-298,-299,-300,-301,-302,-303,-304,-305,-306],[[3,-281,[5,750,1334]],[21,45,100,100,-282],[85,-296,-295,-294,-293,-292,-291,-290,-289,-288,-287,-286,-285,-284,-283]]],[32,"Player",33554432,[-308,-309,-310,-311,-312,-313,-314,-315,-316,-317,-318,-319],[[44,-307]],[1,0,-610,0]],[32,"Enemy",33554432,[-321,-322,-323,-324,-325,-326,-327,-328,-329,-330,-331,-332],[[44,-320]],[1,0,10,0]],[66,"Book",false,33554432,[-344,-345,-346,-347,-348,-349],[[3,-333,[5,750,1334]],[21,45,750,1334,-334],[86,-343,-342,-341,-340,-339,-338,-337,-336,-335,[118,119,120,121,122,123,124,125,126,127],[128,129,130,131,132,133,134,135,136,137],[138,139,140,141,142,143,144,145,146,147]]]],[67,"ShowStage","57yYgEKntCM4uovKdJvYxL",[-354,-355,-356,-357,-358,-359,-360],[[87,-353,-352,-351,-350,51,52]],[1,0,0,-7.677]],[11,"Show",33554432,6,[-366,-367,-368,-369,-370],[[3,-361,[5,375,667]],[45,0,-362],[92,-364,-363],[77,18,-133.711,470.368,-365]],[1,0,470.368,0]],[11,"Chest",33554432,6,[-377,-378,-379],[[3,-371,[5,124,125]],[20,1,-372,85],[29,3,-375,[[22,"c1784EDyn9GwJODMeR0kLVl","addChicken",-374]],[4,4292269782],-373,86],[56,34,15.060000000000002,119,-376]],[1,297.94,119,0]],[73,"GetNew",false,33554432,[-383,-384,-385,-386,-387,-388],[[[3,-380,[5,750,1334]],[21,45,750,1334,-381],-382],4,4,1]],[68,"Canvas",33554432,"0esodtpshN7YJHRwX3x4au",[-393,6,9,13,-394],[[3,-389,[5,750,1334]],[95,-391,-390],[78,45,5.684341886080802e-14,5.684341886080802e-14,-1.1368683772161603e-13,-1.1368683772161603e-13,-392]],[1,375.00000000000006,666.9999999999999,0]],[32,"Item",33554432,[-398,-399,-400,-401],[[3,-395,[5,120,120]],[4,-396,108],[93,3,-397,[[94,"a8bc8XRFjNI04id3etY5jJa","clickItem","0",9]],109]],[1,12.5,0,0]],[11,"upagreBtn",33554432,11,[-406,-407],[[3,-402,[5,220,70]],[20,1,-403,46],[47,3,-405,[[22,"b8cc4o/70JAC7E2rcm7FOQ8","clickUpgrade",10]],[4,4292269782],-404,47,48,49,50]],[1,0,-114.469,0]],[54,"Pool",33554432,6,[-413],[[[3,-408,[5,500,600]],[16,0,-409,69],[27,2,14.884,-410],[96,3,40,40,25,25,25,-411],-412],4,4,4,4,1],[1,0,14.884,0]],[32,"Battle",33554432,[7,-417,8,-418],[[3,-414,[5,312,173]],[4,-415,265],[79,18,0.06674287856071964,false,-416]],[1,0,89.035,0]],[11,"grade",33554432,6,[-422,-423],[[3,-419,[5,142,42]],[57,9,43.77699999999999,86.38699999999994,-420],[4,-421,9]],[1,-260.223,559.613,0]],[54,"clip",33554432,19,[-426,-427,-428,-429],[[[3,-424,[5,0,0]],-425],4,1],[1,2.706,0,0]],[41,"Chiken",33554432,[-431,-432,-433,-434,-435],[[3,-430,[5,120,120]]]],[11,"Rubbish",33554432,6,[-439],[[3,-436,[5,124,125]],[20,1,-437,71],[56,34,15.060000000000002,-36.266,-438]],[1,297.94,-36.266,0]],[69,"MoveShow",false,33554432,6,[-442,-443,-444],[[3,-440,[5,120,120]],[4,-441,80]],[1,-150,215,0]],[17,"Chiken",33554432,23,[-446,-447,-448,-449,-450],[[3,-445,[5,120,120]]]],[5,"Book",33554432,6,[[3,-451,[5,124,125]],[20,1,-452,97],[47,3,-454,[[22,"36dd3dUb6hE7IQKahYTEUuR","clickBook",6]],[4,4292269782],-453,98,99,100,101],[80,10,20,-40,-455]],[1,-293,-40,0]],[52,"Loading",false,33554432,14,[-461,18],[[3,-456,[5,750,1334]],[21,45,100,100,-457],[99,-459,7,8,-458],[100,-460]]],[11,"Layout",33554432,6,[-465,-466],[[3,-462,[5,634,100]],[97,1,1,50,-463],[58,20,275,-464]],[1,0,-342,0]],[5,"startBtn",33554432,27,[[3,-467,[5,292,100]],[20,1,-468,4],[29,3,-470,[[22,"36dd3dUb6hE7IQKahYTEUuR","clickStartGame",6]],[4,4292269782],-469,5]],[1,-171,0,0]],[5,"moreBtn",33554432,27,[[3,-471,[5,292,100]],[20,1,-472,6],[29,3,-474,[[22,"36dd3dUb6hE7IQKahYTEUuR","clickMoreGame",6]],[4,4292269782],-473,7]],[1,171,0,0]],[5,"right",33554432,11,[[3,-475,[5,53,66]],[20,1,-476,10],[29,3,-478,[[22,"b8cc4o/70JAC7E2rcm7FOQ8","clickRightSwitch",10]],[4,4292269782],-477,56],[59,16,175,-479]],[1,175,0,0]],[33,"Leader03",10,[-482,-483,-484],[[49,true,-481,[28],[[50,"Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand",-480]],29]]],[33,"Leader04",10,[-487,-488,-489],[[49,true,-486,[35],[[50,"Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand",-485]],36]]],[33,"Leader05",10,[-492,-493,-494],[[49,true,-491,[42],[[50,"Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand",-490]],43]]],[74,"value",33554432,[-498,-499],[[[3,-495,[5,300,200]],-496,[48,-497]],4,1,4],[1,-0.177,1.399,0],[1,0.75,0.75,1]],[39,"left",33554432,11,[[3,-500,[5,53,66]],[20,1,-501,57],[29,3,-503,[[22,"b8cc4o/70JAC7E2rcm7FOQ8","clickLeftSwitch",10]],[4,4292269782],-502,58],[59,16,-175,-504]],[1,-175,0,0],[1,-1,1,1]],[11,"0",33554432,17,[-507,21,-508],[[3,-505,[5,120,120]],[4,-506,68]],[1,-150,215,0]],[42,"value",33554432,[-512,-513],[[3,-509,[5,300,200]],[61,"99",-2,true,-510,62],[48,-511]],[1,-0.177,1.399,0],[1,0.75,0.75,1]],[42,"value",33554432,[-517,-518],[[3,-514,[5,300,200]],[61,"99",-2,true,-515,75],[48,-516]],[1,-0.177,1.399,0],[1,0.75,0.75,1]],[32,"content",33554432,[15],[[3,-519,[5,145,120]],[98,1,1,25,25,0,true,-520]],[1,0,5.493,0]],[18,"show",33554432,9,[-524,-525],[[3,-521,[5,120,120]],[4,-522,115],[27,18,309.106,-523]],[1,0,309.106,0],[1,1.75,1.75,1]],[5,"closeBtn",33554432,9,[[3,-526,[5,88,88]],[20,1,-527,116],[29,3,-529,[[22,"a8bc8XRFjNI04id3etY5jJa","closePanel",9]],[4,4292269782],-528,117],[57,9,75,75,-530]],[1,-256,548,0]],[18,"show",33554432,13,[-534,-535],[[3,-531,[5,120,120]],[4,-532,153],[27,18,193.573,-533]],[1,0,193.573,0],[1,1.75,1.75,1]],[5,"getButton",33554432,13,[[3,-536,[5,292,100]],[20,1,-537,154],[47,3,-539,[[22,"293eemEXMFOOaCZrayj8CgW","clickGetBtn",13]],[4,4292269782],-538,155,156,157,158],[58,20,361.494,-540]],[1,0,-255.50599999999997,0]],[17,"bg",33554432,6,[-544],[[3,-541,[5,750,1334]],[88,1,0,-542,3],[21,45,750,1640,-543]]],[33,"Leader01",10,[-546,-547],[[60,true,-545,[15],16]]],[33,"Leader02",10,[-549,-550],[[60,true,-548,[20],21]]],[17,"Bar",33554432,22,[-555],[[3,-551,[5,120,120]],[4,-552,70],[63,-554,-553]]],[17,"Bar",33554432,12,[-560],[[3,-556,[5,120,120]],[4,-557,81],[63,-559,-558]]],[42,"countValue",33554432,[-563,-564],[[3,-561,[5,0,0]],[62,"99",true,-562,82]],[1,0.16200000000003456,1.502999999999929,0],[1,0.7,0.7,1]],[17,"TeachTips",33554432,6,[-567,-568],[[3,-565,[5,750,1334]],[21,45,100,100,-566]]],[15,"Label",33554432,50,[[[3,-569,[5,750,75.6]],-570,[81,18,273.80000000000007,984.5999999999999,354.437,75.6,-571],[103,-572]],4,1,4,4],[1,0,354.437,0]],[11,"choosePanel",33554432,9,[-576],[[3,-573,[5,750,205]],[4,-574,110],[82,18,375,-164.895,-575]],[1,0,-164.895,0]],[11,"wordPanel",33554432,9,[-580],[[3,-577,[5,674,167]],[4,-578,111],[27,18,36.758,-579]],[1,0,36.758,0]],[17,"Chiken",33554432,40,[-582,-583,-584],[[3,-581,[5,120,120]]]],[11,"wordPanel",33554432,13,[-588],[[3,-585,[5,674,167]],[4,-586,149],[27,18,-78.775,-587]],[1,0,-78.775,0]],[17,"Chiken",33554432,42,[-590,-591,-592],[[3,-589,[5,120,120]]]],[5,"jzjm_zs",33554432,44,[[8,-593,[5,748,4408],[0,0.5,1]],[89,2,0,-594,[4,352321535],0],[9,true,-595,[1],2]],[1,0,1000,0]],[34,"Bip001 Pelvis",[1,-596,-597],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[34,"Bip001 Pelvis",[2,-598,-599],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[34,"Bip001 Pelvis",[3,-600,-601],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[34,"Bip001 Pelvis",[4,-602,-603],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[34,"Bip001 Pelvis",[5,-604,-605],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[11,"clip",33554432,16,[-608],[[3,-606,[5,0,0]],[62,"3",true,-607,44]],[1,0,17.458,0]],[11,"level",33554432,11,[34],[[3,-609,[5,52,52]],[4,-610,53]],[1,-116.23,85.001,0]],[75,"label",33554432,[-613],[[[3,-611,[5,120,50.4]],-612],4,1]],[11,"info",33554432,11,[65],[[3,-614,[5,599,38]],[4,-615,54]],[1,0,-53.025,0]],[5,"icon",33554432,65,[[3,-616,[5,32,34]],[4,-617,55],[83,8,-50,1,-618]],[1,-94,0,0]],[11,"level",33554432,21,[37],[[3,-619,[5,52,52]],[4,-620,63]],[1,-47.091999999999985,49.52499999999998,0]],[18,"attackIcon",33554432,21,[-623],[[3,-621,[5,52,58]],[4,-622,64]],[1,-40.974999999999994,-39.26700000000005,0],[1,0.4,0.4,1]],[18,"defendIcon",33554432,21,[-626],[[3,-624,[5,52,58]],[4,-625,65]],[1,11.911000000000001,-39.26700000000005,0],[1,0.4,0.4,1]],[17,"Lock",33554432,36,[-628,-629],[[3,-627,[5,120,120]]]],[11,"level",33554432,24,[38],[[3,-630,[5,52,52]],[4,-631,76]],[1,-47.091999999999985,49.52499999999998,0]],[18,"attackIcon",33554432,24,[-634],[[3,-632,[5,52,58]],[4,-633,77]],[1,-40.974999999999994,-39.26700000000005,0],[1,0.4,0.4,1]],[18,"defendIcon",33554432,24,[-637],[[3,-635,[5,52,58]],[4,-636,78]],[1,11.911000000000001,-39.26700000000005,0],[1,0.4,0.4,1]],[11,"count",33554432,12,[49],[[3,-638,[5,48,48]],[4,-639,83]],[1,51,60.489,0]],[5,"hand",33554432,50,[[3,-640,[5,130,145]],[4,-641,102]],[1,-99.755,175.43200000000002,0]],[14,"bg_Gray",33554432,9,[[3,-642,[5,750,1334]],[46,0,true,-643,[4,3355443200],103],[21,45,100,100,-644]]],[76,"ScrollView",33554432,52,[-647],[[[3,-645,[5,750,200]],-646],4,1]],[11,"view",33554432,78,[39],[[3,-648,[5,750,200]],[104,-649]],[1,0,3.1134999999999984,0]],[41,"tjjm_js",33554432,[-652],[[3,-650,[5,56,64]],[4,-651,107]]],[18,"attackIcon",33554432,54,[-655],[[3,-653,[5,52,58]],[4,-654,113]],[1,-40.975,-82.851,0],[1,0.4,0.4,1]],[18,"defendIcon",33554432,54,[-658],[[3,-656,[5,52,58]],[4,-657,114]],[1,11.911,-81.962,0],[1,0.4,0.4,1]],[15,"name",33554432,9,[[[3,-659,[5,141,47]],-660,[27,18,479.886,-661]],4,1,4],[1,0,479.886,0]],[14,"bg_Gray",33554432,13,[[3,-662,[5,750,1334]],[46,0,true,-663,[4,3355443200],148],[21,45,100,100,-664]]],[18,"attackIcon",33554432,56,[-667],[[3,-665,[5,52,58]],[4,-666,151]],[1,-40.975,-82.851,0],[1,0.4,0.4,1]],[18,"defendIcon",33554432,56,[-670],[[3,-668,[5,52,58]],[4,-669,152]],[1,11.911,-81.962,0],[1,0.4,0.4,1]],[15,"name",33554432,13,[[[3,-671,[5,141,47]],-672,[27,18,364.353,-673]],4,1,4],[1,0,364.353,0]],[5,"ksjm_gx",33554432,13,[[3,-674,[5,276,108]],[4,-675,159],[84,17,140.183,-676]],[1,0,472.817,0]],[14,"bg_Gray",33554432,26,[[3,-677,[5,750,1334]],[46,0,true,-678,[4,3355443200],190],[21,45,100,100,-679]]],[19,"12",false,33554432,7,[[8,-680,[5,108,140],[0,0.5,0.8]],[10,-681,[4,16777215],191],[9,true,-682,[192],193]],[1,70,380,0],[1,-1,1,1]],[13,"11",false,33554432,7,[[8,-683,[5,108,140],[0,0.5,0.8]],[10,-684,[4,16777215],194],[9,true,-685,[195],196]],[1,-70,380,0]],[13,"10",false,33554432,7,[[8,-686,[5,108,140],[0,0.5,0.8]],[10,-687,[4,16777215],197],[9,true,-688,[198],199]],[1,0,380,0]],[19,"9",false,33554432,7,[[8,-689,[5,108,140],[0,0.5,0.8]],[10,-690,[4,16777215],200],[9,true,-691,[201],202]],[1,100,326,0],[1,-1,1,1]],[13,"8",false,33554432,7,[[8,-692,[5,108,140],[0,0.5,0.8]],[10,-693,[4,16777215],203],[9,true,-694,[204],205]],[1,-100,326,0]],[19,"7",false,33554432,7,[[8,-695,[5,108,140],[0,0.5,0.8]],[10,-696,[4,16777215],206],[9,true,-697,[207],208]],[1,35,326,0],[1,-1,1,1]],[13,"6",false,33554432,7,[[8,-698,[5,108,140],[0,0.5,0.8]],[10,-699,[4,16777215],209],[9,true,-700,[210],211]],[1,-35,326,0]],[19,"5",false,33554432,7,[[8,-701,[5,108,140],[0,0.5,0.8]],[10,-702,[4,16777215],212],[9,true,-703,[213],214]],[1,140,266,0],[1,-1,1,1]],[13,"4",false,33554432,7,[[8,-704,[5,108,140],[0,0.5,0.8]],[10,-705,[4,16777215],215],[9,true,-706,[216],217]],[1,-140,266,0]],[19,"3",false,33554432,7,[[8,-707,[5,108,140],[0,0.5,0.8]],[10,-708,[4,16777215],218],[9,true,-709,[219],220]],[1,70,266,0],[1,-1,1,1]],[13,"2",false,33554432,7,[[8,-710,[5,108,140],[0,0.5,0.8]],[10,-711,[4,16777215],221],[9,true,-712,[222],223]],[1,-70,266,0]],[13,"1",false,33554432,7,[[8,-713,[5,108,140],[0,0.5,0.8]],[10,-714,[4,16777215],224],[9,true,-715,[225],226]],[1,0,266,0]],[11,"ppjm_battle_blue",33554432,18,[-718],[[3,-716,[5,590,118]],[4,-717,227]],[1,0,-398,0]],[19,"12",false,33554432,8,[[8,-719,[5,108,140],[0,0.5,0.8]],[10,-720,[4,16777215],228],[9,true,-721,[229],230]],[1,70,380,0],[1,-1,1,1]],[13,"11",false,33554432,8,[[8,-722,[5,108,140],[0,0.5,0.8]],[10,-723,[4,16777215],231],[9,true,-724,[232],233]],[1,-70,380,0]],[13,"10",false,33554432,8,[[8,-725,[5,108,140],[0,0.5,0.8]],[10,-726,[4,16777215],234],[9,true,-727,[235],236]],[1,0,380,0]],[19,"9",false,33554432,8,[[8,-728,[5,108,140],[0,0.5,0.8]],[10,-729,[4,16777215],237],[9,true,-730,[238],239]],[1,100,326,0],[1,-1,1,1]],[13,"8",false,33554432,8,[[8,-731,[5,108,140],[0,0.5,0.8]],[10,-732,[4,16777215],240],[9,true,-733,[241],242]],[1,-100,326,0]],[19,"7",false,33554432,8,[[8,-734,[5,108,140],[0,0.5,0.8]],[10,-735,[4,16777215],243],[9,true,-736,[244],245]],[1,35,326,0],[1,-1,1,1]],[13,"6",false,33554432,8,[[8,-737,[5,108,140],[0,0.5,0.8]],[10,-738,[4,16777215],246],[9,true,-739,[247],248]],[1,-35,326,0]],[19,"5",false,33554432,8,[[8,-740,[5,108,140],[0,0.5,0.8]],[10,-741,[4,16777215],249],[9,true,-742,[250],251]],[1,140,266,0],[1,-1,1,1]],[13,"4",false,33554432,8,[[8,-743,[5,108,140],[0,0.5,0.8]],[10,-744,[4,16777215],252],[9,true,-745,[253],254]],[1,-140,266,0]],[19,"3",false,33554432,8,[[8,-746,[5,108,140],[0,0.5,0.8]],[10,-747,[4,16777215],255],[9,true,-748,[256],257]],[1,70,266,0],[1,-1,1,1]],[13,"2",false,33554432,8,[[8,-749,[5,108,140],[0,0.5,0.8]],[10,-750,[4,16777215],258],[9,true,-751,[259],260]],[1,-70,266,0]],[13,"1",false,33554432,8,[[8,-752,[5,108,140],[0,0.5,0.8]],[10,-753,[4,16777215],261],[9,true,-754,[262],263]],[1,0,266,0]],[11,"ppjm_battle_red",33554432,18,[-757],[[3,-755,[5,590,118]],[4,-756,264]],[1,0,210,0]],[105,"Home",true,[14,10],[106,[107,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[108,[4,4283190348],[0,1024,1024]],[109,true,false,266,267],[110],[111]]],[5,"icon",33554432,19,[[3,-758,[5,71,70]],[4,-759,8]],[1,-71.495,8.413,0]],[5,"9",33554432,20,[[3,-760,[5,28,34]],[12,-761]],[1,-42,0,0]],[5,"9",33554432,20,[[3,-762,[5,28,34]],[12,-763]],[1,-14,0,0]],[5,"9",33554432,20,[[3,-764,[5,28,34]],[12,-765]],[1,14,0,0]],[5,"9",33554432,20,[[3,-766,[5,28,34]],[12,-767]],[1,42,0,0]],[2,"Bip001 R Hand Socket",31,[-768],[1,-0.9433727268003133,0.9123544659922979,0.048367983406950976],[3,0.056204184973404694,0.011144820025817577,0.9577359035286716,-0.28188441189641317],[1,-176.39097515246553,-172.22748209186176,-32.594429265352225]],[2,"Bip001 R Hand Socket",32,[-769],[1,-0.9433727268003133,0.9123544659922979,0.048367983406950976],[3,0.056204184973404694,0.011144820025817577,0.9577359035286716,-0.28188441189641317],[1,-176.39097515246553,-172.22748209186176,-32.594429265352225]],[2,"Bip001 R Hand Socket",33,[-770],[1,-0.9433727268003133,0.9123544659922979,0.048367983406950976],[3,0.056204184973404694,0.011144820025817577,0.9577359035286716,-0.28188441189641317],[1,-176.39097515246553,-172.22748209186176,-32.594429265352225]],[14,"3",33554432,63,[[3,-771,[5,28,34]],[12,-772]]],[39,"video",33554432,16,[[3,-773,[5,66,50]],[4,-774,45]],[1,-84.53199999999998,1.393000000000029,0],[1,0.5,0.5,1]],[5,"9",33554432,34,[[3,-775,[5,28,34]],[12,-776]],[1,-14,0,0]],[5,"9",33554432,34,[[3,-777,[5,28,34]],[12,-778]],[1,12,0,0]],[14,"bg",33554432,36,[[3,-779,[5,120,120]],[16,0,-780,59]]],[5,"icon",33554432,21,[[3,-781,[5,110,127.5]],[16,0,-782,60]],[1,-0.293,9.923,0]],[5,"ksjm_js_sz",33554432,21,[[3,-783,[5,120,38]],[16,0,-784,61]],[1,0,-40.94100000000003,0]],[5,"9",33554432,37,[[3,-785,[5,28,34]],[12,-786]],[1,-14,0,0]],[5,"9",33554432,37,[[3,-787,[5,28,34]],[12,-788]],[1,12,0,0]],[5,"value",33554432,69,[[3,-789,[5,55.62,50.4]],[25,"99",50,50,true,-790]],[1,66.537,1.807,0]],[5,"value",33554432,70,[[3,-791,[5,55.62,50.4]],[25,"99",50,50,true,-792]],[1,65.912,1.807,0]],[14,"yxjm_suo",33554432,71,[[3,-793,[5,87,80]],[4,-794,66]]],[39,"js_btn_2",33554432,71,[[3,-795,[5,66,50]],[4,-796,67]],[1,28,-4,0],[1,0.4,0.4,1]],[43,"value",33554432,47,[[[3,-797,[5,120,120]],-798],4,1]],[14,"bg",33554432,23,[[3,-799,[5,120,120]],[16,0,-800,72]]],[5,"icon",33554432,24,[[3,-801,[5,110,127.5]],[16,0,-802,73]],[1,-0.293,9.923,0]],[5,"ksjm_js_sz",33554432,24,[[3,-803,[5,120,38]],[16,0,-804,74]],[1,0,-40.94100000000003,0]],[5,"9",33554432,38,[[3,-805,[5,28,34]],[12,-806]],[1,-14,0,0]],[5,"9",33554432,38,[[3,-807,[5,28,34]],[12,-808]],[1,12,0,0]],[5,"value",33554432,73,[[3,-809,[5,55.62,50.4]],[25,"99",50,50,true,-810]],[1,66.537,1.807,0]],[5,"value",33554432,74,[[3,-811,[5,55.62,50.4]],[25,"99",50,50,true,-812]],[1,65.912,1.807,0]],[17,"Lock",33554432,23,[-814],[[3,-813,[5,120,120]]]],[14,"yxjm_suo",33554432,146,[[3,-815,[5,87,80]],[4,-816,79]]],[43,"value",33554432,48,[[[3,-817,[5,120,120]],-818],4,1]],[5,"9",33554432,49,[[3,-819,[5,28,34]],[12,-820]],[1,-14,0,0]],[5,"9",33554432,49,[[3,-821,[5,28,34]],[12,-822]],[1,14,0,0]],[39,"video",33554432,12,[[3,-823,[5,66,50]],[4,-824,84]],[1,53.482,62.651,0],[1,0.5,0.5,1]],[14,"bg",33554432,15,[[3,-825,[5,120,120]],[16,0,-826,104]]],[14,"select",33554432,15,[[3,-827,[5,120,120]],[4,-828,105]]],[17,"Chiken",33554432,15,[-830],[[3,-829,[5,120,120]]]],[5,"icon",33554432,154,[[3,-831,[5,110,127.5]],[16,0,-832,106]],[1,-0.293,9.923,0]],[52,"lock",false,33554432,15,[80],[[44,-833]]],[5,"Label",33554432,80,[[3,-834,[5,35,50.4]],[112,"50",20,20,2,false,true,-835]],[1,11.023,-8.281,0]],[15,"word",33554432,53,[[[3,-836,[5,389,89]],-837],4,1],[1,0,9.883,0]],[14,"bg",33554432,40,[[3,-838,[5,120,120]],[16,0,-839,112]]],[15,"icon",33554432,54,[[[3,-840,[5,110,127.5]],-841],4,1],[1,-0.293,9.923,0]],[15,"value",33554432,81,[[[3,-842,[5,55.62,50.4]],-843],4,1],[1,66.537,1.807,0]],[15,"value",33554432,82,[[[3,-844,[5,55.62,50.4]],-845],4,1],[1,65.912,1.807,0]],[15,"word",33554432,55,[[[3,-846,[5,389,89]],-847],4,1],[1,0,9.883,0]],[14,"bg",33554432,42,[[3,-848,[5,120,120]],[16,0,-849,150]]],[15,"icon",33554432,56,[[[3,-850,[5,110,127.5]],-851],4,1],[1,-0.293,9.923,0]],[15,"value",33554432,85,[[[3,-852,[5,55.62,50.4]],-853],4,1],[1,66.537,1.807,0]],[15,"value",33554432,86,[[[3,-854,[5,55.62,50.4]],-855],4,1],[1,65.912,1.807,0]],[14,"Label",33554432,102,[[3,-856,[5,40,50.4]],[64,"我",40,true,-857]]],[43,"Label",33554432,115,[[[3,-858,[5,40,50.4]],-859],4,1]],[55,"Camera",14,[-860],[1,0,0,1000]],[115,0,1073741824,880.0251256281407,2000,6,41943040,170,[4,4278190080]],[101,"9999",true,20],[35,"1",45,[-861]],[40,"Leader01",173,[[37,-862,[11,12],[26],45,13,14]]],[2,"Bip001",45,[58],[1,0,0.5538838505744934,-2.7976041483412928e-9],[3,-0.5000003576277408,-0.49999964237200345,-0.49999964237200345,0.5000003576277408],[1,-90,-89.99991803772996,0]],[36,"Bip001 Neck",1,[[7,"Bip001 Head",-863,[1,0.0361407995223999,0,-2.117582368135751e-22],[3,-7.265599787883253e-14,1.1042733174299356e-9,-0.0003988305609355657,0.9999999204670887],[1,4.21424291253915e-11,1.265404279071084e-7,-0.04570261697650697]]],[1,0.36156851053237915,-0.000028777983970940113,-7.981881822161085e-11]],[2,"Bip001 L Clavicle",1,[-864],[1,0.2801923155784607,0.00006292969919741154,0.49533236026763916],[3,0.6128494051046567,-0.00024511126315241414,0.7901996254940081,0.00031377136001196616],[1,179.9557697821271,-104.4083488281371,0.011198542610264862]],[2,"Bip001 L UpperArm",177,[-865],[1,0.06854209303855896,-1.4210854715202004e-13,1.1920928955078125e-7],[3,-0.0031089797470419266,0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,0.5495678086236702,18.417639908626843,-5.614239029902418]],[1,"Bip001 L Forearm",178,[[7,"Bip001 L Hand",-866,[1,0.22839155793190002,3.469446951953614e-18,-2.220446049250313e-16],[3,-0.7068252124052276,-6.582823321315215e-10,6.588067459888234e-10,0.7073882378922517],[1,-89.95437890588063,4.492611105837074e-15,1.0672171927718989e-7]]],[1,0.2283916473388672,3.725290298461914e-9,1.1920928955078125e-7],[3,2.0649073607475246e-18,4.075061401749951e-17,-0.00810088520513424,0.9999671872911096],[1,2.7447772677110676e-16,4.672053206816481e-15,-0.9283032185516256]],[2,"Bip001 R Clavicle",1,[-867],[1,0.2801923155784607,0.00006567745003849268,-0.49533236026763916],[3,-0.6128493678865936,0.00024291956445071482,0.7901996543589614,0.00031547118072789955],[1,-179.955848867482,104.40835411447217,0.0115063810465215]],[2,"Bip001 R UpperArm",180,[-868],[1,0.06854209303855896,-2.842170943040401e-14,-1.1920928955078125e-7],[3,0.0031089797470419266,-0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,-0.5495678086236702,-18.417639908626843,-5.614239029902418]],[1,"Bip001 R Forearm",181,[[7,"Bip001 R Hand",-869,[1,0.2283916175365448,1.862645149230957e-8,0],[3,0.7068252124052276,-1.316564553240738e-9,-1.3176133809553418e-9,0.7073882378922517],[1,89.95437890588063,8.992385156758068e-15,-2.1344342056244653e-7]]],[1,0.22839152812957764,-7.450580596923828e-9,-1.1920928955078125e-7],[3,-3.773675820299622e-18,6.953021029531917e-17,-0.008100894517749086,0.9999671872156666],[1,-3.6792100925359395e-16,7.964856056974922e-15,-0.9283042857336966]],[2,"Bone014",1,[-870],[1,0.9016814827919006,-0.16620145738124847,-3.576278970740532e-7],[3,0.8204482627518984,-0.545374859246599,-0.1592498687415361,-0.06379961093100726],[1,-144.9599557847161,43.03525191800192,-60.99572743570296]],[1,"Bone015",183,[[0,"Bone016",-871,[1,0.17065280675888062,2.220446049250313e-16,0]]],[1,0.2109774947166443,-3.5762786865234375e-7,0],[3,0.013840689213228043,0.07062936517773824,0.09123383389515168,0.9932252089277056],[1,0.8513140666443272,8.056399614568244,10.555425884491925]],[2,"Bone017",1,[-872],[1,0.9329524636268616,0.006207577884197235,-1.1920930376163597e-7],[3,0.9452697475813631,-0.25360026529346813,-0.2029219235644872,-0.031220228817822337],[1,-169.44859951835804,26.85230799640193,-27.824884197659852]],[1,"Bone018",185,[[0,"Bone019",-873,[1,0.30884039402008057,4.440892098500626e-16,-1.4901161193847656e-8]]],[1,0.2076650857925415,-5.960464477539063e-8,5.960464477539063e-8],[3,0.03613674268677419,0.11236885936781277,0.1682927608746565,0.9786444307865612],[1,2.0034570327753047,12.751783162518256,19.725780022967598]],[2,"Bone020",1,[-874],[1,0.906788170337677,0.12963071465492249,-6.661338571267413e-15],[3,0.9481296591209838,0.24509234860599208,-0.19876644124122353,0.03836394122382767],[1,169.01731060961293,26.295211785624716,26.71210427485875]],[1,"Bone021",187,[[0,"Bone022",-875,[1,0.16476237773895264,0.0000013113021850585938,-5.551115123125783e-17]]],[1,0.20464777946472168,-5.960464477539063e-8,0],[3,0.008307466313383617,0.10104896164599238,0.055506371161730565,0.9932971036473304],[1,0.30477364429702875,11.60041664798797,6.4275959085883185]],[2,"Bone005",1,[-876],[1,-0.31098389625549316,-0.5923760533332825,-8.344650268554688e-7],[3,-0.42288719799809726,0.9061823314150982,6.15264684325026e-7,1.908425665451616e-7],[1,-0.00011386262569439461,179.9999227307888,-50.03400606098685]],[1,"Bone006",189,[[0,"Bone007",-877,[1,0.12936758995056152,0,7.450580596923828e-9]]],[1,0.15301230549812317,5.960464477539063e-8,1.3988923797114694e-8],[3,-0.02847290608537811,0.10372917393021469,0.13282358696222316,0.9852854646452963],[1,-4.964775359024229,12.665943619279231,14.822852541428624]],[2,"Bone008",1,[-878],[1,-0.1864808201789856,-0.6331885457038879,-8.34464913168631e-7],[3,-0.6440305100538997,0.7649998053066674,4.98990515435206e-7,4.754895702936878e-7],[1,-0.000462507426605731,179.99953940382395,-80.18605061146266]],[1,"Bone009",191,[[0,"Bone010",-879,[1,0.16327983140945435,-8.344650268554688e-7,-3.725290298461914e-9]]],[1,0.22114378213882446,-1.1102230246251565e-16,-6.9274577185751696e-9],[3,-0.03201106959581647,0.04722837021360231,0.07318508679539422,0.995685048366726],[1,-4.09379744120405,5.72510544169884,8.204978271429885]],[2,"Bone011",1,[-880],[1,-0.052560269832611084,-0.6348226070404053,-9.536742027194123e-7],[3,0.8096754585239455,-0.5868778849671988,-3.780735385237567e-7,-5.685013230944716e-7],[1,-179.99974876130244,0.00023561350371702336,-71.87153010388089]],[1,"Bone012",193,[[0,"Bone013",-881,[1,0.26897573471069336,-1.4901161193847656e-7,1.4901161193847656e-8]]],[1,0.2352738380432129,-5.960464477539063e-8,2.664765474946762e-8],[3,-0.03139486236296435,-0.019944152323655595,-0.06752988851919654,0.9970237246735336],[1,-3.777692517752904,-2.545153265995996,-7.666428594673814]],[2,"Bone001",1,[-882],[1,-0.12136167287826538,0.6267284154891968,7.748602683932404e-7],[3,0.008800632467346676,0.9999612736838474,8.666027187390251e-7,-3.608613557185051e-8],[1,-0.00009935329299687917,-179.99999499026762,1.0084912132622457]],[2,"Bone002",195,[-883],[1,0.1900234818458557,0.000005304813385009766,-2.1419708673420246e-8],[3,0.0011409692143065063,0.07066804114640339,0.01553731119993357,0.9973782221958022],[1,0.004584340621566644,8.105630307357805,1.7853051888012772]],[1,"Bone003",196,[[0,"Bone004",-884,[1,0.19731539487838745,-5.960464477539063e-8,0]]],[1,0.19963356852531433,-5.960464477539063e-8,0],[3,-0.00458090560252861,-0.0177723800358147,0.07224471774890884,0.9972180596886038],[1,-0.3803222028973737,-2.0144548658258965,8.293868239180254]],[2,"Bone023",1,[-885],[1,0.3754916787147522,0.5513330698013306,7.152557373046875e-7],[3,0.2873016068711859,0.9578401676108977,5.975467872852589e-7,-6.968010691281707e-8],[1,-0.00008130283770854925,-179.99996727722532,33.3929518592193]],[2,"Bone024",198,[-886],[1,0.2070872187614441,-2.220446049250313e-16,-1.3571721524385794e-8],[3,0.004208503857234987,0.0006225413675165585,-0.15791546185656688,0.9874434707081498],[1,0.5130628308917761,0.1542934722454072,-18.171355129527033]],[2,"Bone025",199,[-887],[1,0.22183185815811157,-2.980232238769531e-7,0],[3,0.002902650233141969,0.024008338930223375,-0.09119263161938501,0.9955395914888401],[1,0.591853572811918,2.817084141656892,-10.453202709834361]],[2,"Bone026",200,[-888],[1,0.23736679553985596,0.000004291534423828125,3.725290298461914e-9],[3,-0.0002839148501031005,0.022400075497033593,-0.016858031918518097,0.9996069041227753],[1,0.010756860055955083,2.5676206844581224,-1.9321237219449572]],[1,"Bone027",201,[[0,"Bone028",-889,[1,0.34696388244628906,-5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.18080151081085205,0.0000013113021850585938,-1.3877787807814457e-17],[3,-0.00852465419233676,-0.005205312596749417,0.1578778430927509,0.9874081332721804],[1,-0.916109025074623,-0.45757664503186946,18.17186988538253]],[2,"Bone032",1,[-890],[1,-0.1371343731880188,-0.4868207573890686,0.45237958431243896],[3,0.11535127031226004,-0.6298771672772465,0.7621545403924247,-0.09523284695603418],[1,101.35335284515278,-176.6532740929764,-16.886608649983]],[1,"Bone033",203,[[0,"Bone034",-891,[1,0.28710493445396423,5.960464477539063e-8,1.1920928955078125e-7]]],[1,0.28638458251953125,-1.1920928955078125e-7,5.364418029785156e-7],[3,0.07119469277661244,-0.1552731976211619,-0.1198384899551764,0.9779878762777208],[1,6.060120925422759,-17.251685451156085,-14.863104013399319]],[2,"Bone035",1,[-892],[1,-0.1371343731880188,-0.4868195056915283,-0.45238110423088074],[3,-0.09523276962954226,0.7621552330740298,-0.6298763141559929,0.11535141590730125],[1,78.64651408105023,176.65323560688648,-16.886608689442152]],[1,"Bone036",205,[[0,"Bone037",-893,[1,0.28710508346557617,4.470348358154297e-8,1.1920928955078125e-7]]],[1,0.286384254693985,-2.9802322387695312e-8,5.960464477539063e-8],[3,-0.08969791373746544,-0.07142771147081593,-0.02274856751952749,0.9931439316539157],[1,-10.457769774349906,-8.397133152767221,-1.8550669730931832]],[2,"Bone029",1,[-894],[1,-0.32085472345352173,0.6124598383903503,8.344648563252122e-7],[3,0.004985236885757944,0.9999875736113638,-0.000006004100951980773,-2.9932240717468475e-8],[1,0.0006880278383291512,-179.99999999999963,0.571268433130425]],[1,"Bone030",207,[[0,"Bone031",-895,[1,0.22829708456993103,5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.24331533908843994,-0.000014960765838623047,1.4626493793912232e-8],[3,-0.001397583529531738,0.09804550644517858,0.08618548588222198,0.9914419738186554],[1,-1.143939715457056,11.39375689723688,9.823971622893042]],[1,"Bone040",1,[[0,"Bone041",-896,[1,0.3134060502052307,1.1920928955078125e-7,-4.470348358154297e-8]]],[1,0.45121103525161743,0.5788355469703674,0.27501964569091797],[3,0.7503068432987399,0.6579952227602499,0.04714758685295673,-0.04311650238264439],[1,-135.80652927262656,-44.52147350717872,79.52393791219441]],[1,"Bone042",1,[[0,"Bone043",-897,[1,0.343991756439209,5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4649967551231384,0.588960587978363,-0.2768658399581909],[3,0.8609873646719077,0.4753544625451561,-0.14523433139179998,0.10791608684022115],[1,148.31653405889756,34.882680862808,51.92480961419617]],[6,"Bone044",1,[[0,"Bone045",-898,[1,0.343991756439209,0,-2.9802322387695312e-8]]],[1,0.442013680934906,0.5889780521392822,0.27617859840393066],[3,-0.4813784027157567,0.8587903912742175,0.10399130654688564,0.14120802178550146],[1,-1,-1,-1],[1,-31.420518268463667,145.39807230422076,-52.88609179989549]],[1,"Bone038",1,[[0,"Bone039",-899,[1,0.3157862424850464,-0.0000010728836059570312,-7.450580596923828e-8]]],[1,0.45659762620925903,0.5715445280075073,-0.2790215015411377],[3,0.7428789718798489,0.6657403693128117,-0.05170040939014791,0.047409508274936396],[1,128.06864187182657,52.280422998424584,79.8101166299194]],[1,"Bone046",1,[[0,"Bone047",-900,[1,0.21479752659797668,2.220446049250313e-16,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.37866881489753723,-0.20330704748630524],[3,0.7131649057801203,0.694849233414053,-0.06927880452502871,0.06148826905286835],[1,98.29018344276301,82.34384463316458,79.28510882986339]],[6,"Bone048",1,[[0,"Bone049",-901,[1,0.21479761600494385,0,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.3786682188510895,0.20213426649570465],[3,-0.6723173258517765,0.7340214846148103,0.06581225989123905,0.06978982684742839],[1,-1,-1,-1],[1,-65.37059136868433,114.30530864922247,-77.9058600571856]],[1,"Bone050",1,[[0,"Bone051",-902,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8556816757871835,0.49188567242382253,-0.1353241382687409,0.0868604201464844],[1,150.64563225829755,33.473746686529736,54.9136308570931]],[6,"Bone052",1,[[0,"Bone053",-903,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.45730264743819127,0.8668026690767159,0.11432742764710176,0.1626550362426549],[1,-1,-1,-1],[1,-31.983827466691466,143.83562976985942,-49.076988498652106]],[6,"Bone055",1,[[0,"Bone054",-904,[1,0.20849084854125977,1.7881393432617188e-7,-1.4901161193847656e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.4427337659661443,0.8804939415434928,0.10356419564314906,0.13413310090886338],[1,-1,-1,-1],[1,-27.17790674110575,150.1752959401649,-48.75227820325089]],[1,"Bone057",1,[[0,"Bone056",-905,[1,0.20849084854125977,-2.220446049250313e-16,1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8617637805990132,0.4818086653500003,-0.1325549193352023,0.0874802252019584],[1,151.84597412576554,31.99694703763193,53.825068910758866]],[6,"Bone059",1,[[0,"Bone058",-906,[1,0.20849084854125977,1.1920928955078125e-7,-7.450580596923828e-9]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.6652577460916701,0.7361198002933665,0.06480808499090224,0.10658181364987836],[1,-1,-1,-1],[1,-65.82966802401327,110.75547806347589,-74.92893643503476]],[1,"Bone060",1,[[0,"Bone061",-907,[1,0.20849084854125977,1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7360726972769813,0.6625652116821437,-0.08534870788766842,0.10917839829330199],[1,109.72436976636762,68.32343290153494,73.08862554690798]],[6,"Bone063",1,[[0,"Bone064",-908,[1,0.20849084854125977,1.1920928955078125e-7,0]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.5645249344085078,0.8156736288103916,0.07917336920589502,0.09858857592512724],[1,-1,-1,-1],[1,-34.48476808697738,143.90338262208024,-64.86709398225736]],[1,"Bone065",1,[[0,"Bone062",-909,[1,0.20849084854125977,1.1920928955078125e-7,-3.725290298461914e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7976335333562894,0.5787851844174365,-0.09629196729729736,0.13970080099430837],[1,131.03499227476132,45.35227151255881,63.690481825110886]],[1,"Bone066",1,[[0,"Bone067",-910,[1,0.29234713315963745,-1.1920928955078125e-7,-8.940696716308594e-8]]],[1,0.4733502268791199,0.5121073722839355,-0.32047057151794434],[3,0.7410124627759277,0.6714912732197018,4.206135649442946e-7,-6.010142285930516e-7],[1,-179.99915070941177,-0.000834655304279188,84.36453315226129]],[1,"Bone068",1,[[0,"Bone069",-911,[1,0.30784285068511963,-5.960464477539063e-8,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.5145719051361084,-0.32047057151794434],[3,0.9154435531632643,0.4024463951524234,1.790492545184016e-7,-7.77563696054753e-7],[1,-179.9998671368788,-0.00008082182361720286,47.46240759938744]],[1,"Bone071",1,[[0,"Bone072",-912,[1,0.3078427314758301,-1.7881393432617188e-7,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.514570951461792,0.31384503841400146],[3,0.9179723472890481,0.39556370090805726,0.026501190523879753,-0.012402219050369916],[1,-176.35605069069194,-4.873882117705918,46.516762946885805]],[1,"Bone073",1,[[0,"Bone070",-913,[1,0.29234713315963745,-2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4733502268791199,0.5121066570281982,0.31384503841400146],[3,0.7406519796771894,0.6711642277831933,0.02311692432234446,-0.020948321038340236],[1,-147.70742379443573,-32.468593051432606,83.32906500714773]],[1,"Bone074",1,[[0,"Bone075",-914,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184584498405457,-0.3363339900970459],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone076",1,[[0,"Bone077",-915,[1,0.3130360245704651,2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.45488160848617554,0.4619303047657013,-0.3363339900970459],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone078",1,[[0,"Bone079",-916,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184489130973816,0.33521783351898193],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone080",1,[[0,"Bone081",-917,[1,0.3130360245704651,0,-5.960464477539063e-8]]],[1,0.454881489276886,0.4619293510913849,0.33521783351898193],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone082",1,[[0,"Bone083",-918,[1,0.30177998542785645,2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.4976084232330322,-0.2998250722885132],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone084",1,[[0,"Bone085",-919,[1,0.36502498388290405,0.0000027418136596679688,0]]],[1,0.5077738165855408,0.49703094363212585,-0.2998250722885132],[3,0.782142559488007,0.616027577807194,0.06955007285248349,0.06265642333205072],[1,176.9747239606002,-7.778014308885179,76.49714589591072]],[1,"Bone086",1,[[0,"Bone087",-920,[1,0.30177998542785645,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.49760758876800537,0.3142220973968506],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone088",1,[[0,"Bone089",-921,[1,0.3650251030921936,0.0000027418136596679688,-2.220446049250313e-16]]],[1,0.5077738165855408,0.497030109167099,0.3142220973968506],[3,0.7409702629047793,0.6002829147450446,-0.22010958460906105,-0.20536616692932272],[1,-168.38230910273356,23.582711314949474,78.51869431562027]],[1,"Bone090",1,[[0,"Bone091",-922,[1,0.33172428607940674,-1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5448386073112488,0.5238311290740967,-0.3034851551055908],[3,0.8761015017292547,0.4083642400342507,-0.20871427843274715,0.14873854949975587],[1,145.28569548842597,40.06105985280097,40.8021742494266]],[1,"Bone092",1,[[0,"Bone093",-923,[1,0.3317244052886963,1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5216760039329529,0.4963110685348511,0.2717076539993286],[3,0.882832120707797,0.35694835025803684,0.23849226825573389,-0.19056956702704275],[1,-143.003054353004,-41.42418463966603,32.63955127638818]],[1,"Bone094",1,[[0,"Bone095",-924,[1,0.29695814847946167,-1.1920928955078125e-7,-6.705522537231445e-8]]],[1,0.5659940838813782,0.4269203245639801,-0.23909606039524078],[3,0.7309862280870199,0.6741191657758188,-0.07787624646002703,0.07181765046367801],[1,111.04828158447292,69.44581633958744,76.99689544497066]],[1,"Bone096",1,[[0,"Bone097",-925,[1,0.36130058765411377,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5690563321113586,0.4340629577636719,-0.23909594118595123],[3,0.7948704391323203,0.5311093946079064,-0.03756829737614827,0.29101961958787764],[1,117.93324344251629,40.42447111830393,55.33182209184379]],[1,"Bone098",1,[[0,"Bone099",-926,[1,0.29695820808410645,-2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.5659939646720886,0.4269196093082428,0.2810366153717041],[3,0.7345414798823526,0.6773976721514599,0.029231535434350038,-0.026957845466156618],[1,-135.57476575809534,-44.609764469435945,83.5027757303296]],[1,"Bone100",1,[[0,"Bone101",-927,[1,0.3613004684448242,2.384185791015625e-7,-5.960464477539063e-8]]],[1,0.5690483450889587,0.42423558235168457,0.2810366153717041],[3,0.7527480120544073,0.589955091093729,0.286647289805427,0.056184980981856904],[1,-139.5597450373669,-69.08685324294593,66.98251767336397]],[1,"Bone102",1,[[0,"Bone103",-928,[1,0.3552076816558838,2.220446049250313e-16,-3.725290298461914e-8]]],[1,0.6143574118614197,0.4207141101360321,-0.26724207401275635],[3,0.7650023749004343,0.6271182935856692,-0.10929834914400782,0.09771326993447878],[1,124.14316344490346,56.8104332319705,69.74053889099635]],[1,"Bone104",1,[[0,"Bone105",-929,[1,0.35520756244659424,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.5576761364936829,0.44577041268348694,0.2603142261505127],[3,0.8915628895187472,0.4478831641633933,0.028107567087909374,-0.061043017326864554],[1,-167.23003664793316,-9.95285531807336,52.674195077352095]],[1,"Bone106",1,[[0,"Bone107",-930,[1,0.2874833941459656,-0.0000036954879760742188,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.4960506558418274,-0.27806413173675537],[3,0.7370936301321167,0.6720280671705423,-0.05262346957380588,0.04797945189034701],[1,123.08184723859905,57.295808787005804,80.28031546322022]],[1,"Bone108",1,[[0,"Bone109",-931,[1,0.3408219814300537,5.960464477539062e-7,-2.9802322387695312e-8]]],[1,0.45001786947250366,0.4833073914051056,-0.27806413173675537],[3,0.8125947704577924,0.5501902693191293,-0.06359948955668364,0.18148143568784447],[1,132.01127294007338,38.101081770622095,60.58429478212839]],[1,"Bone110",1,[[0,"Bone111",-932,[1,0.2874833941459656,-0.000003933906555175781,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.49604982137680054,0.30299365520477295],[3,0.7377364623004045,0.6747657049223527,0.01535592318712203,-0.014154549664187803],[1,-154.93917078999186,-25.158292587385183,84.36278973512245]],[1,"Bone112",1,[[0,"Bone113",-933,[1,0.34082210063934326,5.960464477539062e-7,-5.960464477539063e-8]]],[1,0.45001763105392456,0.48330655694007874,0.30299365520477295],[3,0.8177525517517987,0.5545548279545124,0.03673993103349361,-0.14966590915574896],[1,-139.9883177589045,-30.60324094128515,63.63456335848235]],[1,"Bone114",1,[[0,"Bone115",-934,[1,0.2560230493545532,-0.0000027418136596679688,-2.9802322387695312e-8]]],[1,0.46289128065109253,0.43053486943244934,-0.28921449184417725],[3,0.7372316711044058,0.6750830405448509,-0.020229026655859263,0.018523983639627255],[1,148.12341538683822,32.01492732169675,84.06273562612712]],[1,"Bone116",1,[[0,"Bone117",-935,[1,0.328660249710083,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4715500473976135,0.4206230640411377,-0.28921449184417725],[3,0.86108728451622,0.4641656993584662,-0.1801506326686892,0.10307590180357071],[1,147.81843159374745,38.838543256635504,49.66171592245412]],[1,"Bone118",1,[[0,"Bone119",-936,[1,0.25602298974990845,-0.0000026226043701171875,-4.470348358154297e-8]]],[1,0.46289128065109253,0.43053409457206726,0.26084041595458984],[3,0.7300865260634497,0.6782015753885853,0.06322911560564157,-0.05493966272897319],[1,-114.04232475327392,-66.63217527081342,79.52807707314034]],[1,"Bone120",1,[[0,"Bone121",-937,[1,0.328660249710083,-1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.471549928188324,0.4206222891807556,0.26084041595458984],[3,0.8517535126112817,0.4840732101605765,0.16792873638480257,-0.10949438549707012],[1,-145.46936655267316,-39.5401283845538,51.98481950116559]],[2,"Bip001 L Thigh",58,[-938],[1,-3.5762786865234375e-7,3.583855630040489e-7,0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 L Calf",251,[-939],[1,0.32331088185310364,0,2.7755575615628914e-17],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 L Foot",252,[[7,"Bip001 L Toe0",-940,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,-2.7755575615628914e-17],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[2,"Bip001 R Thigh",58,[-941],[1,3.5762786865234375e-7,-3.099634966474696e-7,-0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 R Calf",254,[-942],[1,0.323310911655426,-4.656612873077393e-10,0],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 R Foot",255,[[7,"Bip001 R Toe0",-943,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,0],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[35,"2",46,[-944]],[40,"Leader02",257,[[37,-945,[17],[26],46,18,19]]],[2,"Bip001",46,[59],[1,0,0.5538838505744934,-2.7976041483412928e-9],[3,-0.5000003576277408,-0.49999964237200345,-0.49999964237200345,0.5000003576277408],[1,-90,-89.99991803772996,0]],[36,"Bip001 Neck",2,[[7,"Bip001 Head",-946,[1,0.0361407995223999,0,-2.117582368135751e-22],[3,-7.265599787883253e-14,1.1042733174299356e-9,-0.0003988305609355657,0.9999999204670887],[1,4.21424291253915e-11,1.265404279071084e-7,-0.04570261697650697]]],[1,0.36156851053237915,-0.000028777983970940113,-7.981881822161085e-11]],[2,"Bip001 L Clavicle",2,[-947],[1,0.2801923155784607,0.00006292969919741154,0.49533236026763916],[3,0.6128494051046567,-0.00024511126315241414,0.7901996254940081,0.00031377136001196616],[1,179.9557697821271,-104.4083488281371,0.011198542610264862]],[2,"Bip001 L UpperArm",261,[-948],[1,0.06854209303855896,-1.4210854715202004e-13,1.1920928955078125e-7],[3,-0.0031089797470419266,0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,0.5495678086236702,18.417639908626843,-5.614239029902418]],[1,"Bip001 L Forearm",262,[[7,"Bip001 L Hand",-949,[1,0.22839155793190002,3.469446951953614e-18,-2.220446049250313e-16],[3,-0.7068252124052276,-6.582823321315215e-10,6.588067459888234e-10,0.7073882378922517],[1,-89.95437890588063,4.492611105837074e-15,1.0672171927718989e-7]]],[1,0.2283916473388672,3.725290298461914e-9,1.1920928955078125e-7],[3,2.0649073607475246e-18,4.075061401749951e-17,-0.00810088520513424,0.9999671872911096],[1,2.7447772677110676e-16,4.672053206816481e-15,-0.9283032185516256]],[2,"Bip001 R Clavicle",2,[-950],[1,0.2801923155784607,0.00006567745003849268,-0.49533236026763916],[3,-0.6128493678865936,0.00024291956445071482,0.7901996543589614,0.00031547118072789955],[1,-179.955848867482,104.40835411447217,0.0115063810465215]],[2,"Bip001 R UpperArm",264,[-951],[1,0.06854209303855896,-2.842170943040401e-14,-1.1920928955078125e-7],[3,0.0031089797470419266,-0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,-0.5495678086236702,-18.417639908626843,-5.614239029902418]],[1,"Bip001 R Forearm",265,[[7,"Bip001 R Hand",-952,[1,0.2283916175365448,1.862645149230957e-8,0],[3,0.7068252124052276,-1.316564553240738e-9,-1.3176133809553418e-9,0.7073882378922517],[1,89.95437890588063,8.992385156758068e-15,-2.1344342056244653e-7]]],[1,0.22839152812957764,-7.450580596923828e-9,-1.1920928955078125e-7],[3,-3.773675820299622e-18,6.953021029531917e-17,-0.008100894517749086,0.9999671872156666],[1,-3.6792100925359395e-16,7.964856056974922e-15,-0.9283042857336966]],[2,"Bone014",2,[-953],[1,0.9016814827919006,-0.16620145738124847,-3.576278970740532e-7],[3,0.8204482627518984,-0.545374859246599,-0.1592498687415361,-0.06379961093100726],[1,-144.9599557847161,43.03525191800192,-60.99572743570296]],[1,"Bone015",267,[[0,"Bone016",-954,[1,0.17065280675888062,2.220446049250313e-16,0]]],[1,0.2109774947166443,-3.5762786865234375e-7,0],[3,0.013840689213228043,0.07062936517773824,0.09123383389515168,0.9932252089277056],[1,0.8513140666443272,8.056399614568244,10.555425884491925]],[2,"Bone017",2,[-955],[1,0.9329524636268616,0.006207577884197235,-1.1920930376163597e-7],[3,0.9452697475813631,-0.25360026529346813,-0.2029219235644872,-0.031220228817822337],[1,-169.44859951835804,26.85230799640193,-27.824884197659852]],[1,"Bone018",269,[[0,"Bone019",-956,[1,0.30884039402008057,4.440892098500626e-16,-1.4901161193847656e-8]]],[1,0.2076650857925415,-5.960464477539063e-8,5.960464477539063e-8],[3,0.03613674268677419,0.11236885936781277,0.1682927608746565,0.9786444307865612],[1,2.0034570327753047,12.751783162518256,19.725780022967598]],[2,"Bone020",2,[-957],[1,0.906788170337677,0.12963071465492249,-6.661338571267413e-15],[3,0.9481296591209838,0.24509234860599208,-0.19876644124122353,0.03836394122382767],[1,169.01731060961293,26.295211785624716,26.71210427485875]],[1,"Bone021",271,[[0,"Bone022",-958,[1,0.16476237773895264,0.0000013113021850585938,-5.551115123125783e-17]]],[1,0.20464777946472168,-5.960464477539063e-8,0],[3,0.008307466313383617,0.10104896164599238,0.055506371161730565,0.9932971036473304],[1,0.30477364429702875,11.60041664798797,6.4275959085883185]],[2,"Bone005",2,[-959],[1,-0.31098389625549316,-0.5923760533332825,-8.344650268554688e-7],[3,-0.42288719799809726,0.9061823314150982,6.15264684325026e-7,1.908425665451616e-7],[1,-0.00011386262569439461,179.9999227307888,-50.03400606098685]],[1,"Bone006",273,[[0,"Bone007",-960,[1,0.12936758995056152,0,7.450580596923828e-9]]],[1,0.15301230549812317,5.960464477539063e-8,1.3988923797114694e-8],[3,-0.02847290608537811,0.10372917393021469,0.13282358696222316,0.9852854646452963],[1,-4.964775359024229,12.665943619279231,14.822852541428624]],[2,"Bone008",2,[-961],[1,-0.1864808201789856,-0.6331885457038879,-8.34464913168631e-7],[3,-0.6440305100538997,0.7649998053066674,4.98990515435206e-7,4.754895702936878e-7],[1,-0.000462507426605731,179.99953940382395,-80.18605061146266]],[1,"Bone009",275,[[0,"Bone010",-962,[1,0.16327983140945435,-8.344650268554688e-7,-3.725290298461914e-9]]],[1,0.22114378213882446,-1.1102230246251565e-16,-6.9274577185751696e-9],[3,-0.03201106959581647,0.04722837021360231,0.07318508679539422,0.995685048366726],[1,-4.09379744120405,5.72510544169884,8.204978271429885]],[2,"Bone011",2,[-963],[1,-0.052560269832611084,-0.6348226070404053,-9.536742027194123e-7],[3,0.8096754585239455,-0.5868778849671988,-3.780735385237567e-7,-5.685013230944716e-7],[1,-179.99974876130244,0.00023561350371702336,-71.87153010388089]],[1,"Bone012",277,[[0,"Bone013",-964,[1,0.26897573471069336,-1.4901161193847656e-7,1.4901161193847656e-8]]],[1,0.2352738380432129,-5.960464477539063e-8,2.664765474946762e-8],[3,-0.03139486236296435,-0.019944152323655595,-0.06752988851919654,0.9970237246735336],[1,-3.777692517752904,-2.545153265995996,-7.666428594673814]],[2,"Bone001",2,[-965],[1,-0.12136167287826538,0.6267284154891968,7.748602683932404e-7],[3,0.008800632467346676,0.9999612736838474,8.666027187390251e-7,-3.608613557185051e-8],[1,-0.00009935329299687917,-179.99999499026762,1.0084912132622457]],[2,"Bone002",279,[-966],[1,0.1900234818458557,0.000005304813385009766,-2.1419708673420246e-8],[3,0.0011409692143065063,0.07066804114640339,0.01553731119993357,0.9973782221958022],[1,0.004584340621566644,8.105630307357805,1.7853051888012772]],[1,"Bone003",280,[[0,"Bone004",-967,[1,0.19731539487838745,-5.960464477539063e-8,0]]],[1,0.19963356852531433,-5.960464477539063e-8,0],[3,-0.00458090560252861,-0.0177723800358147,0.07224471774890884,0.9972180596886038],[1,-0.3803222028973737,-2.0144548658258965,8.293868239180254]],[2,"Bone023",2,[-968],[1,0.3754916787147522,0.5513330698013306,7.152557373046875e-7],[3,0.2873016068711859,0.9578401676108977,5.975467872852589e-7,-6.968010691281707e-8],[1,-0.00008130283770854925,-179.99996727722532,33.3929518592193]],[2,"Bone024",282,[-969],[1,0.2070872187614441,-2.220446049250313e-16,-1.3571721524385794e-8],[3,0.004208503857234987,0.0006225413675165585,-0.15791546185656688,0.9874434707081498],[1,0.5130628308917761,0.1542934722454072,-18.171355129527033]],[2,"Bone025",283,[-970],[1,0.22183185815811157,-2.980232238769531e-7,0],[3,0.002902650233141969,0.024008338930223375,-0.09119263161938501,0.9955395914888401],[1,0.591853572811918,2.817084141656892,-10.453202709834361]],[2,"Bone026",284,[-971],[1,0.23736679553985596,0.000004291534423828125,3.725290298461914e-9],[3,-0.0002839148501031005,0.022400075497033593,-0.016858031918518097,0.9996069041227753],[1,0.010756860055955083,2.5676206844581224,-1.9321237219449572]],[1,"Bone027",285,[[0,"Bone028",-972,[1,0.34696388244628906,-5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.18080151081085205,0.0000013113021850585938,-1.3877787807814457e-17],[3,-0.00852465419233676,-0.005205312596749417,0.1578778430927509,0.9874081332721804],[1,-0.916109025074623,-0.45757664503186946,18.17186988538253]],[2,"Bone032",2,[-973],[1,-0.1371343731880188,-0.4868207573890686,0.45237958431243896],[3,0.11535127031226004,-0.6298771672772465,0.7621545403924247,-0.09523284695603418],[1,101.35335284515278,-176.6532740929764,-16.886608649983]],[1,"Bone033",287,[[0,"Bone034",-974,[1,0.28710493445396423,5.960464477539063e-8,1.1920928955078125e-7]]],[1,0.28638458251953125,-1.1920928955078125e-7,5.364418029785156e-7],[3,0.07119469277661244,-0.1552731976211619,-0.1198384899551764,0.9779878762777208],[1,6.060120925422759,-17.251685451156085,-14.863104013399319]],[2,"Bone035",2,[-975],[1,-0.1371343731880188,-0.4868195056915283,-0.45238110423088074],[3,-0.09523276962954226,0.7621552330740298,-0.6298763141559929,0.11535141590730125],[1,78.64651408105023,176.65323560688648,-16.886608689442152]],[1,"Bone036",289,[[0,"Bone037",-976,[1,0.28710508346557617,4.470348358154297e-8,1.1920928955078125e-7]]],[1,0.286384254693985,-2.9802322387695312e-8,5.960464477539063e-8],[3,-0.08969791373746544,-0.07142771147081593,-0.02274856751952749,0.9931439316539157],[1,-10.457769774349906,-8.397133152767221,-1.8550669730931832]],[2,"Bone029",2,[-977],[1,-0.32085472345352173,0.6124598383903503,8.344648563252122e-7],[3,0.004985236885757944,0.9999875736113638,-0.000006004100951980773,-2.9932240717468475e-8],[1,0.0006880278383291512,-179.99999999999963,0.571268433130425]],[1,"Bone030",291,[[0,"Bone031",-978,[1,0.22829708456993103,5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.24331533908843994,-0.000014960765838623047,1.4626493793912232e-8],[3,-0.001397583529531738,0.09804550644517858,0.08618548588222198,0.9914419738186554],[1,-1.143939715457056,11.39375689723688,9.823971622893042]],[1,"Bone040",2,[[0,"Bone041",-979,[1,0.3134060502052307,1.1920928955078125e-7,-4.470348358154297e-8]]],[1,0.45121103525161743,0.5788355469703674,0.27501964569091797],[3,0.7503068432987399,0.6579952227602499,0.04714758685295673,-0.04311650238264439],[1,-135.80652927262656,-44.52147350717872,79.52393791219441]],[1,"Bone042",2,[[0,"Bone043",-980,[1,0.343991756439209,5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4649967551231384,0.588960587978363,-0.2768658399581909],[3,0.8609873646719077,0.4753544625451561,-0.14523433139179998,0.10791608684022115],[1,148.31653405889756,34.882680862808,51.92480961419617]],[6,"Bone044",2,[[0,"Bone045",-981,[1,0.343991756439209,0,-2.9802322387695312e-8]]],[1,0.442013680934906,0.5889780521392822,0.27617859840393066],[3,-0.4813784027157567,0.8587903912742175,0.10399130654688564,0.14120802178550146],[1,-1,-1,-1],[1,-31.420518268463667,145.39807230422076,-52.88609179989549]],[1,"Bone038",2,[[0,"Bone039",-982,[1,0.3157862424850464,-0.0000010728836059570312,-7.450580596923828e-8]]],[1,0.45659762620925903,0.5715445280075073,-0.2790215015411377],[3,0.7428789718798489,0.6657403693128117,-0.05170040939014791,0.047409508274936396],[1,128.06864187182657,52.280422998424584,79.8101166299194]],[1,"Bone046",2,[[0,"Bone047",-983,[1,0.21479752659797668,2.220446049250313e-16,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.37866881489753723,-0.20330704748630524],[3,0.7131649057801203,0.694849233414053,-0.06927880452502871,0.06148826905286835],[1,98.29018344276301,82.34384463316458,79.28510882986339]],[6,"Bone048",2,[[0,"Bone049",-984,[1,0.21479761600494385,0,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.3786682188510895,0.20213426649570465],[3,-0.6723173258517765,0.7340214846148103,0.06581225989123905,0.06978982684742839],[1,-1,-1,-1],[1,-65.37059136868433,114.30530864922247,-77.9058600571856]],[1,"Bone050",2,[[0,"Bone051",-985,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8556816757871835,0.49188567242382253,-0.1353241382687409,0.0868604201464844],[1,150.64563225829755,33.473746686529736,54.9136308570931]],[6,"Bone052",2,[[0,"Bone053",-986,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.45730264743819127,0.8668026690767159,0.11432742764710176,0.1626550362426549],[1,-1,-1,-1],[1,-31.983827466691466,143.83562976985942,-49.076988498652106]],[6,"Bone055",2,[[0,"Bone054",-987,[1,0.20849084854125977,1.7881393432617188e-7,-1.4901161193847656e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.4427337659661443,0.8804939415434928,0.10356419564314906,0.13413310090886338],[1,-1,-1,-1],[1,-27.17790674110575,150.1752959401649,-48.75227820325089]],[1,"Bone057",2,[[0,"Bone056",-988,[1,0.20849084854125977,-2.220446049250313e-16,1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8617637805990132,0.4818086653500003,-0.1325549193352023,0.0874802252019584],[1,151.84597412576554,31.99694703763193,53.825068910758866]],[6,"Bone059",2,[[0,"Bone058",-989,[1,0.20849084854125977,1.1920928955078125e-7,-7.450580596923828e-9]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.6652577460916701,0.7361198002933665,0.06480808499090224,0.10658181364987836],[1,-1,-1,-1],[1,-65.82966802401327,110.75547806347589,-74.92893643503476]],[1,"Bone060",2,[[0,"Bone061",-990,[1,0.20849084854125977,1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7360726972769813,0.6625652116821437,-0.08534870788766842,0.10917839829330199],[1,109.72436976636762,68.32343290153494,73.08862554690798]],[6,"Bone063",2,[[0,"Bone064",-991,[1,0.20849084854125977,1.1920928955078125e-7,0]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.5645249344085078,0.8156736288103916,0.07917336920589502,0.09858857592512724],[1,-1,-1,-1],[1,-34.48476808697738,143.90338262208024,-64.86709398225736]],[1,"Bone065",2,[[0,"Bone062",-992,[1,0.20849084854125977,1.1920928955078125e-7,-3.725290298461914e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7976335333562894,0.5787851844174365,-0.09629196729729736,0.13970080099430837],[1,131.03499227476132,45.35227151255881,63.690481825110886]],[1,"Bone066",2,[[0,"Bone067",-993,[1,0.29234713315963745,-1.1920928955078125e-7,-8.940696716308594e-8]]],[1,0.4733502268791199,0.5121073722839355,-0.32047057151794434],[3,0.7410124627759277,0.6714912732197018,4.206135649442946e-7,-6.010142285930516e-7],[1,-179.99915070941177,-0.000834655304279188,84.36453315226129]],[1,"Bone068",2,[[0,"Bone069",-994,[1,0.30784285068511963,-5.960464477539063e-8,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.5145719051361084,-0.32047057151794434],[3,0.9154435531632643,0.4024463951524234,1.790492545184016e-7,-7.77563696054753e-7],[1,-179.9998671368788,-0.00008082182361720286,47.46240759938744]],[1,"Bone071",2,[[0,"Bone072",-995,[1,0.3078427314758301,-1.7881393432617188e-7,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.514570951461792,0.31384503841400146],[3,0.9179723472890481,0.39556370090805726,0.026501190523879753,-0.012402219050369916],[1,-176.35605069069194,-4.873882117705918,46.516762946885805]],[1,"Bone073",2,[[0,"Bone070",-996,[1,0.29234713315963745,-2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4733502268791199,0.5121066570281982,0.31384503841400146],[3,0.7406519796771894,0.6711642277831933,0.02311692432234446,-0.020948321038340236],[1,-147.70742379443573,-32.468593051432606,83.32906500714773]],[1,"Bone074",2,[[0,"Bone075",-997,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184584498405457,-0.3363339900970459],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone076",2,[[0,"Bone077",-998,[1,0.3130360245704651,2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.45488160848617554,0.4619303047657013,-0.3363339900970459],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone078",2,[[0,"Bone079",-999,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184489130973816,0.33521783351898193],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone080",2,[[0,"Bone081",-1000,[1,0.3130360245704651,0,-5.960464477539063e-8]]],[1,0.454881489276886,0.4619293510913849,0.33521783351898193],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone082",2,[[0,"Bone083",-1001,[1,0.30177998542785645,2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.4976084232330322,-0.2998250722885132],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone084",2,[[0,"Bone085",-1002,[1,0.36502498388290405,0.0000027418136596679688,0]]],[1,0.5077738165855408,0.49703094363212585,-0.2998250722885132],[3,0.782142559488007,0.616027577807194,0.06955007285248349,0.06265642333205072],[1,176.9747239606002,-7.778014308885179,76.49714589591072]],[1,"Bone086",2,[[0,"Bone087",-1003,[1,0.30177998542785645,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.49760758876800537,0.3142220973968506],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone088",2,[[0,"Bone089",-1004,[1,0.3650251030921936,0.0000027418136596679688,-2.220446049250313e-16]]],[1,0.5077738165855408,0.497030109167099,0.3142220973968506],[3,0.7409702629047793,0.6002829147450446,-0.22010958460906105,-0.20536616692932272],[1,-168.38230910273356,23.582711314949474,78.51869431562027]],[1,"Bone090",2,[[0,"Bone091",-1005,[1,0.33172428607940674,-1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5448386073112488,0.5238311290740967,-0.3034851551055908],[3,0.8761015017292547,0.4083642400342507,-0.20871427843274715,0.14873854949975587],[1,145.28569548842597,40.06105985280097,40.8021742494266]],[1,"Bone092",2,[[0,"Bone093",-1006,[1,0.3317244052886963,1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5216760039329529,0.4963110685348511,0.2717076539993286],[3,0.882832120707797,0.35694835025803684,0.23849226825573389,-0.19056956702704275],[1,-143.003054353004,-41.42418463966603,32.63955127638818]],[1,"Bone094",2,[[0,"Bone095",-1007,[1,0.29695814847946167,-1.1920928955078125e-7,-6.705522537231445e-8]]],[1,0.5659940838813782,0.4269203245639801,-0.23909606039524078],[3,0.7309862280870199,0.6741191657758188,-0.07787624646002703,0.07181765046367801],[1,111.04828158447292,69.44581633958744,76.99689544497066]],[1,"Bone096",2,[[0,"Bone097",-1008,[1,0.36130058765411377,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5690563321113586,0.4340629577636719,-0.23909594118595123],[3,0.7948704391323203,0.5311093946079064,-0.03756829737614827,0.29101961958787764],[1,117.93324344251629,40.42447111830393,55.33182209184379]],[1,"Bone098",2,[[0,"Bone099",-1009,[1,0.29695820808410645,-2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.5659939646720886,0.4269196093082428,0.2810366153717041],[3,0.7345414798823526,0.6773976721514599,0.029231535434350038,-0.026957845466156618],[1,-135.57476575809534,-44.609764469435945,83.5027757303296]],[1,"Bone100",2,[[0,"Bone101",-1010,[1,0.3613004684448242,2.384185791015625e-7,-5.960464477539063e-8]]],[1,0.5690483450889587,0.42423558235168457,0.2810366153717041],[3,0.7527480120544073,0.589955091093729,0.286647289805427,0.056184980981856904],[1,-139.5597450373669,-69.08685324294593,66.98251767336397]],[1,"Bone102",2,[[0,"Bone103",-1011,[1,0.3552076816558838,2.220446049250313e-16,-3.725290298461914e-8]]],[1,0.6143574118614197,0.4207141101360321,-0.26724207401275635],[3,0.7650023749004343,0.6271182935856692,-0.10929834914400782,0.09771326993447878],[1,124.14316344490346,56.8104332319705,69.74053889099635]],[1,"Bone104",2,[[0,"Bone105",-1012,[1,0.35520756244659424,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.5576761364936829,0.44577041268348694,0.2603142261505127],[3,0.8915628895187472,0.4478831641633933,0.028107567087909374,-0.061043017326864554],[1,-167.23003664793316,-9.95285531807336,52.674195077352095]],[1,"Bone106",2,[[0,"Bone107",-1013,[1,0.2874833941459656,-0.0000036954879760742188,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.4960506558418274,-0.27806413173675537],[3,0.7370936301321167,0.6720280671705423,-0.05262346957380588,0.04797945189034701],[1,123.08184723859905,57.295808787005804,80.28031546322022]],[1,"Bone108",2,[[0,"Bone109",-1014,[1,0.3408219814300537,5.960464477539062e-7,-2.9802322387695312e-8]]],[1,0.45001786947250366,0.4833073914051056,-0.27806413173675537],[3,0.8125947704577924,0.5501902693191293,-0.06359948955668364,0.18148143568784447],[1,132.01127294007338,38.101081770622095,60.58429478212839]],[1,"Bone110",2,[[0,"Bone111",-1015,[1,0.2874833941459656,-0.000003933906555175781,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.49604982137680054,0.30299365520477295],[3,0.7377364623004045,0.6747657049223527,0.01535592318712203,-0.014154549664187803],[1,-154.93917078999186,-25.158292587385183,84.36278973512245]],[1,"Bone112",2,[[0,"Bone113",-1016,[1,0.34082210063934326,5.960464477539062e-7,-5.960464477539063e-8]]],[1,0.45001763105392456,0.48330655694007874,0.30299365520477295],[3,0.8177525517517987,0.5545548279545124,0.03673993103349361,-0.14966590915574896],[1,-139.9883177589045,-30.60324094128515,63.63456335848235]],[1,"Bone114",2,[[0,"Bone115",-1017,[1,0.2560230493545532,-0.0000027418136596679688,-2.9802322387695312e-8]]],[1,0.46289128065109253,0.43053486943244934,-0.28921449184417725],[3,0.7372316711044058,0.6750830405448509,-0.020229026655859263,0.018523983639627255],[1,148.12341538683822,32.01492732169675,84.06273562612712]],[1,"Bone116",2,[[0,"Bone117",-1018,[1,0.328660249710083,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4715500473976135,0.4206230640411377,-0.28921449184417725],[3,0.86108728451622,0.4641656993584662,-0.1801506326686892,0.10307590180357071],[1,147.81843159374745,38.838543256635504,49.66171592245412]],[1,"Bone118",2,[[0,"Bone119",-1019,[1,0.25602298974990845,-0.0000026226043701171875,-4.470348358154297e-8]]],[1,0.46289128065109253,0.43053409457206726,0.26084041595458984],[3,0.7300865260634497,0.6782015753885853,0.06322911560564157,-0.05493966272897319],[1,-114.04232475327392,-66.63217527081342,79.52807707314034]],[1,"Bone120",2,[[0,"Bone121",-1020,[1,0.328660249710083,-1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.471549928188324,0.4206222891807556,0.26084041595458984],[3,0.8517535126112817,0.4840732101605765,0.16792873638480257,-0.10949438549707012],[1,-145.46936655267316,-39.5401283845538,51.98481950116559]],[2,"Bip001 L Thigh",59,[-1021],[1,-3.5762786865234375e-7,3.583855630040489e-7,0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 L Calf",335,[-1022],[1,0.32331088185310364,0,2.7755575615628914e-17],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 L Foot",336,[[7,"Bip001 L Toe0",-1023,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,-2.7755575615628914e-17],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[2,"Bip001 R Thigh",59,[-1024],[1,3.5762786865234375e-7,-3.099634966474696e-7,-0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 R Calf",338,[-1025],[1,0.323310911655426,-4.656612873077393e-10,0],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 R Foot",339,[[7,"Bip001 R Toe0",-1026,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,0],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[35,"3",31,[-1027]],[40,"Leader03",341,[[37,-1028,[22,23],[26],31,24,25]]],[2,"Bip001",31,[60],[1,0,0.5538838505744934,-2.7976041483412928e-9],[3,-0.5000003576277408,-0.49999964237200345,-0.49999964237200345,0.5000003576277408],[1,-90,-89.99991803772996,0]],[36,"Bip001 Neck",3,[[7,"Bip001 Head",-1029,[1,0.0361407995223999,0,-2.117582368135751e-22],[3,-7.265599787883253e-14,1.1042733174299356e-9,-0.0003988305609355657,0.9999999204670887],[1,4.21424291253915e-11,1.265404279071084e-7,-0.04570261697650697]]],[1,0.36156851053237915,-0.000028777983970940113,-7.981881822161085e-11]],[2,"Bip001 L Clavicle",3,[-1030],[1,0.2801923155784607,0.00006292969919741154,0.49533236026763916],[3,0.6128494051046567,-0.00024511126315241414,0.7901996254940081,0.00031377136001196616],[1,179.9557697821271,-104.4083488281371,0.011198542610264862]],[2,"Bip001 L UpperArm",345,[-1031],[1,0.06854209303855896,-1.4210854715202004e-13,1.1920928955078125e-7],[3,-0.0031089797470419266,0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,0.5495678086236702,18.417639908626843,-5.614239029902418]],[1,"Bip001 L Forearm",346,[[7,"Bip001 L Hand",-1032,[1,0.22839155793190002,3.469446951953614e-18,-2.220446049250313e-16],[3,-0.7068252124052276,-6.582823321315215e-10,6.588067459888234e-10,0.7073882378922517],[1,-89.95437890588063,4.492611105837074e-15,1.0672171927718989e-7]]],[1,0.2283916473388672,3.725290298461914e-9,1.1920928955078125e-7],[3,2.0649073607475246e-18,4.075061401749951e-17,-0.00810088520513424,0.9999671872911096],[1,2.7447772677110676e-16,4.672053206816481e-15,-0.9283032185516256]],[2,"Bip001 R Clavicle",3,[-1033],[1,0.2801923155784607,0.00006567745003849268,-0.49533236026763916],[3,-0.6128493678865936,0.00024291956445071482,0.7901996543589614,0.00031547118072789955],[1,-179.955848867482,104.40835411447217,0.0115063810465215]],[2,"Bip001 R UpperArm",348,[-1034],[1,0.06854209303855896,-2.842170943040401e-14,-1.1920928955078125e-7],[3,0.0031089797470419266,-0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,-0.5495678086236702,-18.417639908626843,-5.614239029902418]],[1,"Bip001 R Forearm",349,[[7,"Bip001 R Hand",-1035,[1,0.2283916175365448,1.862645149230957e-8,0],[3,0.7068252124052276,-1.316564553240738e-9,-1.3176133809553418e-9,0.7073882378922517],[1,89.95437890588063,8.992385156758068e-15,-2.1344342056244653e-7]]],[1,0.22839152812957764,-7.450580596923828e-9,-1.1920928955078125e-7],[3,-3.773675820299622e-18,6.953021029531917e-17,-0.008100894517749086,0.9999671872156666],[1,-3.6792100925359395e-16,7.964856056974922e-15,-0.9283042857336966]],[2,"Bone014",3,[-1036],[1,0.9016814827919006,-0.16620145738124847,-3.576278970740532e-7],[3,0.8204482627518984,-0.545374859246599,-0.1592498687415361,-0.06379961093100726],[1,-144.9599557847161,43.03525191800192,-60.99572743570296]],[1,"Bone015",351,[[0,"Bone016",-1037,[1,0.17065280675888062,2.220446049250313e-16,0]]],[1,0.2109774947166443,-3.5762786865234375e-7,0],[3,0.013840689213228043,0.07062936517773824,0.09123383389515168,0.9932252089277056],[1,0.8513140666443272,8.056399614568244,10.555425884491925]],[2,"Bone017",3,[-1038],[1,0.9329524636268616,0.006207577884197235,-1.1920930376163597e-7],[3,0.9452697475813631,-0.25360026529346813,-0.2029219235644872,-0.031220228817822337],[1,-169.44859951835804,26.85230799640193,-27.824884197659852]],[1,"Bone018",353,[[0,"Bone019",-1039,[1,0.30884039402008057,4.440892098500626e-16,-1.4901161193847656e-8]]],[1,0.2076650857925415,-5.960464477539063e-8,5.960464477539063e-8],[3,0.03613674268677419,0.11236885936781277,0.1682927608746565,0.9786444307865612],[1,2.0034570327753047,12.751783162518256,19.725780022967598]],[2,"Bone020",3,[-1040],[1,0.906788170337677,0.12963071465492249,-6.661338571267413e-15],[3,0.9481296591209838,0.24509234860599208,-0.19876644124122353,0.03836394122382767],[1,169.01731060961293,26.295211785624716,26.71210427485875]],[1,"Bone021",355,[[0,"Bone022",-1041,[1,0.16476237773895264,0.0000013113021850585938,-5.551115123125783e-17]]],[1,0.20464777946472168,-5.960464477539063e-8,0],[3,0.008307466313383617,0.10104896164599238,0.055506371161730565,0.9932971036473304],[1,0.30477364429702875,11.60041664798797,6.4275959085883185]],[2,"Bone005",3,[-1042],[1,-0.31098389625549316,-0.5923760533332825,-8.344650268554688e-7],[3,-0.42288719799809726,0.9061823314150982,6.15264684325026e-7,1.908425665451616e-7],[1,-0.00011386262569439461,179.9999227307888,-50.03400606098685]],[1,"Bone006",357,[[0,"Bone007",-1043,[1,0.12936758995056152,0,7.450580596923828e-9]]],[1,0.15301230549812317,5.960464477539063e-8,1.3988923797114694e-8],[3,-0.02847290608537811,0.10372917393021469,0.13282358696222316,0.9852854646452963],[1,-4.964775359024229,12.665943619279231,14.822852541428624]],[2,"Bone008",3,[-1044],[1,-0.1864808201789856,-0.6331885457038879,-8.34464913168631e-7],[3,-0.6440305100538997,0.7649998053066674,4.98990515435206e-7,4.754895702936878e-7],[1,-0.000462507426605731,179.99953940382395,-80.18605061146266]],[1,"Bone009",359,[[0,"Bone010",-1045,[1,0.16327983140945435,-8.344650268554688e-7,-3.725290298461914e-9]]],[1,0.22114378213882446,-1.1102230246251565e-16,-6.9274577185751696e-9],[3,-0.03201106959581647,0.04722837021360231,0.07318508679539422,0.995685048366726],[1,-4.09379744120405,5.72510544169884,8.204978271429885]],[2,"Bone011",3,[-1046],[1,-0.052560269832611084,-0.6348226070404053,-9.536742027194123e-7],[3,0.8096754585239455,-0.5868778849671988,-3.780735385237567e-7,-5.685013230944716e-7],[1,-179.99974876130244,0.00023561350371702336,-71.87153010388089]],[1,"Bone012",361,[[0,"Bone013",-1047,[1,0.26897573471069336,-1.4901161193847656e-7,1.4901161193847656e-8]]],[1,0.2352738380432129,-5.960464477539063e-8,2.664765474946762e-8],[3,-0.03139486236296435,-0.019944152323655595,-0.06752988851919654,0.9970237246735336],[1,-3.777692517752904,-2.545153265995996,-7.666428594673814]],[2,"Bone001",3,[-1048],[1,-0.12136167287826538,0.6267284154891968,7.748602683932404e-7],[3,0.008800632467346676,0.9999612736838474,8.666027187390251e-7,-3.608613557185051e-8],[1,-0.00009935329299687917,-179.99999499026762,1.0084912132622457]],[2,"Bone002",363,[-1049],[1,0.1900234818458557,0.000005304813385009766,-2.1419708673420246e-8],[3,0.0011409692143065063,0.07066804114640339,0.01553731119993357,0.9973782221958022],[1,0.004584340621566644,8.105630307357805,1.7853051888012772]],[1,"Bone003",364,[[0,"Bone004",-1050,[1,0.19731539487838745,-5.960464477539063e-8,0]]],[1,0.19963356852531433,-5.960464477539063e-8,0],[3,-0.00458090560252861,-0.0177723800358147,0.07224471774890884,0.9972180596886038],[1,-0.3803222028973737,-2.0144548658258965,8.293868239180254]],[2,"Bone023",3,[-1051],[1,0.3754916787147522,0.5513330698013306,7.152557373046875e-7],[3,0.2873016068711859,0.9578401676108977,5.975467872852589e-7,-6.968010691281707e-8],[1,-0.00008130283770854925,-179.99996727722532,33.3929518592193]],[2,"Bone024",366,[-1052],[1,0.2070872187614441,-2.220446049250313e-16,-1.3571721524385794e-8],[3,0.004208503857234987,0.0006225413675165585,-0.15791546185656688,0.9874434707081498],[1,0.5130628308917761,0.1542934722454072,-18.171355129527033]],[2,"Bone025",367,[-1053],[1,0.22183185815811157,-2.980232238769531e-7,0],[3,0.002902650233141969,0.024008338930223375,-0.09119263161938501,0.9955395914888401],[1,0.591853572811918,2.817084141656892,-10.453202709834361]],[2,"Bone026",368,[-1054],[1,0.23736679553985596,0.000004291534423828125,3.725290298461914e-9],[3,-0.0002839148501031005,0.022400075497033593,-0.016858031918518097,0.9996069041227753],[1,0.010756860055955083,2.5676206844581224,-1.9321237219449572]],[1,"Bone027",369,[[0,"Bone028",-1055,[1,0.34696388244628906,-5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.18080151081085205,0.0000013113021850585938,-1.3877787807814457e-17],[3,-0.00852465419233676,-0.005205312596749417,0.1578778430927509,0.9874081332721804],[1,-0.916109025074623,-0.45757664503186946,18.17186988538253]],[2,"Bone032",3,[-1056],[1,-0.1371343731880188,-0.4868207573890686,0.45237958431243896],[3,0.11535127031226004,-0.6298771672772465,0.7621545403924247,-0.09523284695603418],[1,101.35335284515278,-176.6532740929764,-16.886608649983]],[1,"Bone033",371,[[0,"Bone034",-1057,[1,0.28710493445396423,5.960464477539063e-8,1.1920928955078125e-7]]],[1,0.28638458251953125,-1.1920928955078125e-7,5.364418029785156e-7],[3,0.07119469277661244,-0.1552731976211619,-0.1198384899551764,0.9779878762777208],[1,6.060120925422759,-17.251685451156085,-14.863104013399319]],[2,"Bone035",3,[-1058],[1,-0.1371343731880188,-0.4868195056915283,-0.45238110423088074],[3,-0.09523276962954226,0.7621552330740298,-0.6298763141559929,0.11535141590730125],[1,78.64651408105023,176.65323560688648,-16.886608689442152]],[1,"Bone036",373,[[0,"Bone037",-1059,[1,0.28710508346557617,4.470348358154297e-8,1.1920928955078125e-7]]],[1,0.286384254693985,-2.9802322387695312e-8,5.960464477539063e-8],[3,-0.08969791373746544,-0.07142771147081593,-0.02274856751952749,0.9931439316539157],[1,-10.457769774349906,-8.397133152767221,-1.8550669730931832]],[2,"Bone029",3,[-1060],[1,-0.32085472345352173,0.6124598383903503,8.344648563252122e-7],[3,0.004985236885757944,0.9999875736113638,-0.000006004100951980773,-2.9932240717468475e-8],[1,0.0006880278383291512,-179.99999999999963,0.571268433130425]],[1,"Bone030",375,[[0,"Bone031",-1061,[1,0.22829708456993103,5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.24331533908843994,-0.000014960765838623047,1.4626493793912232e-8],[3,-0.001397583529531738,0.09804550644517858,0.08618548588222198,0.9914419738186554],[1,-1.143939715457056,11.39375689723688,9.823971622893042]],[1,"Bone040",3,[[0,"Bone041",-1062,[1,0.3134060502052307,1.1920928955078125e-7,-4.470348358154297e-8]]],[1,0.45121103525161743,0.5788355469703674,0.27501964569091797],[3,0.7503068432987399,0.6579952227602499,0.04714758685295673,-0.04311650238264439],[1,-135.80652927262656,-44.52147350717872,79.52393791219441]],[1,"Bone042",3,[[0,"Bone043",-1063,[1,0.343991756439209,5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4649967551231384,0.588960587978363,-0.2768658399581909],[3,0.8609873646719077,0.4753544625451561,-0.14523433139179998,0.10791608684022115],[1,148.31653405889756,34.882680862808,51.92480961419617]],[6,"Bone044",3,[[0,"Bone045",-1064,[1,0.343991756439209,0,-2.9802322387695312e-8]]],[1,0.442013680934906,0.5889780521392822,0.27617859840393066],[3,-0.4813784027157567,0.8587903912742175,0.10399130654688564,0.14120802178550146],[1,-1,-1,-1],[1,-31.420518268463667,145.39807230422076,-52.88609179989549]],[1,"Bone038",3,[[0,"Bone039",-1065,[1,0.3157862424850464,-0.0000010728836059570312,-7.450580596923828e-8]]],[1,0.45659762620925903,0.5715445280075073,-0.2790215015411377],[3,0.7428789718798489,0.6657403693128117,-0.05170040939014791,0.047409508274936396],[1,128.06864187182657,52.280422998424584,79.8101166299194]],[1,"Bone046",3,[[0,"Bone047",-1066,[1,0.21479752659797668,2.220446049250313e-16,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.37866881489753723,-0.20330704748630524],[3,0.7131649057801203,0.694849233414053,-0.06927880452502871,0.06148826905286835],[1,98.29018344276301,82.34384463316458,79.28510882986339]],[6,"Bone048",3,[[0,"Bone049",-1067,[1,0.21479761600494385,0,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.3786682188510895,0.20213426649570465],[3,-0.6723173258517765,0.7340214846148103,0.06581225989123905,0.06978982684742839],[1,-1,-1,-1],[1,-65.37059136868433,114.30530864922247,-77.9058600571856]],[1,"Bone050",3,[[0,"Bone051",-1068,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8556816757871835,0.49188567242382253,-0.1353241382687409,0.0868604201464844],[1,150.64563225829755,33.473746686529736,54.9136308570931]],[6,"Bone052",3,[[0,"Bone053",-1069,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.45730264743819127,0.8668026690767159,0.11432742764710176,0.1626550362426549],[1,-1,-1,-1],[1,-31.983827466691466,143.83562976985942,-49.076988498652106]],[6,"Bone055",3,[[0,"Bone054",-1070,[1,0.20849084854125977,1.7881393432617188e-7,-1.4901161193847656e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.4427337659661443,0.8804939415434928,0.10356419564314906,0.13413310090886338],[1,-1,-1,-1],[1,-27.17790674110575,150.1752959401649,-48.75227820325089]],[1,"Bone057",3,[[0,"Bone056",-1071,[1,0.20849084854125977,-2.220446049250313e-16,1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8617637805990132,0.4818086653500003,-0.1325549193352023,0.0874802252019584],[1,151.84597412576554,31.99694703763193,53.825068910758866]],[6,"Bone059",3,[[0,"Bone058",-1072,[1,0.20849084854125977,1.1920928955078125e-7,-7.450580596923828e-9]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.6652577460916701,0.7361198002933665,0.06480808499090224,0.10658181364987836],[1,-1,-1,-1],[1,-65.82966802401327,110.75547806347589,-74.92893643503476]],[1,"Bone060",3,[[0,"Bone061",-1073,[1,0.20849084854125977,1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7360726972769813,0.6625652116821437,-0.08534870788766842,0.10917839829330199],[1,109.72436976636762,68.32343290153494,73.08862554690798]],[6,"Bone063",3,[[0,"Bone064",-1074,[1,0.20849084854125977,1.1920928955078125e-7,0]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.5645249344085078,0.8156736288103916,0.07917336920589502,0.09858857592512724],[1,-1,-1,-1],[1,-34.48476808697738,143.90338262208024,-64.86709398225736]],[1,"Bone065",3,[[0,"Bone062",-1075,[1,0.20849084854125977,1.1920928955078125e-7,-3.725290298461914e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7976335333562894,0.5787851844174365,-0.09629196729729736,0.13970080099430837],[1,131.03499227476132,45.35227151255881,63.690481825110886]],[1,"Bone066",3,[[0,"Bone067",-1076,[1,0.29234713315963745,-1.1920928955078125e-7,-8.940696716308594e-8]]],[1,0.4733502268791199,0.5121073722839355,-0.32047057151794434],[3,0.7410124627759277,0.6714912732197018,4.206135649442946e-7,-6.010142285930516e-7],[1,-179.99915070941177,-0.000834655304279188,84.36453315226129]],[1,"Bone068",3,[[0,"Bone069",-1077,[1,0.30784285068511963,-5.960464477539063e-8,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.5145719051361084,-0.32047057151794434],[3,0.9154435531632643,0.4024463951524234,1.790492545184016e-7,-7.77563696054753e-7],[1,-179.9998671368788,-0.00008082182361720286,47.46240759938744]],[1,"Bone071",3,[[0,"Bone072",-1078,[1,0.3078427314758301,-1.7881393432617188e-7,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.514570951461792,0.31384503841400146],[3,0.9179723472890481,0.39556370090805726,0.026501190523879753,-0.012402219050369916],[1,-176.35605069069194,-4.873882117705918,46.516762946885805]],[1,"Bone073",3,[[0,"Bone070",-1079,[1,0.29234713315963745,-2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4733502268791199,0.5121066570281982,0.31384503841400146],[3,0.7406519796771894,0.6711642277831933,0.02311692432234446,-0.020948321038340236],[1,-147.70742379443573,-32.468593051432606,83.32906500714773]],[1,"Bone074",3,[[0,"Bone075",-1080,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184584498405457,-0.3363339900970459],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone076",3,[[0,"Bone077",-1081,[1,0.3130360245704651,2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.45488160848617554,0.4619303047657013,-0.3363339900970459],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone078",3,[[0,"Bone079",-1082,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184489130973816,0.33521783351898193],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone080",3,[[0,"Bone081",-1083,[1,0.3130360245704651,0,-5.960464477539063e-8]]],[1,0.454881489276886,0.4619293510913849,0.33521783351898193],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone082",3,[[0,"Bone083",-1084,[1,0.30177998542785645,2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.4976084232330322,-0.2998250722885132],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone084",3,[[0,"Bone085",-1085,[1,0.36502498388290405,0.0000027418136596679688,0]]],[1,0.5077738165855408,0.49703094363212585,-0.2998250722885132],[3,0.782142559488007,0.616027577807194,0.06955007285248349,0.06265642333205072],[1,176.9747239606002,-7.778014308885179,76.49714589591072]],[1,"Bone086",3,[[0,"Bone087",-1086,[1,0.30177998542785645,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.49760758876800537,0.3142220973968506],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone088",3,[[0,"Bone089",-1087,[1,0.3650251030921936,0.0000027418136596679688,-2.220446049250313e-16]]],[1,0.5077738165855408,0.497030109167099,0.3142220973968506],[3,0.7409702629047793,0.6002829147450446,-0.22010958460906105,-0.20536616692932272],[1,-168.38230910273356,23.582711314949474,78.51869431562027]],[1,"Bone090",3,[[0,"Bone091",-1088,[1,0.33172428607940674,-1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5448386073112488,0.5238311290740967,-0.3034851551055908],[3,0.8761015017292547,0.4083642400342507,-0.20871427843274715,0.14873854949975587],[1,145.28569548842597,40.06105985280097,40.8021742494266]],[1,"Bone092",3,[[0,"Bone093",-1089,[1,0.3317244052886963,1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5216760039329529,0.4963110685348511,0.2717076539993286],[3,0.882832120707797,0.35694835025803684,0.23849226825573389,-0.19056956702704275],[1,-143.003054353004,-41.42418463966603,32.63955127638818]],[1,"Bone094",3,[[0,"Bone095",-1090,[1,0.29695814847946167,-1.1920928955078125e-7,-6.705522537231445e-8]]],[1,0.5659940838813782,0.4269203245639801,-0.23909606039524078],[3,0.7309862280870199,0.6741191657758188,-0.07787624646002703,0.07181765046367801],[1,111.04828158447292,69.44581633958744,76.99689544497066]],[1,"Bone096",3,[[0,"Bone097",-1091,[1,0.36130058765411377,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5690563321113586,0.4340629577636719,-0.23909594118595123],[3,0.7948704391323203,0.5311093946079064,-0.03756829737614827,0.29101961958787764],[1,117.93324344251629,40.42447111830393,55.33182209184379]],[1,"Bone098",3,[[0,"Bone099",-1092,[1,0.29695820808410645,-2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.5659939646720886,0.4269196093082428,0.2810366153717041],[3,0.7345414798823526,0.6773976721514599,0.029231535434350038,-0.026957845466156618],[1,-135.57476575809534,-44.609764469435945,83.5027757303296]],[1,"Bone100",3,[[0,"Bone101",-1093,[1,0.3613004684448242,2.384185791015625e-7,-5.960464477539063e-8]]],[1,0.5690483450889587,0.42423558235168457,0.2810366153717041],[3,0.7527480120544073,0.589955091093729,0.286647289805427,0.056184980981856904],[1,-139.5597450373669,-69.08685324294593,66.98251767336397]],[1,"Bone102",3,[[0,"Bone103",-1094,[1,0.3552076816558838,2.220446049250313e-16,-3.725290298461914e-8]]],[1,0.6143574118614197,0.4207141101360321,-0.26724207401275635],[3,0.7650023749004343,0.6271182935856692,-0.10929834914400782,0.09771326993447878],[1,124.14316344490346,56.8104332319705,69.74053889099635]],[1,"Bone104",3,[[0,"Bone105",-1095,[1,0.35520756244659424,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.5576761364936829,0.44577041268348694,0.2603142261505127],[3,0.8915628895187472,0.4478831641633933,0.028107567087909374,-0.061043017326864554],[1,-167.23003664793316,-9.95285531807336,52.674195077352095]],[1,"Bone106",3,[[0,"Bone107",-1096,[1,0.2874833941459656,-0.0000036954879760742188,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.4960506558418274,-0.27806413173675537],[3,0.7370936301321167,0.6720280671705423,-0.05262346957380588,0.04797945189034701],[1,123.08184723859905,57.295808787005804,80.28031546322022]],[1,"Bone108",3,[[0,"Bone109",-1097,[1,0.3408219814300537,5.960464477539062e-7,-2.9802322387695312e-8]]],[1,0.45001786947250366,0.4833073914051056,-0.27806413173675537],[3,0.8125947704577924,0.5501902693191293,-0.06359948955668364,0.18148143568784447],[1,132.01127294007338,38.101081770622095,60.58429478212839]],[1,"Bone110",3,[[0,"Bone111",-1098,[1,0.2874833941459656,-0.000003933906555175781,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.49604982137680054,0.30299365520477295],[3,0.7377364623004045,0.6747657049223527,0.01535592318712203,-0.014154549664187803],[1,-154.93917078999186,-25.158292587385183,84.36278973512245]],[1,"Bone112",3,[[0,"Bone113",-1099,[1,0.34082210063934326,5.960464477539062e-7,-5.960464477539063e-8]]],[1,0.45001763105392456,0.48330655694007874,0.30299365520477295],[3,0.8177525517517987,0.5545548279545124,0.03673993103349361,-0.14966590915574896],[1,-139.9883177589045,-30.60324094128515,63.63456335848235]],[1,"Bone114",3,[[0,"Bone115",-1100,[1,0.2560230493545532,-0.0000027418136596679688,-2.9802322387695312e-8]]],[1,0.46289128065109253,0.43053486943244934,-0.28921449184417725],[3,0.7372316711044058,0.6750830405448509,-0.020229026655859263,0.018523983639627255],[1,148.12341538683822,32.01492732169675,84.06273562612712]],[1,"Bone116",3,[[0,"Bone117",-1101,[1,0.328660249710083,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4715500473976135,0.4206230640411377,-0.28921449184417725],[3,0.86108728451622,0.4641656993584662,-0.1801506326686892,0.10307590180357071],[1,147.81843159374745,38.838543256635504,49.66171592245412]],[1,"Bone118",3,[[0,"Bone119",-1102,[1,0.25602298974990845,-0.0000026226043701171875,-4.470348358154297e-8]]],[1,0.46289128065109253,0.43053409457206726,0.26084041595458984],[3,0.7300865260634497,0.6782015753885853,0.06322911560564157,-0.05493966272897319],[1,-114.04232475327392,-66.63217527081342,79.52807707314034]],[1,"Bone120",3,[[0,"Bone121",-1103,[1,0.328660249710083,-1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.471549928188324,0.4206222891807556,0.26084041595458984],[3,0.8517535126112817,0.4840732101605765,0.16792873638480257,-0.10949438549707012],[1,-145.46936655267316,-39.5401283845538,51.98481950116559]],[2,"Bip001 L Thigh",60,[-1104],[1,-3.5762786865234375e-7,3.583855630040489e-7,0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 L Calf",419,[-1105],[1,0.32331088185310364,0,2.7755575615628914e-17],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 L Foot",420,[[7,"Bip001 L Toe0",-1106,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,-2.7755575615628914e-17],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[2,"Bip001 R Thigh",60,[-1107],[1,3.5762786865234375e-7,-3.099634966474696e-7,-0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 R Calf",422,[-1108],[1,0.323310911655426,-4.656612873077393e-10,0],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 R Foot",423,[[7,"Bip001 R Toe0",-1109,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,0],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[70,"Box002",122,[[51,-1110,[26],[26],27]],[3,-0.20355245276674805,-0.6104831530676155,0.7471364608744635,0.16632446490292468],[1,1.1948610544204712,1.1948610544204712,1.1948610544204712],[1,-256.722,173.31,29.806]],[35,"4",32,[-1111]],[53,"Leader04",426,[[37,-1112,[30],[26],32,31,32]],[1,0,0,-0.3749999701976776]],[2,"Bip001",32,[61],[1,0,0.5538838505744934,-2.7976041483412928e-9],[3,-0.5000003576277408,-0.49999964237200345,-0.49999964237200345,0.5000003576277408],[1,-90,-89.99991803772996,0]],[36,"Bip001 Neck",4,[[7,"Bip001 Head",-1113,[1,0.0361407995223999,0,-2.117582368135751e-22],[3,-7.265599787883253e-14,1.1042733174299356e-9,-0.0003988305609355657,0.9999999204670887],[1,4.21424291253915e-11,1.265404279071084e-7,-0.04570261697650697]]],[1,0.36156851053237915,-0.000028777983970940113,-7.981881822161085e-11]],[2,"Bip001 L Clavicle",4,[-1114],[1,0.2801923155784607,0.00006292969919741154,0.49533236026763916],[3,0.6128494051046567,-0.00024511126315241414,0.7901996254940081,0.00031377136001196616],[1,179.9557697821271,-104.4083488281371,0.011198542610264862]],[2,"Bip001 L UpperArm",430,[-1115],[1,0.06854209303855896,-1.4210854715202004e-13,1.1920928955078125e-7],[3,-0.0031089797470419266,0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,0.5495678086236702,18.417639908626843,-5.614239029902418]],[1,"Bip001 L Forearm",431,[[7,"Bip001 L Hand",-1116,[1,0.22839155793190002,3.469446951953614e-18,-2.220446049250313e-16],[3,-0.7068252124052276,-6.582823321315215e-10,6.588067459888234e-10,0.7073882378922517],[1,-89.95437890588063,4.492611105837074e-15,1.0672171927718989e-7]]],[1,0.2283916473388672,3.725290298461914e-9,1.1920928955078125e-7],[3,2.0649073607475246e-18,4.075061401749951e-17,-0.00810088520513424,0.9999671872911096],[1,2.7447772677110676e-16,4.672053206816481e-15,-0.9283032185516256]],[2,"Bip001 R Clavicle",4,[-1117],[1,0.2801923155784607,0.00006567745003849268,-0.49533236026763916],[3,-0.6128493678865936,0.00024291956445071482,0.7901996543589614,0.00031547118072789955],[1,-179.955848867482,104.40835411447217,0.0115063810465215]],[2,"Bip001 R UpperArm",433,[-1118],[1,0.06854209303855896,-2.842170943040401e-14,-1.1920928955078125e-7],[3,0.0031089797470419266,-0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,-0.5495678086236702,-18.417639908626843,-5.614239029902418]],[1,"Bip001 R Forearm",434,[[7,"Bip001 R Hand",-1119,[1,0.2283916175365448,1.862645149230957e-8,0],[3,0.7068252124052276,-1.316564553240738e-9,-1.3176133809553418e-9,0.7073882378922517],[1,89.95437890588063,8.992385156758068e-15,-2.1344342056244653e-7]]],[1,0.22839152812957764,-7.450580596923828e-9,-1.1920928955078125e-7],[3,-3.773675820299622e-18,6.953021029531917e-17,-0.008100894517749086,0.9999671872156666],[1,-3.6792100925359395e-16,7.964856056974922e-15,-0.9283042857336966]],[2,"Bone014",4,[-1120],[1,0.9016814827919006,-0.16620145738124847,-3.576278970740532e-7],[3,0.8204482627518984,-0.545374859246599,-0.1592498687415361,-0.06379961093100726],[1,-144.9599557847161,43.03525191800192,-60.99572743570296]],[1,"Bone015",436,[[0,"Bone016",-1121,[1,0.17065280675888062,2.220446049250313e-16,0]]],[1,0.2109774947166443,-3.5762786865234375e-7,0],[3,0.013840689213228043,0.07062936517773824,0.09123383389515168,0.9932252089277056],[1,0.8513140666443272,8.056399614568244,10.555425884491925]],[2,"Bone017",4,[-1122],[1,0.9329524636268616,0.006207577884197235,-1.1920930376163597e-7],[3,0.9452697475813631,-0.25360026529346813,-0.2029219235644872,-0.031220228817822337],[1,-169.44859951835804,26.85230799640193,-27.824884197659852]],[1,"Bone018",438,[[0,"Bone019",-1123,[1,0.30884039402008057,4.440892098500626e-16,-1.4901161193847656e-8]]],[1,0.2076650857925415,-5.960464477539063e-8,5.960464477539063e-8],[3,0.03613674268677419,0.11236885936781277,0.1682927608746565,0.9786444307865612],[1,2.0034570327753047,12.751783162518256,19.725780022967598]],[2,"Bone020",4,[-1124],[1,0.906788170337677,0.12963071465492249,-6.661338571267413e-15],[3,0.9481296591209838,0.24509234860599208,-0.19876644124122353,0.03836394122382767],[1,169.01731060961293,26.295211785624716,26.71210427485875]],[1,"Bone021",440,[[0,"Bone022",-1125,[1,0.16476237773895264,0.0000013113021850585938,-5.551115123125783e-17]]],[1,0.20464777946472168,-5.960464477539063e-8,0],[3,0.008307466313383617,0.10104896164599238,0.055506371161730565,0.9932971036473304],[1,0.30477364429702875,11.60041664798797,6.4275959085883185]],[2,"Bone005",4,[-1126],[1,-0.31098389625549316,-0.5923760533332825,-8.344650268554688e-7],[3,-0.42288719799809726,0.9061823314150982,6.15264684325026e-7,1.908425665451616e-7],[1,-0.00011386262569439461,179.9999227307888,-50.03400606098685]],[1,"Bone006",442,[[0,"Bone007",-1127,[1,0.12936758995056152,0,7.450580596923828e-9]]],[1,0.15301230549812317,5.960464477539063e-8,1.3988923797114694e-8],[3,-0.02847290608537811,0.10372917393021469,0.13282358696222316,0.9852854646452963],[1,-4.964775359024229,12.665943619279231,14.822852541428624]],[2,"Bone008",4,[-1128],[1,-0.1864808201789856,-0.6331885457038879,-8.34464913168631e-7],[3,-0.6440305100538997,0.7649998053066674,4.98990515435206e-7,4.754895702936878e-7],[1,-0.000462507426605731,179.99953940382395,-80.18605061146266]],[1,"Bone009",444,[[0,"Bone010",-1129,[1,0.16327983140945435,-8.344650268554688e-7,-3.725290298461914e-9]]],[1,0.22114378213882446,-1.1102230246251565e-16,-6.9274577185751696e-9],[3,-0.03201106959581647,0.04722837021360231,0.07318508679539422,0.995685048366726],[1,-4.09379744120405,5.72510544169884,8.204978271429885]],[2,"Bone011",4,[-1130],[1,-0.052560269832611084,-0.6348226070404053,-9.536742027194123e-7],[3,0.8096754585239455,-0.5868778849671988,-3.780735385237567e-7,-5.685013230944716e-7],[1,-179.99974876130244,0.00023561350371702336,-71.87153010388089]],[1,"Bone012",446,[[0,"Bone013",-1131,[1,0.26897573471069336,-1.4901161193847656e-7,1.4901161193847656e-8]]],[1,0.2352738380432129,-5.960464477539063e-8,2.664765474946762e-8],[3,-0.03139486236296435,-0.019944152323655595,-0.06752988851919654,0.9970237246735336],[1,-3.777692517752904,-2.545153265995996,-7.666428594673814]],[2,"Bone001",4,[-1132],[1,-0.12136167287826538,0.6267284154891968,7.748602683932404e-7],[3,0.008800632467346676,0.9999612736838474,8.666027187390251e-7,-3.608613557185051e-8],[1,-0.00009935329299687917,-179.99999499026762,1.0084912132622457]],[2,"Bone002",448,[-1133],[1,0.1900234818458557,0.000005304813385009766,-2.1419708673420246e-8],[3,0.0011409692143065063,0.07066804114640339,0.01553731119993357,0.9973782221958022],[1,0.004584340621566644,8.105630307357805,1.7853051888012772]],[1,"Bone003",449,[[0,"Bone004",-1134,[1,0.19731539487838745,-5.960464477539063e-8,0]]],[1,0.19963356852531433,-5.960464477539063e-8,0],[3,-0.00458090560252861,-0.0177723800358147,0.07224471774890884,0.9972180596886038],[1,-0.3803222028973737,-2.0144548658258965,8.293868239180254]],[2,"Bone023",4,[-1135],[1,0.3754916787147522,0.5513330698013306,7.152557373046875e-7],[3,0.2873016068711859,0.9578401676108977,5.975467872852589e-7,-6.968010691281707e-8],[1,-0.00008130283770854925,-179.99996727722532,33.3929518592193]],[2,"Bone024",451,[-1136],[1,0.2070872187614441,-2.220446049250313e-16,-1.3571721524385794e-8],[3,0.004208503857234987,0.0006225413675165585,-0.15791546185656688,0.9874434707081498],[1,0.5130628308917761,0.1542934722454072,-18.171355129527033]],[2,"Bone025",452,[-1137],[1,0.22183185815811157,-2.980232238769531e-7,0],[3,0.002902650233141969,0.024008338930223375,-0.09119263161938501,0.9955395914888401],[1,0.591853572811918,2.817084141656892,-10.453202709834361]],[2,"Bone026",453,[-1138],[1,0.23736679553985596,0.000004291534423828125,3.725290298461914e-9],[3,-0.0002839148501031005,0.022400075497033593,-0.016858031918518097,0.9996069041227753],[1,0.010756860055955083,2.5676206844581224,-1.9321237219449572]],[1,"Bone027",454,[[0,"Bone028",-1139,[1,0.34696388244628906,-5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.18080151081085205,0.0000013113021850585938,-1.3877787807814457e-17],[3,-0.00852465419233676,-0.005205312596749417,0.1578778430927509,0.9874081332721804],[1,-0.916109025074623,-0.45757664503186946,18.17186988538253]],[2,"Bone032",4,[-1140],[1,-0.1371343731880188,-0.4868207573890686,0.45237958431243896],[3,0.11535127031226004,-0.6298771672772465,0.7621545403924247,-0.09523284695603418],[1,101.35335284515278,-176.6532740929764,-16.886608649983]],[1,"Bone033",456,[[0,"Bone034",-1141,[1,0.28710493445396423,5.960464477539063e-8,1.1920928955078125e-7]]],[1,0.28638458251953125,-1.1920928955078125e-7,5.364418029785156e-7],[3,0.07119469277661244,-0.1552731976211619,-0.1198384899551764,0.9779878762777208],[1,6.060120925422759,-17.251685451156085,-14.863104013399319]],[2,"Bone035",4,[-1142],[1,-0.1371343731880188,-0.4868195056915283,-0.45238110423088074],[3,-0.09523276962954226,0.7621552330740298,-0.6298763141559929,0.11535141590730125],[1,78.64651408105023,176.65323560688648,-16.886608689442152]],[1,"Bone036",458,[[0,"Bone037",-1143,[1,0.28710508346557617,4.470348358154297e-8,1.1920928955078125e-7]]],[1,0.286384254693985,-2.9802322387695312e-8,5.960464477539063e-8],[3,-0.08969791373746544,-0.07142771147081593,-0.02274856751952749,0.9931439316539157],[1,-10.457769774349906,-8.397133152767221,-1.8550669730931832]],[2,"Bone029",4,[-1144],[1,-0.32085472345352173,0.6124598383903503,8.344648563252122e-7],[3,0.004985236885757944,0.9999875736113638,-0.000006004100951980773,-2.9932240717468475e-8],[1,0.0006880278383291512,-179.99999999999963,0.571268433130425]],[1,"Bone030",460,[[0,"Bone031",-1145,[1,0.22829708456993103,5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.24331533908843994,-0.000014960765838623047,1.4626493793912232e-8],[3,-0.001397583529531738,0.09804550644517858,0.08618548588222198,0.9914419738186554],[1,-1.143939715457056,11.39375689723688,9.823971622893042]],[1,"Bone040",4,[[0,"Bone041",-1146,[1,0.3134060502052307,1.1920928955078125e-7,-4.470348358154297e-8]]],[1,0.45121103525161743,0.5788355469703674,0.27501964569091797],[3,0.7503068432987399,0.6579952227602499,0.04714758685295673,-0.04311650238264439],[1,-135.80652927262656,-44.52147350717872,79.52393791219441]],[1,"Bone042",4,[[0,"Bone043",-1147,[1,0.343991756439209,5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4649967551231384,0.588960587978363,-0.2768658399581909],[3,0.8609873646719077,0.4753544625451561,-0.14523433139179998,0.10791608684022115],[1,148.31653405889756,34.882680862808,51.92480961419617]],[6,"Bone044",4,[[0,"Bone045",-1148,[1,0.343991756439209,0,-2.9802322387695312e-8]]],[1,0.442013680934906,0.5889780521392822,0.27617859840393066],[3,-0.4813784027157567,0.8587903912742175,0.10399130654688564,0.14120802178550146],[1,-1,-1,-1],[1,-31.420518268463667,145.39807230422076,-52.88609179989549]],[1,"Bone038",4,[[0,"Bone039",-1149,[1,0.3157862424850464,-0.0000010728836059570312,-7.450580596923828e-8]]],[1,0.45659762620925903,0.5715445280075073,-0.2790215015411377],[3,0.7428789718798489,0.6657403693128117,-0.05170040939014791,0.047409508274936396],[1,128.06864187182657,52.280422998424584,79.8101166299194]],[1,"Bone046",4,[[0,"Bone047",-1150,[1,0.21479752659797668,2.220446049250313e-16,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.37866881489753723,-0.20330704748630524],[3,0.7131649057801203,0.694849233414053,-0.06927880452502871,0.06148826905286835],[1,98.29018344276301,82.34384463316458,79.28510882986339]],[6,"Bone048",4,[[0,"Bone049",-1151,[1,0.21479761600494385,0,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.3786682188510895,0.20213426649570465],[3,-0.6723173258517765,0.7340214846148103,0.06581225989123905,0.06978982684742839],[1,-1,-1,-1],[1,-65.37059136868433,114.30530864922247,-77.9058600571856]],[1,"Bone050",4,[[0,"Bone051",-1152,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8556816757871835,0.49188567242382253,-0.1353241382687409,0.0868604201464844],[1,150.64563225829755,33.473746686529736,54.9136308570931]],[6,"Bone052",4,[[0,"Bone053",-1153,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.45730264743819127,0.8668026690767159,0.11432742764710176,0.1626550362426549],[1,-1,-1,-1],[1,-31.983827466691466,143.83562976985942,-49.076988498652106]],[6,"Bone055",4,[[0,"Bone054",-1154,[1,0.20849084854125977,1.7881393432617188e-7,-1.4901161193847656e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.4427337659661443,0.8804939415434928,0.10356419564314906,0.13413310090886338],[1,-1,-1,-1],[1,-27.17790674110575,150.1752959401649,-48.75227820325089]],[1,"Bone057",4,[[0,"Bone056",-1155,[1,0.20849084854125977,-2.220446049250313e-16,1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8617637805990132,0.4818086653500003,-0.1325549193352023,0.0874802252019584],[1,151.84597412576554,31.99694703763193,53.825068910758866]],[6,"Bone059",4,[[0,"Bone058",-1156,[1,0.20849084854125977,1.1920928955078125e-7,-7.450580596923828e-9]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.6652577460916701,0.7361198002933665,0.06480808499090224,0.10658181364987836],[1,-1,-1,-1],[1,-65.82966802401327,110.75547806347589,-74.92893643503476]],[1,"Bone060",4,[[0,"Bone061",-1157,[1,0.20849084854125977,1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7360726972769813,0.6625652116821437,-0.08534870788766842,0.10917839829330199],[1,109.72436976636762,68.32343290153494,73.08862554690798]],[6,"Bone063",4,[[0,"Bone064",-1158,[1,0.20849084854125977,1.1920928955078125e-7,0]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.5645249344085078,0.8156736288103916,0.07917336920589502,0.09858857592512724],[1,-1,-1,-1],[1,-34.48476808697738,143.90338262208024,-64.86709398225736]],[1,"Bone065",4,[[0,"Bone062",-1159,[1,0.20849084854125977,1.1920928955078125e-7,-3.725290298461914e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7976335333562894,0.5787851844174365,-0.09629196729729736,0.13970080099430837],[1,131.03499227476132,45.35227151255881,63.690481825110886]],[1,"Bone066",4,[[0,"Bone067",-1160,[1,0.29234713315963745,-1.1920928955078125e-7,-8.940696716308594e-8]]],[1,0.4733502268791199,0.5121073722839355,-0.32047057151794434],[3,0.7410124627759277,0.6714912732197018,4.206135649442946e-7,-6.010142285930516e-7],[1,-179.99915070941177,-0.000834655304279188,84.36453315226129]],[1,"Bone068",4,[[0,"Bone069",-1161,[1,0.30784285068511963,-5.960464477539063e-8,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.5145719051361084,-0.32047057151794434],[3,0.9154435531632643,0.4024463951524234,1.790492545184016e-7,-7.77563696054753e-7],[1,-179.9998671368788,-0.00008082182361720286,47.46240759938744]],[1,"Bone071",4,[[0,"Bone072",-1162,[1,0.3078427314758301,-1.7881393432617188e-7,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.514570951461792,0.31384503841400146],[3,0.9179723472890481,0.39556370090805726,0.026501190523879753,-0.012402219050369916],[1,-176.35605069069194,-4.873882117705918,46.516762946885805]],[1,"Bone073",4,[[0,"Bone070",-1163,[1,0.29234713315963745,-2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4733502268791199,0.5121066570281982,0.31384503841400146],[3,0.7406519796771894,0.6711642277831933,0.02311692432234446,-0.020948321038340236],[1,-147.70742379443573,-32.468593051432606,83.32906500714773]],[1,"Bone074",4,[[0,"Bone075",-1164,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184584498405457,-0.3363339900970459],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone076",4,[[0,"Bone077",-1165,[1,0.3130360245704651,2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.45488160848617554,0.4619303047657013,-0.3363339900970459],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone078",4,[[0,"Bone079",-1166,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184489130973816,0.33521783351898193],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone080",4,[[0,"Bone081",-1167,[1,0.3130360245704651,0,-5.960464477539063e-8]]],[1,0.454881489276886,0.4619293510913849,0.33521783351898193],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone082",4,[[0,"Bone083",-1168,[1,0.30177998542785645,2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.4976084232330322,-0.2998250722885132],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone084",4,[[0,"Bone085",-1169,[1,0.36502498388290405,0.0000027418136596679688,0]]],[1,0.5077738165855408,0.49703094363212585,-0.2998250722885132],[3,0.782142559488007,0.616027577807194,0.06955007285248349,0.06265642333205072],[1,176.9747239606002,-7.778014308885179,76.49714589591072]],[1,"Bone086",4,[[0,"Bone087",-1170,[1,0.30177998542785645,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.49760758876800537,0.3142220973968506],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone088",4,[[0,"Bone089",-1171,[1,0.3650251030921936,0.0000027418136596679688,-2.220446049250313e-16]]],[1,0.5077738165855408,0.497030109167099,0.3142220973968506],[3,0.7409702629047793,0.6002829147450446,-0.22010958460906105,-0.20536616692932272],[1,-168.38230910273356,23.582711314949474,78.51869431562027]],[1,"Bone090",4,[[0,"Bone091",-1172,[1,0.33172428607940674,-1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5448386073112488,0.5238311290740967,-0.3034851551055908],[3,0.8761015017292547,0.4083642400342507,-0.20871427843274715,0.14873854949975587],[1,145.28569548842597,40.06105985280097,40.8021742494266]],[1,"Bone092",4,[[0,"Bone093",-1173,[1,0.3317244052886963,1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5216760039329529,0.4963110685348511,0.2717076539993286],[3,0.882832120707797,0.35694835025803684,0.23849226825573389,-0.19056956702704275],[1,-143.003054353004,-41.42418463966603,32.63955127638818]],[1,"Bone094",4,[[0,"Bone095",-1174,[1,0.29695814847946167,-1.1920928955078125e-7,-6.705522537231445e-8]]],[1,0.5659940838813782,0.4269203245639801,-0.23909606039524078],[3,0.7309862280870199,0.6741191657758188,-0.07787624646002703,0.07181765046367801],[1,111.04828158447292,69.44581633958744,76.99689544497066]],[1,"Bone096",4,[[0,"Bone097",-1175,[1,0.36130058765411377,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5690563321113586,0.4340629577636719,-0.23909594118595123],[3,0.7948704391323203,0.5311093946079064,-0.03756829737614827,0.29101961958787764],[1,117.93324344251629,40.42447111830393,55.33182209184379]],[1,"Bone098",4,[[0,"Bone099",-1176,[1,0.29695820808410645,-2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.5659939646720886,0.4269196093082428,0.2810366153717041],[3,0.7345414798823526,0.6773976721514599,0.029231535434350038,-0.026957845466156618],[1,-135.57476575809534,-44.609764469435945,83.5027757303296]],[1,"Bone100",4,[[0,"Bone101",-1177,[1,0.3613004684448242,2.384185791015625e-7,-5.960464477539063e-8]]],[1,0.5690483450889587,0.42423558235168457,0.2810366153717041],[3,0.7527480120544073,0.589955091093729,0.286647289805427,0.056184980981856904],[1,-139.5597450373669,-69.08685324294593,66.98251767336397]],[1,"Bone102",4,[[0,"Bone103",-1178,[1,0.3552076816558838,2.220446049250313e-16,-3.725290298461914e-8]]],[1,0.6143574118614197,0.4207141101360321,-0.26724207401275635],[3,0.7650023749004343,0.6271182935856692,-0.10929834914400782,0.09771326993447878],[1,124.14316344490346,56.8104332319705,69.74053889099635]],[1,"Bone104",4,[[0,"Bone105",-1179,[1,0.35520756244659424,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.5576761364936829,0.44577041268348694,0.2603142261505127],[3,0.8915628895187472,0.4478831641633933,0.028107567087909374,-0.061043017326864554],[1,-167.23003664793316,-9.95285531807336,52.674195077352095]],[1,"Bone106",4,[[0,"Bone107",-1180,[1,0.2874833941459656,-0.0000036954879760742188,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.4960506558418274,-0.27806413173675537],[3,0.7370936301321167,0.6720280671705423,-0.05262346957380588,0.04797945189034701],[1,123.08184723859905,57.295808787005804,80.28031546322022]],[1,"Bone108",4,[[0,"Bone109",-1181,[1,0.3408219814300537,5.960464477539062e-7,-2.9802322387695312e-8]]],[1,0.45001786947250366,0.4833073914051056,-0.27806413173675537],[3,0.8125947704577924,0.5501902693191293,-0.06359948955668364,0.18148143568784447],[1,132.01127294007338,38.101081770622095,60.58429478212839]],[1,"Bone110",4,[[0,"Bone111",-1182,[1,0.2874833941459656,-0.000003933906555175781,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.49604982137680054,0.30299365520477295],[3,0.7377364623004045,0.6747657049223527,0.01535592318712203,-0.014154549664187803],[1,-154.93917078999186,-25.158292587385183,84.36278973512245]],[1,"Bone112",4,[[0,"Bone113",-1183,[1,0.34082210063934326,5.960464477539062e-7,-5.960464477539063e-8]]],[1,0.45001763105392456,0.48330655694007874,0.30299365520477295],[3,0.8177525517517987,0.5545548279545124,0.03673993103349361,-0.14966590915574896],[1,-139.9883177589045,-30.60324094128515,63.63456335848235]],[1,"Bone114",4,[[0,"Bone115",-1184,[1,0.2560230493545532,-0.0000027418136596679688,-2.9802322387695312e-8]]],[1,0.46289128065109253,0.43053486943244934,-0.28921449184417725],[3,0.7372316711044058,0.6750830405448509,-0.020229026655859263,0.018523983639627255],[1,148.12341538683822,32.01492732169675,84.06273562612712]],[1,"Bone116",4,[[0,"Bone117",-1185,[1,0.328660249710083,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4715500473976135,0.4206230640411377,-0.28921449184417725],[3,0.86108728451622,0.4641656993584662,-0.1801506326686892,0.10307590180357071],[1,147.81843159374745,38.838543256635504,49.66171592245412]],[1,"Bone118",4,[[0,"Bone119",-1186,[1,0.25602298974990845,-0.0000026226043701171875,-4.470348358154297e-8]]],[1,0.46289128065109253,0.43053409457206726,0.26084041595458984],[3,0.7300865260634497,0.6782015753885853,0.06322911560564157,-0.05493966272897319],[1,-114.04232475327392,-66.63217527081342,79.52807707314034]],[1,"Bone120",4,[[0,"Bone121",-1187,[1,0.328660249710083,-1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.471549928188324,0.4206222891807556,0.26084041595458984],[3,0.8517535126112817,0.4840732101605765,0.16792873638480257,-0.10949438549707012],[1,-145.46936655267316,-39.5401283845538,51.98481950116559]],[2,"Bip001 L Thigh",61,[-1188],[1,-3.5762786865234375e-7,3.583855630040489e-7,0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 L Calf",504,[-1189],[1,0.32331088185310364,0,2.7755575615628914e-17],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 L Foot",505,[[7,"Bip001 L Toe0",-1190,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,-2.7755575615628914e-17],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[2,"Bip001 R Thigh",61,[-1191],[1,3.5762786865234375e-7,-3.099634966474696e-7,-0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 R Calf",507,[-1192],[1,0.323310911655426,-4.656612873077393e-10,0],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 R Foot",508,[[7,"Bip001 R Toe0",-1193,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,0],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[71,"Cylinder001",123,[[51,-1194,[33],[26],34]],[1,1.25,1.2499990463256836,1.25]],[35,"5",33,[-1195]],[40,"Leader05",511,[[37,-1196,[37],[26],33,38,39]]],[2,"Bip001",33,[62],[1,0,0.5538838505744934,-2.7976041483412928e-9],[3,-0.5000003576277408,-0.49999964237200345,-0.49999964237200345,0.5000003576277408],[1,-90,-89.99991803772996,0]],[36,"Bip001 Neck",5,[[7,"Bip001 Head",-1197,[1,0.0361407995223999,0,-2.117582368135751e-22],[3,-7.265599787883253e-14,1.1042733174299356e-9,-0.0003988305609355657,0.9999999204670887],[1,4.21424291253915e-11,1.265404279071084e-7,-0.04570261697650697]]],[1,0.36156851053237915,-0.000028777983970940113,-7.981881822161085e-11]],[2,"Bip001 L Clavicle",5,[-1198],[1,0.2801923155784607,0.00006292969919741154,0.49533236026763916],[3,0.6128494051046567,-0.00024511126315241414,0.7901996254940081,0.00031377136001196616],[1,179.9557697821271,-104.4083488281371,0.011198542610264862]],[2,"Bip001 L UpperArm",515,[-1199],[1,0.06854209303855896,-1.4210854715202004e-13,1.1920928955078125e-7],[3,-0.0031089797470419266,0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,0.5495678086236702,18.417639908626843,-5.614239029902418]],[1,"Bip001 L Forearm",516,[[7,"Bip001 L Hand",-1200,[1,0.22839155793190002,3.469446951953614e-18,-2.220446049250313e-16],[3,-0.7068252124052276,-6.582823321315215e-10,6.588067459888234e-10,0.7073882378922517],[1,-89.95437890588063,4.492611105837074e-15,1.0672171927718989e-7]]],[1,0.2283916473388672,3.725290298461914e-9,1.1920928955078125e-7],[3,2.0649073607475246e-18,4.075061401749951e-17,-0.00810088520513424,0.9999671872911096],[1,2.7447772677110676e-16,4.672053206816481e-15,-0.9283032185516256]],[2,"Bip001 R Clavicle",5,[-1201],[1,0.2801923155784607,0.00006567745003849268,-0.49533236026763916],[3,-0.6128493678865936,0.00024291956445071482,0.7901996543589614,0.00031547118072789955],[1,-179.955848867482,104.40835411447217,0.0115063810465215]],[2,"Bip001 R UpperArm",518,[-1202],[1,0.06854209303855896,-2.842170943040401e-14,-1.1920928955078125e-7],[3,0.0031089797470419266,-0.15960742936585076,-0.04910870765583094,0.9859534155164387],[1,-0.5495678086236702,-18.417639908626843,-5.614239029902418]],[1,"Bip001 R Forearm",519,[[7,"Bip001 R Hand",-1203,[1,0.2283916175365448,1.862645149230957e-8,0],[3,0.7068252124052276,-1.316564553240738e-9,-1.3176133809553418e-9,0.7073882378922517],[1,89.95437890588063,8.992385156758068e-15,-2.1344342056244653e-7]]],[1,0.22839152812957764,-7.450580596923828e-9,-1.1920928955078125e-7],[3,-3.773675820299622e-18,6.953021029531917e-17,-0.008100894517749086,0.9999671872156666],[1,-3.6792100925359395e-16,7.964856056974922e-15,-0.9283042857336966]],[2,"Bone014",5,[-1204],[1,0.9016814827919006,-0.16620145738124847,-3.576278970740532e-7],[3,0.8204482627518984,-0.545374859246599,-0.1592498687415361,-0.06379961093100726],[1,-144.9599557847161,43.03525191800192,-60.99572743570296]],[1,"Bone015",521,[[0,"Bone016",-1205,[1,0.17065280675888062,2.220446049250313e-16,0]]],[1,0.2109774947166443,-3.5762786865234375e-7,0],[3,0.013840689213228043,0.07062936517773824,0.09123383389515168,0.9932252089277056],[1,0.8513140666443272,8.056399614568244,10.555425884491925]],[2,"Bone017",5,[-1206],[1,0.9329524636268616,0.006207577884197235,-1.1920930376163597e-7],[3,0.9452697475813631,-0.25360026529346813,-0.2029219235644872,-0.031220228817822337],[1,-169.44859951835804,26.85230799640193,-27.824884197659852]],[1,"Bone018",523,[[0,"Bone019",-1207,[1,0.30884039402008057,4.440892098500626e-16,-1.4901161193847656e-8]]],[1,0.2076650857925415,-5.960464477539063e-8,5.960464477539063e-8],[3,0.03613674268677419,0.11236885936781277,0.1682927608746565,0.9786444307865612],[1,2.0034570327753047,12.751783162518256,19.725780022967598]],[2,"Bone020",5,[-1208],[1,0.906788170337677,0.12963071465492249,-6.661338571267413e-15],[3,0.9481296591209838,0.24509234860599208,-0.19876644124122353,0.03836394122382767],[1,169.01731060961293,26.295211785624716,26.71210427485875]],[1,"Bone021",525,[[0,"Bone022",-1209,[1,0.16476237773895264,0.0000013113021850585938,-5.551115123125783e-17]]],[1,0.20464777946472168,-5.960464477539063e-8,0],[3,0.008307466313383617,0.10104896164599238,0.055506371161730565,0.9932971036473304],[1,0.30477364429702875,11.60041664798797,6.4275959085883185]],[2,"Bone005",5,[-1210],[1,-0.31098389625549316,-0.5923760533332825,-8.344650268554688e-7],[3,-0.42288719799809726,0.9061823314150982,6.15264684325026e-7,1.908425665451616e-7],[1,-0.00011386262569439461,179.9999227307888,-50.03400606098685]],[1,"Bone006",527,[[0,"Bone007",-1211,[1,0.12936758995056152,0,7.450580596923828e-9]]],[1,0.15301230549812317,5.960464477539063e-8,1.3988923797114694e-8],[3,-0.02847290608537811,0.10372917393021469,0.13282358696222316,0.9852854646452963],[1,-4.964775359024229,12.665943619279231,14.822852541428624]],[2,"Bone008",5,[-1212],[1,-0.1864808201789856,-0.6331885457038879,-8.34464913168631e-7],[3,-0.6440305100538997,0.7649998053066674,4.98990515435206e-7,4.754895702936878e-7],[1,-0.000462507426605731,179.99953940382395,-80.18605061146266]],[1,"Bone009",529,[[0,"Bone010",-1213,[1,0.16327983140945435,-8.344650268554688e-7,-3.725290298461914e-9]]],[1,0.22114378213882446,-1.1102230246251565e-16,-6.9274577185751696e-9],[3,-0.03201106959581647,0.04722837021360231,0.07318508679539422,0.995685048366726],[1,-4.09379744120405,5.72510544169884,8.204978271429885]],[2,"Bone011",5,[-1214],[1,-0.052560269832611084,-0.6348226070404053,-9.536742027194123e-7],[3,0.8096754585239455,-0.5868778849671988,-3.780735385237567e-7,-5.685013230944716e-7],[1,-179.99974876130244,0.00023561350371702336,-71.87153010388089]],[1,"Bone012",531,[[0,"Bone013",-1215,[1,0.26897573471069336,-1.4901161193847656e-7,1.4901161193847656e-8]]],[1,0.2352738380432129,-5.960464477539063e-8,2.664765474946762e-8],[3,-0.03139486236296435,-0.019944152323655595,-0.06752988851919654,0.9970237246735336],[1,-3.777692517752904,-2.545153265995996,-7.666428594673814]],[2,"Bone001",5,[-1216],[1,-0.12136167287826538,0.6267284154891968,7.748602683932404e-7],[3,0.008800632467346676,0.9999612736838474,8.666027187390251e-7,-3.608613557185051e-8],[1,-0.00009935329299687917,-179.99999499026762,1.0084912132622457]],[2,"Bone002",533,[-1217],[1,0.1900234818458557,0.000005304813385009766,-2.1419708673420246e-8],[3,0.0011409692143065063,0.07066804114640339,0.01553731119993357,0.9973782221958022],[1,0.004584340621566644,8.105630307357805,1.7853051888012772]],[1,"Bone003",534,[[0,"Bone004",-1218,[1,0.19731539487838745,-5.960464477539063e-8,0]]],[1,0.19963356852531433,-5.960464477539063e-8,0],[3,-0.00458090560252861,-0.0177723800358147,0.07224471774890884,0.9972180596886038],[1,-0.3803222028973737,-2.0144548658258965,8.293868239180254]],[2,"Bone023",5,[-1219],[1,0.3754916787147522,0.5513330698013306,7.152557373046875e-7],[3,0.2873016068711859,0.9578401676108977,5.975467872852589e-7,-6.968010691281707e-8],[1,-0.00008130283770854925,-179.99996727722532,33.3929518592193]],[2,"Bone024",536,[-1220],[1,0.2070872187614441,-2.220446049250313e-16,-1.3571721524385794e-8],[3,0.004208503857234987,0.0006225413675165585,-0.15791546185656688,0.9874434707081498],[1,0.5130628308917761,0.1542934722454072,-18.171355129527033]],[2,"Bone025",537,[-1221],[1,0.22183185815811157,-2.980232238769531e-7,0],[3,0.002902650233141969,0.024008338930223375,-0.09119263161938501,0.9955395914888401],[1,0.591853572811918,2.817084141656892,-10.453202709834361]],[2,"Bone026",538,[-1222],[1,0.23736679553985596,0.000004291534423828125,3.725290298461914e-9],[3,-0.0002839148501031005,0.022400075497033593,-0.016858031918518097,0.9996069041227753],[1,0.010756860055955083,2.5676206844581224,-1.9321237219449572]],[1,"Bone027",539,[[0,"Bone028",-1223,[1,0.34696388244628906,-5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.18080151081085205,0.0000013113021850585938,-1.3877787807814457e-17],[3,-0.00852465419233676,-0.005205312596749417,0.1578778430927509,0.9874081332721804],[1,-0.916109025074623,-0.45757664503186946,18.17186988538253]],[2,"Bone032",5,[-1224],[1,-0.1371343731880188,-0.4868207573890686,0.45237958431243896],[3,0.11535127031226004,-0.6298771672772465,0.7621545403924247,-0.09523284695603418],[1,101.35335284515278,-176.6532740929764,-16.886608649983]],[1,"Bone033",541,[[0,"Bone034",-1225,[1,0.28710493445396423,5.960464477539063e-8,1.1920928955078125e-7]]],[1,0.28638458251953125,-1.1920928955078125e-7,5.364418029785156e-7],[3,0.07119469277661244,-0.1552731976211619,-0.1198384899551764,0.9779878762777208],[1,6.060120925422759,-17.251685451156085,-14.863104013399319]],[2,"Bone035",5,[-1226],[1,-0.1371343731880188,-0.4868195056915283,-0.45238110423088074],[3,-0.09523276962954226,0.7621552330740298,-0.6298763141559929,0.11535141590730125],[1,78.64651408105023,176.65323560688648,-16.886608689442152]],[1,"Bone036",543,[[0,"Bone037",-1227,[1,0.28710508346557617,4.470348358154297e-8,1.1920928955078125e-7]]],[1,0.286384254693985,-2.9802322387695312e-8,5.960464477539063e-8],[3,-0.08969791373746544,-0.07142771147081593,-0.02274856751952749,0.9931439316539157],[1,-10.457769774349906,-8.397133152767221,-1.8550669730931832]],[2,"Bone029",5,[-1228],[1,-0.32085472345352173,0.6124598383903503,8.344648563252122e-7],[3,0.004985236885757944,0.9999875736113638,-0.000006004100951980773,-2.9932240717468475e-8],[1,0.0006880278383291512,-179.99999999999963,0.571268433130425]],[1,"Bone030",545,[[0,"Bone031",-1229,[1,0.22829708456993103,5.960464477539063e-8,-7.450580596923828e-9]]],[1,0.24331533908843994,-0.000014960765838623047,1.4626493793912232e-8],[3,-0.001397583529531738,0.09804550644517858,0.08618548588222198,0.9914419738186554],[1,-1.143939715457056,11.39375689723688,9.823971622893042]],[1,"Bone040",5,[[0,"Bone041",-1230,[1,0.3134060502052307,1.1920928955078125e-7,-4.470348358154297e-8]]],[1,0.45121103525161743,0.5788355469703674,0.27501964569091797],[3,0.7503068432987399,0.6579952227602499,0.04714758685295673,-0.04311650238264439],[1,-135.80652927262656,-44.52147350717872,79.52393791219441]],[1,"Bone042",5,[[0,"Bone043",-1231,[1,0.343991756439209,5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4649967551231384,0.588960587978363,-0.2768658399581909],[3,0.8609873646719077,0.4753544625451561,-0.14523433139179998,0.10791608684022115],[1,148.31653405889756,34.882680862808,51.92480961419617]],[6,"Bone044",5,[[0,"Bone045",-1232,[1,0.343991756439209,0,-2.9802322387695312e-8]]],[1,0.442013680934906,0.5889780521392822,0.27617859840393066],[3,-0.4813784027157567,0.8587903912742175,0.10399130654688564,0.14120802178550146],[1,-1,-1,-1],[1,-31.420518268463667,145.39807230422076,-52.88609179989549]],[1,"Bone038",5,[[0,"Bone039",-1233,[1,0.3157862424850464,-0.0000010728836059570312,-7.450580596923828e-8]]],[1,0.45659762620925903,0.5715445280075073,-0.2790215015411377],[3,0.7428789718798489,0.6657403693128117,-0.05170040939014791,0.047409508274936396],[1,128.06864187182657,52.280422998424584,79.8101166299194]],[1,"Bone046",5,[[0,"Bone047",-1234,[1,0.21479752659797668,2.220446049250313e-16,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.37866881489753723,-0.20330704748630524],[3,0.7131649057801203,0.694849233414053,-0.06927880452502871,0.06148826905286835],[1,98.29018344276301,82.34384463316458,79.28510882986339]],[6,"Bone048",5,[[0,"Bone049",-1235,[1,0.21479761600494385,0,-2.2351741790771484e-8]]],[1,0.5554919838905334,0.3786682188510895,0.20213426649570465],[3,-0.6723173258517765,0.7340214846148103,0.06581225989123905,0.06978982684742839],[1,-1,-1,-1],[1,-65.37059136868433,114.30530864922247,-77.9058600571856]],[1,"Bone050",5,[[0,"Bone051",-1236,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8556816757871835,0.49188567242382253,-0.1353241382687409,0.0868604201464844],[1,150.64563225829755,33.473746686529736,54.9136308570931]],[6,"Bone052",5,[[0,"Bone053",-1237,[1,0.20849084854125977,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.45730264743819127,0.8668026690767159,0.11432742764710176,0.1626550362426549],[1,-1,-1,-1],[1,-31.983827466691466,143.83562976985942,-49.076988498652106]],[6,"Bone055",5,[[0,"Bone054",-1238,[1,0.20849084854125977,1.7881393432617188e-7,-1.4901161193847656e-8]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.4427337659661443,0.8804939415434928,0.10356419564314906,0.13413310090886338],[1,-1,-1,-1],[1,-27.17790674110575,150.1752959401649,-48.75227820325089]],[1,"Bone057",5,[[0,"Bone056",-1239,[1,0.20849084854125977,-2.220446049250313e-16,1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.8617637805990132,0.4818086653500003,-0.1325549193352023,0.0874802252019584],[1,151.84597412576554,31.99694703763193,53.825068910758866]],[6,"Bone059",5,[[0,"Bone058",-1240,[1,0.20849084854125977,1.1920928955078125e-7,-7.450580596923828e-9]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.6652577460916701,0.7361198002933665,0.06480808499090224,0.10658181364987836],[1,-1,-1,-1],[1,-65.82966802401327,110.75547806347589,-74.92893643503476]],[1,"Bone060",5,[[0,"Bone061",-1241,[1,0.20849084854125977,1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7360726972769813,0.6625652116821437,-0.08534870788766842,0.10917839829330199],[1,109.72436976636762,68.32343290153494,73.08862554690798]],[6,"Bone063",5,[[0,"Bone064",-1242,[1,0.20849084854125977,1.1920928955078125e-7,0]]],[1,0.5620571970939636,0.3879064619541168,0.2028811275959015],[3,-0.5645249344085078,0.8156736288103916,0.07917336920589502,0.09858857592512724],[1,-1,-1,-1],[1,-34.48476808697738,143.90338262208024,-64.86709398225736]],[1,"Bone065",5,[[0,"Bone062",-1243,[1,0.20849084854125977,1.1920928955078125e-7,-3.725290298461914e-8]]],[1,0.561659038066864,0.38500988483428955,-0.20185650885105133],[3,0.7976335333562894,0.5787851844174365,-0.09629196729729736,0.13970080099430837],[1,131.03499227476132,45.35227151255881,63.690481825110886]],[1,"Bone066",5,[[0,"Bone067",-1244,[1,0.29234713315963745,-1.1920928955078125e-7,-8.940696716308594e-8]]],[1,0.4733502268791199,0.5121073722839355,-0.32047057151794434],[3,0.7410124627759277,0.6714912732197018,4.206135649442946e-7,-6.010142285930516e-7],[1,-179.99915070941177,-0.000834655304279188,84.36453315226129]],[1,"Bone068",5,[[0,"Bone069",-1245,[1,0.30784285068511963,-5.960464477539063e-8,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.5145719051361084,-0.32047057151794434],[3,0.9154435531632643,0.4024463951524234,1.790492545184016e-7,-7.77563696054753e-7],[1,-179.9998671368788,-0.00008082182361720286,47.46240759938744]],[1,"Bone071",5,[[0,"Bone072",-1246,[1,0.3078427314758301,-1.7881393432617188e-7,-2.9802322387695312e-8]]],[1,0.4882095456123352,0.514570951461792,0.31384503841400146],[3,0.9179723472890481,0.39556370090805726,0.026501190523879753,-0.012402219050369916],[1,-176.35605069069194,-4.873882117705918,46.516762946885805]],[1,"Bone073",5,[[0,"Bone070",-1247,[1,0.29234713315963745,-2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4733502268791199,0.5121066570281982,0.31384503841400146],[3,0.7406519796771894,0.6711642277831933,0.02311692432234446,-0.020948321038340236],[1,-147.70742379443573,-32.468593051432606,83.32906500714773]],[1,"Bone074",5,[[0,"Bone075",-1248,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184584498405457,-0.3363339900970459],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone076",5,[[0,"Bone077",-1249,[1,0.3130360245704651,2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.45488160848617554,0.4619303047657013,-0.3363339900970459],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone078",5,[[0,"Bone079",-1250,[1,0.26334887742996216,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4548066258430481,0.46184489130973816,0.33521783351898193],[3,0.7322911063261757,0.6808084285910929,0.011577376226419975,-0.010750977379963082],[1,-156.5868334155179,-23.480181199558608,85.45180082994482]],[1,"Bone080",5,[[0,"Bone081",-1251,[1,0.3130360245704651,0,-5.960464477539063e-8]]],[1,0.454881489276886,0.4619293510913849,0.33521783351898193],[3,0.7415714472202471,0.6708738992293038,4.211139075822873e-7,-6.006636850086581e-7],[1,-179.99916463207205,-0.0008208010712839768,84.26909728048587]],[1,"Bone082",5,[[0,"Bone083",-1252,[1,0.30177998542785645,2.220446049250313e-16,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.4976084232330322,-0.2998250722885132],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone084",5,[[0,"Bone085",-1253,[1,0.36502498388290405,0.0000027418136596679688,0]]],[1,0.5077738165855408,0.49703094363212585,-0.2998250722885132],[3,0.782142559488007,0.616027577807194,0.06955007285248349,0.06265642333205072],[1,176.9747239606002,-7.778014308885179,76.49714589591072]],[1,"Bone086",5,[[0,"Bone087",-1254,[1,0.30177998542785645,-1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.4899103045463562,0.49760758876800537,0.3142220973968506],[3,0.734420059932696,0.6786952007844642,3.338178652583349e-7,-6.926425146754556e-7],[1,-179.99893005422345,-0.0010408481670990794,85.48353075883358]],[1,"Bone088",5,[[0,"Bone089",-1255,[1,0.3650251030921936,0.0000027418136596679688,-2.220446049250313e-16]]],[1,0.5077738165855408,0.497030109167099,0.3142220973968506],[3,0.7409702629047793,0.6002829147450446,-0.22010958460906105,-0.20536616692932272],[1,-168.38230910273356,23.582711314949474,78.51869431562027]],[1,"Bone090",5,[[0,"Bone091",-1256,[1,0.33172428607940674,-1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5448386073112488,0.5238311290740967,-0.3034851551055908],[3,0.8761015017292547,0.4083642400342507,-0.20871427843274715,0.14873854949975587],[1,145.28569548842597,40.06105985280097,40.8021742494266]],[1,"Bone092",5,[[0,"Bone093",-1257,[1,0.3317244052886963,1.1102230246251565e-16,-5.960464477539063e-8]]],[1,0.5216760039329529,0.4963110685348511,0.2717076539993286],[3,0.882832120707797,0.35694835025803684,0.23849226825573389,-0.19056956702704275],[1,-143.003054353004,-41.42418463966603,32.63955127638818]],[1,"Bone094",5,[[0,"Bone095",-1258,[1,0.29695814847946167,-1.1920928955078125e-7,-6.705522537231445e-8]]],[1,0.5659940838813782,0.4269203245639801,-0.23909606039524078],[3,0.7309862280870199,0.6741191657758188,-0.07787624646002703,0.07181765046367801],[1,111.04828158447292,69.44581633958744,76.99689544497066]],[1,"Bone096",5,[[0,"Bone097",-1259,[1,0.36130058765411377,1.1920928955078125e-7,-2.9802322387695312e-8]]],[1,0.5690563321113586,0.4340629577636719,-0.23909594118595123],[3,0.7948704391323203,0.5311093946079064,-0.03756829737614827,0.29101961958787764],[1,117.93324344251629,40.42447111830393,55.33182209184379]],[1,"Bone098",5,[[0,"Bone099",-1260,[1,0.29695820808410645,-2.220446049250313e-16,-5.960464477539063e-8]]],[1,0.5659939646720886,0.4269196093082428,0.2810366153717041],[3,0.7345414798823526,0.6773976721514599,0.029231535434350038,-0.026957845466156618],[1,-135.57476575809534,-44.609764469435945,83.5027757303296]],[1,"Bone100",5,[[0,"Bone101",-1261,[1,0.3613004684448242,2.384185791015625e-7,-5.960464477539063e-8]]],[1,0.5690483450889587,0.42423558235168457,0.2810366153717041],[3,0.7527480120544073,0.589955091093729,0.286647289805427,0.056184980981856904],[1,-139.5597450373669,-69.08685324294593,66.98251767336397]],[1,"Bone102",5,[[0,"Bone103",-1262,[1,0.3552076816558838,2.220446049250313e-16,-3.725290298461914e-8]]],[1,0.6143574118614197,0.4207141101360321,-0.26724207401275635],[3,0.7650023749004343,0.6271182935856692,-0.10929834914400782,0.09771326993447878],[1,124.14316344490346,56.8104332319705,69.74053889099635]],[1,"Bone104",5,[[0,"Bone105",-1263,[1,0.35520756244659424,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.5576761364936829,0.44577041268348694,0.2603142261505127],[3,0.8915628895187472,0.4478831641633933,0.028107567087909374,-0.061043017326864554],[1,-167.23003664793316,-9.95285531807336,52.674195077352095]],[1,"Bone106",5,[[0,"Bone107",-1264,[1,0.2874833941459656,-0.0000036954879760742188,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.4960506558418274,-0.27806413173675537],[3,0.7370936301321167,0.6720280671705423,-0.05262346957380588,0.04797945189034701],[1,123.08184723859905,57.295808787005804,80.28031546322022]],[1,"Bone108",5,[[0,"Bone109",-1265,[1,0.3408219814300537,5.960464477539062e-7,-2.9802322387695312e-8]]],[1,0.45001786947250366,0.4833073914051056,-0.27806413173675537],[3,0.8125947704577924,0.5501902693191293,-0.06359948955668364,0.18148143568784447],[1,132.01127294007338,38.101081770622095,60.58429478212839]],[1,"Bone110",5,[[0,"Bone111",-1266,[1,0.2874833941459656,-0.000003933906555175781,-2.9802322387695312e-8]]],[1,0.4377712607383728,0.49604982137680054,0.30299365520477295],[3,0.7377364623004045,0.6747657049223527,0.01535592318712203,-0.014154549664187803],[1,-154.93917078999186,-25.158292587385183,84.36278973512245]],[1,"Bone112",5,[[0,"Bone113",-1267,[1,0.34082210063934326,5.960464477539062e-7,-5.960464477539063e-8]]],[1,0.45001763105392456,0.48330655694007874,0.30299365520477295],[3,0.8177525517517987,0.5545548279545124,0.03673993103349361,-0.14966590915574896],[1,-139.9883177589045,-30.60324094128515,63.63456335848235]],[1,"Bone114",5,[[0,"Bone115",-1268,[1,0.2560230493545532,-0.0000027418136596679688,-2.9802322387695312e-8]]],[1,0.46289128065109253,0.43053486943244934,-0.28921449184417725],[3,0.7372316711044058,0.6750830405448509,-0.020229026655859263,0.018523983639627255],[1,148.12341538683822,32.01492732169675,84.06273562612712]],[1,"Bone116",5,[[0,"Bone117",-1269,[1,0.328660249710083,-5.960464477539063e-8,-4.470348358154297e-8]]],[1,0.4715500473976135,0.4206230640411377,-0.28921449184417725],[3,0.86108728451622,0.4641656993584662,-0.1801506326686892,0.10307590180357071],[1,147.81843159374745,38.838543256635504,49.66171592245412]],[1,"Bone118",5,[[0,"Bone119",-1270,[1,0.25602298974990845,-0.0000026226043701171875,-4.470348358154297e-8]]],[1,0.46289128065109253,0.43053409457206726,0.26084041595458984],[3,0.7300865260634497,0.6782015753885853,0.06322911560564157,-0.05493966272897319],[1,-114.04232475327392,-66.63217527081342,79.52807707314034]],[1,"Bone120",5,[[0,"Bone121",-1271,[1,0.328660249710083,-1.1920928955078125e-7,-1.4901161193847656e-8]]],[1,0.471549928188324,0.4206222891807556,0.26084041595458984],[3,0.8517535126112817,0.4840732101605765,0.16792873638480257,-0.10949438549707012],[1,-145.46936655267316,-39.5401283845538,51.98481950116559]],[2,"Bip001 L Thigh",62,[-1272],[1,-3.5762786865234375e-7,3.583855630040489e-7,0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 L Calf",589,[-1273],[1,0.32331088185310364,0,2.7755575615628914e-17],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 L Foot",590,[[7,"Bip001 L Toe0",-1274,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,-2.7755575615628914e-17],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[2,"Bip001 R Thigh",62,[-1275],[1,3.5762786865234375e-7,-3.099634966474696e-7,-0.24096804857254028],[3,0.0043399287387654445,0.9999905824644146,-6.901961455684628e-7,7.397296712939428e-7],[1,0.00007946078256878407,179.99991488756802,0.49732076135837777]],[2,"Bip001 R Calf",592,[-1276],[1,0.323310911655426,-4.656612873077393e-10,0],[3,-2.169617390058069e-24,-2.4979913248715306e-22,-0.008685120497538047,0.9999622836297093],[1,-4.972959484081522e-22,-2.863027094022149e-20,-0.9952540106307116]],[1,"Bip001 R Foot",593,[[7,"Bip001 R Toe0",-1277,[1,0.11171158403158188,0.14376793801784515,0],[3,-1.5454308319985075e-8,-1.5454308319985075e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044778683729144,90]]],[1,0.11695399880409241,1.1641532182693481e-10,0],[3,-1.882130380231146e-10,4.3326891294649175e-8,0.004345251146847741,0.9999905593516716],[1,-4.3142771149130124e-8,0.000004965130361436469,0.497930670207947]],[72,"Box007",124,[[51,-1278,[40],[26],41]],[1,0.013928772895308361,0.0950276903445979,-0.16188123751906947],[3,0.10415731904209073,-0.010244964460731885,0.9937363137954686,0.039171829640143034],[1,1.2499999999999991,1.2499999999999993,1.2499999999999993],[1,178.3609012946772,-167.9707655467294,4.342521836486312]],[55,"Camera",10,[-1279],[1,0,1.088,3.961]],[116,"Camera<CameraComponent>",58.84615384615385,1,1822425087,596,[4,7883827]],[53,"Directional Light",10,[[117,-1280,[118]]],[1,0,5.22,2.748]],[102,"99",-2,true,34],[113,"这是一条描述",20,20,65],[119,17,[[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[38],[38],[38],[38],[38]],22,23,12,[87,88,89,90,91,92,93,94,95,96]],[90,3,2,0.25,138,[0,0.5,0.5]],[91,3,2,0.25,-1,148,[0,0.5,0.5]],[114,"点击宝箱获取小鸡",40,60,3,51],[120,0.5,false,78,39],[12,158],[45,0,160],[25,"99",50,50,true,161],[25,"99",50,50,true,162],[12,83],[121,13,[160,161,162,163,164,165,166,167,168,169],[170,171,172,173,174,175,176,177,178,179],[180,181,182,183,184,185,186,187,188,189]],[12,163],[45,0,165],[25,"99",50,50,true,166],[25,"99",50,50,true,167],[12,87],[64,"我",40,true,169]],0,[0,-1,176,0,-2,177,0,-3,180,0,-4,183,0,-5,185,0,-6,187,0,-7,189,0,-8,191,0,-9,193,0,-10,195,0,-11,198,0,-12,203,0,-13,205,0,-14,207,0,-15,209,0,-16,210,0,-17,211,0,-18,212,0,-19,213,0,-20,214,0,-21,215,0,-22,216,0,-23,217,0,-24,218,0,-25,219,0,-26,220,0,-27,221,0,-28,222,0,-29,223,0,-30,224,0,-31,225,0,-32,226,0,-33,227,0,-34,228,0,-35,229,0,-36,230,0,-37,231,0,-38,232,0,-39,233,0,-40,234,0,-41,235,0,-42,236,0,-43,237,0,-44,238,0,-45,239,0,-46,240,0,-47,241,0,-48,242,0,-49,243,0,-50,244,0,-51,245,0,-52,246,0,-53,247,0,-54,248,0,-55,249,0,-56,250,0,-1,260,0,-2,261,0,-3,264,0,-4,267,0,-5,269,0,-6,271,0,-7,273,0,-8,275,0,-9,277,0,-10,279,0,-11,282,0,-12,287,0,-13,289,0,-14,291,0,-15,293,0,-16,294,0,-17,295,0,-18,296,0,-19,297,0,-20,298,0,-21,299,0,-22,300,0,-23,301,0,-24,302,0,-25,303,0,-26,304,0,-27,305,0,-28,306,0,-29,307,0,-30,308,0,-31,309,0,-32,310,0,-33,311,0,-34,312,0,-35,313,0,-36,314,0,-37,315,0,-38,316,0,-39,317,0,-40,318,0,-41,319,0,-42,320,0,-43,321,0,-44,322,0,-45,323,0,-46,324,0,-47,325,0,-48,326,0,-49,327,0,-50,328,0,-51,329,0,-52,330,0,-53,331,0,-54,332,0,-55,333,0,-56,334,0,-1,344,0,-2,345,0,-3,348,0,-4,351,0,-5,353,0,-6,355,0,-7,357,0,-8,359,0,-9,361,0,-10,363,0,-11,366,0,-12,371,0,-13,373,0,-14,375,0,-15,377,0,-16,378,0,-17,379,0,-18,380,0,-19,381,0,-20,382,0,-21,383,0,-22,384,0,-23,385,0,-24,386,0,-25,387,0,-26,388,0,-27,389,0,-28,390,0,-29,391,0,-30,392,0,-31,393,0,-32,394,0,-33,395,0,-34,396,0,-35,397,0,-36,398,0,-37,399,0,-38,400,0,-39,401,0,-40,402,0,-41,403,0,-42,404,0,-43,405,0,-44,406,0,-45,407,0,-46,408,0,-47,409,0,-48,410,0,-49,411,0,-50,412,0,-51,413,0,-52,414,0,-53,415,0,-54,416,0,-55,417,0,-56,418,0,-1,429,0,-2,430,0,-3,433,0,-4,436,0,-5,438,0,-6,440,0,-7,442,0,-8,444,0,-9,446,0,-10,448,0,-11,451,0,-12,456,0,-13,458,0,-14,460,0,-15,462,0,-16,463,0,-17,464,0,-18,465,0,-19,466,0,-20,467,0,-21,468,0,-22,469,0,-23,470,0,-24,471,0,-25,472,0,-26,473,0,-27,474,0,-28,475,0,-29,476,0,-30,477,0,-31,478,0,-32,479,0,-33,480,0,-34,481,0,-35,482,0,-36,483,0,-37,484,0,-38,485,0,-39,486,0,-40,487,0,-41,488,0,-42,489,0,-43,490,0,-44,491,0,-45,492,0,-46,493,0,-47,494,0,-48,495,0,-49,496,0,-50,497,0,-51,498,0,-52,499,0,-53,500,0,-54,501,0,-55,502,0,-56,503,0,-1,514,0,-2,515,0,-3,518,0,-4,521,0,-5,523,0,-6,525,0,-7,527,0,-8,529,0,-9,531,0,-10,533,0,-11,536,0,-12,541,0,-13,543,0,-14,545,0,-15,547,0,-16,548,0,-17,549,0,-18,550,0,-19,551,0,-20,552,0,-21,553,0,-22,554,0,-23,555,0,-24,556,0,-25,557,0,-26,558,0,-27,559,0,-28,560,0,-29,561,0,-30,562,0,-31,563,0,-32,564,0,-33,565,0,-34,566,0,-35,567,0,-36,568,0,-37,569,0,-38,570,0,-39,571,0,-40,572,0,-41,573,0,-42,574,0,-43,575,0,-44,576,0,-45,577,0,-46,578,0,-47,579,0,-48,580,0,-49,581,0,-50,582,0,-51,583,0,-52,584,0,-53,585,0,-54,586,0,-55,587,0,-56,588,0,0,6,0,0,6,0,22,611,0,23,76,0,24,604,0,25,19,0,26,11,0,27,25,0,28,22,0,29,12,0,30,29,0,31,28,0,32,172,0,33,9,0,34,601,0,0,6,0,-1,44,0,-2,27,0,-3,19,0,-4,11,0,-5,17,0,-6,12,0,-7,22,0,-8,23,0,-9,25,0,-10,50,0,0,7,0,-1,90,0,-2,91,0,-3,92,0,-4,93,0,-5,94,0,-6,95,0,-7,96,0,-8,97,0,-9,98,0,-10,99,0,-11,100,0,-12,101,0,0,8,0,-1,103,0,-2,104,0,-3,105,0,-4,106,0,-5,107,0,-6,108,0,-7,109,0,-8,110,0,-9,111,0,-10,112,0,-11,113,0,-12,114,0,0,9,0,0,9,0,16,606,0,17,610,0,18,609,0,19,608,0,20,607,0,35,15,0,36,39,0,37,605,0,0,9,0,-1,77,0,-2,52,0,-3,53,0,-4,40,0,-5,83,0,-6,41,0,38,600,0,39,599,0,40,16,0,0,10,0,-1,45,0,-2,46,0,-3,31,0,-4,32,0,-5,33,0,-6,596,0,-7,598,0,0,11,0,0,11,0,41,597,0,0,11,0,0,11,0,-1,30,0,-2,35,0,-3,66,0,-4,16,0,-5,64,0,0,12,0,0,12,0,6,12,0,12,17,0,0,12,0,0,12,0,-1,48,0,-2,75,0,-3,151,0,0,13,0,0,13,0,-3,611,0,-1,84,0,-2,55,0,-3,42,0,-4,87,0,-5,43,0,-6,88,0,0,14,0,42,171,0,0,14,0,0,14,0,-1,170,0,-5,26,0,0,15,0,0,15,0,0,15,0,-1,152,0,-2,153,0,-3,154,0,-4,156,0,0,16,0,0,16,0,6,16,0,0,16,0,-1,63,0,-2,126,0,0,17,0,0,17,0,0,17,0,0,17,0,-5,601,0,-1,36,0,0,18,0,0,18,0,0,18,0,-2,102,0,-4,115,0,0,19,0,0,19,0,0,19,0,-1,117,0,-2,20,0,0,20,0,-2,172,0,-1,118,0,-2,119,0,-3,120,0,-4,121,0,0,21,0,-1,130,0,-2,131,0,-3,68,0,-4,69,0,-5,70,0,0,22,0,0,22,0,0,22,0,-1,47,0,0,23,0,0,23,0,-1,139,0,-2,24,0,-3,146,0,0,24,0,-1,140,0,-2,141,0,-3,72,0,-4,73,0,-5,74,0,0,25,0,0,25,0,6,25,0,0,25,0,0,25,0,0,26,0,0,26,0,43,617,0,0,26,0,0,26,0,-1,89,0,0,27,0,0,27,0,0,27,0,-1,28,0,-2,29,0,0,28,0,0,28,0,6,28,0,0,28,0,0,29,0,0,29,0,6,29,0,0,29,0,0,30,0,0,30,0,6,30,0,0,30,0,0,30,0,12,122,0,0,31,0,-1,341,0,-2,343,0,-3,122,0,12,123,0,0,32,0,-1,426,0,-2,428,0,-3,123,0,12,124,0,0,33,0,-1,511,0,-2,513,0,-3,124,0,0,34,0,-2,599,0,0,34,0,-1,127,0,-2,128,0,0,35,0,0,35,0,6,35,0,0,35,0,0,35,0,0,36,0,0,36,0,-1,129,0,-3,71,0,0,37,0,0,37,0,0,37,0,-1,132,0,-2,133,0,0,38,0,0,38,0,0,38,0,-1,142,0,-2,143,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,-1,159,0,-2,54,0,0,41,0,0,41,0,6,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,-1,164,0,-2,56,0,0,43,0,0,43,0,6,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,-1,57,0,0,45,0,-1,173,0,-2,175,0,0,46,0,-1,257,0,-2,259,0,0,47,0,0,47,0,21,602,0,0,47,0,-1,138,0,0,48,0,0,48,0,21,603,0,0,48,0,-1,148,0,0,49,0,0,49,0,-1,149,0,-2,150,0,0,50,0,0,50,0,-1,51,0,-2,76,0,0,51,0,-2,604,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,-1,78,0,0,53,0,0,53,0,0,53,0,-1,158,0,0,54,0,-1,160,0,-2,81,0,-3,82,0,0,55,0,0,55,0,0,55,0,-1,163,0,0,56,0,-1,165,0,-2,85,0,-3,86,0,0,57,0,0,57,0,0,57,0,-2,251,0,-3,254,0,-2,335,0,-3,338,0,-2,419,0,-3,422,0,-2,504,0,-3,507,0,-2,589,0,-3,592,0,0,63,0,0,63,0,-1,125,0,0,64,0,0,64,0,0,65,0,-2,600,0,-1,67,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,0,69,0,-1,134,0,0,70,0,0,70,0,-1,135,0,0,71,0,-1,136,0,-2,137,0,0,72,0,0,72,0,0,73,0,0,73,0,-1,144,0,0,74,0,0,74,0,-1,145,0,0,75,0,0,75,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,78,0,-2,605,0,-1,79,0,0,79,0,0,79,0,0,80,0,0,80,0,-1,157,0,0,81,0,0,81,0,-1,161,0,0,82,0,0,82,0,-1,162,0,0,83,0,-2,610,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,-1,166,0,0,86,0,0,86,0,-1,167,0,0,87,0,-2,616,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,0,94,0,0,95,0,0,95,0,0,95,0,0,96,0,0,96,0,0,96,0,0,97,0,0,97,0,0,97,0,0,98,0,0,98,0,0,98,0,0,99,0,0,99,0,0,99,0,0,100,0,0,100,0,0,100,0,0,101,0,0,101,0,0,101,0,0,102,0,0,102,0,-1,168,0,0,103,0,0,103,0,0,103,0,0,104,0,0,104,0,0,104,0,0,105,0,0,105,0,0,105,0,0,106,0,0,106,0,0,106,0,0,107,0,0,107,0,0,107,0,0,108,0,0,108,0,0,108,0,0,109,0,0,109,0,0,109,0,0,110,0,0,110,0,0,110,0,0,111,0,0,111,0,0,111,0,0,112,0,0,112,0,0,112,0,0,113,0,0,113,0,0,113,0,0,114,0,0,114,0,0,114,0,0,115,0,0,115,0,-1,169,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,-1,425,0,-1,510,0,-1,595,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,0,128,0,0,128,0,0,129,0,0,129,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,-2,602,0,0,139,0,0,139,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,143,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,-1,147,0,0,147,0,0,147,0,0,148,0,-2,603,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,0,152,0,0,153,0,0,153,0,0,154,0,-1,155,0,0,155,0,0,155,0,0,156,0,0,157,0,0,157,0,0,158,0,-2,606,0,0,159,0,0,159,0,0,160,0,-2,607,0,0,161,0,-2,608,0,0,162,0,-2,609,0,0,163,0,-2,612,0,0,164,0,0,164,0,0,165,0,-2,613,0,0,166,0,-2,614,0,0,167,0,-2,615,0,0,168,0,0,168,0,0,169,0,-2,617,0,-1,171,0,-1,174,0,0,174,0,1,176,0,-1,178,0,-1,179,0,1,179,0,-1,181,0,-1,182,0,1,182,0,-1,184,0,1,184,0,-1,186,0,1,186,0,-1,188,0,1,188,0,-1,190,0,1,190,0,-1,192,0,1,192,0,-1,194,0,1,194,0,-1,196,0,-1,197,0,1,197,0,-1,199,0,-1,200,0,-1,201,0,-1,202,0,1,202,0,-1,204,0,1,204,0,-1,206,0,1,206,0,-1,208,0,1,208,0,1,209,0,1,210,0,1,211,0,1,212,0,1,213,0,1,214,0,1,215,0,1,216,0,1,217,0,1,218,0,1,219,0,1,220,0,1,221,0,1,222,0,1,223,0,1,224,0,1,225,0,1,226,0,1,227,0,1,228,0,1,229,0,1,230,0,1,231,0,1,232,0,1,233,0,1,234,0,1,235,0,1,236,0,1,237,0,1,238,0,1,239,0,1,240,0,1,241,0,1,242,0,1,243,0,1,244,0,1,245,0,1,246,0,1,247,0,1,248,0,1,249,0,1,250,0,-1,252,0,-1,253,0,1,253,0,-1,255,0,-1,256,0,1,256,0,-1,258,0,0,258,0,1,260,0,-1,262,0,-1,263,0,1,263,0,-1,265,0,-1,266,0,1,266,0,-1,268,0,1,268,0,-1,270,0,1,270,0,-1,272,0,1,272,0,-1,274,0,1,274,0,-1,276,0,1,276,0,-1,278,0,1,278,0,-1,280,0,-1,281,0,1,281,0,-1,283,0,-1,284,0,-1,285,0,-1,286,0,1,286,0,-1,288,0,1,288,0,-1,290,0,1,290,0,-1,292,0,1,292,0,1,293,0,1,294,0,1,295,0,1,296,0,1,297,0,1,298,0,1,299,0,1,300,0,1,301,0,1,302,0,1,303,0,1,304,0,1,305,0,1,306,0,1,307,0,1,308,0,1,309,0,1,310,0,1,311,0,1,312,0,1,313,0,1,314,0,1,315,0,1,316,0,1,317,0,1,318,0,1,319,0,1,320,0,1,321,0,1,322,0,1,323,0,1,324,0,1,325,0,1,326,0,1,327,0,1,328,0,1,329,0,1,330,0,1,331,0,1,332,0,1,333,0,1,334,0,-1,336,0,-1,337,0,1,337,0,-1,339,0,-1,340,0,1,340,0,-1,342,0,0,342,0,1,344,0,-1,346,0,-1,347,0,1,347,0,-1,349,0,-1,350,0,1,350,0,-1,352,0,1,352,0,-1,354,0,1,354,0,-1,356,0,1,356,0,-1,358,0,1,358,0,-1,360,0,1,360,0,-1,362,0,1,362,0,-1,364,0,-1,365,0,1,365,0,-1,367,0,-1,368,0,-1,369,0,-1,370,0,1,370,0,-1,372,0,1,372,0,-1,374,0,1,374,0,-1,376,0,1,376,0,1,377,0,1,378,0,1,379,0,1,380,0,1,381,0,1,382,0,1,383,0,1,384,0,1,385,0,1,386,0,1,387,0,1,388,0,1,389,0,1,390,0,1,391,0,1,392,0,1,393,0,1,394,0,1,395,0,1,396,0,1,397,0,1,398,0,1,399,0,1,400,0,1,401,0,1,402,0,1,403,0,1,404,0,1,405,0,1,406,0,1,407,0,1,408,0,1,409,0,1,410,0,1,411,0,1,412,0,1,413,0,1,414,0,1,415,0,1,416,0,1,417,0,1,418,0,-1,420,0,-1,421,0,1,421,0,-1,423,0,-1,424,0,1,424,0,0,425,0,-1,427,0,0,427,0,1,429,0,-1,431,0,-1,432,0,1,432,0,-1,434,0,-1,435,0,1,435,0,-1,437,0,1,437,0,-1,439,0,1,439,0,-1,441,0,1,441,0,-1,443,0,1,443,0,-1,445,0,1,445,0,-1,447,0,1,447,0,-1,449,0,-1,450,0,1,450,0,-1,452,0,-1,453,0,-1,454,0,-1,455,0,1,455,0,-1,457,0,1,457,0,-1,459,0,1,459,0,-1,461,0,1,461,0,1,462,0,1,463,0,1,464,0,1,465,0,1,466,0,1,467,0,1,468,0,1,469,0,1,470,0,1,471,0,1,472,0,1,473,0,1,474,0,1,475,0,1,476,0,1,477,0,1,478,0,1,479,0,1,480,0,1,481,0,1,482,0,1,483,0,1,484,0,1,485,0,1,486,0,1,487,0,1,488,0,1,489,0,1,490,0,1,491,0,1,492,0,1,493,0,1,494,0,1,495,0,1,496,0,1,497,0,1,498,0,1,499,0,1,500,0,1,501,0,1,502,0,1,503,0,-1,505,0,-1,506,0,1,506,0,-1,508,0,-1,509,0,1,509,0,0,510,0,-1,512,0,0,512,0,1,514,0,-1,516,0,-1,517,0,1,517,0,-1,519,0,-1,520,0,1,520,0,-1,522,0,1,522,0,-1,524,0,1,524,0,-1,526,0,1,526,0,-1,528,0,1,528,0,-1,530,0,1,530,0,-1,532,0,1,532,0,-1,534,0,-1,535,0,1,535,0,-1,537,0,-1,538,0,-1,539,0,-1,540,0,1,540,0,-1,542,0,1,542,0,-1,544,0,1,544,0,-1,546,0,1,546,0,1,547,0,1,548,0,1,549,0,1,550,0,1,551,0,1,552,0,1,553,0,1,554,0,1,555,0,1,556,0,1,557,0,1,558,0,1,559,0,1,560,0,1,561,0,1,562,0,1,563,0,1,564,0,1,565,0,1,566,0,1,567,0,1,568,0,1,569,0,1,570,0,1,571,0,1,572,0,1,573,0,1,574,0,1,575,0,1,576,0,1,577,0,1,578,0,1,579,0,1,580,0,1,581,0,1,582,0,1,583,0,1,584,0,1,585,0,1,586,0,1,587,0,1,588,0,-1,590,0,-1,591,0,1,591,0,-1,593,0,-1,594,0,1,594,0,0,595,0,-1,597,0,0,598,0,44,116,1,1,58,2,1,59,3,1,60,4,1,61,5,1,62,6,1,14,7,1,18,8,1,18,9,1,14,10,1,116,13,1,14,14,1,116,15,1,39,18,1,26,21,1,36,34,1,64,37,1,68,38,1,72,39,1,79,49,1,75,58,1,175,59,1,259,60,1,343,61,1,428,62,1,513,65,1,66,80,1,156,611,16,612,611,17,616,611,18,615,611,19,614,611,20,613,1280],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,599,602,603,606,607,610,612,613,616],[2,-1,4,2,2,5,2,5,2,2,2,-1,-2,9,11,-1,4,-1,9,11,-1,4,-1,-2,9,11,-1,9,-1,4,-1,9,11,-1,9,-1,4,-1,9,11,-1,9,-1,4,10,2,2,5,13,14,15,45,46,2,2,2,5,2,5,2,2,2,10,2,2,2,2,2,2,2,2,2,2,2,2,10,2,2,2,2,2,2,10,2,2,2,5,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,2,5,13,14,15,2,2,2,2,2,2,2,5,2,2,2,2,2,2,2,5,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,2,2,2,2,2,2,2,5,13,14,15,2,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,2,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,-1,4,2,2,47,48,10,10,2,2,2,2,2,2,2,2],[65,30,30,66,31,31,32,32,67,68,8,33,33,69,70,2,2,71,72,73,2,2,34,34,74,75,76,77,2,2,78,79,80,81,82,2,2,83,84,85,86,87,2,2,6,13,14,14,15,16,17,14,88,18,89,90,8,8,8,7,4,35,6,18,9,10,36,13,5,91,5,92,7,4,35,6,18,9,10,36,5,5,6,93,13,37,37,4,19,20,21,22,23,24,25,26,27,38,38,15,16,17,94,28,7,29,4,95,5,5,96,39,7,9,10,5,40,40,4,19,20,21,22,23,24,25,26,27,11,41,42,43,44,45,46,47,48,49,12,50,51,52,53,54,55,56,57,58,28,39,7,9,10,5,59,59,15,16,17,97,4,19,20,21,22,23,24,25,26,27,11,41,42,43,44,45,46,47,48,49,12,50,51,52,53,54,55,56,57,58,28,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,98,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,99,100,101,102,6,6,29,29,12,4,11,12,4,11]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[103,3]],[[[30,"Skin-0",2755097105,["Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008/Bone009","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bone059","Bip001/Bip001 Pelvis/Bip001 Spine/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bone048","Bip001/Bip001 Pelvis/Bip001 Spine/Bone046"],[[[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,1.6291687643388286e-7,-0.0000013868005908079795,0,-1.6292068494294654e-7,1,-0.0000027577068522077752,0,-0.5538837909698486,-0.375,0.0000018022661834038445,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.11363549530506134,-0.3767898976802826,0.2409675270318985,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007961550145410001,-2.2083790351956623e-9,0,0.0007961550145410001,0.9999997019767761,0.0000014026923054188956,0,-0.8957613110542297,-0.3739989101886749,-5.23233381954924e-7,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.5506080389022827,-0.3797934651374817,0.2409674972295761,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23385971784591675,-0.3757881224155426,0.2409674972295761,1],[7,0.8347641825675964,0.10094060748815536,0.5412760972976685,0,-0.5386897921562195,-0.05370492860674858,0.8407908082008362,0,0.11393912136554718,-0.9934419393539429,0.00954472552984953,0,-0.11586502939462662,0.37436139583587646,-1.2817643880844116,1],[7,0.8347641825675964,-0.5411955714225769,0.10137157887220383,0,-0.5386897921562195,-0.8408332467079163,-0.05303541570901871,0,0.11393912136554718,-0.010335772298276424,-0.9934340715408325,0,-0.3442566394805908,1.28206205368042,0.3733406662940979,1],[7,0.8362900018692017,0.08740312606096268,0.5412760972976685,0,-0.539489209651947,-0.044970422983169556,0.8407907485961914,0,0.09782916307449341,-0.9951574206352234,0.009544728323817253,0,0.11860687285661697,0.37618938088417053,-1.2817643880844116,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.11363551765680313,-0.3767898976802826,-0.24096859991550446,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.5506080389022827,-0.3797934651374817,-0.24096862971782684,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23385967314243317,-0.3757881224155426,-0.24096862971782684,1],[7,-0.8347638845443726,-0.10094334185123444,0.5412760972976685,0,-0.5386898517608643,-0.05370492488145828,-0.8407907485961914,0,0.11394142359495163,-0.993441641330719,-0.009546221233904362,0,-0.11586581915616989,0.3743612766265869,1.2817649841308594,1],[7,-0.8347638845443726,0.5411955714225769,0.1013743132352829,0,-0.5386898517608643,-0.8408332467079163,0.05303540825843811,0,0.11394142359495163,-0.01033727079629898,0.9934337139129639,0,-0.3442574739456177,1.2820626497268677,-0.37334051728248596,1],[7,-0.8362897634506226,-0.08740585297346115,0.5412760376930237,0,-0.539489209651947,-0.044970422983169556,-0.8407907485961914,0,0.09783145040273666,-0.9951571822166443,-0.009546209126710892,0,0.11860598623752594,0.37618929147720337,1.2817648649215698,1],[7,1.1752034900780473e-8,-8.916826743643469e-8,-1,0,-0.1696649193763733,-0.9855018258094788,8.588157385247541e-8,0,-0.985501766204834,0.1696649193763733,-2.6710377909466843e-8,0,-0.13450022041797638,0.7430799603462219,-1.4733471331851433e-8,1],[7,4.698937061675679e-8,-8.850243915503597e-8,-1,0,-0.12223055958747864,-0.9925017356872559,8.209529056557585e-8,0,-0.9925016760826111,0.12223056703805923,-5.7454737856232896e-8,0,-0.3908542990684509,0.7251782417297363,-1.9913361626322512e-8,1],[7,0.0000013716037301492179,4.371133144331907e-8,-1,0,1.6292069915380125e-7,1,4.371155526428083e-8,0,1,-1.629207417863654e-7,0.0000013716037301492179,0,-0.5205578207969666,-0.0019239288521930575,0.2409675121307373,1],[7,0.0000013716037301492179,4.371133144331907e-8,-1,0,1.6292069915380125e-7,1,4.371155526428083e-8,0,1,-1.629207417863654e-7,0.0000013716037301492179,0,-0.5205578207969666,-0.0019239077810198069,-0.24096861481666565,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007961550145410001,-2.2083790351956623e-9,0,0.0007961550145410001,0.9999997019767761,0.0000014026923054188956,0,-1.2573298215866089,-0.3739701509475708,-5.231535737948434e-7,1],[7,0.24314072728157043,0.04639565572142601,0.9688807725906372,0,0.09137621521949768,0.9933180212974548,-0.07049672305583954,0,0.9656773805618286,-0.10567329823970795,-0.2372766137123108,0,-0.9197347164154053,-1.3803400993347168,0.08750952780246735,1],[7,-0.27032268047332764,0.047628410160541534,-0.9615909457206726,0,0.10668422281742096,0.994106650352478,0.019247842952609062,0,0.9568406343460083,-0.09738345444202423,-0.27381080389022827,0,-0.9377850890159607,-1.3686798810958862,-0.014081344939768314,1],[7,0.1909463256597519,-0.00277319410815835,0.9815964698791504,0,0.08545911312103271,0.9962459802627563,-0.01380945835262537,0,0.9778733849525452,-0.08652323484420776,-0.1904664784669876,0,-0.9000630378723145,-1.383524775505066,-0.03474622964859009,1],[7,-0.1836378574371338,0.0028329973574727774,-0.9829898476600647,0,0.08587609976530075,0.9962188005447388,-0.013171873055398464,0,0.9792356491088867,-0.08683419972658157,-0.18318675458431244,0,-0.9004347920417786,-1.3832353353500366,-0.04259694367647171,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[24,".bin",3642810495,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7440,"length":1752,"count":438,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7440,"count":155,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.09259895235300064,-0.08213414996862411,-1.127617359161377],"maxPosition",8,[1,1.4504868984222412,0.08213401585817337,1.2525198459625244]]],-1],0,0,[],[],[]],[[[24,".bin",1635482100,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":103896,"length":23400,"count":5850,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":103896,"count":1443,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,20,21,22]]},"minPosition",8,[1,-1.0728731155395508,-6.132077601250785e-7,-0.8652310371398926],"maxPosition",8,[1,1.0728731155395508,2.319329023361206,1.1991772651672363]]],-1],0,0,[],[],[]],[[{"name":"Chick06","rect":{"x":0,"y":0,"width":141,"height":47},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[104]],[[{"name":"Chick06","rect":{"x":0,"y":0,"width":403,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":404,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[105]],[[{"name":"chick","rect":{"x":0,"y":0,"width":108,"height":140},"offset":{"x":0,"y":0},"originalSize":{"width":108,"height":140},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[106]],[[{"name":"Chick04","rect":{"x":0,"y":0,"width":142,"height":47},"offset":{"x":0,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[107]],[[{"name":"ksjm_tj","rect":{"x":0,"y":0,"width":124,"height":125},"offset":{"x":0,"y":0.5},"originalSize":{"width":124,"height":126},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[108]],[[{"name":"sljm_hsjl","rect":{"x":0,"y":0,"width":292,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":292,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[109]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[110,3]],[[{"name":"Chick10","rect":{"x":0,"y":0,"width":188,"height":47},"offset":{"x":0,"y":0.5},"originalSize":{"width":188,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[111]],[[{"name":"Chick11","rect":{"x":0,"y":0,"width":141,"height":47},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[112]],[[{"name":"ksjm_gkgg","rect":{"x":0,"y":0,"width":220,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":220,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[113]],[[{"name":"Chick_11","rect":{"x":4,"y":16,"width":100,"height":112},"offset":{"x":0,"y":-6},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[114]],[[{"name":"ksjm_gdhw","rect":{"x":0,"y":0,"width":292,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":292,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[115]],[[{"name":"ksjm_ksyx","rect":{"x":0,"y":0,"width":292,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":292,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[116]],[[{"name":"Chick_10","rect":{"x":4,"y":16,"width":100,"height":112},"offset":{"x":0,"y":-6},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[117]],[[{"name":"ksjm_bx","rect":{"x":0,"y":0,"width":124,"height":125},"offset":{"x":0,"y":0.5},"originalSize":{"width":124,"height":126},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[118]],[[{"name":"Chick09","rect":{"x":0,"y":0,"width":445,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":446,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[119]],[[[24,".bin",2869916167,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19104,"length":4512,"count":1128,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19104,"count":398,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.07468719035387039,-0.942240297794342,-0.14795276522636414],"maxPosition",8,[1,0.07468719035387039,0.556639552116394,0.18445931375026703]]],-1],0,0,[],[],[]],[[[30,"Skin-0",509195727,["Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bone059","Bip001/Bip001 Pelvis/Bip001 Spine/Bone060","Bip001/Bip001 Pelvis/Bip001 Spine/Bone029","Bip001/Bip001 Pelvis/Bip001 Spine/Bone032","Bip001/Bip001 Pelvis/Bip001 Spine/Bone035","Bip001/Bip001 Pelvis/Bip001 Spine/Bone029/Bone030","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bone023/Bone024/Bone025/Bone026","Bip001/Bip001 Pelvis/Bip001 Spine/Bone032/Bone033","Bip001/Bip001 Pelvis/Bip001 Spine/Bone023","Bip001/Bip001 Pelvis/Bip001 Spine/Bone023/Bone024","Bip001/Bip001 Pelvis/Bip001 Spine/Bone023/Bone024/Bone025","Bip001/Bip001 Pelvis/Bip001 Spine/Bone023/Bone024/Bone025/Bone026/Bone027","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008/Bone009","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bone035/Bone036","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bone048","Bip001/Bip001 Pelvis/Bip001 Spine/Bone046"],[[[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,1.6291687643388286e-7,-0.0000013868005908079795,0,-1.6292068494294654e-7,1,-0.0000027577068522077752,0,-0.5538838505744934,2.799727116808981e-9,7.698516810705769e-7,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007961550145410001,-2.2083790351956623e-9,0,0.0007961550145410001,0.9999997019767761,0.0000014026923054188956,0,-0.8954627513885498,0.0010009447578340769,4.501693684488828e-9,1],[7,0.24314072728157043,0.04639565572142601,0.9688807725906372,0,0.09137621521949768,0.9933180212974548,-0.07049672305583954,0,0.9656773805618286,-0.10567329823970795,-0.2372766137123108,0,-0.5576057434082031,-1.419967532157898,-0.0014691919786855578,1],[7,-0.27032268047332764,0.047628410160541534,-0.9615909457206726,0,0.10668422281742096,0.994106650352478,0.019247842952609062,0,0.9568406343460083,-0.09738345444202423,-0.27381080389022827,0,-0.5789698362350464,-1.4051986932754517,-0.11676038801670074,1],[7,-1.507690683411056e-8,-0.000013410961400950328,-1,0,-0.9999579191207886,0.009174229577183723,-1.0795898930382464e-7,0,0.009174230508506298,0.9999578595161438,-0.0000134105366669246,0,0.5684830546379089,-0.6171573996543884,0.000008241005161835346,1],[7,0.055861398577690125,-0.9820975661277771,0.1798989474773407,0,-0.955018162727356,-1.9513869631282432e-8,0.2965478301048279,0,-0.2912389039993286,-0.18837225437164307,-0.9379211664199829,0,0.5574209094047546,0.35250332951545715,-0.763349711894989,1],[7,-0.05586123466491699,-0.9820976257324219,-0.1798984706401825,0,-0.9550179839134216,-3.1039558479051266e-8,0.29654791951179504,0,-0.29123905301094055,0.18837177753448486,-0.9379210472106934,0,0.5574207901954651,-0.3525037169456482,-0.7633495330810547,1],[7,1.2470992238888812e-8,-3.828054104815237e-7,-1,0,-0.9873024225234985,0.15885193645954132,-7.312202399134549e-8,0,0.15885193645954132,0.9873023629188538,-3.75963679744018e-7,0,0.22905902564525604,-0.6588860750198364,2.0988848348224565e-7,1],[7,0.8347641825675964,-0.5411955714225769,0.10137157887220383,0,-0.5386897921562195,-0.8408332467079163,-0.05303541570901871,0,0.11393912136554718,-0.010335772298276424,-0.9934340715408325,0,-0.3015294671058655,1.2781860828399658,0.0008029166492633522,1],[7,0.8347641825675964,0.10094060748815536,0.5412760972976685,0,-0.5386897921562195,-0.05370492860674858,0.8407908082008362,0,0.11393912136554718,-0.9934419393539429,0.00954472552984953,0,-0.07313785701990128,0.0018206990789622068,-1.2781851291656494,1],[7,-2.1246781045647367e-7,-2.1660129334577505e-7,-1,0,-0.9999812245368958,0.006149699445813894,2.111317343178598e-7,0,0.006149699911475182,0.999981164932251,-2.179037892346969e-7,0,0.6431509256362915,-0.749513566493988,-1.9632172154615546e-7,1],[7,0.196641206741333,-0.9334076046943665,0.30013808608055115,0,-0.8364624977111816,-7.708537452799646e-8,0.5480245351791382,0,-0.5115299820899963,-0.35881832242012024,-0.7807605862617493,0,0.02186991088092327,0.23243753612041473,-0.8520081043243408,1],[7,-2.960860854273051e-7,-6.585990774965467e-8,-1,0,-0.8353534936904907,0.5497130751609802,2.1113250170401443e-7,0,0.549713134765625,0.835353434085846,-2.177787337132031e-7,0,0.7582489848136902,-1.1589860916137695,-2.0798215416562016e-7,1],[7,-2.6315083800909633e-7,-1.508512497139236e-7,-1,0,-0.9609519243240356,0.27671509981155396,2.1113250170401443e-7,0,0.27671509981155396,0.9609518647193909,-2.1777864844807482e-7,0,0.8706026077270508,-0.9429099559783936,-1.9441048948465323e-7,1],[7,-2.2786468889535172e-7,-2.002055765615296e-7,-1,0,-0.996799886226654,0.07993358373641968,2.11132473282305e-7,0,0.07993359118700027,0.9967998266220093,-2.17779088984571e-7,0,0.8234478831291199,-0.7949308156967163,-1.9440967946593446e-7,1],[7,-2.7166922222932044e-7,-1.270919511853208e-7,-1,0,-0.9328509569168091,0.360262393951416,2.0764045416399313e-7,0,0.3602624237537384,0.9328508377075195,-2.16430095179021e-7,0,0.16660209000110626,-0.8647445440292358,-1.978695962634447e-7,1],[7,1.1752034900780473e-8,-8.916826743643469e-8,-1,0,-0.1696649193763733,-0.9855018258094788,8.588157385247541e-8,0,-0.985501766204834,0.1696649193763733,-2.6710377909466843e-8,0,-0.5040633678436279,0.8067043423652649,-2.64753392542616e-8,1],[7,4.698937061675679e-8,-8.850243915503597e-8,-1,0,-0.12223055958747864,-0.9925017356872559,8.209529056557585e-8,0,-0.9925016760826111,0.12223056703805923,-5.7454737856232896e-8,0,-0.7630423903465271,0.7710146903991699,-4.318436452876995e-8,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.11363556236028671,-0.0017899028025567532,0.2409680336713791,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.5538630485534668,-0.004807609599083662,0.2409680187702179,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060084879398346,-0.0008022890542633832,0.2409680038690567,1],[7,-0.8347638845443726,0.5411955714225769,0.1013743132352829,0,-0.5386898517608643,-0.8408332467079163,0.05303540825843811,0,0.11394142359495163,-0.01033727079629898,0.9934337139129639,0,-0.3015294671058655,1.2781862020492554,-0.0008028924348764122,1],[7,-0.8347638845443726,-0.10094334185123444,0.5412760972976685,0,-0.5386898517608643,-0.05370492488145828,-0.8407907485961914,0,0.11394142359495163,-0.993441641330719,-0.009546221233904362,0,-0.0731377899646759,0.0018206938402727246,1.2781851291656494,1],[7,-0.19664175808429718,-0.9334068298339844,-0.3001389503479004,0,-0.8364623785018921,6.305050259669542e-9,0.54802405834198,0,-0.5115295648574829,0.3588194251060486,-0.7807596921920776,0,0.021870141848921776,-0.23243650794029236,-0.8520075678825378,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.1136355847120285,-0.0017899028025567532,-0.24096809327602386,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.553862988948822,-0.004807609133422375,-0.24096810817718506,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060080409049988,-0.0008022895199246705,-0.24096812307834625,1],[7,0.8362900018692017,0.08740312606096268,0.5412760972976685,0,-0.539489209651947,-0.044970422983169556,0.8407907485961914,0,0.09782916307449341,-0.9951574206352234,0.009544728323817253,0,0.155292809009552,0.003005382837727666,-1.2781851291656494,1],[7,-0.8362897634506226,-0.08740585297346115,0.5412760376930237,0,-0.539489209651947,-0.044970422983169556,-0.8407907485961914,0,0.09783145040273666,-0.9951571822166443,-0.009546209126710892,0,0.15529277920722961,0.0030053844675421715,1.2781850099563599,1],[7,0.1909463256597519,-0.00277319410815835,0.9815964698791504,0,0.08545911312103271,0.9962459802627563,-0.01380945835262537,0,0.9778733849525452,-0.08652323484420776,-0.1904664784669876,0,-0.5333605408668518,-1.4159709215164185,-0.1061711460351944,1],[7,-0.1836378574371338,0.0028329973574727774,-0.9829898476600647,0,0.08587609976530075,0.9962188005447388,-0.013171873055398464,0,0.9792356491088867,-0.08683419972658157,-0.18318675458431244,0,-0.5332214832305908,-1.4157981872558594,-0.11129197478294373,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[24,".bin",1601349112,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":137952,"length":15420,"count":7710,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":172092,"length":2688,"count":1344,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":137952,"count":1916,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":153372,"length":18720,"count":260,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],[0,29,30]]},"minPosition",8,[1,-1.0728731155395508,0.001268951571546495,-1.176304578781128],"maxPosition",8,[1,1.0728731155395508,2.3651320934295654,0.9127499461174011]]],-1],0,0,[],[],[]],[[{"name":"ksjm_hs_jst01","rect":{"x":2,"y":0,"width":120,"height":120},"offset":{"x":0,"y":3},"originalSize":{"width":124,"height":126},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[120]],[[{"name":"yxjm_ts","rect":{"x":0,"y":0,"width":32,"height":34},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":34},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[121]],[[{"name":"Chick_03","rect":{"x":4,"y":3,"width":100,"height":125},"offset":{"x":0,"y":0.5},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[122]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480@b47c0@7d38f"}]}],[16],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[5],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[5],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[5],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[5],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[5],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[5],0,[],[],[]],[[{"name":"ksjm_gjb_dk","rect":{"x":0,"y":0,"width":142,"height":42},"offset":{"x":0,"y":0},"originalSize":{"width":142,"height":42},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[123]],[[{"name":"Chick02","rect":{"x":0,"y":0,"width":389,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":390,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[124]],[[{"name":"ksjm_dj","rect":{"x":0,"y":0,"width":52,"height":52},"offset":{"x":0,"y":0},"originalSize":{"width":52,"height":52},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[125]],[[[24,".bin",1211941072,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":120240,"length":27744,"count":6936,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":120240,"count":1670,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]]},"minPosition",8,[1,-1.0728731155395508,0.0012689112918451428,-1.2782520055770874],"maxPosition",8,[1,1.0728731155395508,2.152036190032959,0.7949503660202026]]],-1],0,0,[],[],[]],[[[30,"Skin-0",3089738879,["Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008/Bone009","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bone065","Bip001/Bip001 Pelvis/Bip001 Spine/Bone063","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bone046","Bip001/Bip001 Pelvis/Bip001 Spine/Bone048"],[[[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007961550145410001,-2.2083790351956623e-9,0,0.0007961550145410001,0.9999997019767761,0.0000014026923054188956,0,-0.8954627513885498,0.0010009447578340769,2.776216589950309e-9,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,1.6291687643388286e-7,-0.0000013868005908079795,0,-1.6292068494294654e-7,1,-0.0000027577068522077752,0,-0.5538838505744934,2.7997226759168825e-9,7.681261990910571e-7,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.11363556236028671,-0.0017899028025567532,0.2409680336713791,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.5538630485534668,-0.004807609599083662,0.2409680187702179,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060084879398346,-0.0008022890542633832,0.2409680038690567,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.1136355772614479,-0.0017899028025567532,-0.24096809327602386,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.553862988948822,-0.004807609133422375,-0.24096810817718506,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060080409049988,-0.0008022895199246705,-0.24096812307834625,1],[7,1.1752034900780473e-8,-8.916826743643469e-8,-1,0,-0.1696649193763733,-0.9855018258094788,8.588157385247541e-8,0,-0.985501766204834,0.1696649193763733,-2.6710377909466843e-8,0,-0.5040633678436279,0.8067043423652649,-2.474986260381229e-8,1],[7,4.698937061675679e-8,-8.850243915503597e-8,-1,0,-0.12223055958747864,-0.9925017356872559,8.209529056557585e-8,0,-0.9925016760826111,0.12223056703805923,-5.7454737856232896e-8,0,-0.7630423903465271,0.7710146903991699,-4.14588861019638e-8,1],[7,0.8362900018692017,0.08740312606096268,0.5412760972976685,0,-0.539489209651947,-0.044970422983169556,0.8407907485961914,0,0.09782916307449341,-0.9951574206352234,0.009544728323817253,0,0.155292809009552,0.0030053826048970222,-1.2781851291656494,1],[7,0.8347641825675964,0.10094060748815536,0.5412760972976685,0,-0.5386897921562195,-0.05370492860674858,0.8407908082008362,0,0.11393912136554718,-0.9934419393539429,0.00954472552984953,0,-0.07313786447048187,0.0018206988461315632,-1.2781851291656494,1],[7,-0.8362897634506226,-0.08740585297346115,0.5412760376930237,0,-0.539489209651947,-0.044970422983169556,-0.8407907485961914,0,0.09783145040273666,-0.9951571822166443,-0.009546209126710892,0,0.15529277920722961,0.003005384700372815,1.2781850099563599,1],[7,-0.8347638845443726,-0.10094334185123444,0.5412760972976685,0,-0.5386898517608643,-0.05370492488145828,-0.8407907485961914,0,0.11394142359495163,-0.993441641330719,-0.009546221233904362,0,-0.0731377825140953,0.0018206938402727246,1.2781851291656494,1],[7,-0.31532591581344604,0.11139550060033798,-0.9424226880073547,0,0.31075695157051086,0.9504525661468506,0.008368239738047123,0,0.896660327911377,-0.29022568464279175,-0.33431926369667053,0,-0.863010823726654,-1.2542744874954224,-0.07369081676006317,1],[7,0.25022146105766296,-0.017847498878836632,0.9680240750312805,0,0.3424626886844635,0.9368258714675903,-0.07124979794025421,0,0.9055984020233154,-0.34934037923812866,-0.24052606523036957,0,-0.9026472568511963,-1.2298214435577393,0.001066107302904129,1],[7,0.8347641825675964,-0.5411955714225769,0.10137157887220383,0,-0.5386897921562195,-0.8408332467079163,-0.05303541570901871,0,0.11393912136554718,-0.010335772298276424,-0.9934340715408325,0,-0.3015294671058655,1.2781860828399658,0.0008029163582250476,1],[7,-0.8347638845443726,0.5411955714225769,0.1013743132352829,0,-0.5386898517608643,-0.8408332467079163,0.05303540825843811,0,0.11394142359495163,-0.01033727079629898,0.9934337139129639,0,-0.3015294671058655,1.2781862020492554,-0.0008028924930840731,1],[7,-0.1836378574371338,0.0028329973574727774,-0.9829898476600647,0,0.08587609976530075,0.9962188005447388,-0.013171873055398464,0,0.9792356491088867,-0.08683419972658157,-0.18318675458431244,0,-0.5332214832305908,-1.4157981872558594,-0.11129197478294373,1],[7,0.1909463256597519,-0.00277319410815835,0.9815964698791504,0,0.08545911312103271,0.9962459802627563,-0.01380945835262537,0,0.9778733849525452,-0.08652323484420776,-0.1904664784669876,0,-0.5333605408668518,-1.4159709215164185,-0.106171153485775,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[24,".bin",405873434,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8304,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8304,"count":173,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.15342558920383453,-0.25892373919487,-0.25532400608062744],"maxPosition",8,[1,0.15342555940151215,0.2631480097770691,0.6261927485466003]]],-1],0,0,[],[],[]],[[{"name":"Chick_08","rect":{"x":4,"y":12,"width":100,"height":116},"offset":{"x":0,"y":-4},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[126]],[[{"name":"tjjm_x","rect":{"x":0,"y":0,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[127]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[128,3]],[[{"name":"yxjm_suo","rect":{"x":0,"y":0,"width":87,"height":80},"offset":{"x":-0.5,"y":0},"originalSize":{"width":88,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[129]],[[{"name":"Chick_09","rect":{"x":4,"y":15,"width":100,"height":113},"offset":{"x":0,"y":-5.5},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[130]],[[{"name":"ppjm_battle_blue","rect":{"x":0,"y":0,"width":590,"height":118},"offset":{"x":0,"y":0},"originalSize":{"width":590,"height":118},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[131]],[[{"name":"Chick_04","rect":{"x":4,"y":0,"width":100,"height":128},"offset":{"x":0,"y":2},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[132]],[[{"name":"Chick05","rect":{"x":0,"y":0,"width":531,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":532,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[133]],[[{"name":"ksjm_js_dk","rect":{"x":0,"y":0,"width":250,"height":265},"offset":{"x":0,"y":0},"originalSize":{"width":250,"height":265},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[134]],[[{"name":"js_btn_2","rect":{"x":1,"y":1,"width":66,"height":50},"offset":{"x":0,"y":-0.5},"originalSize":{"width":68,"height":51},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[135]],[[{"name":"Chick09","rect":{"x":0,"y":0,"width":141,"height":47},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[136]],[[{"name":"Chick_02","rect":{"x":4,"y":12,"width":100,"height":116},"offset":{"x":0,"y":-4},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[137]],[[{"name":"Chick03","rect":{"x":0,"y":0,"width":403,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":404,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[138]],[[{"name":"Chick_05","rect":{"x":4,"y":0,"width":100,"height":128},"offset":{"x":0,"y":2},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[139]],[[{"name":"Chick05","rect":{"x":0,"y":0,"width":141,"height":47},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[140]],[[{"name":"yxjm_czss","rect":{"x":0,"y":0,"width":130,"height":145},"offset":{"x":0,"y":0.5},"originalSize":{"width":130,"height":146},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[141]],[[{"name":"ksjm_gjb","rect":{"x":0,"y":0,"width":71,"height":70},"offset":{"x":-0.5,"y":0},"originalSize":{"width":72,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[142]],[[[122,"builtin-toon",[{"hash":2285632444,"name":"builtin-toon|outline-vs:vert|outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":198,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}]},{"hash":3307737695,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":4,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":5,"defines":["USE_NORMAL_MAP"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec2 v_uv;\nlayout(location = 3) out mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 4) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 5) out mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    layout(location = 0) in highp vec4 v_shadowPos;\n    layout(set = 0, binding = 2) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n    #if CC_RECEIVE_SHADOW\n      layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n      layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in vec3 v_position;\nlayout(location = 2) in vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  layout(location = 4) in mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\nlayout(location = 3) in mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 5) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  layout(set = 1, binding = 3) uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  layout(set = 1, binding = 4) uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  layout(set = 1, binding = 5) uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nout vec3 v_position;\nout vec2 v_uv;\nout mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    in highp vec4 v_shadowPos;\n    layout(std140) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(normalBias > EPSILON_LOWP)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > EPSILON) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n    {\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n      }else if (pcf > 0.9) {\n        realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n      }else {\n        realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n    #endif\n        #if CC_RECEIVE_SHADOW\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":227,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":79}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_1ST_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_2ND_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean","defines":["USE_1ST_SHADE_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean","defines":["USE_BASE_COLOR_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean","defines":["USE_BASE_COLOR_MAP"]}]},{"hash":3596762244,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_worldPos;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_worldPos;\nlayout(location = 2) in float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nout vec2 v_uv;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture2D(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":188,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":79}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"passes":[{"program":"builtin-toon|outline-vs:vert|outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[{"name":"Chick11","rect":{"x":0,"y":0,"width":612,"height":87},"offset":{"x":0,"y":0.5},"originalSize":{"width":612,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[143]],[[{"name":"ksjm_hs","rect":{"x":0,"y":0,"width":124,"height":125},"offset":{"x":0,"y":0.5},"originalSize":{"width":124,"height":126},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[144]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[145,3]],[[{"name":"fy_icon","rect":{"x":2,"y":0,"width":52,"height":58},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":58},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[146]],[[{"name":"tjjm_dk","rect":{"x":0,"y":0,"width":750,"height":205},"offset":{"x":0,"y":0.5},"originalSize":{"width":750,"height":206},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[147]],[[{"name":"Chick04","rect":{"x":0,"y":0,"width":403,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":404,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[148]],[[{"name":"Chick_06","rect":{"x":4,"y":0,"width":100,"height":128},"offset":{"x":0,"y":2},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[149]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[150,3]],[[{"name":"Chick08","rect":{"x":0,"y":0,"width":602,"height":87},"offset":{"x":0,"y":0.5},"originalSize":{"width":602,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[151]],[[{"name":"yxjm_ts_dk","rect":{"x":0,"y":0,"width":599,"height":38},"offset":{"x":-0.5,"y":0},"originalSize":{"width":600,"height":38},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[152]],[[{"name":"Chick08","rect":{"x":0,"y":0,"width":142,"height":47},"offset":{"x":0,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[153]],[[{"name":"ppjm_battle_red","rect":{"x":0,"y":0,"width":590,"height":118},"offset":{"x":0,"y":0},"originalSize":{"width":590,"height":118},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[154]],[[{"name":"ksjm_sj","rect":{"x":0,"y":0,"width":220,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":220,"height":70},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[155]],[[{"name":"Chick07","rect":{"x":0,"y":0,"width":142,"height":47},"offset":{"x":0,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[156]],[[[30,"Skin-0",3214629770,["Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bone017","Bip001/Bip001 Pelvis/Bip001 Spine/Bone017/Bone018","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bone014","Bip001/Bip001 Pelvis/Bip001 Spine/Bone014/Bone015","Bip001/Bip001 Pelvis/Bip001 Spine/Bone020","Bip001/Bip001 Pelvis/Bip001 Spine/Bone020/Bone021","Bip001/Bip001 Pelvis/Bip001 Spine/Bone011","Bip001/Bip001 Pelvis/Bip001 Spine/Bone011/Bone012","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008","Bip001/Bip001 Pelvis/Bip001 Spine/Bone008/Bone009","Bip001/Bip001 Pelvis/Bip001 Spine/Bone005","Bip001/Bip001 Pelvis/Bip001 Spine/Bone005/Bone006","Bip001/Bip001 Pelvis/Bip001 Spine/Bone001","Bip001/Bip001 Pelvis/Bip001 Spine/Bone001/Bone002","Bip001/Bip001 Pelvis/Bip001 Spine/Bone001/Bone002/Bone003","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bone052","Bip001/Bip001 Pelvis/Bip001 Spine/Bone050","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bone046","Bip001/Bip001 Pelvis/Bip001 Spine/Bone048"],[[[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,1.6291687643388286e-7,-0.0000013868005908079795,0,-1.6292068494294654e-7,1,-0.0000027577068522077752,0,-0.5538838505744934,2.799726894764376e-9,7.698516810705769e-7,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007961550145410001,-2.2083790351956623e-9,0,0.0007961550145410001,0.9999997019767761,0.0000014026923054188956,0,-0.8954627513885498,0.0010009447578340769,4.501693684488828e-9,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.11363556236028671,-0.0017899028025567532,0.2409680336713791,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.5538630485534668,-0.004807609599083662,0.2409680187702179,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060084879398346,-0.0008022890542633832,0.2409680038690567,1],[7,9.136626033523498e-8,2.940556687036633e-9,-1,0,0.9149177670478821,-0.4036404490470886,8.240567694883794e-8,0,-0.4036404490470886,-0.9149177670478821,-3.9569481913304116e-8,0,-1.6701561212539673,0.744115948677063,-2.794261604321946e-7,1],[7,1.886903078229807e-9,6.792306095348977e-8,-1,0,0.7883754372596741,-0.6151944994926453,-4.0298303360941645e-8,0,-0.6151944994926453,-0.7883754372596741,-5.470968034160251e-8,0,-1.638730764389038,1.1808820962905884,-4.558454236303078e-8,1],[7,0.0000013430886838250444,-0.000001402693328600435,1,0,1,1.6292257498662366e-7,-0.0000013430885701382067,0,-1.6292068494294654e-7,1,0.0000014026935559741105,0,-1.2931724786758423,-5.373119904561463e-8,0.0000017385708588335547,1],[7,2.4697936851225677e-7,-7.743180674424366e-8,-1,0,0.518385112285614,-0.8551473617553711,1.9424601305217948e-7,0,-0.8551474213600159,-0.5183850526809692,-1.7106424365920248e-7,0,-1.0734405517578125,1.4510029554367065,-5.031054115534062e-7,1],[7,2.6942123554363206e-7,-9.673532730403167e-8,-1,0,0.4490813910961151,-0.8934910893440247,2.074241223226636e-7,0,-0.8934911489486694,-0.4490813612937927,-1.9728335587387846e-7,0,-1.1655547618865967,1.5481033325195312,-5.31573334683344e-7,1],[7,-1.83293721534028e-7,1.9655342953228683e-7,-1,0,0.8815957903862,0.4720049798488617,-6.881681713366561e-8,0,0.4720049202442169,-0.8815959095954895,-2.597962520667352e-7,0,-1.6501572132110596,-0.7359583973884583,-2.515408681347253e-8,1],[7,-1.1878893246830557e-7,-1.1262802956935047e-7,-1,0,0.8430630564689636,0.537814736366272,-1.607195656561089e-7,0,0.5378146171569824,-0.8430631756782532,3.106608659209087e-8,0,-1.7933276891708374,-0.875164270401001,1.0263738658977672e-7,1],[7,5.388983481680043e-8,-4.1428275920907254e-8,-1,0,0.3119052052497864,-0.9501131176948547,5.6170080142692314e-8,0,-0.9501131176948547,-0.3119052052497864,-3.827975092463021e-8,0,-0.8665300011634827,0.6032261848449707,-1.3707791879369324e-7,1],[7,6.285871734235116e-8,-1.642785463218388e-7,-1,0,0.5498478412628174,-0.8352645039558411,1.7177886491026584e-7,0,-0.8352645635604858,-0.5498478412628174,3.782457014267493e-8,0,-1.2213284969329834,0.2936152517795563,-2.043647953087202e-7,1],[7,1.1752034900780473e-8,-8.916826743643469e-8,-1,0,-0.1696649193763733,-0.9855018258094788,8.588157385247541e-8,0,-0.985501766204834,0.1696649193763733,-2.6710377909466843e-8,0,-0.5040633678436279,0.8067043423652649,-2.64753392542616e-8,1],[7,4.698937061675679e-8,-8.850243915503597e-8,-1,0,-0.12223055958747864,-0.9925017356872559,8.209529056557585e-8,0,-0.9925016760826111,0.12223056703805923,-5.7454737856232896e-8,0,-0.7630423903465271,0.7710146903991699,-4.318436452876995e-8,1],[7,2.0810787759728555e-7,5.1841393400309244e-8,-1,0,-0.6417223811149597,-0.7669368982315063,-1.7330660284642363e-7,0,-0.7669368386268616,0.6417225003242493,-1.263378521798586e-7,0,-0.0793493464589119,0.8291051983833313,2.046616209838703e-8,1],[7,2.130214227236138e-7,2.4865357772796415e-8,-1,0,-0.7343307733535767,-0.6787918210029602,-1.7330661705727834e-7,0,-0.6787917017936707,0.7343308925628662,-1.2633780954729446e-7,0,-0.12467749416828156,0.8519759178161621,6.4772920360667285e-9,1],[7,6.164309240830335e-8,3.3004124588842387e-7,-1,0,-0.9998587965965271,0.016804542392492294,-5.608819719782332e-8,0,0.016804542392492294,0.9998587369918823,3.310305487502774e-7,0,0.7629680633544922,-0.6392551064491272,-2.704491635086015e-7,1],[7,1.7359266735184065e-7,-1.0527686100658684e-7,-1,0,-0.9997127652168274,0.02396663837134838,-1.7606593871732912e-7,0,0.02396663837134838,0.9997127056121826,-1.0108620074333885e-7,0,0.5683504939079285,-0.6433482766151428,9.302594605742343e-8,1],[7,1.6543698677651264e-7,-1.1770302421609813e-7,-1,0,-0.9952746033668518,0.09709976613521576,-1.7608418545478344e-7,0,0.09709976613521576,0.995274543762207,-1.0108295356303643e-7,0,0.32062214612960815,-0.6686182618141174,9.303049353093229e-8,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,1.629207559972201e-7,-4.371116801848984e-8,0,1.6292068494294654e-7,1,0.000001370906943520822,0,0.1136355847120285,-0.0017899028025567532,-0.24096809327602386,1],[7,-7.475210850316216e-8,0.0000013716075955017004,-1,0,-0.9999623894691467,0.00867993850260973,8.665476514124748e-8,0,0.008679939433932304,0.999962329864502,0.0000013709071708944975,0,0.553862988948822,-0.004807609133422375,-0.24096810817718506,1],[7,-9.856508143002429e-8,0.0000013701026091439417,-1,0,-0.9999622106552124,-0.008690301328897476,8.665476514124748e-8,0,-0.008690300397574902,0.9999622702598572,0.0000013709075119550107,0,0.23060080409049988,-0.0008022895199246705,-0.24096812307834625,1],[7,0.16353555023670197,5.781228651358106e-7,0.9865373969078064,0,0.4540342688560486,0.8877995014190674,-0.07526451349258423,0,0.875847578048706,-0.4602302014827728,-0.14518654346466064,0,-1.0260086059570312,-1.1238635778427124,-0.03556979075074196,1],[7,-0.16353558003902435,-5.841965844410879e-7,-0.9865373969078064,0,0.45403429865837097,0.8877995610237122,-0.07526453584432602,0,0.875847578048706,-0.4602302610874176,-0.14518655836582184,0,-1.0258413553237915,-1.123863697052002,-0.03456009179353714,1],[7,0.8362900018692017,0.08740312606096268,0.5412760972976685,0,-0.539489209651947,-0.044970422983169556,0.8407907485961914,0,0.09782916307449341,-0.9951574206352234,0.009544728323817253,0,0.155292809009552,0.003005382837727666,-1.2781851291656494,1],[7,0.8347641825675964,0.10094060748815536,0.5412760972976685,0,-0.5386897921562195,-0.05370492860674858,0.8407908082008362,0,0.11393912136554718,-0.9934419393539429,0.00954472552984953,0,-0.07313785701990128,0.0018206990789622068,-1.2781851291656494,1],[7,0.8347641825675964,-0.5411955714225769,0.10137157887220383,0,-0.5386897921562195,-0.8408332467079163,-0.05303541570901871,0,0.11393912136554718,-0.010335772298276424,-0.9934340715408325,0,-0.3015294671058655,1.2781860828399658,0.0008029166492633522,1],[7,0.9685469269752502,-0.0000013817837043461623,0.24883116781711578,0,-0.24883118271827698,-1.615458415926696e-7,0.9685468673706055,0,-0.0000012981246300114435,-1,-5.002955276722787e-7,0,-0.18721283972263336,-4.4181149405631004e-7,-1.2619315385818481,1],[7,-0.8347638845443726,-0.10094334185123444,0.5412760972976685,0,-0.5386898517608643,-0.05370492488145828,-0.8407907485961914,0,0.11394142359495163,-0.993441641330719,-0.009546221233904362,0,-0.0731377899646759,0.0018206938402727246,1.2781851291656494,1],[7,-0.8347638845443726,0.5411955714225769,0.1013743132352829,0,-0.5386898517608643,-0.8408332467079163,0.05303540825843811,0,0.11394142359495163,-0.01033727079629898,0.9934337139129639,0,-0.3015294671058655,1.2781862020492554,-0.0008028924348764122,1],[7,-0.8362897634506226,-0.08740585297346115,0.5412760376930237,0,-0.539489209651947,-0.044970422983169556,-0.8407907485961914,0,0.09783145040273666,-0.9951571822166443,-0.009546209126710892,0,0.15529277920722961,0.0030053844675421715,1.2781850099563599,1],[7,-0.9685469269752502,-0.000001360030182695482,0.24883116781711578,0,-0.24883118271827698,-1.615458415926696e-7,-0.9685468673706055,0,0.0000013574506283475785,-1,-1.8195318318703357e-7,0,-0.18721283972263336,-4.418113803694723e-7,1.2619315385818481,1],[7,-0.1836378574371338,0.0028329973574727774,-0.9829898476600647,0,0.08587609976530075,0.9962188005447388,-0.013171873055398464,0,0.9792356491088867,-0.08683419972658157,-0.18318675458431244,0,-0.5332214832305908,-1.4157981872558594,-0.11129197478294373,1],[7,0.1909463256597519,-0.00277319410815835,0.9815964698791504,0,0.08545911312103271,0.9962459802627563,-0.01380945835262537,0,0.9778733849525452,-0.08652323484420776,-0.1904664784669876,0,-0.5333605408668518,-1.4159709215164185,-0.1061711460351944,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[24,".bin",354570249,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":67392,"length":6792,"count":3396,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":117312,"length":6024,"count":3012,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":67392,"count":936,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":74184,"length":43128,"count":599,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[0,1,24,25,26,27,28,30,31,32,34,35]]},"minPosition",8,[1,-1.0728731155395508,0.0012688270071521401,-1.1078277826309204],"maxPosition",8,[1,1.0728731155395508,2.2937560081481934,0.8638463020324707]]],-1],0,0,[],[],[]],[[{"name":"ksjm_js_dk01","rect":{"x":0,"y":0,"width":108,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":108,"height":108},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[157]],[[{"name":"ksjm_bx_sz","rect":{"x":0,"y":0,"width":48,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":48,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[158]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[159,3]],[[{"name":"Chick_07","rect":{"x":4,"y":3,"width":100,"height":125},"offset":{"x":0,"y":0.5},"originalSize":{"width":108,"height":132},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[160]],[[{"name":"tjjm_js","rect":{"x":0,"y":0,"width":56,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[161]],[[{"name":"Chick10","rect":{"x":0,"y":0,"width":445,"height":89},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":446,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[162]],[[{"name":"ksjm_gx","rect":{"x":0,"y":0,"width":276,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":276,"height":108},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[163]],[[{"name":"ppjm_dz","rect":{"x":0,"y":0,"width":312,"height":173},"offset":{"x":0,"y":0.5},"originalSize":{"width":312,"height":174},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[164]],[[{"name":"yxjm_sz32px","rect":{"x":3,"y":5,"width":324,"height":27},"offset":{"x":-3,"y":-1.5},"originalSize":{"width":336,"height":34},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[165]],[[[23,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{},{}],[[{"lineWidth":20},[{"baseStep":0.63,"shadeStep":0.4,"shadowCover":0.47},"mainColor",8,[4,4294967295],"shadeColor1",8,[4,4293388263],"shadeColor2",8,[4,4289045925],"specular",8,[4,4278190080],"emissive",8,[4,0],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[7,8],[166,3]],[[{"name":"ksjm_js_sz","rect":{"x":0,"y":0,"width":108,"height":34},"offset":{"x":0,"y":0},"originalSize":{"width":108,"height":34},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[167]],[[{"name":"gj_icon","rect":{"x":2,"y":0,"width":52,"height":58},"offset":{"x":0,"y":0},"originalSize":{"width":56,"height":58},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[168]],[[{"name":"ksjm_hs_jst02","rect":{"x":2,"y":0,"width":120,"height":120},"offset":{"x":0,"y":3},"originalSize":{"width":124,"height":126},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[169]],[[{"name":"Chick02","rect":{"x":0,"y":0,"width":141,"height":47},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":142,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[0],0,[0],[3],[170]]]]
